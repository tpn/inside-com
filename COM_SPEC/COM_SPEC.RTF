{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn{\*\falt Times New Roman};}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 New York;}{\f13\fswiss\fcharset0\fprq2 Geneva;}{\f14\fswiss\fcharset0\fprq2 AvantGarde;}{\f15\froman\fcharset0\fprq2 ITC Bookman;}
{\f16\fswiss\fcharset0\fprq2 Helvetica-Narrow;}{\f17\froman\fcharset0\fprq2 NewCenturySchlbk;}{\f18\froman\fcharset0\fprq2 Palatino;}{\f19\froman\fcharset0\fprq2 ZapfChancery;}{\f20\fdecor\fcharset2\fprq2 ZapfDingbats;}
{\f21\fmodern\fcharset0\fprq1 Lucida Console;}{\f22\fnil\fcharset2\fprq2 Wingdings;}{\f23\froman\fcharset2\fprq2 MT Extra;}{\f24\fswiss\fcharset0\fprq2 Arial Narrow;}{\f25\fswiss\fcharset0\fprq2 Arial Black;}{\f26\froman\fcharset0\fprq2 Book Antiqua;}
{\f27\froman\fcharset0\fprq2 Bookman Old Style;}{\f28\froman\fcharset0\fprq2 Century Schoolbook;}{\f29\froman\fcharset0\fprq2 Map Symbols;}{\f30\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f31\froman\fcharset0\fprq2 Garamond;}
{\f32\fmodern\fcharset2\fprq1 MS LineDraw;}{\f33\fswiss\fcharset2\fprq2 Bookshelf Symbol 1;}{\f34\fswiss\fcharset2\fprq2 Bookshelf Symbol 2;}{\f35\froman\fcharset2\fprq2 Bookshelf Symbol 3;}{\f36\froman\fcharset2\fprq2 Wingdings 3;}
{\f37\fscript\fcharset0\fprq2 Comic Sans MS;}{\f38\fswiss\fcharset0\fprq2 Copperplate Gothic Bold;}{\f39\fswiss\fcharset0\fprq2 Copperplate Gothic Light;}{\f40\fdecor\fcharset0\fprq2 Flexure;}{\f41\froman\fcharset0\fprq2 Goudy Old Style;}
{\f42\froman\fcharset0\fprq2 Goudy Stout;}{\f43\fdecor\fcharset0\fprq2 Harrington;}{\f44\fswiss\fcharset0\fprq2 Impact;}{\f45\fdecor\fcharset0\fprq2 Imprint MT Shadow;}{\f46\fscript\fcharset0\fprq2 Lucida Calligraphy;}
{\f47\fscript\fcharset0\fprq2 Lucida Handwriting;}{\f48\froman\fcharset0\fprq2 Rockwell;}{\f49\froman\fcharset0\fprq2 Rockwell Condensed;}{\f50\froman\fcharset0\fprq2 Rockwell Extra Bold;}{\f51\fswiss\fcharset0\fprq2 Maiandra GD;}
{\f52\fnil\fcharset0\fprq2 Rockwell Condensed Bold;}{\f53\froman\fcharset2\fprq2 Wingdings 2;}{\f54\fswiss\fcharset0\fprq2 Abadi MT Condensed Extra Bold;}{\f55\fswiss\fcharset0\fprq2 Abadi MT Condensed Light;}{\f56\fdecor\fcharset0\fprq2 Algerian;}
{\f57\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}{\f58\fdecor\fcharset0\fprq2 Bauhaus 93;}{\f59\fdecor\fcharset0\fprq2 Braggadocio;}{\f60\fswiss\fcharset0\fprq2 Britannic Bold;}{\f61\fscript\fcharset0\fprq2 Brush Script MT;}
{\f62\froman\fcharset0\fprq2 Calisto MT;}{\f63\fdecor\fcharset0\fprq2 Colonna MT;}{\f64\fdecor\fcharset0\fprq2 Desdemona;}{\f65\froman\fcharset0\fprq2 Engravers MT;}{\f66\fswiss\fcharset0\fprq2 Eurostile;}{\f67\froman\fcharset0\fprq2 Felix Titling;}
{\f68\fscript\fcharset0\fprq2 Forte;}{\f69\froman\fcharset0\fprq2 Footlight MT Light;}{\f70\fswiss\fcharset0\fprq2 Gill Sans MT Ext Condensed Bold;}{\f71\fswiss\fcharset0\fprq2 Century Gothic;}{\f72\fscript\fcharset0\fprq2 Gradl;}
{\f73\fdecor\fcharset0\fprq2 Kino MT;}{\f74\froman\fcharset0\fprq2 Wide Latin;}{\f75\fnil\fcharset0\fprq2 Lucida Blackletter;}{\f76\fswiss\fcharset0\fprq2 Lucida Sans;}{\f77\fmodern\fcharset0\fprq1 Lucida Sans Typewriter;}
{\f78\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f79\fnil\fcharset0\fprq2 Mead Bold;}{\f80\fnil\fcharset0\fprq2 Mercurius Script MT Bold;}{\f81\fscript\fcharset0\fprq2 Mistral;}{\f82\fscript\fcharset0\fprq2 Monotype Corsiva;}
{\f83\fnil\fcharset2\fprq2 Monotype Sorts;}{\f84\fswiss\fcharset0\fprq2 Placard Condensed;}{\f85\fdecor\fcharset0\fprq2 Playbill;}{\f86\fdecor\fcharset0\fprq2 Stencil;}{\f87\froman\fcharset0\fprq2 Modern No. 20;}{\f88\fnil\fcharset0\fprq2 Microsoft Logo;}
{\f89\fswiss\fcharset0\fprq2 Tech;}{\f90\fnil\fcharset0\fprq2 Techno;}{\f91\fnil\fcharset0\fprq2 Kindel;}{\f92\froman\fcharset255\fprq2 Roman;}{\f93\fscript\fcharset255\fprq2 Script;}{\f94\fmodern\fcharset255\fprq2 Modern;}
{\f95\froman\fcharset0\fprq0 Small Fonts;}{\f96\fswiss\fcharset0\fprq1 MS Dialog;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\qj\sa60\widctlpar \f4\fs20 
\snext0 Normal;}{\s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 \sbasedon0\snext0 heading 1;}{\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2
\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 \sbasedon1\snext0 heading 2;}{\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 \sbasedon2\snext0 heading 3;}{
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 \sbasedon3\snext0 heading 4;}{\s5\qj\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl5\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\i\f4\fs20\lang1024 \sbasedon4\snext0 heading 5;}{\s6\qj\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl6\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\f4\fs20\lang1024 \sbasedon5\snext0 heading 6;}{\s7\qj\ri720\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 {\*\pn \pnlvl7\pndec\pnprev1\uldashdd\pnstart1\pnsp144 {\pntxtb .}}\f4\fs20 \sbasedon0\snext0 heading 7;}{\s8\qj\ri720\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl8\pndec\pnprev1\uldashdd\pnstart1\pnsp144 
{\pntxtb .}}\f4\fs20 \sbasedon7\snext0 heading 8;}{\s9\qj\ri720\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl9\pndec\pnprev1\uldashdd\pnstart1\pnsp144 {\pntxtb .}}\i\f4\fs20 \sbasedon8\snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 
\additive\b\f5\fs16 \sbasedon10 annotation reference;}{\s16\qj\fi-630\li630\sl-180\slmult1\widctlpar \f4\fs16 \sbasedon17\snext16 annotation text;}{\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 \sbasedon0\snext17 footnote text;}{
\s18\li1200\widctlpar\tqr\tldot\tx8640 \f4\fs18 \sbasedon19\snext18 toc 8;}{\s19\widctlpar \f4\fs18\lang1024 \snext19 TOC Base;}{\s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 \sbasedon19\snext20 toc 1;}{
\s21\li1000\widctlpar\tqr\tldot\tx8640 \f4\fs18 \sbasedon19\snext21 toc 7;}{\s22\li800\widctlpar\tqr\tldot\tx8640 \f4\fs18 \sbasedon19\snext22 toc 6;}{\s23\li600\widctlpar\tqr\tldot\tx8640 \f4\fs18 \sbasedon19\snext23 toc 5;}{
\s24\li400\widctlpar\tqr\tldot\tx8640 \f4\fs18 \sbasedon19\snext24 toc 4;}{\s25\li1440\widctlpar\tqr\tldot\tx7920 \f4\fs18\lang1024 \sbasedon19\snext25 toc 3;}{\s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 \sbasedon19\snext26 toc 2;}{
\s27\qj\li2160\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 \sbasedon28\snext27 index 7;}{\s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 \sbasedon0\snext28 index 1;}{\s29\qj\li1800\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 \sbasedon28\snext29 
index 6;}{\s30\qj\li1440\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 \sbasedon28\snext30 index 5;}{\s31\qj\li1080\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 \sbasedon28\snext31 index 4;}{\s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 
\sbasedon28\snext32 index 3;}{\s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 \sbasedon28\snext33 index 2;}{\*\cs34 \additive\sbasedon10 line number;}{\s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw
\brdrs\brdrw15\brsp20 \b\f4\fs20 \sbasedon0\snext28 index heading;}{\s36\keepn\widctlpar\tqc\tx4320\tqr\tx8640 \i\f4\fs16 \sbasedon37\snext36 footer;}{\s37\keepn\widctlpar\tqc\tx4320\tqr\tx8640 \i\f4\fs16 \sbasedon0\snext37 header;}{\*\cs38 \additive
\super \sbasedon10 footnote reference;}{\s39\qj\li720\sa60\widctlpar \f4\fs20 \sbasedon0\snext0 Normal Indent;}{\s40\qc\keep\keepn\widctlpar \f4\fs20 \sbasedon0\snext40 Figure;}{\s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 \sbasedon40\snext41 
Figure Caption;}{\s42\qj\sb720\sa720\widctlpar \f4\fs20 \sbasedon0\snext1 Abstract;}{\s43\li-2160\sa120\widctlpar\brdrt\brdrth\brdrw15\brsp20 \brdrbtw\brdrth\brdrw15\brsp20 \b\f9\fs20 \snext43 TOC Title;}{\s44\qj\sb60\sa58\widctlpar \f4\fs20 
\sbasedon0\snext0 NormalAfterCode;}{\s45\qj\sa58\widctlpar{\*\pn \pnlvl11\pnf1\pnstart1\pnindent144 {\pntxtb \'a8}}\i\f4\fs16\cf2 \sbasedon0\snext45 Issue;}{\s46\qj\sa60\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 \sbasedon0\snext46 NormalWBorder;}{
\s47\qj\fi-900\li1260\sa60\widctlpar \f4\fs20 \sbasedon0\snext47 Terminology;}{\s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 \sbasedon49\snext49 API args header;}{\s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 
\f4\fs20 \sbasedon0\snext49 API args;}{\s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 \sbasedon0\snext0 API;}{\s51\qj\fi-360\li360\sa60\widctlpar \f4\fs20 \sbasedon0\snext51 Hanging Indent;}{\s52\keepn\widctlpar\brdrt
\brdrth\brdrw15\brsp60 \brdrbtw\brdrth\brdrw15\brsp60 \f4\fs36 \sbasedon0\snext0 Title;}{\s53\widctlpar\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 \sbasedon0\snext53 Table Entry;}{\s54\keepn\widctlpar \b\f4\fs18 \sbasedon0\snext54 Table Head;}{
\s55\qj\fi-1080\li1800\ri720\sa60\widctlpar \f4\fs20 \sbasedon0\snext55 Term Definition;}{\s56\widctlpar \f4\fs20 \sbasedon0\snext56 figure note;}{
\s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 \snext57 Code;}{\*\cs58 \additive
\f5\fs16\lang1024 \sbasedon10 CodeText;}{\s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 \sbasedon49\snext60 Api args retval;}{\s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 \sbasedon0\snext60 Api args ret2;}{\*\cs61 \additive
\fs12 \sbasedon10 Code Param;}{\s62\fi-200\li1600\widctlpar\tqr\tldot\tx2736 \f4\fs20 \sbasedon0\snext0 index 8;}{\s63\fi-200\li1800\widctlpar\tqr\tldot\tx2736 \f4\fs20 \sbasedon0\snext0 index 9;}{\s64\sa58\sl-240\slmult1\keepn\widctlpar \f4\fs20 
\sbasedon49\snext64 Return Arg;}{\s65\sa58\sl-240\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 \sbasedon49\snext65 Return Description;}{\s66\sa58\sl-240\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f5\fs16 \sbasedon49\snext66 
Return Error;}{\s67\sa58\sl-240\slmult1\keepn\widctlpar \f4\fs20 \sbasedon49\snext67 Return Type;}{\*\cs68 \additive\sub \sbasedon10 Subscript;}{\s69\widctlpar \f4\fs18 \sbasedon53\snext69 Table Entry - No Border;}{
\s70\keepn\widctlpar\tx360\tx720\tx1080\tx1440\tx1800\tx2160 \b\f9\fs12 \sbasedon54\snext70 Table Head - Small;}{\s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvl11\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 \sbasedon0\snext71 List Bullet;}{
\s72\li720\ri360\sb240\sa60\keepn\widctlpar \b\i\f4 \sbasedon4\snext72 Interface Member;}{\s73\fi-360\li1080\ri360\sa120\widctlpar{\*\pn \pnlvl10\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f4\fs20 \sbasedon0\snext73 NumberList;}{
\s74\fi-2160\li2880\sa120\widctlpar \f4\fs20 \sbasedon0\snext74 Definitions;}{\s75\fi-1800\li2520\ri360\sa120\widctlpar \f4\fs20 \sbasedon0\snext75 ListIndent;}{\s76\qc\li360\sb120\sa240\widctlpar \b\f4\fs20 \sbasedon0\snext0 caption;}{
\s77\fi-360\li1080\ri360\sa120\widctlpar{\*\pn \pnlvl11\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 \sbasedon0\snext77 BulletList;}{\s78\fi-1440\li2160\ri360\sa60\keepn\widctlpar\tx2160 \f4\fs20\lang1024 \sbasedon0\snext78 API Prototype;}{
\s79\li720\ri360\sa120\widctlpar \f4\fs20 \sbasedon0\snext79 API Body;}{\s80\fi-2880\li3600\ri360\sa58\widctlpar\tx2160 \f4\fs20 \sbasedon0\snext80 API args list;}{\s81\li720\ri360\sb240\sa120\widctlpar\brdrb\brdrs\brdrw15\brsp20 \i\f4\fs20 
\sbasedon0\snext81 API Tail;}{\s82\fi-1080\li2160\ri720\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320 \b\f11\fs16 \sbasedon57\snext82 Code2;}{\s83\fi-360\li1440\ri360\sa120\widctlpar{\*\pn \pnlvl11
\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 \sbasedon77\snext83 BulletList2;}{\s84\qj\sa60\widctlpar\brdrl\brdrs\brdrw15\brsp20 \f4\fs20 \sbasedon0\snext84 NormalRevision;}{\s85\qj\sa60\widctlpar\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 
\sbasedon0\snext85 NormalBorderAbove;}{\s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
\sbasedon57\snext86 Code - Fixed Pitch;}{\s87\li2160\sa120\widctlpar\phmrg\posyt \v\f9\fs12 \sbasedon0\snext87 Time Stamp;}{\s88\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 \sbasedon1\snext0 Heading;}{\*\cs89 \additive\f5\fs12 
\sbasedon10 Footnote Code Text;}{\s90\li1400\widctlpar\tqr\tldot\tx8640 \f4\fs18 \sbasedon0\snext0 toc 9;}{\s91\widctlpar \i\f4\fs20 \sbasedon0\snext92 Author;}{\s92\widctlpar \i\f4\fs20 \sbasedon0\snext42 Revision Date;}{
\s93\qj\li1440\ri1584\sa60\widctlpar\box\brdrs\brdrw15\brsp20 \scaps\f5\fs16\cf6 \sbasedon0\snext93 Legal Info;}{\s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 \sbasedon0\snext0 Blank Page;}{
\s95\qj\sa60\sl220\slmult0\widctlpar \f8\fs20 \sbasedon0\snext95 Body;}{\s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 \sbasedon88\snext0 Heading 0;}{\s97\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1800\tx2880 
\shading10000 \f4\fs20 \sbasedon0\snext98 Structure Header;}{\s98\qj\fi-2880\li2880\sa58\keepn\widctlpar\tx1800 \f4\fs20 \sbasedon0\snext98 Structure Member;}{\s99\qj\li720\ri720\sa60\sl220\slmult0\widctlpar \f8\fs20 \sbasedon95\snext99 Body Sub;}{
\s100\qj\li1080\ri720\sa60\sl220\slmult0\widctlpar \f8\fs20 \sbasedon99\snext100 Body Sub Sub;}{\s101\widctlpar \i\f8\fs18 \sbasedon0\snext42 Byline;}}{\*\revtbl {Unknown;}{Charlie Kindel;}{Alex Mitchell;}{Charlie Kindel\'00\'0dAlex Mitchell\'00%\'fa\'14\'ca;}}{\info{\title The Component Object Model Specification}{\subject The Component Object Model}
{\operator Charlie Kindel}{\creatim\yr1995\mo5\dy2\hr12\min2}{\revtim\yr1995\mo10\dy24\hr15\min35}{\printim\yr1995\mo10\dy21\hr13\min20}{\version3}{\edmins1}{\nofpages270}{\nofwords110909}{\nofchars632183}{\*\company Microsoft}{\vern57431}}
\facingp\deftab360\widowctrl\ftnbj\aenddoc\noextrasprl\prcolbl\cvmme\sprstsp\sprsspbf\brkfrm\swpbdr\linkstyles\hyphcaps0\hyphauto1 \fet0{\*\template E:\\My Documents\\Microsoft\\OLEPM\\COM Specification\\COM Spec.DOT}\sectd 
\sbknone\pgnrestart\pgnlcrm\linex0\endnhere\titlepg {\headerl \pard\plain \s37\keepn\widctlpar\tqc\tx4320\tqr\tx8640 \i\f4\fs16 {\field{\*\fldinst  TITLE  \\* MERGEFORMAT }{\fldrslt The Component Object Model Specification}}\tab \tab {\field{\*\fldinst 
 SUBJECT  \\* MERGEFORMAT }{\fldrslt The Component Object Model}}
\par }{\headerr \pard\plain \s37\keepn\widctlpar\tqc\tx4320\tqr\tx8640 \i\f4\fs16 {\field{\*\fldinst  SUBJECT  \\* MERGEFORMAT }{\fldrslt The Component Object Model}}\tab \tab {\field{\*\fldinst  TITLE  \\* MERGEFORMAT }{\fldrslt 
The Component Object Model Specification}}
\par }{\footerl \pard\plain \s36\keepn\widctlpar\tqc\tx4320\tqr\tx8640 \i\f4\fs16 Copyright \'a9 1992-95 Microsoft Corporation\tab Page: {\field{\*\fldinst page }{\fldrslt {\lang1024 ii}}}\tab DRAFT:  {\field{\*\fldinst  REF DraftDate \\* MERGEFORMAT 
}{\fldrslt October 24,{\i0  1995}}}
\par  All Rights Reserved
\par }{\footerr \pard\plain \s36\keepn\widctlpar\tqc\tx4320\tqr\tx8640 \i\f4\fs16 DRAFT:  {\field{\*\fldinst  REF DraftDate \\* MERGEFORMAT }{\fldrslt October 24,{\i0  1995}}}\tab Page: {\field{\*\fldinst page }{\fldrslt {\lang1024 79}}}\tab Copyright \'a9
 1992-95 Microsoft Corporation
\par \tab \tab  All Rights Reserved
\par }{\footerf \pard\plain \s36\keepn\widctlpar\tqc\tx4320\tqr\tx8640 \i\f4\fs16 \tab Copyright \'a9 1992-95 Microsoft Corporation. All Rights Reserved
\par }{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qj\sa60\widctlpar \f4\fs20 
\par 
\par 
\par 
\par 
\par \pard \ri-270\sa60\widctlpar\brdrt\brdrth\brdrw15\brsp20 \brdrbtw\brdrth\brdrw15\brsp20 {\field{\*\fldinst {\b\fs40 title }}{\fldrslt {\b\fs40 The Component Object Model Specification}}}{\b\fs40 
\par }\pard \widctlpar {\i Version 0.9
\par {\*\bkmkstart DraftDate}October 24, 1995{\*\bkmkend DraftDate}
\par }\pard \qj\sa60\widctlpar\box\brdrs\brdrw15\brsp20 \pvpg\phpg\posx3234\posy8784\absw5760\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 {\b\cf6 Note: }{\cf6 This document is an early release of the final specification. It is meant to specify and accompany so
ftware that is still in devel\-opment. Some of the information in this documentation may be inaccurate or may not be an accurate representation of the func\-
tionality of the final specification or software. Microsoft assumes no responsibility for any damage
s that might occur either directly or indirectly from these inaccuracies. Microsoft may have trademarks, copyrights, patents or pending patent applications, or other intellectual property rights covering subject matter in this document. The furnishing of 
this document does not give you a license to these trademarks, copyrights, patents, or other intellectual property rights.}{\fs18 
\par }\pard\plain \s42\qj\sb240\sa240\widctlpar \f4\fs20 This document contains the specification to the Component Object Model (COM), an architecture and sup
porting infrastructure for building, using, and evolving component software in a robust manner. This specification contains the standard APIs supported by the COM Library, the standard suites of interfaces sup
ported or used by software written in a COM environment, along with the network protocols used by COM in support of distributed computing. This specification is still in draft form, and thus subject to change.\page 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\i The Component Object Model Specification
\par Draft Version 0.9, October 24, 1995
\par Microsoft Corporation and Digital Equipment Corporation}
\par 
\par 
\par 
\par 
\par Copyright \'a9 1992-95 Microsoft Corporation.
\par Microsoft does not make any representation or warranty regarding the Specification or any product or item developed based on the Specification.  Microsoft disclaims all express and implied warranties, i
ncluding but not limited to the implied warranties of merchantability, fitness for a particular purpose and freedom from infringement.  Without limiting the generality of the foregoing, Microsoft does not make any warranty of any kind that any item develo
ped based on the Specification, or any portion of it, will not infringe any copy
right, patent, trade secret or other intellectual property right of any person or entity in any country.  It is your responsibility to seek licenses for such intellectual proper
ty rights where appropriate.  Microsoft shall not be liable for any damages arising out of or in connection with the use of the Specification, including liability for lost profit, business interruption, or any other damages whatsoever.  Some states do not
 allow the exclusion or limitation of liability for consequential or incidental damages; the above limitation may not apply to you.
\par \sect \sectd \sbknone\linex0\endnhere \pard\plain \s88\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 Table of Contents
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 {\field\fldedit{\*\fldinst {\b0\caps  TOC \\o "1-2" \\t "Heading 0,1" }}{\fldrslt How to Read This Document\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182917  
{\field{\*\fldinst  PAGEREF _Toc339182917 }{\fldrslt 5}}}}
\par Part I: Component Object Model Introduction\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182918  {\field{\*\fldinst  PAGEREF _Toc339182918 }{\fldrslt 7}}}}
\par 1. Introduction\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182919  {\field{\*\fldinst  PAGEREF _Toc339182919 }{\fldrslt 9}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 1.1 Challenges Facing The Software Industry\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182920  {\field{\*\fldinst  PAGEREF _Toc339182920 }{\fldrslt 9}}}}
\par 1.2 The Solution: Component Software\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182921  {\field{\*\fldinst  PAGEREF _Toc339182921 }{\fldrslt 11}}}}
\par 1.3 The Component Software Solution: OLE\rquote s COM\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182922  {\field{\*\fldinst  PAGEREF _Toc339182922 }{\fldrslt 12}}}}
\par 1.4 Objects and Interfaces\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182923  {\field{\*\fldinst  PAGEREF _Toc339182923 }{\fldrslt 19}}}}
\par 1.5 Clients, Servers, and Object Implementors\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182924  {\field{\*\fldinst  PAGEREF _Toc339182924 }{\fldrslt 25}}}}
\par 1.6 The COM Library\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182925  {\field{\*\fldinst  PAGEREF _Toc339182925 }{\fldrslt 28}}}}
\par 1.7 COM as a Foundation\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182926  {\field{\*\fldinst  PAGEREF _Toc339182926 }{\fldrslt 29}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 Part II: Component Object Model Programming Interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182927  {\field{\*\fldinst  PAGEREF _Toc339182927 }{\fldrslt 33}}}}

\par 2. Component Object Model Technical Overview\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182928  {\field{\*\fldinst  PAGEREF _Toc339182928 }{\fldrslt 35}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 2.1 Objects and Interfaces\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182929  {\field{\*\fldinst  PAGEREF _Toc339182929 }{\fldrslt 35}}}}
\par 2.2 COM Application Responsibilities\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182930  {\field{\*\fldinst  PAGEREF _Toc339182930 }{\fldrslt 40}}}}
\par 2.3 The COM Client/Server Model\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182931  {\field{\*\fldinst  PAGEREF _Toc339182931 }{\fldrslt 41}}}}
\par 2.4 Object Reusability\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182932  {\field{\*\fldinst  PAGEREF _Toc339182932 }{\fldrslt 48}}}}
\par 2.5 Connectable Objects and Events\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182933  {\field{\*\fldinst  PAGEREF _Toc339182933 }{\fldrslt 49}}}}
\par 2.6 Persistent Storage\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182934  {\field{\*\fldinst  PAGEREF _Toc339182934 }{\fldrslt 50}}}}
\par 2.7 Persistent, Intelligent Names: Monikers\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182935  {\field{\*\fldinst  PAGEREF _Toc339182935 }{\fldrslt 56}}}}
\par 2.8 Uniform Data Transfer\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182936  {\field{\*\fldinst  PAGEREF _Toc339182936 }{\fldrslt 59}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 3. Objects And Interfaces\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182937  {\field{\*\fldinst  PAGEREF _Toc339182937 }{\fldrslt 63}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 3.1 Interfaces\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182938  {\field{\*\fldinst  PAGEREF _Toc339182938 }{\fldrslt 63}}}}
\par 3.2 Globally Unique Identifiers\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182939  {\field{\*\fldinst  PAGEREF _Toc339182939 }{\fldrslt 69}}}}
\par 3.3 The IUnknown Interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182940  {\field{\*\fldinst  PAGEREF _Toc339182940 }{\fldrslt 69}}}}
\par 3.4 Error Codes and Error Handling\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182941  {\field{\*\fldinst  PAGEREF _Toc339182941 }{\fldrslt 74}}}}
\par 3.5 Enumerators and Enumerator Interfaces\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182942  {\field{\*\fldinst  PAGEREF _Toc339182942 }{\fldrslt 79}}}}
\par 3.6 Designing and Implementing Objects\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182943  {\field{\*\fldinst  PAGEREF _Toc339182943 }{\fldrslt 81}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 4. COM Applications\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182944  {\field{\*\fldinst  PAGEREF _Toc339182944 }{\fldrslt 87}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 4.1 Verifying the COM Library Version\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182945  {\field{\*\fldinst  PAGEREF _Toc339182945 }{\fldrslt 87}}}}
\par 4.2 Library Initialization / Uninitialization\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182946  {\field{\*\fldinst  PAGEREF _Toc339182946 }{\fldrslt 87}}}}
\par 4.3 Memory Management\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182947  {\field{\*\fldinst  PAGEREF _Toc339182947 }{\fldrslt 88}}}}
\par 4.4 Memory Allocation Example\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182948  {\field{\*\fldinst  PAGEREF _Toc339182948 }{\fldrslt 91}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 5. COM Clients\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182949  {\field{\*\fldinst  PAGEREF _Toc339182949 }{\fldrslt 93}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 5.1 Identifying the Object Class\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182950  {\field{\*\fldinst  PAGEREF _Toc339182950 }{\fldrslt 93}}}}
\par 5.2 Creating the Object\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182951  {\field{\*\fldinst  PAGEREF _Toc339182951 }{\fldrslt 94}}}}
\par 5.3 Obtaining the Class Factory Object for a CLSID\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182952  {\field{\*\fldinst  PAGEREF _Toc339182952 }{\fldrslt 96}}}}
\par 5.4 Initializing the Object\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182953  {\field{\*\fldinst  PAGEREF _Toc339182953 }{\fldrslt 100}}}}
\par 5.5 Managing the Object\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182954  {\field{\*\fldinst  PAGEREF _Toc339182954 }{\fldrslt 101}}}}
\par 5.6 Releasing the Object\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182955  {\field{\*\fldinst  PAGEREF _Toc339182955 }{\fldrslt 103}}}}
\par 5.7 Server Management\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182956  {\field{\*\fldinst  PAGEREF _Toc339182956 }{\fldrslt 103}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 6. COM Servers\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182957  {\field{\*\fldinst  PAGEREF _Toc339182957 }{\fldrslt 105}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 6.1 Identifying and Registering an Object Class\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182958  {\field{\*\fldinst  PAGEREF _Toc339182958 }{\fldrslt 105}}}}
\par 6.2 Implementing the Class Factory\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182959  {\field{\*\fldinst  PAGEREF _Toc339182959 }{\fldrslt 108}}}}
\par 6.3 Exposing the Class Factory\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182960  {\field{\*\fldinst  PAGEREF _Toc339182960 }{\fldrslt 111}}}}
\par 6.4 Providing for Server Unloading\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182961  {\field{\*\fldinst  PAGEREF _Toc339182961 }{\fldrslt 115}}}}
\par 6.5 Object Handlers\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182962  {\field{\*\fldinst  PAGEREF _Toc339182962 }{\fldrslt 117}}}}
\par 6.6 Object Reusability\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182963  {\field{\*\fldinst  PAGEREF _Toc339182963 }{\fldrslt 118}}}}
\par 6.7 Emulating Other Servers\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182964  {\field{\*\fldinst  PAGEREF _Toc339182964 }{\fldrslt 123}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 7. Interface Remoting\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182965  {\field{\*\fldinst  PAGEREF _Toc339182965 }{\fldrslt 127}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 7.1 How Interface Remoting Works\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182966  {\field{\*\fldinst  PAGEREF _Toc339182966 }{\fldrslt 127}}}}
\par 7.2 Architecture of Custom Object Marshaling\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182967  {\field{\*\fldinst  PAGEREF _Toc339182967 }{\fldrslt 128}}}}
\par 7.3 Architecture of Standard Interface / Object Marshaling\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182968  {\field{\*\fldinst  PAGEREF _Toc339182968 }{\fldrslt 130}}}}
\par 7.4 Architecture of Handler Marshaling\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182969  {\field{\*\fldinst  PAGEREF _Toc339182969 }{\fldrslt 133}}}}
\par 7.5 Standards for Marshaled Data Packets\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182970  {\field{\*\fldinst  PAGEREF _Toc339182970 }{\fldrslt 134}}}}
\par 7.6 Creating an Initial Connection Between Processes\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182971  {\field{\*\fldinst  PAGEREF _Toc339182971 }{\fldrslt 134}}}}
\par 7.7 Marshaling Interface and Function Descriptions\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182972  {\field{\*\fldinst  PAGEREF _Toc339182972 }{\fldrslt 134}}}}
\par 7.8 Marshaling - Related API Functions\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182973  {\field{\*\fldinst  PAGEREF _Toc339182973 }{\fldrslt 144}}}}
\par 7.9 IMarshal interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182974  {\field{\*\fldinst  PAGEREF _Toc339182974 }{\fldrslt 148}}}}
\par 7.10 IStdMarshalInfo interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182975  {\field{\*\fldinst  PAGEREF _Toc339182975 }{\fldrslt 151}}}}
\par 7.11 Support for Remote Debugging\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182976  {\field{\*\fldinst  PAGEREF _Toc339182976 }{\fldrslt 152}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 8. Security\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182977  {\field{\*\fldinst  PAGEREF _Toc339182977 }{\fldrslt 163}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 8.1 Activation Security\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182978  {\field{\*\fldinst  PAGEREF _Toc339182978 }{\fldrslt 163}}}}
\par 8.2 Call Security\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182979  {\field{\*\fldinst  PAGEREF _Toc339182979 }{\fldrslt 165}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 Part III: Component Object Model Protocols and Services\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182980  {\field{\*\fldinst  PAGEREF _Toc339182980 }{\fldrslt 175
}}}}
\par 9. Connectable Objects\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182981  {\field{\*\fldinst  PAGEREF _Toc339182981 }{\fldrslt 177}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 9.1 The {\i IConnectionPoint} Interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182982  {\field{\*\fldinst  PAGEREF _Toc339182982 }{\fldrslt 177}}}}
\par 9.2 The {\i IConnectionPointContainer} Interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182983  {\field{\*\fldinst  PAGEREF _Toc339182983 }{\fldrslt 180}}}}
\par 9.3 The {\i IEnumConnectionPoints }Interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182984  {\field{\*\fldinst  PAGEREF _Toc339182984 }{\fldrslt 181}}}}
\par 9.4 The {\i IEnumConnections} Interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182985  {\field{\*\fldinst  PAGEREF _Toc339182985 }{\fldrslt 184}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 10. Persistent Storage\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182986  {\field{\*\fldinst  PAGEREF _Toc339182986 }{\fldrslt 187}}}}
\par 11. Persistent Intelligent Names: Monikers\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182987  {\field{\*\fldinst  PAGEREF _Toc339182987 }{\fldrslt 189}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 11.1 Overview\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182988  {\field{\*\fldinst  PAGEREF _Toc339182988 }{\fldrslt 189}}}}
\par 11.2 IMoniker interface and Core Monikers\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182989  {\field{\*\fldinst  PAGEREF _Toc339182989 }{\fldrslt 190}}}}
\par 11.2\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182990  {\field{\*\fldinst  PAGEREF _Toc339182990 }{\fldrslt 190}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 12. Uniform Data Transfer\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182991  {\field{\*\fldinst  PAGEREF _Toc339182991 }{\fldrslt 219}}}}
\par Part IV: Type Information\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182992  {\field{\*\fldinst  PAGEREF _Toc339182992 }{\fldrslt 221}}}}
\par 13. Interface Definition Language\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182993  {\field{\*\fldinst  PAGEREF _Toc339182993 }{\fldrslt 223}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 13.1 Object RPC IDL Extensions\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182994  {\field{\*\fldinst  PAGEREF _Toc339182994 }{\fldrslt 223}}}}
\par 13.2 Mapping from ORPC IDL to DCE RPC IDL.\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182995  {\field{\*\fldinst  PAGEREF _Toc339182995 }{\fldrslt 228}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 14. Type Libraries\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182996  {\field{\*\fldinst  PAGEREF _Toc339182996 }{\fldrslt 231}}}}
\par Part V: The COM Library\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182997  {\field{\*\fldinst  PAGEREF _Toc339182997 }{\fldrslt 233}}}}
\par 15. Component Object Model Network Protocol\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182998  {\field{\*\fldinst  PAGEREF _Toc339182998 }{\fldrslt 235}}}}
\par \pard\plain \s26\li1080\widctlpar\tx1368\tqr\tldot\tx7920 \f4\fs18\lang1024 15.1 Overview\tab {\field{\*\fldinst  GOTOBUTTON _Toc339182999  {\field{\*\fldinst  PAGEREF _Toc339182999 }{\fldrslt 235}}}}
\par 15.2 Data types and structures\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183000  {\field{\*\fldinst  PAGEREF _Toc339183000 }{\fldrslt 239}}}}
\par 15.3 IRemUnknown interface\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183001  {\field{\*\fldinst  PAGEREF _Toc339183001 }{\fldrslt 246}}}}
\par 15.4 The Object Exporter\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183002  {\field{\*\fldinst  PAGEREF _Toc339183002 }{\fldrslt 249}}}}
\par 15.4\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183003  {\field{\*\fldinst  PAGEREF _Toc339183003 }{\fldrslt 249}}}}
\par 15.5 Service Control Manager\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183004  {\field{\*\fldinst  PAGEREF _Toc339183004 }{\fldrslt 258}}}}
\par 15.6 Wrapping  DCE RPC calls to interoperate with ORPC\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183005  {\field{\*\fldinst  PAGEREF _Toc339183005 }{\fldrslt 260}}}}
\par 15.7 Implementing ORPC in RPC\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183006  {\field{\*\fldinst  PAGEREF _Toc339183006 }{\fldrslt 261}}}}
\par \pard\plain \s20\li720\ri720\sb40\sa40\keepn\widctlpar\tx990\tqr\tx7920 \b\f4\fs18\lang1024 Appendix B: Bibliography\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183007  {\field{\*\fldinst  PAGEREF _Toc339183007 }{\fldrslt 264}}}}
\par Appendix C: Specification Revision History\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183008  {\field{\*\fldinst  PAGEREF _Toc339183008 }{\fldrslt 266}}}}
\par Appendix D: Index\tab {\field{\*\fldinst  GOTOBUTTON _Toc339183009  {\field{\*\fldinst  PAGEREF _Toc339183009 }{\fldrslt 268}}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 }}\pard\plain \qj\sa60\widctlpar \f4\fs20 
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc298215713}{\*\bkmkstart _Toc306725075}{\*\bkmkstart _Toc324051508}{\*\bkmkstart _Toc324051691}{\*\bkmkstart _Toc324051935}{\*\bkmkstart _Toc339182917}
How to Read This Document{\*\bkmkend _Toc298215713}{\*\bkmkend _Toc306725075}{\*\bkmkend _Toc324051508}{\*\bkmkend _Toc324051691}{\*\bkmkend _Toc324051935}{\*\bkmkend _Toc339182917}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
This specification is written to help a variety of readers understand the design and implementation of the Component Object Model (referred to herein simply as COM) as much as they would like. The presentation of COM gradually progresses from high-level o
verviews to COM benefits and eventually into the underlying mechanisms and programming interfaces to COM. This section is intended to help the reader determine what parts of this document to read.
\par This specification is divided into four parts, each of which contains one or more chapters. Part I is an over
view and introduction. Chapter 1, the only chapter in Part I, explains at a high level the motivations of COM and the problems it addresses. It describes what COM is and its features, and describes the major benefits and advantages of COM. All readers sho
uld be interested in this chapter.
\par Part II contains the programming interface to COM, the suite of interfaces and APIs by which Component Object Model software is implemented and used. Chapters 2 through 8 are in Part II.
\par Chapter 2 goes into more detail about COM features and mechanisms without getting into the details of function call specifications and code. The chapter is intended for technical readers who want to know more than simply what COM is and what problems it s
olves, and therefore delves deeper into how applications use COM and the benefits of such use.
\par Chapters 3-6 contain programming-level information for readers who are interested in actually making use of COM in an application. These chapters explain the fundamentals of objects in COM and the creation of object clients as well as object servers. Chap
ter 3 details the basic object structures and mechanisms and provides the functional specifications of the core of COM. Chapter 4 covers the COM programming inter
faces that all applications making use of COM must follow. Chapter 5 then deals specifically with COM clients; Chapter 6 specifically with COM servers.
\par Chapter 7 contains more detailed information about how COM clients and servers communicate with ob
jects.  This information is generally needed only by sophisticated programmers. Nevertheless, programmers may find this chapter enlightening and can gain a clear understanding of all the underlying mechanisms that make COM truly powerful.
\par Chapter 8 contains information on how communications between COM clients and severs can be made secure.
\par Part III (Chapters 9-12) provides the functional specifications for the extended features of COM, including storage, naming, and exchange of data. These added features are built on top of the core COM functionality described in the previous chapters.

\par Part IV specifies standards relating to tools used to assist the authorship of COM software. It includes Chapter 13, which specifies the COM extensions to the standard Interface Definition Language (IDL) of the Open Software Foundation (OSF) Distributed C
omputing Environment (DCE). This will be of interest primarily to tools vendors who support tools that work with this language.  Chapter 14 covers Type Libraries which are the binary equivalent to IDL.
\par Finally, Part V specifies information needed by programmers who will be implementing COM on other platforms\emdash that is, the programmer who will be implementing COM on a systems level rather than an appli
cation level. Within Part V, Chapter 15 specifies the protocol used by COM when performing distributed computing between machines over a network. This chapter heavily references the OSF DCE RPC specification, noted in the Bibliography as [CAE RPC].  

\par 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page left intentionally blank.
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc298215714}{\*\bkmkstart _Toc306725076}{\*\bkmkstart _Toc324051692}{\*\bkmkstart _Toc339182918}Part I: Component Object Model Introduction
{\*\bkmkstart _Ref335035348}{\*\bkmkstart _Ref335035349}{\*\bkmkend _Toc298215714}{\*\bkmkend _Toc306725076}{\*\bkmkend _Toc324051692}{\*\bkmkend _Toc339182918}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Part I is an overview and introduction to the Component Object Model. The only chapter in Part I (Chapter 1), explains at a high level the motivations of COM and the problems it addresses. It describes what COM is and its features, and describes the major
 benefits and advantages of COM.
\par 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par {\*\bkmkstart _Toc335191147}{\*\bkmkstart _Toc339182919}{\pntext\pard\plain\b\fs28 1.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 Introduction
{\*\bkmkend _Ref335035348}{\*\bkmkend _Ref335035349}{\*\bkmkend _Toc335191147}{\*\bkmkend _Toc339182919}
\par {\*\bkmkstart _Toc298215715}{\*\bkmkstart _Toc306725077}{\*\bkmkstart _Toc324051510}{\*\bkmkstart _Toc324051694}{\*\bkmkstart _Toc324051937}{\*\bkmkstart _Toc335191148}{\*\bkmkstart _Toc339182920}{\pntext\pard\plain\b 1.1\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Challenges Facing The Software Industry{\*\bkmkend _Toc298215715}{\*\bkmkend _Toc306725077}{\*\bkmkend _Toc324051510}
{\*\bkmkend _Toc324051694}{\*\bkmkend _Toc324051937}{\*\bkmkend _Toc335191148}{\*\bkmkend _Toc339182920}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Constant innovation in computing hardware and software have brought a multitude of powerful and sophisticated applications to users\rquote 
 desktops and across their networks. Yet with such sophistication have come commensurate problems for application developers, software vendors, and users:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 Today\rquote s applications are large and complex\emdash 
they are time-consuming to develop, difficult and costly to maintain, and risky to extend with additional functionality.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Applications are monolithic\emdash they come prepackaged with a wide range of features but most features cannot be removed, upgraded independently, or replaced with alternatives.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Applications are not easily integrated\emdash data and functionality of one application are not readily available to other applications, even if the applications are written in the same programming lan
guage and running on the same machine.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Operating systems have a related set of problems. They are not sufficiently modular, and it is difficult to override, upgrade, or replace OS-provided services in a clean and flexible fashion.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}
Programming models are inconsistent for no good reason. Even when applications have a facility for cooperating, their services are provided to other applications in a different fashion from the services provided by the operating system or the network. Mor
eover, programming models vary widely depending on whether the service is coming from a provider in the same address space as the client program (
via dynamic linking), from a separate process on the same machine, from the operating system, or from a provider running on a separate machine (or set of cooperating machines) across the network.
\par \pard\plain \qj\sb120\sa60\widctlpar \f4\fs20 In addition, a result of the trends of hardware down-sizing and increasing software complexity is the need for a new style of distributed, client/server, modular and \ldblquote componentized\rdblquote 
 computing. This style calls for:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 A generic set of facilities for finding and using service providers (whether provided by the opera
t
ing system or by applications, or a combination of both), for negotiating capabilities with service providers, and for extending and evolving service providers in a fashion that does not inadvertently break the consumers of earlier versions of those servi
ces.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}
Use of object-oriented concepts in system and application service architectures to better match the new generation of object-oriented development tools, to manage increasing software complexity through increased modularity, to re-use existing soluti
ons, and to facilitate new designs of more self-sufficient software components.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Client/server computing to take advantage of, and communicate between, increasingly powerful desktop devices, network servers, and legacy systems.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Distributed computing to provide a single system image to users and applications and to permit use of services in a networked environment regardless of location, machine architecture, or implementation environment.

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As an illustration of the issues at hand, consider the problem of creating a system service API (Application Programming Interface) that works with multiple providers of some service in a \ldblquote polymorphic
\rdblquote  fashion. That is, a client of the service can transparently use any particular provider of the service without any special knowledge of which specific provider \emdash or implementation \emdash 
is in use. In traditional systems, there is a central piece of code\emdash conceptually, the service manager is a sort of \ldblquote object manager,\rdblquote  although traditional systems usually involve function-call prog
ramming models with system-provided handles used as the means for \ldblquote object\rdblquote  selection\emdash that every application calls to access meta-operations such as selecting an object and connecting to it. But once applications have used those 
\ldblquote object manager\rdblquote  operations and are connected to a service provider, the \ldblquote object manager\rdblquote  only gets in the way and forces unnecessary overhead upon all applications as shown in Figure 1-1.
\par \pard\plain \s40\qc\keep\keepn\widctlpar\pvpara\posxc\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {{\pict\wmetafile8\picw22277\pich9313\picwgoal12629\pichgoal5280 \picscalex58\picscaley58 
010009000003d017000008003100000000000e00000026060f001200ffffffff00000800000040f698fbfc09d8030a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0298fb40f6050000000c024008bc1331000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000043f6a0fbe609c0030e00000026060f001200ffffffff00000800000043f630fdb5fbf70107000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06310131011002cefb48fd5bf6050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c062f012f01f701b5fb30fd43f6050000001402000000001c000000fb0270ff0000000000
00bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a0eff94f708000000436f6e73756d6572680058005800500058008000500038000400
0000020102001c000000fb0270ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320abbff4cf70d0000
00286170706c69636174696f6e2900300050005800580028002800500050003000280058005800300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000059fda4fbb002c00307000000fc020000000000020000040000002d01040004000000f0010300
040000002d010200070000001b04d903c902bcfb71fd050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d
01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100070000001b04c003b002a4fb59fd050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
c0fb90ff68fd98ff040000002d01020007000000fc020100000000000000040000002d01010004000000f001040004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d00031d0000009cf64603240000004002f87fe0341701efc1ed77040000002d01030004000000f001050003
0000001e00070000001604380024fdf0fefcfb08000000fa0206000800000000000002040000002d01040005000000140290ff20fa05000000130290ff00ff040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a0000002403030060fd
90ffe9fc6cffe9fcb3ff0a00000024030300c1fb90ff39fcb3ff39fc6cff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c7021bfe760423fe040000002d010200040000002d01010004000000f0010400030000001e00070000001604c3fe32047bfd030308000000fa
0206000800000000000002040000002d0104000500000014021bfe15060500000013021bfe2001040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300c8021bfe3f033efe3f03f7fd0a000000240303006e041bfef703
f7fdf7033efe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000740470fce6099cff07000000fc020000000000020000040000002d01050004000000f0010400090000001c06cb00cb00b5ffff0988fc8c040500000014021bfe20012d0000004201050000002800000008
000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002
040000002d010500090000001c06c900c9009cffe60970fc74040500000014021bfe20011c000000fb0270ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d010600040000002e011800050000000a0200000000050000000902000000
0204000000020101001f000000320a80fdf00410000000536572766963652050726f7669646572600050003800500028005000500028006000390057005100280058005000380004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77
000000000c000000040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a2dfe81050d000000286170706c69636174696f6e2000300050005800580028002800500050003000280058005800280004000000020102001c000000fb
0270ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010016000000320adafebd050a0000006f722073797374656d29
580038002800500050005000300050008000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000058fd58fca80260fc040000002d010200040000002d01010004000000f001050004000000f0010400040000002d01030004000000f0010600030000
001e0007000000160400fda802b8fb58fd08000000fa0206000800000000000002040000002d01040005000000140258fc10f805000000130258fce807040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff
000008000000c0fea8fbc8fe60fc040000002d010200040000002d010100030000001e0007000000160460fc68ffa8fb20fe08000000fa0206000800000000000002040000002d010400050000001402f8fac0fe05000000130208fdc0fe040000002d010200040000002d01010004000000f0010400040000002701ffff0a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002800a0fb300058fc040000002d010200040000002d010100030000001e0007000000160458fcd000a0fb88ff08000000fa0206000800000000000002040000002d010400050000001402f0fa280005000000130200fd2800
040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006001a0fb680158fc040000002d010200040000002d010100030000001e0007000000160458fc0802a0fbc00008000000fa020600080000
0000000002040000002d010400050000001402f0fa600105000000130200fd6001040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060fd18fdb00220fd040000002d010200040000002d01
0100030000001e00070000001604c0fdb00278fc60fd08000000fa0206000800000000000002040000002d01040005000000140218fd18f805000000130218fdf007040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f0012
00ffffffff00000800000058ff60fc60ff18fd040000002d010200040000002d010100030000001e0007000000160418fd000060fcb8fe08000000fa0206000800000000000002040000002d010400050000001402b0fb58ff050000001302c0fd58ff040000002d010200040000002d01010004000000f001040004000000
2701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c00060fcc80018fd040000002d010200040000002d010100030000001e0007000000160418fd680160fc200008000000fa0206000800000000000002040000002d010400050000001402b0fbc0000500000013
02c0fdc000040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f80160fc000218fd040000002d010200040000002d010100030000001e0007000000160418fda00260fc580108000000fa02
06000800000000000002040000002d010400050000001402b0fbf801050000001302c0fdf801040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020fe60fc28fe18fd040000002d01020004
0000002d010100030000001e0007000000160418fdc8fe60fc80fd08000000fa0206000800000000000002040000002d010400050000001402b0fb20fe050000001302c0fd20fe040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff00000800000060fdd0fdb002d8fd040000002d010200040000002d010100030000001e0007000000160478feb00230fd60fd08000000fa0206000800000000000002040000002d010400050000001402d0fd18f8050000001302d0fdf007040000002d010200040000002d01010004000000f00104
00040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c8fe20fdd0fed8fd040000002d010200040000002d010100030000001e00070000001604d8fd70ff20fd28fe08000000fa0206000800000000000002040000002d01040005000000140270fcc8fe
05000000130280fec8fe040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000300018fd3800d0fd040000002d010200040000002d010100030000001e00070000001604d0fdd80018fd90ff08
000000fa0206000800000000000002040000002d01040005000000140268fc300005000000130278fe3000040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000680118fd7001d0fd04000000
2d010200040000002d010100030000001e00070000001604d0fd100218fdc80008000000fa0206000800000000000002040000002d01040005000000140268fc680105000000130278fe6801040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000
000e00000026060f001200ffffffff00000800000068fd90feb80298fe040000002d010200040000002d010100030000001e0007000000160438ffb802f0fd68fd08000000fa0206000800000000000002040000002d01040005000000140290fe20f805000000130290fef807040000002d010200040000002d0101000400
0000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060ffd8fd68ff90fe040000002d010200040000002d010100030000001e0007000000160490fe0800d8fdc0fe08000000fa0206000800000000000002040000002d0104000500000014
0228fd60ff05000000130238ff60ff040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c800d8fdd00090fe040000002d010200040000002d010100030000001e0007000000160490fe7001
d8fd280008000000fa0206000800000000000002040000002d01040005000000140228fdc80005000000130238ffc800040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000002d8fd080290
fe040000002d010200040000002d010100030000001e0007000000160490fea802d8fd600108000000fa0206000800000000000002040000002d01040005000000140228fd000205000000130238ff0002040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff00000800000028fed8fd30fe90fe040000002d010200040000002d010100030000001e0007000000160490fed0fed8fd88fd08000000fa0206000800000000000002040000002d01040005000000140228fd28fe05000000130238ff28fe040000002d010200040000002d
01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060fd50ffb00258ff040000002d010200040000002d010100030000001e00070000001604f8ffb002b0fe60fd08000000fa0206000800000000000002040000002d010400
05000000140250ff18f805000000130250fff007040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c8fea0fed0fe58ff040000002d010200040000002d010100030000001e000700000016
0458ff70ffa0fe28fe08000000fa0206000800000000000002040000002d010400050000001402f0fdc8fe0500000013020000c8fe040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003000
98fe380050ff040000002d010200040000002d010100030000001e0007000000160450ffd80098fe90ff08000000fa0206000800000000000002040000002d010400050000001402e8fd3000050000001302f8ff3000040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a
00ffffffff0100000000000e00000026060f001200ffffffff000008000000680198fe700150ff040000002d010200040000002d010100030000001e0007000000160450ff100298fec80008000000fa0206000800000000000002040000002d010400050000001402e8fd6801050000001302f8ff6801040000002d010200
040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000068fd1000b8021800040000002d010200040000002d010100030000001e00070000001604b800b80270ff68fd08000000fa0206000800000000000002040000
002d010400050000001402100020f80500000013021000f807040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060ff58ff68ff1000040000002d010200040000002d010100030000001e00
0700000016041000080058ffc0fe08000000fa0206000800000000000002040000002d010400050000001402a8fe60ff050000001302b80060ff040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
000000c80058ffd0001000040000002d010200040000002d010100030000001e000700000016041000700158ff280008000000fa0206000800000000000002040000002d010400050000001402a8fec800050000001302b800c800040000002d010200040000002d01010004000000f0010400040000002701ffff0a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000000258ff08021000040000002d010200040000002d010100030000001e000700000016041000a80258ff600108000000fa0206000800000000000002040000002d010400050000001402a8fe0002050000001302b8000002040000
002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000028fe58ff30fe1000040000002d010200040000002d010100030000001e000700000016041000d0fe58ff88fd08000000fa020600080000000000
0002040000002d010400050000001402a8fe28fe050000001302b80028fe040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060fdc800b002d000040000002d010200040000002d01010003
0000001e000700000016047001b002280060fd08000000fa0206000800000000000002040000002d010400050000001402c80018f8050000001302c800f007040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff000008000000c8fe1800d0fed000040000002d010200040000002d010100030000001e00070000001604d00070ff180028fe08000000fa0206000800000000000002040000002d01040005000000140268ffc8fe0500000013027801c8fe040000002d010200040000002d01010004000000f0010400040000002701ff
ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000300010003800c800040000002d010200040000002d010100030000001e00070000001604c800d800100090ff08000000fa0206000800000000000002040000002d01040005000000140260ff30000500000013027001
3000040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000680110007001c800040000002d010200040000002d010100030000001e00070000001604c80010021000c80008000000fa02060008
00000000000002040000002d01040005000000140260ff680105000000130270016801040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000068fd8801b8029001040000002d01020004000000
2d010100030000001e000700000016043002b802e80068fd08000000fa0206000800000000000002040000002d010400050000001402880120f80500000013028801f807040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f
001200ffffffff00000800000060ffd00068ff8801040000002d010200040000002d010100030000001e0007000000160488010800d000c0fe08000000fa0206000800000000000002040000002d010400050000001402200060ff050000001302300260ff040000002d010200040000002d01010004000000f00104000400
00002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c800d000d0008801040000002d010200040000002d010100030000001e0007000000160488017001d000280008000000fa0206000800000000000002040000002d0104000500000014022000c800050000
0013023002c800040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000002d00008028801040000002d010200040000002d010100030000001e000700000016048801a802d000600108000000
fa0206000800000000000002040000002d0104000500000014022000000205000000130230020002040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000028fed00030fe8801040000002d0102
00040000002d010100030000001e000700000016048801d0fed00088fd08000000fa0206000800000000000002040000002d010400050000001402200028fe050000001302300228fe040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00
000026060f001200ffffffff00000800000060fd3802b0024002040000002d010200040000002d010100030000001e00070000001604e002b002980160fd08000000fa0206000800000000000002040000002d010400050000001402380218f80500000013023802f007040000002d010200040000002d01010004000000f0
010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c8fe8801d0fe4002040000002d010200040000002d010100030000001e00070000001604400270ff880128fe08000000fa0206000800000000000002040000002d010400050000001402d800
c8fe050000001302e802c8fe040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003000800138003802040000002d010200040000002d010100030000001e000700000016043802d800800190
ff08000000fa0206000800000000000002040000002d010400050000001402d0003000050000001302e0023000040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000068018001700138020400
00002d010200040000002d010100030000001e00070000001604380210028001c80008000000fa0206000800000000000002040000002d010400050000001402d0006801050000001302e0026801040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff010000
0000000e00000026060f001200ffffffff00000800000068fdf802b8020003040000002d010200040000002d010100030000001e00070000001604a003b802580268fd08000000fa0206000800000000000002040000002d010400050000001402f80220f8050000001302f802f807040000002d010200040000002d010100
04000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060ff400268fff802040000002d010200040000002d010100030000001e00070000001604f80208004002c0fe08000000fa0206000800000000000002040000002d010400050000
001402900160ff050000001302a00360ff040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c8004002d000f802040000002d010200040000002d010100030000001e00070000001604f802
70014002280008000000fa0206000800000000000002040000002d0104000500000014029001c800050000001302a003c800040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000002400208
02f802040000002d010200040000002d010100030000001e00070000001604f802a8024002600108000000fa0206000800000000000002040000002d01040005000000140290010002050000001302a0030002040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff00000800000028fe400230fef802040000002d010200040000002d010100030000001e00070000001604f802d0fe400288fd08000000fa0206000800000000000002040000002d010400050000001402900128fe050000001302a00328fe040000002d010200040000
002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d8fe0003e0feb803040000002d010200040000002d010100030000001e00070000001604b80380ff000338fe08000000fa0206000800000000000002040000002d01
04000500000014025002d8fe0500000013026004d8fe040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004000f8024800b003040000002d010200040000002d010100030000001e00070000
001604b003e800f802a0ff08000000fa0206000800000000000002040000002d0104000500000014024802400005000000130258044000040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
7801f8028001b003040000002d010200040000002d010100030000001e00070000001604b0032002f802d80008000000fa0206000800000000000002040000002d0104000500000014024802780105000000130258047801040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000008fec4fd2002120107000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d010500070000001b0412012002c4fd08fe050000001402580478011c000000fb0260ff000000000000bc02
0000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a77fe77fe0b000000547261646974696f6e616c0062003e00590062002c0035002d00620061
0059002d0004000000020102001c000000fb0260ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a
37fff3fe0600000053797374656d6b0059005900350059008e0004000000020102001c000000fb0260ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d01060004000000f0010700040000002e011800050000000a0200000000050000
00090200000002040000000201010012000000320af7fff3fe0700000053657276696365006b0059003e0059002c005900590004000000020102001c000000fb0260ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d01070004000000
f0010600040000002e011800050000000a020000000005000000090200000002040000000201010015000000320ab700c2fe09000000496e74657266616365002c006200350059003f00350059005900590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
00000068043000da095c0307000000fc020000000000020000040000002d01060004000000f0010400040000002d010200090000001c06cb00cb007503f30948008004050000001402580478012d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000
00000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010500090000001c06c900c9005c03da093000680405
0000001402580478011c000000fb0270ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d01050004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320a4001e404
10000000536572766963652050726f7669646572600050003800500028005000500028006000390057005100280058005000380004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d010700040000
00f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320aed0175050d000000286170706c69636174696f6e2064300050005800580028002800500050003000280058005800280004000000020102001c000000fb0270ff000000000000bc020000000000000000
417269616c00f477e0a1f477ffffffff9cf64603debded77000000000c000000040000002d01050004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a9a02b1050a0000006f722073797374656d2958003800280050005000500030005000800030
0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c702db017604e301040000002d010200040000002d01010004000000f001060004000000f0010400040000002d01030004000000f0010500030000001e00070000001604830232043b0103030800
0000fa0206000800000000000002040000002d010400050000001402db011506050000001302db012001040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300c802db013f03fe013f03b7010a000000240303006e04db
01f703b701f703fe010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01010004000000f0010400030000000000
574f5720574f5720574f5720574f5720574f5720574f5720574f5720574f572000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\pvpara\posxc\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Figure 1-1: Traditional system service APIs require all applications to communicate\line through a 
central manager with corresponding overhead.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In addition to the overhead of the system-provided layer, another significant problem with traditional service models is that it is impossible for the provider to express new, enhanced, or unique capabilities to po
tential consumers in a standard fashion. A well-designed traditional service architecture may provide the notion of different levels of service. (Microsoft\rquote 
s Open Database Connectivity (ODBC) API is an example of such an API.) Applications can count on 
the minimum level of service, and can determine at run-time if the provider supports higher levels of service in certain pre-defined quanta, but the providers are restricted to providing the levels of services defined at the outset by the API; they cannot
 readily provide a new capa
bility and then evangelize consumers to access it cheaply and in a fashion that fits within the standard model. To take the ODBC example, the vendor of a database provider intent on doing more than the current ODBC standard permit
s must convince Microsoft to revise the ODBC standard in a way that exposes that vendor\rquote s extra capabilities. Thus, traditional service architectures cannot be readily extended or supplemented in a decentralized fashion.
\par Traditional service architectures also tend to be limited in their ability to robustly evolve as services are revised and versioned. The problem with versioning is one of representing capabilities (what a piece of code can do) and identity (what a piece o
f code {\i is}) in an interrelated, fuzzy way. A later version of some piece of code, such as \ldblquote Code version 2\rdblquote  indicates that it is {\i like }\ldblquote Code version 1\rdblquote 
 but different in some way. The problem with traditional versioning in this manner is that it\rquote s difficult for code to indicate {\i exactly} {\i how}
 it differs from a previous version and worse yet, for clients of that code to react appropriately to new versions\emdash or to not react at all if they expect only the previous version. The versioning problem can be rea
sonably managed in a traditional system when (i)\~there is only a single provider of a certain kind of service, (ii)\~the version number of the service is checked by the consumer when it binds to the service, (iii)\~
the service is extended only in an upward-compatible manner\emdash {\i i.e.}, features can only be added and never removed (a significant restriction as software evolves over a long period of time)\emdash so that a version N pro
vider will work with consumers of versions 1 through N-1 as well, and (iv)\~
references to a running instance of the service are not freely passed around by consumers to other consumers, all of which may expect or require different versions. But these kind of restrictions are obviously unacceptable in a multi-vendor, dis
tributed, modular system with polymorphic service providers.
\par These problems of service management, extensibility, and versioning have fed the problems stated earlier. Application complexity continues to increase as it becomes more and more difficult to extend functio
nality. Monolithic applications are popular because it is safer and easier to collect all interdependent services and the code that uses those services into one package. Interoperability between applications suffers accord
ingly, where monolithic applications are loathe to allow independent agents to access their functionality and thus build a dependence upon a certain behavior of the application. Because end users demand interoper
ability, however, application are compelled to attempt interoperability, but this leads directly back to the problem of application complexity, completing a circle of problems that limit the progress of software development.
\par {\*\bkmkstart _Toc298215716}{\*\bkmkstart _Toc306725078}{\*\bkmkstart _Toc324051511}{\*\bkmkstart _Toc324051695}{\*\bkmkstart _Toc324051938}{\*\bkmkstart _Toc335191149}{\*\bkmkstart _Toc339182921}{\pntext\pard\plain\b 1.2\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The Solution: Component Software{\*\bkmkend _Toc298215716}{\*\bkmkend _Toc306725078}{\*\bkmkend _Toc324051511}{\*\bkmkend _Toc324051695}
{\*\bkmkend _Toc324051938}{\*\bkmkend _Toc335191149}{\*\bkmkend _Toc339182921}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Object-oriented programming has long been advanced as a solution to the problems at hand. However, while object-oriented programming is powerful, it has yet to reach its full potential because no standard framework exists through which software objects cr
eated by different vendors can interact with one another within the same address space, much less across address spaces, and across network and machine architec
ture boundaries. The major result of the object-oriented programming revolution has been the production of \ldblquote islands of objects\rdblquote  that can\rquote t talk to one another across the sea of application boundaries in a meaningful way.
\par The solution is a system in which application developers create reusable {\i software} {\i components}. A component is a reusable piece of software in binary form that can be plugged into other components from othe
r vendors with relatively little effort. For example, a component might be a spelling checker sold by one ven
dor that can be plugged into several different word processing applications from multiple vendors. It might be a math engine optimized for computing fractals. Or it might be a specialized transaction monitor that can control the interaction of a number of
 other components (including service providers beyond traditional database servers). Software components must adhere to a binary external standard, but their internal imple
mentation is completely unconstrained. They can be built using procedural languages as well as object-oriented languages and frameworks, although the latter provide many advantages in the component software world.
\par Software component objects are much like integrated circuit (IC) components, and component software is the integrated circuit of tomorrow. The software industry today is very much where the hardware industry was 20 years ago. At that time, vendors learned
 how to shrink transistors and put them into a package so that no one ever had to figure out how to build a particular discrete function\emdash an NAND gate for example\emdash 
ever again. Such functions were made into an integrated circuit, a neat package that designers could conveniently buy and design around. As the hardware functions got more complex, the ICs were integrated to make a board of chips to provide more compl
ex functionality and increased capability. As integrated circuits got smaller yet provided more functionality, boards of chips became just bigger chips. So hardware technology now uses chips to build even bigger chips.
\par The software industry is at a point now where software developers have been busy building the software equivalent of discrete transistors\emdash software routines\emdash for a long time.
\par The Component Object Model enables software suppliers to package their functions into reusable software components in a fashion similar to the integrated circuit. What COM and its objects do is bring software into the world where an appli
cation developer no longer has to write a sorting algorithm, for example. A sorting algorithm can be packaged as a binary object and shipped into a marketplace of component objects. The developer who need a sorting algorithm just uses any sorting object o
f the required type without worrying about how the sort is implemented. The developer of the sorting object can avoid the hassles and in
tellectual property concerns of source-code licensing, and devote total energy to providing the best possible binary version of the sorting algorithm. Moreover, the developer can take advantage of COM\rquote 
s ability to provide easy extensibility and innovation beyond standard services as well as robust support for versioning of components, so that a new component works perfectly with software clients expecting to use a previous version. 
\par As with hardware developers and the integrated circuit, applications developers now do not have to worry about {\i how} to build that function; they can simply purchase that function. The situation is 
much the same as when you buy an integrated circuit today: You don\rquote 
t buy the sources to the IC and rebuild the IC yourself. COM allows you to simply buy the software component, just as you would buy an integrated circuit. The component is compatible with anything you \ldblquote plug\rdblquote  it into.
\par By enabling the development of component software, COM provides a much more productive way to design, build, sell, use, and reuse software. Component software has significant implications for software vendors, users, and corporations:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 {\b Application developers}
 are enabled to build and distribute applications more easily than ever be
fore. Component objects provide both scalability from single processes to enterprise networks and modularity for code reuse. In addition, developers can attain higher productivity because they can learn one object system for many platforms.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\b Vendors} are provided with a single model for interacting with other applications and the distributed computing environment. While component software can readily be added to existing applica
tions without fundamental rewriting, it also provides the opportunity to modularize applications and to incrementally replace system capabilities where appropriate. The advent of component software will help create more diverse market segments and niches 
for small, medium, and large vendors.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\b End-users} will see a much greater range of software choices, coupled with better productivity. Users will have access to hundreds of objects across client and server platforms\emdash 
objects that were previously developed by independent software vendors (ISVs) and corporations. In addition, as users see the possibilities of component software, demand is lik
ely to increase for specialized components they can purchase at a local software retail outlet and plug into applications.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\b Corporations }benefit from lower costs for corporate computing, helping
 IS departments work more efficiently, and enabling corporate computer users to be more productive. IS developers will spend less time developing general purpose software components and more time developing \ldblquote glue\rdblquote 
 components to create business-specific solutions. Existing applications do not need to be rewritten to take advantage of a component architecture. Instead, corporate developers can create object-based \ldblquote wrappers\rdblquote 
 that encapsulate the legacy application and make its operations and data available as an object to other software components in the network.
\par {\*\bkmkstart _Toc298215717}{\*\bkmkstart _Toc306725079}{\*\bkmkstart _Toc324051512}{\*\bkmkstart _Toc324051696}{\*\bkmkstart _Toc324051939}{\*\bkmkstart _Toc335191150}{\*\bkmkstart _Toc339182922}{\pntext\pard\plain\b 1.3\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The Component Software Solution: OLE\rquote s COM{\*\bkmkend _Toc298215717}{\*\bkmkend _Toc306725079}{\*\bkmkend _Toc324051512}
{\*\bkmkend _Toc324051696}{\*\bkmkend _Toc324051939}{\*\bkmkend _Toc335191150}{\*\bkmkend _Toc339182922}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The Component Object Model provides a means to address problems of application complexity and evolu
tion of functionality over time. It is a widely available, powerful mechanism for customers to adopt and adapt to a new style multi-vendor distributed computing, while minimizing new software investment.. COM is an open standard, fully and completely publ
icly documented from the lowest levels of its protocols 
to the highest. As a robust, efficient and workable component architecture it has been proven in the marketplace as the foundation of diverse and several application areas including compound documents, programming wid
gets, 3D engineering graphics, stock market data transfer, high performance transaction processing, and so on.
\par The Component Object Model is an object-based programming model designed to promote software interoperability; that is, to allow two or more applications or \ldblquote components\rdblquote  to easily cooperate with one an
other, even if they were written by different vendors at different times, in different programming languages, or if they are running on different machines running different operating systems. To support its interoper
ability features, COM defines and implements mechanisms that allow applications to connect to each other as{\i  software objects.  }A software object is a collection of related function (or intelligence) and the function\rquote s (or intelligence\rquote 
s) associated state.
\par \pard\plain \s40\qc\keep\keepn\widctlpar\pvpara\posxr\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {{\pict\wmetafile8\picw21140\pich11006\picwgoal11985\pichgoal6240 \picscalex46\picscaley46 
0100090000033109000008003100000000000e00000026060f001200ffffffff00000800000084f720fb3e0ae0040a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0220fb84f7050000000c02c009ba1231000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000087f723fb250ac7040e00000026060f001200ffffffff00000800000087f72ffb65fdc0ff07000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0624012401d9ff7efd47fb9ff7050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0622012201c0ff65fd2ffb87f7050000001402000000001c000000fb0270ff0000000000
00bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a48fdaaf906000000436c69656e746800280028005000580030000400000002010200
1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320af5fdeaf80b0000004170706c69
636174696f6e006800580058002800280050005000300028005800580004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f6fd05015603c70407000000fc020000000000020000040000002d01040004000000f0010300040000002d01020007000000
1b04e0046f031d010efe050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005
000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100070000001b04c70456030501f6fd050000001402000000001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000
b016f87f040000002d01010004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a0a02e2ff04000000434f4d3a680070007800300004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338
f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010100040000002e011800050000000a02000000001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b016f87f040000002d01010004000000f00105000400
00002e011800050000000a020000000005000000090200000002040000000201010016000000320a640326ff0a000000457361626c6973686564600050005000580028002800500058005000580004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f0378
84c577000000000c000000c007f87f040000002d01050004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a110416ff0a000000436f6e6e656374696f6e680058005800580050005000300028005800580004000000020102000a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff000008000000740423fb250aa10007000000fc020000000000020000040000002d01010004000000f0010300040000002d010200090000001c065f015f01ba003e0a3bfb8c04050000001402000000002d0000004201050000002800000008000000080000
000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01
010004000000f0010400090000001c065d015d01a100250a23fb7404050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009d05e9fe290985001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f0378
84c577000000000c000000a016f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a88ff7f060600000053657276657260005000380050005000380004000000020102001c000000fb0270ff000000000000bc0200000000
00000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a3500d7050b0000004170706c69636174696f6e0068005800580028002800500050
00300028005800580004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000061fcd3fffefdbd02040000002d01020007000000fc020100000000000000040000002d01040004000000f001010004000000f00103001c000000fb021000070000000000bc02
000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010500030000001e000700000016047902d6fdd3ff61fc08000000fa0206000800000000000002040000002d010300050000001402f1fcccfa05000000130297058bff040000002d0102
00040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300f6fdb602dcfd3d029efd5f020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004e03bd00a805ab02040000002d01020004000000
2d01040004000000f0010300030000001e000700000016047202a805bd008a0308000000fa0206000800000000000002040000002d010300050000001402d7fef2070500000013028904fc00040000002d010200040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d
0103000a000000240303004f03a402c203730296033d020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007c05f5fb3e09a0fe07000000fc020000000000020000040000002d01050004000000f0010300090000001c06aa00aa00b9fe57090dfc94050500000014028904
fc002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff
0208000000fa0206000800000000000002040000002d010500090000001c06a800a800a0fe3e09f5fb7c050500000014028904fc001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b016f87f040000002d010600040000002e0118000500
00000a020000000005000000090200000002040000000201010010000000320a72fd7906060000004f626a65637470005800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003903eefcda0386fd07000000fc0200000000000200
00040000002d01070004000000f0010300040000002d0102000700000018049ffdf30306fd51030500000014028904fc002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff000000
77000000ff000000dd000000040000002d01030004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f001050007000000180486fdda03eefc39030500000014028904fc000a00000026060f000a00ffffffff0100000000000e0000
0026060f001200ffffffff000008000000db0336fd78053efd040000002d010200040000002d01040004000000f001070004000000f0010300040000002d01010004000000f0010600030000001e00070000001604defd780596fcdb0308000000fa0206000800000000000002040000002d01030005000000140236fd4602
05000000130236fd0507040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000078fd39fd4d0341fd040000002d010200040000002d010400030000001e00070000001604e1fd090399fc78fd08
000000fa0206000800000000000002040000002d01030005000000140239fdabf705000000130239fd1209040000002d010200040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300450339fdd10215fdd1025cfd0a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff00000800000043fe57fdbf01a0ff1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d010500040000002e011800050000000a020000000005000000090200
000002040000000201010019000000320af6fd7dfe0c000000436c69656e742074616c6b7368002800280050005800300028003000500028005000500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f0400
00002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010013000000320aa3fefdfe080000006469726563746c795800280038005000500030002800500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f
0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a50ffd1fe09000000746f206f626a656374003000580028005800580028005000500030000400000002010200
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01040004000000f0010300040000002d01010004000000f00105
000300000000002d01060004000000f0010500040000002e011800050000000a020000000000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\pvpara\posxr\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Figure 1-2: Once COM connects client and object, the client and object communicate directly without added overhead.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In other words, COM, like a traditional system service API, provides the operations through which a cli
ent of some service can connect to multiple providers of that service in a polymorphic fashion. But once a connection is established, {\i COM drops out of the picture. }
COM serves to connect a client and an object, but once that connection is established, the client and object communicate directly without having to suffer overhead of being forced through a central piece of API code as illustrated in Figure 1-2.
\par COM is not a prescribed way to structure an application; rather, it is a set of technologies for building robust groups of services in both systems and applications such that the services and the clients of those serv
ices can evolve over time. In this way, COM is a technology that makes the programming, use, and uncoordinated/independent evolution of binary objects {\i possible}. COM is not a technology designed primarily for making programming necessarily {\i easy}
; indeed, some of the difficult requirements that COM accepts and meets necessarily involve some degree of complexity.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab \ldblquote 
Easy\rdblquote  is a relative term: without COM, some sorts of programming are simply not {\i possible} and thus the term \ldblquote easy\rdblquote  is utterly empty.}}
 However, COM provides a ready base for extensions oriented towards increased ease-of-use, as well as a great basis for powerful, easy development environments, language-specific improvements to provide better langu
age integration, and pre-packaged functionality within the context of application frameworks.
\par This is a fundamental strength of COM over other proposed object models: COM solves the \ldblquote deployment problem,\rdblquote  the versioning/evolution problem where it is necessary that the functionality of objects can in
crementally evolve or change without the need to simultaneously and in lockstep evolve or change all existing the clients of the object. Objects/services can easily continue to support the interfaces through which
 they communicated with older clients as well as provide new and better interfaces through which they communicate with newer clients.
\par To solve the versioning problems as well providing connection services without undue overhead, the Component Object Model builds a foundation that:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 Enables the creation and use of reusable components by making them \ldblquote component objects.
\rdblquote 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Defines a binary standard for interoperability.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Is a true system object model.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Provides distributed capabilities.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The following sections describe each of these points in more detail.
\par {\*\bkmkstart _Toc298215718}{\*\bkmkstart _Toc306725080}{\*\bkmkstart _Toc324051513}{\*\bkmkstart _Toc324051697}{\*\bkmkstart _Toc324051940}{\*\bkmkstart _Toc288620908}{\*\bkmkstart _Toc288640268}{\pntext\pard\plain\b\i\fs22 1.3.1\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Reusable Component Objects{\*\bkmkend _Toc298215718}{\*\bkmkend _Toc306725080}{\*\bkmkend _Toc324051513}{\*\bkmkend _Toc324051697}
{\*\bkmkend _Toc324051940}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Object-oriented programming allows programmers to build flexible and powerful software objects that can easily be reused by other programmers. Why is this? What is it about objects that are so flexible and powerful?

\par {\*\bkmkend _Toc288620908}{\*\bkmkend _Toc288640268}
The definition of an object is a piece of software that contains the functions that represent what the object can do (its intelligence) and associated state information for those functions (data). An object is, i
n other words, some data structure and some functions to manipulate that structure.
\par An important principle of object-oriented programming is {\i encapsulation}
, where the exact implementation of those functions and the exact format and layout of the data is only of concern to the object itself. This information is hidden from the clients of an object. Those clients are interested only in an object\rquote 
s behavior and not the object\rquote s internals. For instance, consider an object that represents a stack: a user of the stack cares only that the object supports \ldblquote push\rdblquote  and \ldblquote pop\rdblquote 
 operations, not whether the stack is implemented with an array or a linked list. Put another way, a client of an object is interested only in the \ldblquote contract\rdblquote \emdash the promised behavior\emdash that the object su
pports, not the implementation it uses to fulfill that contract.
\par COM goes as far as to formalize the notion of a contract between object and client. Such a contract is the basis for interoperability, and for interoperability to work on a large scale requires a strong standard.
\par {\*\bkmkstart _Toc288620910}{\*\bkmkstart _Toc288640270}{\*\bkmkstart _Toc298215719}{\*\bkmkstart _Toc306725081}{\*\bkmkstart _Toc324051514}{\*\bkmkstart _Toc324051698}{\*\bkmkstart _Toc324051941}{\pntext\pard\plain\b\i\fs22 1.3.2\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Binary and Wire-Level Standards for {\*\bkmkend _Toc288620910}{\*\bkmkend _Toc288640270}Interoperability{\*\bkmkend _Toc298215719}
{\*\bkmkend _Toc306725081}{\*\bkmkend _Toc324051514}{\*\bkmkend _Toc324051698}{\*\bkmkend _Toc324051941}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The Component Object Model defines a completely standardized mechanism for creating objects and for clients and objects to communicate. Unlike traditional object-oriented programming environments, these mechanisms are independent of the applications that 
use object services and of the programming languages used to create the objects. The mechanisms also support object invocations across the network. COM therefore defines a {\i binary interoperability} {\i standard }
rather than a language-based interoperability standard on any given operating system and hardware platform. In the domain of network computing, COM defines a standard architecture-independent wire format and protocol for interaction between objects on het
erogeneous platforms.
\par {\*\bkmkstart _Toc288620911}{\*\bkmkstart _Toc288640271}{\*\bkmkstart _Toc298215720}{\*\bkmkstart _Toc306725082}{\pntext\pard\plain\b\fs20\lang1024 1.3.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\f4\fs20\lang1024 Why Is Providing a Binary and Network Standard Important?{\*\bkmkend _Toc288620911}{\*\bkmkend _Toc288640271}{\*\bkmkend _Toc298215720}{\*\bkmkend _Toc306725082}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 By providing a binary and network standard, COM enables interoperability among applications that different programmers from different companies write. For example, a word processor application from one ven
dor can connect to a spreadsheet object from another vendor and import cell data from that spreadsheet into a table in the document. The spreadsheet object in turn may have a \ldblquote hot\rdblquote 
 link to data provided by a data object residing on a mainframe. As long as the objects support a predefined standard interface for data exchange, the word processor, spreadsheet, and mainframe database don\rquote t have to know anything about each other
\rquote s implementation. The word processor need only know how to connect to the spreadsheet; the spread
sheet need only know how to expose its services to anyone who wishes to connect. The same goes for the network contract between the spreadsheet and the mainframe database. All that either side of a connection needs to know are the standard mechanisms of t
he Component Object Model.
\par Without a binary and network standard for communication and a standard set of communication interfaces, programmers face the daunting task of writing a
 large number of procedures, each of which is specialized for communicating with a different type of object or client, or perhaps recompiling their code depending on the other components or network services with which they need to interact. With a binary 
and network stan
dard, objects and their clients need no special code and no recompilation for interoperability. But these standards must be efficient for use in both a single address space and a distributed environment; if the mechanism used for object inte
raction is not extremely efficient, especially in the case of local (same machine) servers and components within a single address space, mass-market software developers pressured by size and performance requirements simply will not use it.
\par Finally, object communication must be programming language-independent since programmers cannot and should not be forced to use a particular language to interact with the system and other applications. An il
lustrative problem is that every C++ vendor says, \ldblquote We\rquote ve got class libraries and you can use our class libraries.\rdblquote  But the interfaces published for that one vendor\rquote 
s C++ object usually differs from the interfaces publishes for another vendor\rquote s C++ object. To allow application developers to use the objects\rquote  capabilities, each vendor has to ship the source cod
e for the class library for the objects so that application developers can rebuild that code for the vendor\rquote s compiler they\rquote re using. By providing a binary standard to which objects conform, vendors do not have to sen
d source code to provide compatibility, nor to users have to restrict the language they use to get access to the objects\rquote  capabilities. COM objects are compatible by nature.
\par {\*\bkmkstart _Toc288620912}{\*\bkmkstart _Toc288640272}{\*\bkmkstart _Toc298215721}{\*\bkmkstart _Toc306725083}{\pntext\pard\plain\b\fs20\lang1024 1.3.2.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\f4\fs20\lang1024 COM\rquote s Standards Enable Object Interoperability{\*\bkmkend _Toc288620912}{\*\bkmkend _Toc288640272}{\*\bkmkend _Toc298215721}{\*\bkmkend _Toc306725083}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 With COM, applications interact with each other and with the system through collections of function calls\emdash also known as methods or member functions or requests\emdash called {\i interfaces}. An \ldblquote 
interface\rdblquote  in the COM sense{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab The term \ldblquote interface\rdblquote  is used in a very similar sense in the Component
 Object Request Broker Architecture (CORBA) design of the Object Management Group. In both cases the idea of an \ldblquote interface\rdblquote 
 is a signature of functions and, implicitly, capabilities, entirely abstracted from the implementation. The major difference betwee
n COM and CORBA at this high level is that CORBA objects have one and only one interface while COM objects can have many interfaces simultaneously. DCE RPC (from OSF) uses the term \ldblquote interface\rdblquote  in a similar manner.}}
 is a strongly typed {\i contract }between software components to provide a relatively small but useful set of semantically related operations. An interface is an articulation of an expected behavior and expected re
sponsibilities, and the semantic relation of interfaces gives programmers and designers a concrete entity to use when referring to the contract. Although not a strict requirement of the model, interfaces should be fac
tored in such fashion that they can be re-used in a variety of contexts. For example, a simple interface for generically reading and writing streams of data can be re-used by many different types of objects and clients.
\par \pard \qj\sa60\keepn\widctlpar The use of such interfaces in COM provides four major benefits:
\par {\pntext\pard\plain\fs20 1.\tab}\pard \qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}{\b The ability for functionality in applications (clients or servers of objects) to evolve over time:}
 This is accomplished through a request called {\i QueryInterface} that all COM objects support (or else they are not COM objects). {\i QueryInterface}
 allows an object to make more interfaces (that is, new groups of functions) available to new clients while at the same time retaining complete binary compatibility with existing client code. In other words, revising an object by adding new, even un
related functionality will not require any recompilation on the part of any existing clients. Because COM allows objects to have multiple interfaces, an object can express any number of \ldblquote versions\rdblquote 
 simultaneously, each of which may be in simultaneous use by clients of different vintage. And when its clients pass around a reference to the \ldblquote object,\rdblquote  an occurrence that in principle cannot be known and therefore \ldblquote 
guarded against\rdblquote  by the object, they actually pass a reference to a particular {\i interface}
 on the object, thus extending the chain of backward compatibility. The use of immutable interfaces and multiple interfaces per object solves the problem of versioning.
\par {\pntext\pard\plain\fs20 2.\tab}{\b Very fast and simple object interaction for same-process objects: }Once a client establishes a connection to an object, calls to that object\rquote s services (interface functions) are simply indirect fun
ctions calls through two memory pointers. As a result, the performance overhead of interacting with an in-process COM object (an object that is in the same address space) as the calling code is negligible\emdash 
only a handful of processor instructions slower than a standard direct function call and no slower than a compile-time bound C++ single-inheritance object invocation.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar 
\f4\fs16 {\cs38\super \chftn } \tab Indeed, in principle the intrinsic method dispatch overhead of COM is in fact{\i  less} than the intrinsic overhead of C++ multiple inheritanc
e method invocations. In a multiple inheritance situation, C++ must on every method invocation adjust the {\f5 this}
 pointer to be as appropriate for the actual method which is to be executed. In an COM object which supports multiple interfaces, which is directly analogous to the multiple inheritance situation, one must of course also do a similar sort of adjustment, a
nd this is done in the {\f5 QueryInterface} method. However, when using a given interface on the object, one can invoke {\f5 QueryInterface }once and use the returned pointer many times. Thus, the cost of the {\f5 QueryInterface }
operation can be amortized over all the subsequent usage, resulting in less overall dispatch overhead. Be aware, however, that this distinction is completely academic. In almost all real word situations, both dispatch mechanisms provide more than adequate
 performance.}}
\par {\pntext\pard\plain\fs20 3.\tab}{\b \ldblquote Location transparency\rdblquote :} The binary standard allows COM to intercept a interface call to an object and make instead a {\i remote procedure call} (RPC) to the \ldblquote real\rdblquote 
 instance of the object that is running in another process or on another machine. A key point is that the caller makes this call ex
actly as it would for an object in the same process. Its binary and network standards enables COM to perform inter-process and cross-network function calls transparently. While there is, of course, a great deal more overhead in making a remote procedure c
all, no special code is necessary in the client to differentiate an in-process object from out-of-process objects. All objects are available to clients in a uniform, transparent fashion.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
There can be subtle differences in the flow-of-control between calling in-process and out-of-process objects. In particular, an out-of-process object call may result in a call-back prior to the completion of the original call. COM provides standard mecha
nisms to deal with call-backs and reentrancy; even on single-threaded operating systems. Without such standards, true interoperability between out-of-process objects (of which cross-network objects is just a typical case) is impossible.}}
\par {\pntext\tab}\pard \qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlcont\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}
This is all well and good. But in the real world, it is sometimes necessary for performance reasons that special considerations be taken into account when designing systems for network operation that need not be considered when only local operation is use
d. What is needed is not pure local / remote transparency, but \ldblquote local / remote transparency, unless you need to care.\rdblquote  COM provides this capability. An object implementor can if he wishes support {\i custom marshaling}
 which allows his objects to take special action when they are used from across the network, different action if he would like than is used in the local case. The key point is that this is done completely transparently to the client. Taken as a whole, thi
s architecture allows one to design client / object interfaces at their natural and easy semantic level without regard to network performance issues, then at a later address network performance issues without disrupting the established design.
\par {\pntext\pard\plain\fs20 4.\tab}\pard \qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}{\b Programming language independence:} Because COM is a binary standard, objects can be im
plemented in a number of different programming languages and used from clients that are written using completely different programming languages. Any programming language that can create structures of pointers and explicitly or implicitly call functions t
hrough pointers\emdash languages such as C, C++, Pascal, Ada, Smalltalk, and even BASIC programming environments\emdash can create and use COM objects immediately. Other languages can easily be enhanced to support this requirement.
\par \pard \qj\sa60\widctlpar In sum, only with a binary standard can an object model provide the type of structure necessary for full in
teroperability, evolution, and re-use between any application or component supplied by any vendor on a single machine architecture. Only with an architecture-independent network wire protocol standard can an object model provide full interoperability, evo
lution, and re-use between any application or component supplied by any vendor in a network of heterogeneous
 computers. With its binary and networking standards, COM opens the doors for a revolution in software innovation without a revolution in networking, hardware, or programming and programming tools.
\par {\*\bkmkstart _Toc288620916}{\*\bkmkstart _Toc288640276}{\*\bkmkstart _Toc298215722}{\*\bkmkstart _Toc306725084}{\*\bkmkstart _Toc324051515}{\*\bkmkstart _Toc324051699}{\*\bkmkstart _Toc324051942}{\pntext\pard\plain\b\i\fs22 1.3.3\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 A True System Object Model{\*\bkmkend _Toc288620916}{\*\bkmkend _Toc288640276}{\*\bkmkend _Toc298215722}{\*\bkmkend _Toc306725084}
{\*\bkmkend _Toc324051515}{\*\bkmkend _Toc324051699}{\*\bkmkend _Toc324051942}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 To be a true system model, an object architecture must allow a distributed, evolving system to support mil
lions of objects without risk of erroneous connections of objects and other problems related to strong typing or definition. COM is such an architecture. In addition to being
 an object-based service architecture, COM is a true system object model because it:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}Uses \ldblquote globally unique identifiers\rdblquote 
 to identify object classes and the interfaces those objects may support.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Provides methods for code reusability without the problems of traditional language-style implementation inheritance.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Has a single programming model for in-process, cross-process, and cross-network interaction of software components.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Encapsulates the life-cycle of objects via reference counting.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Provides a flexible foundation for security at the object level.
\par \pard \qj\sa60\widctlpar {\*\bkmkstart _Toc288620917}{\*\bkmkstart _Toc288640277}The following sections elaborate on each of these aspects of COM.
\par {\*\bkmkstart _Toc298215723}{\*\bkmkstart _Toc306725085}{\pntext\pard\plain\b\fs20\lang1024 1.3.3.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 
Globally Unique Identifiers{\*\bkmkend _Toc288620917}{\*\bkmkend _Toc288640277}{\*\bkmkend _Toc298215723}{\*\bkmkend _Toc306725085}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Distributed object systems have potentially millions of interfaces and software components that need to be uniquely identified. Any system that uses human-readable names for finding and binding to modules, ob
jects, classes, or requests is at risk because the probability of a collision between human-readable names is nearly 100% in a complex system. The r
esult of name-based identification will inevitably be the accidental connection of two or more software components that were not designed to interact with each other, and a resulting error or crash\emdash 
even though the components and system had no bugs and worked as designed.
\par By contrast, COM uses globally unique identifiers (GUIDs)\emdash 128-bit integers that are virtually guaranteed to be unique in the world across space and time\emdash to identify every interface and every object class and type.{\cs38\super \chftn 
{\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Although \ldblquote class\rdblquote  and \ldblquote type\rdblquote  can often be used interchangeably, in COM a \ldblquote type\rdblquote 
 is the total signature of an object, which is the union of the interfaces that the object supports. \ldblquote Class\rdblquote  is a particular implementation of a type, and can include certain unique implementation-spe
cific attributes such as product name, icon, etc. For example, the \ldblquote chart\rdblquote  type (identified by a GUID by whom
ever first defines that particular combination of interfaces) might be supported by Lotus 1-2-3 for Windows and Microsoft Excel for the Macintosh, e
ach of which are separate classes. Normally, types are polymorphic; any consumer of the services provided by interfaces making up the type can use any class that implements the type.}}
 These globally unique identifiers are the same as UUIDs (Universally Unique IDs) as defined by DCE. Human-readable names are assigned only for convenience and are locally scoped. This helps insure that COM components do not accidentally connect to an obj
ect or via an interface or method, even in networks with millions of objects.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
As an illustration of how unique GUIDs are consider that one could generate 10 million GUIDs a second until the year 5770 AD and each one would be unique.}}
\par {\*\bkmkstart _Toc288620918}{\*\bkmkstart _Toc288640278}{\*\bkmkstart _Toc298215724}{\*\bkmkstart _Toc306725086}{\*\bkmkstart impl_inh}{\pntext\pard\plain\b\fs20\lang1024 1.3.3.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Code Reusability and Implementation Inheritance{\*\bkmkend _Toc288620918}{\*\bkmkend _Toc288640278}{\*\bkmkend _Toc298215724}{\*\bkmkend _Toc306725086}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\*\bkmkend impl_inh}Implementation inheritance\emdash the ability of one component to \ldblquote subclass\rdblquote  or \ldblquote inherit\rdblquote  some of its functionality from another component while 
\ldblquote over-riding\rdblquote  other functions\emdash is a very useful technology for building applications. But more and more experts are concluding that it creates serious problems in a loosely cou
pled, decentralized, evolving object system. The problem is technically known as the lack of type-safety in the specialization interface and is well-documented in the research literature.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab See, for example, Richard Helm (Senior Researcher, IBM Thomas J. Watson Research Center), {\i Ensuring Semantic Integrity of Reusable Objects (Panel)}, OOPSLA \rquote 
92 Conference Proceedings, p.300; John Lamping (Xerox PARC), {\i Typing the Specialization Interface}, OOPSLA \rquote 93 Conference Proceedings, p.201.}}
\par The general problem with traditional implementation inheritance is that the \ldblquote contract\rdblquote 
 or interface between objects in an implementation hierarchy is not clearly defined; indeed, it is implicit and ambiguous. When the parent or child component changes its impl
ementation, the behavior of related components may become undefined. This tight coupling of implementations is not a problem when the implementation hierarchy is under the control of a defined group of programmers who can, if necessary, make updates to al
l components simultaneously. But it is precisely this ability to control and change a set of related components simultane
ously that differentiates an application, even a complex application, from a true distributed object system. So while traditional implementation inheritance can be a very good thing for building applications and components, it is inappropriate in a system
 object model.
\par Today, COM provides two mechanisms for code reuse called {\i containment/delegation }and {\i aggregation}. In the first and more common mechanism, one object (the \ldblquote outer\rdblquote  object) simply becomes the client of an
other, internally using the second object (the \ldblquote inner\rdblquote 
 object) as a provider of services that the outer object finds useful in its own implementation. For example, the outer object may implement only stub functions that merely pass through calls to the in
ner object, only transforming object reference parameters from the inner object to itself in order to maintain full encapsulation. This is really no different than an application calling functions in an operating system to achieve the same ends\emdash 
other objects simply extend the functionality of the system. Viewed externally, clients of the outer object only ever see the outer object\emdash the inner \ldblquote contained\rdblquote  object is completely hidden\emdash encapsulated\emdash 
from view. And since the outer object is itself a client of the inner object, it always uses that inner object through a clearly defined contracts: the inner object\rquote s interfaces. By implementing those interfaces, the inner object signs the contr
act promising that it will not change its behavior unexpectedly.
\par With {\i aggregation, }
the second and more rare reuse mechanism, COM objects take advantage of the fact that they can support multiple interfaces. An aggregated object is essentially a composite object in which the outer object exposes an interface from the inner object directl
y to clients as if it were part of the outer object. Again, clients of the outer object are impervious to this fact, but internally, the outer object need not implement the e
xposed interface at all. The outer object has determined that the implementation of the inner object\rquote 
s interface is exactly what it wants to provide itself, and can reuse that implementation accordingly. But the outer object is still a client of the inner
 object and there is still a clear contract between the inner object and any client. Aggregation is really nothing more than a special case of containment/delegation to prevent the outer object from having to implement an interface that does nothing more 
than delegate every function to the same interface in the inner object. Aggregation is really a performance convenience more than the primary method of reuse in COM.
\par Both these reuse mechanisms allow objects to exploit existing implementation while avoiding the problems of traditional implementation inheritance. However, they lack a powerful, if dangerous, capability of tradi
tional implementation inheritance: the ability of a child object to \ldblquote hook\rdblquote  calls that a parent object might make on itself and override entirely or supplement partially the parent\rquote s behavior. This feature of imple
mentation inheritance is definitely useful, but it is also the key area where imprecision of interface and implicit coupling of {\i implementation} (as opposed to interface) creeps in to traditional implementation inheri
tance mechanisms. A future challenge for COM is to define a set of conventions that components can use to provide this \ldblquote hooking\rdblquote  feature of implementation inh
eritance while maintaining the strictness of contract between objects and the full encapsulation required by a true system object model, even those in \ldblquote parent/child\rdblquote  relationships.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Readers interested in this issue should examine the \ldblquote connectable object\rdblquote  architecture described in Chapter 11.  Connectable ob
jects enable an event model that provides a standard, powerful convention for a COM object to signal to any interested client that is about to do something, that is doing something, and that it is finish
ed doing something. The model also allows clients to cancel the event outright or to cancel it in favor of an \ldblquote overriding\rdblquote  event supplied by the client. This event model coupled with a few ad
ditional conventions could provide COM with all the traditional features of implementation inheritance and more without the tra
ditional risks.   For an interesting discussion of the problems of traditional implementation inheritance as well as a description of how an inheritance system might be provide robust type-safety, see Hauck, {\i 
Inheritance Modeled with Explicit Bindings: An A}{\i p}{\i proach to Typed Inheritance}, OOPSLA \rquote 93 Conference Proceedings, p.231.}}
\par {\*\bkmkstart _Toc288620919}{\*\bkmkstart _Toc288640279}{\*\bkmkstart _Toc298215725}{\*\bkmkstart _Toc306725087}{\pntext\pard\plain\b\fs20\lang1024 1.3.3.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\f4\fs20\lang1024 Single Programming Model{\*\bkmkend _Toc288620919}{\*\bkmkend _Toc288640279}{\*\bkmkend _Toc298215725}{\*\bkmkend _Toc306725087}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A problem related to implementation inheritance is the issue of a single programming model for in-process objects and out-of-process/cross-network objects. In the former case, class library technology (or applica
tion frameworks) permits only the use of features or objects that are in a single address. Such technology is far from permitting use of code outside the process space let alone code running on another machine altogether. In other words, a programmer can
\rquote t subclass a remote object to reuse its implementation. Similarly, features like public data items in classes that can be freely manipulated by other objects within a single address space don\rquote 
t work across process or network boundaries. In contrast, COM has a single interface-based binding model and has been carefully designed to minimize differences between the in-process and out-of-p
rocess programming model. Any client can work with any object anywhere else on the machine or network, and because the object reusability mechanisms of containment and aggregation maintain a cli
ent/server relationship between objects, reusability is also possible across process and network boundaries.
\par {\*\bkmkstart _Toc298215726}{\*\bkmkstart _Toc306725088}{\*\bkmkstart _Toc288620920}{\*\bkmkstart _Toc288640280}{\pntext\pard\plain\b\fs20\lang1024 1.3.3.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\f4\fs20\lang1024 Life-cycle Encapsulation{\*\bkmkend _Toc298215726}{\*\bkmkend _Toc306725088}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In traditional object systems, the life-cycle of objects\emdash the issues surrounding the creation and deletion of objects\emdash is handled implicitly by the language (or the language run
time) or explicitly by application pro
grammers. In other words, an object-based application, there is always someone (a programmer or team of programmers) or something (for example, the startup and shutdown code of a language runtime) that has complete knowledge when objects must be created a
nd when they should be deleted.
\par But in an evolving, decentralized {\i system} made up of objects, it is no longer true that someone or something always \ldblquote knows\rdblquote  how to deal with object life-cycle. Object creation is still relatively easy; assuming the cli
ent has the right security privileges, an object is created whenever a client requests that it be created. But object deletion is another matter entirely. How is it possible to \ldblquote know\rdblquote  {\i a priori}
 when an object is no longer needed and should be deleted? Even when the original client is done with the object, it can\rquote 
t simply shut the object down since it is likely to have passed a reference to the object to some other client in the system, and how can it know if/when that client is done with the object?\emdash 
or if that second client has passed a reference to a third client of the object, and so on.
\par At first, it may seem that there are other ways of dealing with this problem. In the case of cross-process and cross-network object usage, it might be possible to rely on the underlying communication channel to inform the system when all {\i connections}
 to an object have disappeared. The object can then be safely deleted. There are two drawbacks to this approach, however, one of which is fatal. The 
first and less significant drawback is that it simply pushes the problem out to the next level of software. The object system will need to rely on a connection-oriented communications model that is capable of tracking object connections and taking ac
tion when they disappear. That might, however, be an acceptable trade-off. 
\par But the second drawback is flatly unacceptable: this approach requires a major difference between the cross-process/cross-network programming model, where the communication system can pr
ovide the hook necessary for life-cycle management, and the single-process programming model where objects are directly connected together without any intervening communications channel. In the latter case, object life-cycle issues must be handled in some
 other fashion. This lack of location transparency would mean a difference in the programming model for single-process and cross-process objects. It would also force clients to make a once-for-all compile-time decision about whether objects were going to 
run in-process or out-of-process instead of allowing that decision to be made by {\i users}
 of the binary component on a flexible, ad hoc basis. Finally, it would eliminate the powerful possibility of composite objects or aggregates made up of both in-process and out-of-process objects. 
\par Could the issue simply be ignored? In other words, could we simply ignore garbage collection (deletion of unused objects) and allow the operating system to clean up unneeded resources when the process was eventually torn down? That non-\ldblquote solution
\rdblquote  might be tempting in a system with just a few objects, or in a system (like a laptop computer) that comes up and down frequently. It is totally unacceptable, however, in the case of an environment where a single process might be made up o
f potentially thousands of objects or in a large server machine that must never stop. In either case, lack of life-cycle management is essentially an embrace of an inherently unstable system due to memory leaks from objects that never die.
\par There is only one solution to this set of problems, the solution embraced by COM: clients must tell an ob
ject when they are using it and when they are done, and objects must delete themselves when they are no longer needed. This approach, based on reference counting by all objects, is summarized by the phrase \ldblquote life-cycle encapsulation\rdblquote 
 since objects are truly encapsulated and self-reliant if and only if they are responsible, with the appropriate help of their clients acting singly and not collectively, for deleting themselves. 
\par Reference counting is admittedly complex for the new COM programmer; arguably, it is the most difficult aspect of the COM programming model to understand and to get right when building complex peer-to-peer COM applications. When viewed in light of the non
-alternatives, however, its inevitability for a true system object model with full location transparency is apparent. Moreover, reference counting is precisely the kind of mechanical programming task that can be automated to a large degree or even enti
rely by well-designed programming tools and application frameworks. Tools and frameworks focused on building COM compo
nents exist today and will proliferate increasingly over the next few years. Moreover, the COM model itself may evolve to provide support for optionally delegating life-cycle management to the system. Perhaps most importantly, reference counting in partic
ular and native COM programming in general involves the kind of mind-shift for programmers\emdash as in GUI event-driven programming just a few short years ago\emdash 
that seems difficult at first, but becomes increasingly easy, then second-nature, then almost trivial as experience grows.
\par {\*\bkmkstart _Toc298215727}{\*\bkmkstart _Toc306725089}{\pntext\pard\plain\b\fs20\lang1024 1.3.3.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Security
{\*\bkmkend _Toc288620920}{\*\bkmkend _Toc288640280}{\*\bkmkend _Toc298215727}{\*\bkmkend _Toc306725089}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 For a distributed object system to be useful in the real world it must provide a means for secure access to objects and the data they encapsulate. The issues surrounding system object models are complex for corpo
rate customers and ISVs making planning decisions in this area, but COM meets the challenges, and is a solid foundation for an enterprise-wide computing environment.
\par COM provides security along several crucial dimensions. First, COM uses standard operating system permissions to determine whether a client (running in a particular user\rquote 
s security context) has the right to start the code associated with a particular class of object. Second, with respect to persistent objects (class code along with data stored in a persi
stent store such as file system or database), COM uses operating system or application permissions to determine if a particular client 
can load the object at all, and if so whether they have read-only or read-write access, etc. Finally, because its security architecture is based the design of the DCE RPC security architecture, an industry-standard communications mechanism that includes f
ully authenticated sessions, COM provides cross-process and cross-network object servers with standard security information about the client or clients that are using it so that a server can use security in more sophisti
cated fashion than that of simple OS permissions on code execution and read/write access to persistent data.
\par {\*\bkmkstart _Toc288620921}{\*\bkmkstart _Toc288640281}{\*\bkmkstart _Toc298215728}{\*\bkmkstart _Toc306725090}{\*\bkmkstart _Toc324051516}{\*\bkmkstart _Toc324051700}{\*\bkmkstart _Toc324051943}{\pntext\pard\plain\b\i\fs22 1.3.4\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Distributed Capabilities{\*\bkmkend _Toc288620921}{\*\bkmkend _Toc288640281}{\*\bkmkend _Toc298215728}{\*\bkmkend _Toc306725090}
{\*\bkmkend _Toc324051516}{\*\bkmkend _Toc324051700}{\*\bkmkend _Toc324051943}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM supports {\i distributed objects}
; that is, it allows application developers to split a single application into a number of different component objects, each of which can run on a different computer. Since COM pro
vides network transparency, these applications do not appear to be located on different machines. The entire network appears to be one large computer with enormous processing power and capacity.
\par M
any single-process object models and programming languages exist today and a few distributed object systems are available. However, none provides an identical, transparent programming model for small, in-process objects, medium out-of-process objects on t
he same machine, and potentially huge objects running on another machine on the network. The Component Object Model provides just such a transparent model, where a client uses an object in the same process in precisely the same manner as it would use one 
on a machine thousands of miles away. COM explicitly bars certain kinds of \ldblquote features\rdblquote \emdash such as direct access to object data, properties, or variables\emdash 
that might be convenient in the case of in-process objects but would make it impossible for an out-of-process object to provide the same set of services. This is called {\i location transparency}.
\par {\*\bkmkstart _Toc298215729}{\*\bkmkstart _Toc306725091}{\*\bkmkstart _Toc324051517}{\*\bkmkstart _Toc324051701}{\*\bkmkstart _Toc324051944}{\*\bkmkstart _Toc335191151}{\*\bkmkstart _Toc339182923}{\pntext\pard\plain\b 1.4\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Objects and Interfaces{\*\bkmkend _Toc298215729}{\*\bkmkend _Toc306725091}{\*\bkmkend _Toc324051517}{\*\bkmkend _Toc324051701}
{\*\bkmkend _Toc324051944}{\*\bkmkend _Toc335191151}{\*\bkmkend _Toc339182923}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 What is an object? An object is an instantiation of some {\i class}. At a generic level, a \ldblquote class\rdblquote  is the definition of a set of related data and capab
ilities grouped together for some distinguishable common purpose. The purpose is generally to provide some service to \ldblquote things\rdblquote  outside the object, namely clients that want to make use of those services.
\par A object that conforms to COM is a special manifestation of this definition of object. A COM object ap
pears in memory much like a C++ object. Unlike C++ objects, however, a client never has direct access to the COM object in its entirety. Instead, clients always access the object through clearly defined contracts: the interfaces that the object supports, 
{\i and only those interfaces}.
\par What exactly is an interface? As mentioned earlier, an interface is a strongly-typed group of semantically-related functions, also called \ldblquote interface member functions.\rdblquote  The name of an interface is always prefixed with an \ldblquote I
\rdblquote  by convention, as in {\cs58\f5\fs16\lang1024 IUnknown}. (The real identity of an interface is given by its GUID; names are a programming convenience, and the COM system itself uses the GUIDs exclusively when operating on interfaces.) In a
ddition, while the interface has a specific name (or type) and names of member functions, it defines only how one would use that interface and what behavior is expected from an object through that interface. Interfaces do not define any implementation. Fo
r example, a hypothetical interface called {\cs58\f5\fs16\lang1024 IStack}{\i  }that had member functions of {\cs58\f5\fs16\lang1024 Push}{\i  }and {\cs58\f5\fs16\lang1024 Pop}
 would only define the parameters and return types for those functions and what they are expected to do from a client perspective; the object is free to implement the interface as it sees fit, using an array, linked list, or whatever other programming met
hods it desires.
\par When an object \ldblquote implements an interface\rdblquote 
 that object implements each member function of the interface and provides pointers to those functions to COM. COM then makes those functions available to any client who asks. This terminology is used
 in this document to refer to the object as the important element in the discussion. An equivalent term is an \ldblquote interface on an object\rdblquote  which means the object implements the inter
face but the main subject of discussion is the interface instead of the object.
\par {\*\bkmkstart _Toc298215730}{\*\bkmkstart _Toc306725092}{\*\bkmkstart _Toc324051518}{\*\bkmkstart _Toc324051702}{\*\bkmkstart _Toc324051945}{\pntext\pard\plain\b\i\fs22 1.4.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Attributes of Interfaces{\*\bkmkend _Toc298215730}{\*\bkmkend _Toc306725092}{\*\bkmkend _Toc324051518}{\*\bkmkend _Toc324051702}{\*\bkmkend _Toc324051945}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Given that an interface is a contractual way for an object to expose its services, there are four very important points to understand:
\par {\b An interface is not a class: }An interface is not a class in the normal definition of \ldblquote class.\rdblquote  A class can be instantiated to form an object. An interface cannot be instantiated by itself because it carries no implemen
tation. An object must implement that interface and that object must be instantiated for there to be an interface. Furthermore, different object classes may implement an interface differently yet be used interchangea
bly in binary form, so long as the behavior conforms to the interface definition (such as two objects that implement {\cs58\f5\fs16\lang1024 IStack}{\i  }where one uses an array and the other a linked list).
\par {\b An interface is not an object: }
An interface is just a related group of functions and is the binary standard through which clients and objects communicate. The object can be implemented in any language with any internal state representation, so long as it can provide pointers to interfa
ce member functions.
\par {\b Interfaces are strongly typed: }Every interface has its own interface identifier (a GUID) thereby eliminating any chance of collision that would occur with human-readable names. Programmers must
 consciously assign an identifier to each interface and must consciously support that interface and/or the interfaces defined by others: confusion and conflict among interfaces cannot happen by accident, leading to much improved robustness.
\par \pard \qj\sa240\widctlpar {\b Interfaces are immutable}: Interfaces are never versioned, thus avoiding versioning problems. A new version of an interface, created by adding or removing functions or changing semantics, is an entirely new in
terface and is assigned a new unique identifier. Therefore a new interface does not conflict with an old interface even if all that changed is the semantics. Objects can, of course, support multiple interfaces simultane
ous; and they can have a single internal implementation of the common capabilities exposed through two or more similar interfaces, such as \ldblquote versions\rdblquote  (progressive revisions) of an interface. This approach of immu
table interfaces and multiple interfaces per object avoids versioning problems. 
\par \pard \qj\sa60\widctlpar Two additional points help to further reinforce the second point about the relationship of an object and its interfaces:
\par {\b Clients only interact with pointers to interfaces: }When a client has access to an object, it has nothing more than a pointer through which it can access the functions in the interface, called simply an {\i interface pointer}
. The pointer is opaque, meaning that it hides all aspects of internal implementation. You cannot see any details about the object such as its state information, as opposed to C++ {\i object pointers} through which a client may directly access the object
\rquote s data. In COM, the client can only call functions of the interface to which it has a pointer. But instead of being a restriction, this is what allows COM to provide the efficient binary standard that enables location transparency.
\par {\b Objects can implement multiple interfaces}: A object class can\emdash and typically does\emdash implement more than one interface. That is, the class has more than one set of services to provide from each object. For ex
ample, a class might support the ability to exchange data with clients as well as the ability to save its persistent state information (the data it would need to reload to return to its current state) into a file at the client\rquote 
s request. Each of these abilities is expressed through a different interface, so the object must implement two interfaces. 
\par Note that just because a class supports one interface, there is no general requirement that it supports any other. Interfaces are meant to be small contracts that are independent of one another. There are no contractual u
nits smaller than interfaces; if you write a class that implements an interface, your class must implement all the functions defined by that interface (the implementation doesn\rquote t always have to {\i do }
anything). Also note that an object may be attempting to conform to a higher specification than COM, such as a compound document standard like Microsoft\rquote s OLE Documents architecture. In such cases, the objects in ques
tion must implement specific groups of interfaces to conform to the OLE Documents specification for com
pound documents. It is then true that all compound document objects will always implement the same basic set of interfaces, but those interfaces themselves do not depend on the presence of the others. It is instead the clients of those objects that depend
 on the presence of all the interfaces.
\par The encapsulation of functionality into objects accessed through interfaces makes COM an open, extensible system. It is open in the sense that anyone can provide an implementation of a defined interface and anyon
e can develop an application that uses such interfaces, such as a compound document application. It is exten
sible in the sense that new or extended interfaces can be defined without changing existing applications and those applications that understand the new interfaces can exploit them while continuing to interoperate with older applications through the old in
terfaces.
\par {\*\bkmkstart _Toc298215731}{\*\bkmkstart _Toc306725093}{\*\bkmkstart _Toc324051519}{\*\bkmkstart _Toc324051703}{\*\bkmkstart _Toc324051946}{\pntext\pard\plain\b\i\fs22 1.4.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Object Pictures{\*\bkmkend _Toc298215731}{\*\bkmkend _Toc306725093}{\*\bkmkend _Toc324051519}{\*\bkmkend _Toc324051703}{\*\bkmkend _Toc324051946}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 It is convenient to adopt a standard pictorial representation for objects and their interfaces. The adopted convention is to draw each interface on an object as a \ldblquote plug-in jack.\rdblquote 
 These interfaces are generally drawn out the left or right side of a box representing the object as a whole as illustrated in Figure 1-3. If desired, the names of the interfaces are positioned next to the interface jack itself.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw17991\pich7990\picwgoal10200\pichgoal4530 \picscalex50\picscaley50 
0100090000033606000007003100000000000e00000026060f001200ffffffff00000800000034f994fc2409a8030a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0294fc34f9050000000c021407f00f31000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000036f997fc0e098f030e00000026060f001200ffffffff000008000000760297fc0e098f0307000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06a601a601a8032709affc8e02050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06a401a4018f030e0997fc7602050000001402000000001c000000fb0220ff0000000000
0090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a52007a04060000004f626a656374ae007d0032007c0070003e000400000002010200
0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e6fee7fdaeffaffe07000000fc020000000000020000040000002d01050004000000f0010300040000002d010200070000001804c8fec7fffffdfefe050000001402000000002d00000042010500000028000000080000
00080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa02060008000000000000020400
00002d01050004000000f0010100070000001804affeaeffe7fde6fe050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a6ff47fe7e024ffe040000002d01020007000000fc020100000000000000040000002d01010004000000f0010500040000
00f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010400030000001e00070000001604effe7e02a7fda6ff08000000fa0206000800000000000002040000002d010400050000001402
47fed6fc05000000130247fe4605040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e6fec7ffaeff8f0007000000fc020000000000020000040000002d010400070000001804a800c7ffdf
fffefe05000000140247fe46052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f00104000500000009020000
0002050000000102ffffff0208000000fa0206000800000000000002040000002d0104000700000018048f00aeffc7ffe6fe05000000140247fe46050a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a6ff27007e022f00040000002d010200040000002d010100040000
00f001040004000000f0010500030000001e00070000001604cf007e0287ffa6ff08000000fa0206000800000000000002040000002d0104000500000014022700d6fc05000000130227004605040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff01000000
00000e00000026060f001200ffffffff000008000000e6fea701aeff6f0207000000fc020000000000020000040000002d0104000700000018048802c7ffbf01fefe050000001402270046052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000
000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0104000700000018046f02aeffa701e6fe050000001402270046050a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a6ff07027e020f02040000002d010200040000002d01010004000000f001040004000000f0010500030000001e00070000001604af027e026701a6ff08000000fa0206000800000000000002040000002d01040005000000140207
02d6fc05000000130207024605040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fbfddefddffecdfe1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed
4e0338f70f037884c577000000000c000000b00bf87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a7dfe35fe010000004100680004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
0008000000fbfdc4ffdffeb3001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008007f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a
630035fe010000004201680004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fbfda101dffe90021c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000
002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a400235fe010000004300680004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000088fcc0fdb0fda80208000000
fa0206000800000000000002040000002d0105000c00000025030400a8fda00288fca00288fcc0fda8fdc0fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000036f991ff5afc80001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e
0338f70f037884c577000000000c000000d00af87f040000002d01060004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a300070f90a000000496e7465726661636573280058003000500038003000500050005000500004000000020102000a00
000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01010004000000f0010500040000002d01030004000000f001060003
0000000000000014022601fcff0500000013022601bb04040000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 1-3: A typical picture of an object that supports three interfaces A, B, and C.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The side from which interfaces extend is usually determined by the position of a client in the same picture, if applicable. If there 
is no client in the picture then the convention is for interfaces to extend to the left as done in Figure 1-3. With a client in the picture, the interfaces extend towards the client, and the client is understood to have a pointer to one or more of the int
erfaces on that object as illustrated in Figure 1-4.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw20108\pich5265\picwgoal11400\pichgoal2985 \picscalex50\picscaley50 
0100090000031b05000007003100000000000e00000026060f001200ffffffff00000800000024f78cf8f40836fd0a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b028cf824f7050000000c02aa04d01131000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000027f78ff8de0820fd0e00000026060f001200ffffffff00000800000027f78ff805fd20fd07000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c062401240139fd1efda7f83ff7050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c062201220120fd05fd8ff827f7050000001402000000001c000000fb0270ff0000000000
00bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b016f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320aa8fa4af906000000436c69656e746800280028005000580030000400000002010200
1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a55fb8af80b0000004170706c69
636174696f6e006800580058002800280050005000300028005800580004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001c0555f9de0800fc07000000fc020000000000020000040000002d01040004000000f0010300040000002d01020009000000
1c06aa00aa0019fcf7086df93405050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f0
01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c06a800a80000fcde0855f91c05050000001402000000001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577
000000000c000000c007f87f040000002d01010004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ad2fa1906060000004f626a65637470005800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e0000
0026060f001200ffffffff000008000000d9024efa7a03e6fa07000000fc020000000000020000040000002d01050004000000f0010300040000002d010200070000001804fffa930366faf102050000001402000000002d000000420105000000280000000800000008000000010001000000000020000000000000000000
0000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f0010400070000001804e6fa7a
034efad902050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007b0396fa18059efa040000002d01020007000000fc020100000000000000040000002d01040004000000f001050004000000f00103001c000000fb021000070000000000bc020000
00000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010100030000001e000700000016043efb1805f6f97b0308000000fa0206000800000000000002040000002d01010005000000140296fae60105000000130296faa506040000002d01020004
0000002d01040004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000018fd99faed02a1fa040000002d010200040000002d010400030000001e0007000000160441fba902f9f918fd08000000fa020600080000000000000204000000
2d01010005000000140299fa4bf705000000130299fab208040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a00000024030300e50299fa710275fa7102bcfa0a00000026060f000a00ffffffff0100000000000e00000026060f0012
00ffffffff00000800000076fee1fa4a017dfc1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008007f87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a80fb
b0fe09000000496e74657266616365fa28005800300050003800300050005000500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01060004000000f0010500040000002e011800050000000a
020000000005000000090200000002040000000201010012000000320a2dfce4fe07000000506f696e74657200600058002800580030005000380004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e5050040008000000
00000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01040004000000f0010100040000002d01030004000000f00106000300000000000000000000000000417200}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 1-4: Interfaces extend towards the clients connected to them.
\par \pard\plain \qj\sa60\keep\widctlpar \f4\fs20 In some circumstances a client may itself implement a small object to provide another object with functions to call on various events 
or to expose services itself. In such cases the client is also an object implementor and the object is also a client. Illustrations for such are similar to that in Figure 1-5.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw18362\pich5476\picwgoal10410\pichgoal3105 \picscalex50\picscaley50 
0100090000035d07000008003100000000000e00000026060f001200ffffffff00000800000090f7acffd40786040a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02acff90f7050000000c02da04441031000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000090f7afffbc0770040e00000026060f001200ffffffff00000800000060fd2001f800280108000000fa020500000000
0000000000040000002d01010007000000fc020100000000000000040000002d010200030000001e00070000001604c801b400800060fd08000000fa0206000800000000000002040000002d0103000500000014022001d0f905000000130220018004040000002d010100040000002d01020004000000f001030004000000
2701ffff07000000fc020000000000020000040000002d0103000a00000024030300f00020017a00fc007a0043010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000090f7dfff35fd700407000000fc020000000000020000040000002d01040004000000f0010300090000
001c062401240189044efdf7ffa8f7050000001402200180042d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000
f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400090000001c0622012201700435fddfff90f7050000001402200180040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000040f980014afc9803070000
00fc020000000000020000040000002d01050004000000f0010300040000002d010100090000001c0686008600b10363fc980158f9050000001402200180042d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f0010400090000001c068400840098034afc800140f9050000001402200180041c000000fb
0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ab302e1f9060000004f626a656374700058002800500050003000
04000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ecfd5e028dfef60207000000fc020000000000020000040000002d01060004000000f0010300040000002d0101000700000018040f03a6fe760204fe050000001402200180042d0000004201050000
002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800
000000000002040000002d01060004000000f0010500070000001804f6028dfe5e02ecfd050000001402200180040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004efca602ebfdae02040000002d010100040000002d01020004000000f001060004000000f00103001c
000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010400030000001e000700000016044e03ebfd06024efc08000000fa0206000800000000000002040000002d010400050000001402a60278ff0500
00001302a602b9fa040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a6f8210032fc10011c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f
037884c577000000000c000000c007f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320ac000e0f80b0000004170706c69636174696f6e006800580058002800280050005000300028005800580004000000020102000a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff0000080000001702afffbc07400407000000fc020000000000020000040000002d010500090000001c06240124015904d507c7ff2f02050000001402a602b9fa2d0000004201050000002800000008000000080000000100010000000000200000000000000000
000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c06220122014004bc07afff
1702050000001402a602b9fa0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003203e5fff406900207000000fc020000000000020000040000002d01070004000000f0010600040000002d010100090000001c06aa00aa00a9020d07fdff4a03050000001402a602b9fa2d
0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001070005000000090200000002050000000102ffffff020800
0000fa0206000800000000000002040000002d01070004000000f0010500090000001c06a800a8009002f406e5ff3203050000001402a602b9fa1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d006f87f040000002d01050004000000f0
010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a62012f04060000004f626a65637470005800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ef00de0090017601
07000000fc020000000000020000040000002d01040004000000f0010600040000002d0101000700000018048f01a901f6000701050000001402a602b9fa2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff000000770000
00ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f001070007000000180476019001de00ef00050000001402a602b9fa0a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff000008000000910126012e032e01040000002d010100040000002d01020004000000f001040004000000f0010600040000002d01030004000000f0010500030000001e00070000001604ce012e038600910108000000fa0206000800000000000002040000002d
0104000500000014022601fcff0500000013022601bb04040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004a03f102d606e0031c000000fb0270ff000000000000bc020000000000000000
417269616c000f0300ed4e0338f70f037884c577000000000c000000d006f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a900384030b0000004170706c69636174696f6e0068005800580028002800500050003000280058005800040000
00020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080fea0021802a802040000002d010100040000002d010200040000002d01030004000000f0010400030000001e00070000001604480318020002bcfe08000000fa0206000800000000000002040000002d01
0400050000001402a002a005050000001302a002f0fa040000002d010100040000002d01020004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a0000002403030081fea002f6fec302f6fe7c020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ff
ffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010100040000002d01020004000000f0010400030000000000780596fcdb0300}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 1-5: Two applications may connect to each other\rquote s objects, in which\line case they extend their interfaces towards each other.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Some objects may be acting as an intermediate between other clients in which case it is reasonable to draw the object with interfaces out both sides with clients on both sides. This is, however, a less frequent case than illustrating an objects connected 
to one client.
\par There is one interface that demands a little special attention: {\cs58\f5\fs16\lang1024 IUnknown}. This is the base interface of all othe
r interfaces in COM that all objects must support. Usually by implementing any interface at all an object also implements a set of {\cs58\f5\fs16\lang1024 IUnknown}
 functions that are contained within that implemented interface. In some cases, however, an object will implement {\cs58\f5\fs16\lang1024 IUnknown} by itself, in which case that interface is extended from the top of the object as shown in Figure 1-6.

\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw11138\pich5529\picwgoal6314\pichgoal3135 \picscalex61\picscaley61 
0100090000039b05000008003100000000000e00000026060f001200ffffffff00000800000088ff3000660916050a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02300088ff050000000c02e604de0931000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff0000080000008bff2f00660900050e00000026060f001200ffffffff000008000000e0078001e807780208000000fa020500000000
0000000000040000002d01010007000000fc020100000000000000040000002d010200030000001e00070000001604780288088001400708000000fa0206000800000000000002040000002d0103000500000014029000e0070500000013026003e007040000002d010100040000002d01020004000000f001030004000000
2701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ec045502ae08000507000000fc020000000000020000040000002d010300090000001c06aa00aa001905c7086d0204050500000014026003e0072d000000420105000000280000000800000008000000010001
0000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001030005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0103000900
00001c06a800a8000005ae085502ec040500000014026003e0071c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010010
000000320ad203e905060000004f626a65637470005800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a902de034a03760407000000fc020000000000020000040000002d01060004000000f0010400040000002d0101000700
000018048f046303f603c1020500000014026003e0072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f00106
0005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f001030007000000180476044a03de03a9020500000014026003e0070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004b032604e8042e040400
00002d010100040000002d01020004000000f001060004000000f00104001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010500030000001e00070000001604ce04e80486034b0308000000fa
0206000800000000000002040000002d0104000500000014022604b60105000000130226047506040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a902be024a03560307000000fc020000
000000020000040000002d0104000700000018046f036303d602c102050000001402260475062d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd0000
00040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040007000000180456034a03be02a902050000001402260475060a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004b03
0603e8040e03040000002d010100040000002d01020004000000f001040004000000f0010500030000001e00070000001604ae03e80466024b0308000000fa0206000800000000000002040000002d0104000500000014020603b60105000000130206037506040000002d010100040000002d01020004000000f001040004
0000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009c07f90034089a0107000000fc020000000000020000040000002d010400070000001804b3014d081101b407050000001402060375062d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400070000
0018049a013408f9009c07050000001402060375060a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000086062f0066090b011c000000fb0280ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000002015f87f0400
00002d010600040000002e011800050000000a020000000005000000090200000002040000000201010013000000320ac000c0060800000049556e6b6e6f776e24005c004e0047004f004e0063004f0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000
008bffff02640275041c000000fb0280ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320a90034900
050000004f746865720064002a004e004800310004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000002015f87f040000002d01060004000000f0010700040000002e011800050000000a0200000000050000000902000000
02040000000201010016000000320a2a04c5ff0a000000496e746572666163657324004e002a00480031002b00470047004800470004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e5050040008000000000000000000
00000a00000026060f000a00ffffffff010000000000040000002d010100040000002d01020004000000f001040004000000f0010500040000002d01030004000000f00106000300000000007884c577000000000c0000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 1-6: The {\cs58\f5\fs16\lang1024 IUnknown} interface extends from the\line top of objects by convention.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In order to use an interface on a object, a client needs to know what it would want to do with that interface\emdash that\rquote 
s what makes it a client of an interface rather than just a client of the object. In the \ldblquote plug-in jack\rdblquote 
 concept, a client has to have the right kind of plug to fit into the interface jack in order to do anything with the object through the inter
face. This is like having a stereo system which has a number of different jacks for inputs and outputs, such as a \'bc\rdblquote  stereo jack for headphones, a coax input for an external CD player, and standard RCA connectors for
 speaker output. Only headphones, CD players, and speakers that have the matching plugs are able to plug into the stereo object and make use of its services. Objects and interfaces in COM work the same way.
\par {\*\bkmkstart _Toc298215732}{\*\bkmkstart _Toc306725094}{\*\bkmkstart _Toc324051520}{\*\bkmkstart _Toc324051704}{\*\bkmkstart _Toc324051947}{\pntext\pard\plain\b\fs22 1.4.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Objects with Multiple Interfaces and {\i0 QueryInterface{\*\bkmkend _Toc298215732}{\*\bkmkend _Toc306725094}{\*\bkmkend _Toc324051520}{\*\bkmkend _Toc324051704}{\*\bkmkend _Toc324051947}
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 
In COM, an object can support multiple interfaces, that is, provide pointers to more than one grouping of functions. Multiple interfaces is a fundamental innovation of COM as the ability for such avoids versioning problems (interfaces are immutab
le as described earlier) and any strong association between an interface and an object class. Multiple interfaces is a great improvement over systems in which each object only has one massive interface, and that interface is a collection of everything the
 object does. Therefore the identity of the object is strongly tied to the exact interface, which introduces the versioning problems once again. Multiple interfaces is the cleanest way around the issue altogether.
\par The existence of multiple interfaces does, however, bring up a very important question. When a client initially gains access to an object, by whatever means, that client is given {\i one} {\i and only one }
interface pointer in return. How, then, does a client access the other interfaces on that same object?
\par The answer is a member function called {\cs58\f5\fs16\lang1024 QueryInterface} that is present in all COM interfaces and can be called on any interface polymorphically. {\cs58\f5\fs16\lang1024 QueryInterface} is the basis for a process called {\i 
interface negotiation} whereby the client asks the object what services it is capable of providing. The question is asked by calling {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }
and passing to that function the unique identifier of the interface representing the services of interest.
\par Here\rquote s how it works: when a client initially gains access to an object, that client will receive at minimum an {\cs58\f5\fs16\lang1024 IUnknown}{\i  }
interface pointer (the most fundamental interface) through which it can only control the lifetime of the object\emdash tell the object when it is done using the object\emdash and invoke {\cs58\f5\fs16\lang1024 QueryInterface}. The client is pro
grammed to ask each object it manages to perform some operations, but the {\cs58\f5\fs16\lang1024 IUnknown}{\i  }interface has no func
tions for those operations. Instead, those operations are expressed through other interfaces. The client is thus programmed to negotiate with objects for those interfaces. Specifically, the client will ask each object\emdash by calling {
\cs58\f5\fs16\lang1024 QueryInterface}{\i \emdash }for an interface through which the client may invoke the desired operations.
\par Now since the object implements {\cs58\f5\fs16\lang1024 QueryInterface}, it has the ability to accept or reject the request. If the object accepts the client\rquote s request, {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }
returns a new pointer to the requested interface to the client. Through that interface pointer the client thus has access to the functions in that interface. If, on the other hand, the object rejects the client\rquote s request, {\cs58\f5\fs16\lang1024 
QueryInterface}{\i  }returns a null pointer\emdash an error\emdash and the client has no pointer through which to call the desired functions. An illustration of both success and error cases is shown in Figure 1-7 where the client init
ially has a pointer to interface A and asks for interfaces B and C. While the object supports interface B, it does not support interface C.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw16880\pich11377\picwgoal9570\pichgoal6450 \picscalex50\picscaley50 
010009000003270b000008003100000000000e00000026060f001200ffffffff000008000000ecf8e6fbe007fa050a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02e6fbecf8050000000c02140af40e31000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000ecf8e8fbc707fb050e00000026060f001200ffffffff00000800000005043efec707f10107000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06ec00ec000a02e00756fe1d04050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06ea00ea00f101c7073efe0504050000001402000000001c000000fb0270ff0000000000
00bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000800af87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a3f000205060000004f626a6563747000580028005000500030000400000002010200
0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c201c7ff63025f0007000000fc020000000000020000040000002d01050004000000f0010300040000002d01020007000000180478007c02dfffda01050000001402000000002d00000042010500000028000000080000
00080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa02060008000000000000020400
00002d01050004000000f00101000700000018045f006302c7ffc201050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000064020f0001041700040000002d01020007000000fc020100000000000000040000002d01010004000000f0010500040000
00f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010400030000001e00070000001604b70001046fff640208000000fa0206000800000000000002040000002d010400050000001402
0f00cf000500000013020f008e05040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c201d7fe63026fff07000000fc020000000000020000040000002d01040007000000180488ff7c02ef
feda010500000014020f008e052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f00104000500000009020000
0002050000000102ffffff0208000000fa0206000800000000000002040000002d0104000700000018046fff6302d7fec2010500000014020f008e050a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000064021fff010427ff040000002d010200040000002d010100040000
00f001040004000000f0010500030000001e00070000001604c7ff01047ffe640208000000fa0206000800000000000002040000002d0104000500000014021fffcf000500000013021fff8e05040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff01000000
00000e00000026060f001200ffffffff00000800000051025cfe35034bff1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d010400040000002e011800050000000a0200000000050000000902000000020400000002
01010009000000320afbfe8b02010000004100680004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000051025bff35034a001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c00
0000800af87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320afaff8b02010000004201680004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ecf835
fe98fdd80207000000fc020000000000020000040000002d010400090000001c0628012801f102b1fd4dfe04f90500000014021fff8e052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd00
0000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400090000001c0626012601d80298fd35feecf80500000014021fff8e051c000000fb0270ff000000000000bc020000000000
000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01070004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320aae0076fa06000000436c69656e746800280028005000580030000400000002010200
0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000090fd0dff8b0118ff040000002d010200040000002d01010004000000f001040004000000f0010600040000002d01030004000000f0010700030000001e00070000001604b8ff47016dfe90fd08000000fa020600080000
0000000002040000002d01040005000000140213ff9df90500000013020aff7605040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a0000002403030083010dff0d01e9fe0d0130ff0a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff00000800000096fd060091011100040000002d010200040000002d01010004000000f0010400030000001e00070000001604b1004d0166ff96fd08000000fa0206000800000000000002040000002d0104000500000014020c00a3f905000000130203007c05040000002d010200040000
002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300890106001301e2ff130129000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d2fbe8fb6bffbcfd1c000000fb0290ff000000000000bc02
0000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a6afc5dfc0c000000506f696e74657220746f20414b0044001f00450025003e002c001f0025
0045001f00510004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000
320af0fc5dfc0b0000006f627461696e6564206f6e414400450025003e00200044003e0045001f004400450004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01050004000000f0010600040000
002e011800050000000a02000000000500000009020000000204000000020101001e000000320a76fd0cfc0f0000006f626a656374206372656174696f6e00440045001f003e003f0025001f003e002c003e003e0026001f004400450004000000020102000a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff00000800000016ffe8fc9800e8fe08000000fa0206000800000000000002040000002d010600040000002d0101000b0000001708e8fc1affe4fe9800e0009800e8fc9cfd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009cfd2f01e8fe3a01040000
002d010200040000002d01010004000000f001060004000000f0010400040000002d01030004000000f0010500030000001e00070000001604da01e8fe8f009cfd08000000fa0206000800000000000002040000002d0104000500000014022c0158fc05000000130235012400040000002d010200040000002d0101000400
0000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000eefedd003100a5011c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01040004
0000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a5f0128ff040000006e756c6c440045001f001f0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fa00ed025a05c1041c000000fb0290ff0000
00000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a6f03e8010c000000506f696e74657220746f20424b0044
001f00450025003e002c001f00250045001f00510004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000
000204000000020101001b000000320af503b0010d0000006f627461696e65642066726f6d014400450025003e00200044003e0045001f0025002c004400640004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f8
7f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a7b043401040000004192732051001f003e001f0004000000020102001c000000fb0290ff000000000000bc02ff00000000000022417269616c000f0300ed4e0338f70f03
7884c577000000000c000000d01af87f040000002d01040004000000f00105000500000009020000000204000000020101001c000000320a7b0401020e0000005175657279496e74657266616365570045003e002b003f001f00440026003e002b0026003e003e003f0004000000020102000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000a2004800a601cf0208000000fa0206000800000000000002040000002d0105000b0000001708cf02a2014c00a200cf02a202c9fda2000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001efba103b1fe
fb051c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01060004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a2304a6fb0c000000506f69
6e74657220746f20434b0044001f00450025003e002c001f00250045001f00510004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010600040000002e011800050000000a02
000000000500000009020000000204000000020101001b000000320aa90490fb0d0000006e6f7420617661696c61626c65004400450025001f003f003e003e001f001f003f0044001f003e0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c5
77000000000c000000e00cf87f040000002d01060004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a2f0581fb0d00000066726f6d2041206f72204292730025002c00440064001f0051001f0044002c001f0051001f003e000400000002010200
1c000000fb0290ff000000000000bc02ff00000000000022417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320ab50558fb0e0000005175657279
496e74657266616365570045003e002b003f001f00440026003e002b0026003e003e003f0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003efeb00181ff5b040b0000001708b40181ff5b0442fe5b0481ff0dff03fd0a00000026060f000a00ffff
ffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01010004000000f0010500040000002d01030004000000f0010400030000000000360035001b
0035003500300030003600300000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 1-7: Interface negotiation means that a client must ask an object for an interface\line pointer that is the only way a client can invoke functions of that interface.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A key point is that when an object rejects a call to {\cs58\f5\fs16\lang1024 QueryInterface}
, it is impossible for the client to ask the object to perform the operations expressed through the requested interface. A client {\i must} h
ave an interface pointer to invoke functions in that interface, period. If the object refuses to provide one, a client must be prepared to do without, simply failing whatever it had intended to do with that object. Had the object sup
ported that interface, the client might have done something useful with it. Compare this with other object-oriented systems where you cannot know whether or not a function will work until you call that function, and even then, handling of failure is uncer
tain. {\cs58\f5\fs16\lang1024 QueryInterface} provides a reliable and consistent way to know before attempting to call a function.
\par {\*\bkmkstart _Toc298215733}{\*\bkmkstart _Toc306725095}{\pntext\pard\plain\b\fs20\lang1024 1.4.3.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 
Robustly Evolving Functionality Over Time{\*\bkmkend _Toc298215733}{\*\bkmkend _Toc306725095}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Recall that an important feature of COM is the ability for functionality to evolve over time. This is not just important for COM, but important for all applications. {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }
is the cornerstone of that feature as it allows a client to ask an object \ldblquote do you support functionality X?\rdblquote  It allows the client to implement code that will use this functionality {\i if and only if}
 an object supports it. In this manner, the client easily maintains compatibility with objects written before and after the \ldblquote X\rdblquote  functionality was available, and does so in a ro
bust manner. An old object can reliably answer the question \ldblquote do you support X\rdblquote  with a \ldblquote no\rdblquote  whereas a new object can reliably answer \ldblquote yes.\rdblquote  Because the question is asked by calling {
\cs58\f5\fs16\lang1024 QueryInterface} and therefore on a contract-by-contract basis instead of an individual function-by-function basis, COM is very efficient in this operation.
\par To illustrate the {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }
cornerstone, imagine a client that wishes to display the contents of a number of text files, and it knows that for each file format (ASCII, RTF, Unicode, etc.) there is some object class associated with that format. Besides a basic interface like {
\cs58\f5\fs16\lang1024 IUnknown}, which we\rquote 
ll call interface A, there are two others that the client wishes to use to achieve its ends: interface B allows a client to tell an object to load some information from a file (or to save it), and interface C allows a client to request a graphical ren
dering of whatever data the object loaded from a file and maintains internally.
\par With these interfaces, the client is then programmed to process each file as follows:
\par {\pntext\pard\plain\fs20 1.\tab}\pard \qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}Find the object class associated with a the file format.
\par {\pntext\pard\plain\fs20 2.\tab}Instantiate an object of that class obtaining a pointer to a basic interface A in return.
\par {\pntext\pard\plain\fs20 3.\tab}Check if the object supports loading data from a file by calling interface A\rquote s {\cs58\f5\fs16\lang1024 QueryInterface} function requesting a pointer to interface B. If successfu
l, ask the object to load the file through interface B.
\par {\pntext\pard\plain\fs20 4.\tab}Check if the object supports graphical rendering of its data by calling interface A or B\rquote s {\cs58\f5\fs16\lang1024 Query\-nterface} function (doesn\rquote 
t matter which interface, because queries are uniform on the object) requesting a pointer to interface C. If successful, ask the object for a graphic of the file contents that the client then displays on the screen.
\par \pard \qj\sa60\widctlpar If an object class exists for every file format in the client\rquote s file list, and all those objects implement interfac
es A, B, and C, then the client will be able to display all the contents of all the files. But in an imperfect world, let\rquote s say that the object class for the ASCII text formats does not support interface C, that is, the ob
ject can load data from a file and save it to another file if necessary, but can\rquote t supply graphics. When the client code, written as described above, encounters this object, the {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }
for interface C fails, and the client cannot display the file contents. Oh well...
\par Now the programmers of the object class for ASCII realizes that they are losing market share because they don\rquote 
t support graphics, and so they update the object class such that it now supports interface C. This new object is installed on the machine alone with the clien
t application, but nothing else changes in the entire system. The client code remains exactly the same. What now happens the next time someone runs the client?
\par The answer is that the client {\i immediately begins to use interface C on the updated object}. Where before the object failed {\cs58\f5\fs16\lang1024 QueryInterface}
 when asked for interface C, it now succeeds. Because it succeeds, the client can now display the contents of the file that it previously could not.
\par Here is the raw power of {\cs58\f5\fs16\lang1024 QueryInterface}: a client can be written to take advantage of as much functionality as it would {\i ideally }
like to use on every object it manages. When the client encounters an object that lacks the ideal support, the client can use as much functionality as is available on that given object. When the o
bject it later updated to support new interfaces, the same exact code in the client, without any recompilation, re
deployment, or changes whatsoever, automatically begins to take advantage of those additional interfaces. This is true component software. This is true evolution of components independently of one another and retaining full compatibility.
\par Note that this process also works in the other direction. Imagine that since the client application above was shipped, all the objects for rendering text into 
graphics were each upgraded to support a new interface D through which a client might ask the object to spell-check the text. Each object is upgraded independently of the client, but since the client never queries for interface D, the objects all continue
 to work perfectly with just interfaces B and C. In this case the objects support more functionality than the client, but still re
tain full compatibility requiring absolutely no changes to the client. The client, at a later date, might then implement code t
o use interface D as well as code for yet a newer interface E (that supports, say, language translation). That client begins to immediately use interface D in all existing objects that support it, without requiring any changes to those objects whatsoever.

\par This process continues, back and forth, ad infinitum, and applies not only to new interfaces with new func
tionality but also to improvements of existing interfaces. Improved interface are, for all practical purposes, a brand-new interface because any change to any interface requires a new interface identifier. A new identi
fier isolates an improved interface from its predecessor as much as it isolates unrelated interfaces from each other. There is no concept of \ldblquote version\rdblquote  because the interfaces are totally different in identity.
\par So up to this point there has been this problem of versioning, presented at the beginning of this chapter, that made independent evolution of clients and objects practically impossible. But now, for all time, {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }
solves that problem and removes the barriers to rapid software innovation without the growing pains.
\par {\*\bkmkstart _Toc298215734}{\*\bkmkstart _Toc306725096}{\*\bkmkstart _Toc324051521}{\*\bkmkstart _Toc324051705}{\*\bkmkstart _Toc324051948}{\*\bkmkstart _Toc335191152}{\*\bkmkstart _Toc339182924}{\pntext\pard\plain\b 1.5\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Clients, Servers, and Object Implementors{\*\bkmkend _Toc298215734}{\*\bkmkend _Toc306725096}{\*\bkmkend _Toc324051521}
{\*\bkmkend _Toc324051705}{\*\bkmkend _Toc324051948}{\*\bkmkend _Toc335191152}{\*\bkmkend _Toc339182924}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The interaction between objects and the users of those objects in COM is based on a client/server model. This chapter has already been using the term \lquote client\rquote 
 to refer to some piece of code that is using the services of an object. Because an object supplies services, the implementor of that object is usually called the \ldblquote server,\rdblquote  the one who serves those capabilities. A clie
nt/server architecture in any computing environment leads to greater robustness: if a server process crashes or is otherwise disconnected from a client, the client can handle that problem gracefully and even restart the server if necessary. As robustness 
is a primary goal in COM, then a client/server model naturally fits.
\par However, there is more to COM than just clients and servers. There are also {\i object implementors}, or some program structure that implements an object of some kind with one or more interface
s on that object. Sometimes a client wishes to provide a mechanism for an object to call back to the client when specific events occur. In such cases, COM specifies that the client itself implements an object and hands that object\rquote 
s first interface pointer to the other object outside the client. In that sense, both sides are clients, both sides are servers in some way. Since this can lead to confusion, the term \ldblquote server\rdblquote 
 is applied in a much more specific fashion leading to the following definitions that apply in all of COM:
\par \pard \qj\fi-720\li1080\sa60\widctlpar {\b Object}\tab A unit of functionality that implements one or more interfaces to expose that functionality. For convenience, the word is used both to refer to an object class as well as an individual instan
tiation of a class. Note that an object class does not need a class identifier in the COM sense such that other applications can instantiate objects of that class\emdash 
the class used to implement the object internally has no bearing on the externally visible COM class identifier.
\par {\b Object Implementor}\tab A
ny piece of code, such as an application, that has implemented an object with any interfaces for any reason. The object is simply a means to expose functions outside the particular application such that outside agents can call those functions. Use of 
\ldblquote object\rdblquote  by itself implies an object found in some \ldblquote object implementor\rdblquote  unless stated otherwise.
\par {\b Client}\tab There are two definitions of this word. The general definition is any piece of code that is using the services of some object, wherever that object might be implemented. A client of this sort is also called an \ldblquote object user.
\rdblquote  The second definition is the active agent (an application) that drives the flow of operation between itself an other objects and uses specific COM \ldblquote implementation locator\rdblquote 
 services to instantiate or create objects through servers of various object classes.
\par {\b Server}\tab A piece of code that st
ructures an object class in a specific fashion and assigns that class a COM class identifier. This enables a client to pass the class identifier to COM and ask for an object of that class. COM is able to load and run the server code, ask the sever to crea
te an object of the class, and connect that new object to the client. A server is specifically the neces
sary structure around an object that serves the object to the rest of the system and associates the class identifier: a server is not the object itself. The word \ldblquote server\rdblquote 
 is used in discussions to emphasize the serving agent more than the object. The phrase \ldblquote server object\rdblquote  is used specifically to identify an object that is implemented in a server when the context is appropriate.
\par \pard \qj\sa60\widctlpar 
Putting all of these pieces together, imagine a client application that initially uses COM services to create an object of a particular class. COM will run the server associated with that class and have it create an object, returning an interface pointer 
to the client. With that interface pointer the client can query for any other interface on the object. If a client wants to be notified of events that happen in the object in the server, such as a data change, the client itself will implement an 
\ldblquote event sink\rdblquote  object and pass the interface pointer to that sink to the server\rquote s object th
rough an interface function call. The server holds onto that interface pointer and thus itself becomes a client of the sink object. When the server object detects an appropriate event, it calls the sink object\rquote 
s interface function for that even. The overall configuration created in this scenario is much like that shown earlier in Figure 1-5. There are two primary modules of code (the original client and the server) who both implement objects and who both a
ct in some aspects as clients to establish the configuration.
\par When both sides in a configuration implement objects then the definition of \ldblquote client\rdblquote  is usually the second one meaning the active agent who drives the flow of operation between all objects, even 
when there is more than one piece of code that is acting like a client of the first definition. This specification endeavors to provide enough context to make it clear what code is responsible for what services and operations.
\par {\*\bkmkstart _Toc298215735}{\*\bkmkstart _Toc306725097}{\*\bkmkstart _Toc324051522}{\*\bkmkstart _Toc324051706}{\*\bkmkstart _Toc324051949}{\pntext\pard\plain\b\i\fs22 1.5.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Server Flavors: In-Process and Out-Of-Process{\*\bkmkend _Toc298215735}{\*\bkmkend _Toc306725097}{\*\bkmkend _Toc324051522}{\*\bkmkend _Toc324051706}{\*\bkmkend _Toc324051949}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As defined in the last section, a \ldblquote server\rdblquote  in general is some piece of code that structures some object in such a way that COM \ldblquote implementor locator\rdblquote 
 services can run that code and have it create objects. The section below entitled \ldblquote The COM Library\rdblquote  expands on the specific responsibilities of COM in this sense.
\par Any specific server can be implemented in one of a number of flavors depending on the structure of the code module and its relationship to the client process that will be using it. A server is either \ldblquote in-process\rdblquote  which means it\rquote 
s code executes in the same process space as the client, or \ldblquote out-of-process\rdblquote  which means it runs in another process on the same machine or in another process on a remote machine. These three types of servers are called \ldblquote 
in-process,\rdblquote  \ldblquote local,\rdblquote  and \ldblquote remote\rdblquote  as defined below:
\par \pard \qj\fi-720\li1080\sa60\widctlpar {\b In-Process Server}\tab A server that can be loaded into the client\rquote s process space and serves \ldblquote in-process objects.\rdblquote 
 Under Microsoft Windows and Microsoft Windows NT, these are implemented as \ldblquote dynamic link libraries\rdblquote  or DLLs. This specification uses {\b DLL}
 as a generic term to describe any piece of code that can be loaded in this fashion which will, of course, differ between operating systems.
\par {\b Local Server}\tab A server that runs in a separate process on the same machine as the client and serves \ldblquote local objects.\rdblquote  This type of server is another complete application of its own thus defining the separate {\b process}
. This specification uses the terms \ldblquote {\b EXE}\rdblquote  or \ldblquote {\b executable}\rdblquote  to describe an application that runs in its own process as opposed to a DLL which must be loaded into an existing process.
\par {\b Remote Server}\tab A server that runs on a separate machine and therefore always runs in another process as well to serve \ldblquote {\b remote} objects.\rdblquote    Remote servers may be implemented in
 either DLLs or EXEs; if a remote server is implemented in a DLL, a surrogate process will be created for it on the remote machine.
\par \pard \qj\sa60\widctlpar Note that the same words \ldblquote in-process,\rdblquote  \ldblquote local,\rdblquote  and \ldblquote remote\rdblquote  are used in this specification as a qualifier for the word \ldblquote object\rdblquote 
 where emphasis is on the object more than the server.
\par Object implementors choose the type of server based on the requirements of implementation and deployment. COM is designed to handle all situations from those that require the deployment of many sma
ll, lightweight in-process objects (like controls, but conceivably even smaller) up to those that require deployment of a huge central corporate database server. Furthermore, COM does so in a transparent fashion, with what is called {\i 
location transparency,} the topic of the next section.
\par {\*\bkmkstart _Toc298215736}{\*\bkmkstart _Toc306725098}{\*\bkmkstart _Toc324051523}{\*\bkmkstart _Toc324051707}{\*\bkmkstart _Toc324051950}{\pntext\pard\plain\b\i\fs22 1.5.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Location Transparency{\*\bkmkend _Toc298215736}{\*\bkmkend _Toc306725098}{\*\bkmkend _Toc324051523}{\*\bkmkend _Toc324051707}{\*\bkmkend _Toc324051950}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM is designed to allow clients to {\i transparently }communicate with objects regardless of where those objects are running, be it the same process, the same machine, or a different machine. What thi
s means is that there is a {\i single programming model} for all types of objects for not only clients of those objects but also for the servers of those objects.
\par From a client\rquote s point of view, all objects are access through interface pointers. A pointer must be in-process, and in fact, any call to an interface function always reaches {\i some}
 piece of in-process code first. If the object is in-process, the call reaches it directly, with no intervening system-infrastructure code. If the object is out-of-process, then the call first reaches what is called a \ldblquote proxy\rdblquote 
 object provided by COM itself which generates the appropriate remote procedure call to the other process or the other machine.
\par From a server\rquote s point of view, all calls to an object\rquote 
s interface functions are made through a pointer to that interface. Again, a pointer only has context in a single process, and so the caller must always be some piece of in-process code. If the object 
is in-process, the caller is the client itself. Otherwise, the caller is a \ldblquote stub\rdblquote  object provided by COM that picks up the remote procedure call from the \ldblquote proxy\rdblquote 
 in the client process and turns it into an interface call to the server object.
\par As far as both clients and servers know, they always communicate directly with some other in-process code as illustrated in Figure 1-8.
\par The bottom line is that {\i dealing with in-process or remote objects is transparent and identical to dealing with in-process objects}. This location transparency has a number of key benefits:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}{\b A common solution to problems that are independent of the distance between client and server}
: For example, connection, function invocation, interface negotiation, feature evolution, and so forth.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\b Programmers leverage their learning}
: New services are simply exposed through new interfaces, and once programmers learn how to deal with interfaces, they already know how to deal with new services that will be created in the future. This is a great improvement over environments where each 
service is exposed in a completely different fashion.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\b Systems implementation is centralized}
: The implementors of COM can focus on making the central process of providing this transparency as efficient and powerful as possible such that every piece of code that uses COM benefits immensely.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li720\sa240\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}{\b Interface designers focus on design}
: In designing a suite of interfaces, the designers can spend their time in the essence of the design\emdash the contracts between the parties\emdash without having to think about the underlying communication mechanisms for any interoperabilit
y scenario. COM provides those mechanisms for free and transparently.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw24288\pich14763\picwgoal13770\pichgoal8370 \picscalex60\picscaley60 
010009000003221e000008003100000000000e00000026060f001200ffffffff000008000000b0f59cfa340bb0070a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b029cfab0f5050000000c02140d841531000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000b2f59afa380bb0070e00000026060f001200ffffffff000008000000b2f59afa260058050e00000026060f001200ff
ffffff0000080000005afc20ffbafea40407000000fc020000000000020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0698009800b504cbfe30ff6afc050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000
000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0696009600a404ba
fe20ff5afc050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fafbfafadaff74fe07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06de00de0085feebff0afb0afc0500000014020000
00002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff
0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c06dc00dc0074fedafffafafafb050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003cfc6ffb26ff84fd07000000fc02000000000002000004000000
2d01010004000000f0010300040000002d010200090000001c068500850095fd37ff7ffb4cfc050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077
000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400090000001c068300830084fd26ff6ffb3cfc050000001402000000001c000000fb02a0ff000000000000bc0200000000
00000000417269616c000f0300ed4e0338f70f037884c577000000000c000000800af87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a58fcb7fc0a000000496e2d50726f636573731b003a002000400026003a003600350035003600040000
00020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320acbfc17fd06000000
4f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000018f6f8fcc2f92a0007000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06cc00cc003b00d3f908
fd28f6050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f00104000500000009020000
0002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c06ca00ca002a00c2f9f8fc18f6050000001402000000001c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008018f8
7f040000002d01010004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a67fe45f706000000436c69656e745c001d001c0048004700230004000000020102001c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed
4e0338f70f037884c577000000000c000000d00af87f040000002d01050004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a01ffb0f60b0000004170706c69636174696f6e005500480047001c001d004000470023001d00470047000400000002
0102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000bdf93effbafbe2ff040000002d01020007000000fc020100000000000000040000002d01010004000000f001040004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d
000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010500030000001e00070000001604820076fb9efebdf908000000fa0206000800000000000002040000002d010400050000001402a2fec8f70500000013027600a7fd040000002d010200040000002d01010004000000f0
010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300b2fbdaff4afb96ff36fbd8ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000aef92cfc60fb36fd040000002d010200040000002d01010004000000f00104000300
00001e0007000000160436fd1cfb50fcaef908000000fa0206000800000000000002040000002d01040005000000140230fe04f80500000013022afb02fd040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a0000002403030058fb2b
fce0fa4bfc04fb87fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000095fc80ff6afe140107000000fc020000000000020000040000002d01050004000000f0010400090000001c066500650025017bfe90ffa5fc0500000014022afb02fd2d0000004201050000002800
000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000
000002040000002d010500090000001c066300630014016afe80ff95fc0500000014022afb02fd1c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000800af87f040000002d010600040000002e011800050000000a0200000000050000000902
0000000204000000020101000f000000320a06001dfd050000004c6f63616c002c002c0028002800140004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008018f87f040000002d01070004000000f0010600040000002e
011800050000000a020000000005000000090200000002040000000201010010000000320a5c000bfd060000004f626a65637438002c00140028002800180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000800af87f
040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320ab20017fd0500000050726f78790030001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
0000005cfbedfb47fc58fc0e00000026060f001200ffffffff0000080000005cfbedfbc0fb58fc040000002d01020005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f001050007000000180458fcc0fbedfb5cfb0500000014022afb02fd0a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8fb20fc47fc28fc040000002d010200040000002d01010004000000f001070004000000f0010400040000002d01030004000000f0010600030000001e00070000001604c8fc47fc80fbb8fb08000000fa02060008000000000000
02040000002d01040005000000140220fc31fb05000000130220fcc6fc040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b0fcbc0285fe
500407000000fc020000000000020000040000002d010400090000001c0665006500610496fecc02c0fc05000000140220fcc6fc2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff
00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400090000001c0663006300500485febc02b0fc05000000140220fcc6fc1c000000fb02b8ff000000000000bc020000000000000000
417269616c000f0300ed4e0338f70f037884c577000000000c0000008018f87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a420312fd0600000052656d6f74653400280040002c001800280004000000020102001c000000fb02b8ff000000
000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a980326fd060000004f626a65637438002c00140028002800
180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008018f87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320aee0332
fd0500000050726f78796530001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005cfba7fc47fc12fd0e00000026060f001200ffffffff0000080000005cfba7fcc0fb12fd040000002d0102000500000009020000000205000000
0102ffffff0208000000fa0206000800000000000002040000002d01070004000000f001040007000000180412fdc0fba7fc5cfb05000000140220fcc6fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8fbdafc47fce2fc040000002d010200040000002d01010004
000000f001070004000000f0010500040000002d01030004000000f0010600030000001e0007000000160482fd47fc3afcb8fb08000000fa0206000800000000000002040000002d010400050000001402dafc31fb050000001302dafcc6fc040000002d010200040000002d01010004000000f0010400040000002701ffff
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b6fbbfffa1fc2a000e00000026060f001200ffffffff000008000000b6fbbfff1afc2a002d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018042a001afcbfffb6fb0500
00001402dafcc6fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000012fcf2ffa1fcfaff040000002d010200040000002d01010004000000f001050004000000f0010400030000001e000700000016049a00a1fc52ff12fc08000000fa0206000800000000000002040000
002d010400050000001402f2ff8bfb050000001302f2ff20fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b6fb6700a1fcd2000e00
000026060f001200ffffffff000008000000b6fb67001afcd2002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d010400050000
00090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804d2001afc6700b6fb050000001402f2ff20fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000012fc9a00a1fca200040000002d010200040000002d01
010004000000f001050004000000f0010400030000001e000700000016044201a1fcfaff12fc08000000fa0206000800000000000002040000002d0104000500000014029a008bfb0500000013029a0020fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffff
ff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cefbf502b9fc60030e00000026060f001200ffffffff000008000000cefbf50232fc60032d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000
00000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804600332fcf502cefb0500000014029a0020fd0a00000026
060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002afc2803b9fc3003040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604d003b9fc88022afc08000000fa0206000800000000000002040000002d0104000500000014022803
a3fb050000001302280338fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cefba303b9fc0e040e00000026060f001200ffffffff00
0008000000cefba30332fc0e042d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102
ffffff0208000000fa0206000800000000000002040000002d0105000700000018040e0432fca303cefb050000001402280338fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002afcd603b9fcde03040000002d010200040000002d01010004000000f0010500040000
00f0010400030000001e000700000016047e04b9fc36032afc08000000fa0206000800000000000002040000002d010400050000001402d603a3fb050000001302d60338fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a0000002606
0f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000026fca5fdd2ff5afe1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008018f87f040000002d010400040000002e011800050000000a0200000000050000
00090200000002040000000201010021000000320a18fe60fc11000000496e2d50726f6365737320536572766572001b003a002000400026003a0036003500350036001b0040003500250036003500250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800
0000f8fc890154fe3e021c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320afc0132
fd03000000434f4d0045004b00500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000aef91000d8fb0c03040000002d010200040000002d010100040000002d01030004000000f0010500030000001e00070000001604c802a5fb1000aef908000000
fa0206000800000000000002040000002d0104000500000014021cfd8cf7050000001302f805f2fd040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300d0fb0503a8fb920270fbba020a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000b2f59afa2600580508000000fa0206000800000000000002040000002d010500040000002d010100070000001b04580526009afab2f5070000001b0448051600aafac2f50a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff00000800000014f6d9fa30fac8fb1c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a78fb4ef60e
000000436c69656e742050726f636573736800200020005000500028002800600030005000480050004800480004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006000f3fea701a8ff1c000000fb02
a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000800af87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a66ff9a00030000005250430145004000460004
000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000024004f046b0104051c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01060004000000f0010700
040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320ac2045e0003000000525043ff45004000460004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80130fb900a08000e00000026060f001200ff
ffffff000008000000520632fc320aacff07000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c06de00de00bdff430a42fc6206050000001402f805f2fd2d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000
00000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c06dc00dc00acff320a32fc5206050000001402f805f2fd0a00000026060f000a
00ffffffff0100000000000e00000026060f001200ffffffff0000080000009406a7fc7e09bcfe07000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c0685008500cdfe8f09b7fca406050000001402f805f2fd2d000000420105000000280000000800000008000000
0100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c0683008300bcfe7e09a7
fc9406050000001402f805f2fd1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000800af87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320a
90fd8707050000004c6f63616c003b003a00360035001b0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009
0200000002040000000201010010000000320a03fe6f07060000004f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b40525fd9f0690fd0e00000026060f001200ffffffff000008000000b40525fd1806
90fd040000002d01020005000000090200000002050000000102ffffff02040000002d01050007000000180490fd180625fdb405050000001402f805f2fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000100658fd9f0660fd040000002d010200040000002d01010004
000000f001050004000000f0010400040000002d01030004000000f0010600030000001e0007000000160400fe9f06b8fc100608000000fa0206000800000000000002040000002d01040005000000140258fd890505000000130258fd1e07040000002d010200040000002d01010004000000f0010400040000002701ffff
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b405dffd9f064afe0e00000026060f001200ffffffff000008000000b405dffd18064afe2d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018044afe1806dffdb4050500
0000140258fd1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000100612fe9f061afe040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604bafe9f0672fd100608000000fa0206000800000000000002040000
002d01040005000000140212fe890505000000130212fe1e07040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001e07edfeda09a2ff1c00
0000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a60ff58070c0000004c6f63616c205365727665723b003a
00360035001b001a0040003600250036003500250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000030028efc900436ff07000000fc020000000000020000040000002d010500090000001c069800980047ffa1049efc400205000000140212fe1e07
2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208
000000fa0206000800000000000002040000002d010500090000001c069600960036ff90048efc300205000000140212fe1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b02eefc400482fe07000000fc020000000000020000040000002d01070004000000f001
0600040000002d010200090000001c066500650093fe5104fefc7b0205000000140212fe1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd0000
00040000002d01060004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010500090000001c066300630082fe4004eefc6b0205000000140212fe1e071c000000fb02b8ff000000000000bc020000000000000000417269616c00
0f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320acafd01030400000053747562300018002c002c0004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000ce028ffe2a0444ff1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000
09020000000204000000020101000c000000320a02ff080303000000434f4d0045004b00500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003a045afdb40564fd040000002d010200040000002d01010004000000f001070004000000f001060004
0000002d01030004000000f0010400030000001e0007000000160404fe7005bafc3a0408000000fa0206000800000000000002040000002d01040005000000140258fdc8020500000013025efd1e07040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc0200000000000200000400
00002d0104000a00000024030300ac055cfd340538fd34057efd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80130fb900a080008000000fa0206000800000000000002040000002d010500040000002d010100070000001b040800900a30fbc801070000001b04f8
ff800a40fbd8010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000640349fb390938fc1c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000800af87f040000002d010600040000002e011800
050000000a020000000005000000090200000002040000000201010025000000320ae8fb9e03140000004c6f63616c205365727665722050726f636573735000500048005000200028006000500030004800500030002800600030005000480051004800480004000000020102000a00000026060f000a00ffffffff010000
0000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080015801380bb0070e00000026060f001200ffffffff0000080000008a0636036a0ab00607000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c06de00de00
c1067b0a46039a060500000014025efd1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f0010700050000
00090200000002050000000102ffffff02040000002d010500090000001c06dc00dc00b0066a0a36038a060500000014025efd1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cc06ab03b609c00507000000fc020000000000020000040000002d01070004000000
f0010400040000002d010200090000001c0685008500d105c709bb03dc060500000014025efd1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd
000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c0683008300c005b609ab03cc060500000014025efd1e071c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000
d00af87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a94048d070600000052656d6f74654500360055003b002000350004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f
0300ed4e0338f70f037884c577000000000c000000800af87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a0705a707060000004f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff000008000000ec052904d70694040e00000026060f001200ffffffff000008000000ec05290450069404040000002d01020005000000090200000002050000000102ffffff02040000002d010500070000001804940450062904ec050500000014025efd1e070a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000048065c04d7066404040000002d010200040000002d01010004000000f001050004000000f0010400040000002d01030004000000f0010600030000001e000700000016040405d706bc03480608000000fa02060008000000
00000002040000002d0104000500000014025c04c1050500000013025c045607040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ec05e3
04d7064e050e00000026060f001200ffffffff000008000000ec05e30450064e052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd00000004000000
2d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018044e055006e304ec050500000014025c0456070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000048061605d7061e05040000002d0102
00040000002d01010004000000f001050004000000f0010400030000001e00070000001604be05d7067604480608000000fa0206000800000000000002040000002d0104000500000014021605c10505000000130216055607040000002d010200040000002d01010004000000f0010400040000002701ffff0a0000002606
0f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000607f105280aa6061c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000800af87f040000002d01040004
0000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a640640070d00000052656d6f746520536572766572054500360055003b00200035001b0040003500260035003500260004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200
ffffffff0000080000007602b403d6045c0607000000fc020000000000020000040000002d010500090000001c06980098006d06e704c4038602050000001402160556072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff
00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c06960096005c06d604b4037602050000001402160556070a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b10214048604a80507000000fc020000000000020000040000002d01070004000000f0010600040000002d010200090000001c0665006500b90597042404c102050000001402160556072d0000004201050000002800000008000000080000
000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01
070004000000f0010500090000001c0663006300a80586041404b102050000001402160556071c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a02000000
000500000009020000000204000000020101000d000000320af00447030400000053747562300018002c002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001403b50570046a061c000000fb02a0ff000000000000bc0200000000000000004172
69616c000f0300ed4e0338f70f037884c577000000000c000000800af87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a28064e0303000000434f4d0045004b00500004000000020102000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff0000080000008c04600400066a04040000002d010200040000002d01010004000000f001070004000000f0010600040000002d01030004000000f0010400030000001e000700000016040a05bc05c0038c0408000000fa0206000800000000000002040000002d010400
050000001402640420030500000013025e046407040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300f805600481053e04810584040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffff
ff00000800000000024802c80a200708000000fa0206000800000000000002040000002d010500040000002d010100070000001b042007c80a48020002070000001b041007b80a580210020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007c036902f10958031c000000
fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010027000000320a0803b6031500000052656d6f7465205365727665722050726f
636573730068005000780050002800500028006000500030004800500030002800600030005000480051004800480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080015801380bb007070000001b04b007380b5801800108000000fa0206001000
000000000002040000002d01070004000000f0010500070000001b04a007280b6801900108000000fa0206000800000000000002040000002d01050004000000f0010700070000001b048807100b8001a8010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000c047101c9
0860021c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c007f87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a100246040e0000005265
6d6f7465204d616368696e656800500078005000280050002800780050004800500020005000510004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002cfed0fd980238000c000000250304002cfe30
009600c3fe490033ff30020afe040000002d010400040000002d0102000a000000240303009002cffd1802f0fd3c022cfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000056fe6003d802ee04040000002d010500040000002d0101000c0000002503040056fe6003cc00
4a047e0002046802be04040000002d010400040000002d0102000a00000024030300d002e7046e029a045402dc040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffff
ff010000000000040000002d010200040000002d01010004000000f001050004000000f0010400040000002d01030004000000f001070003000000000078e50100d2e501003ee60100a2e6010002e8010024e901003ce9010000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 1-8: Clients always call in-process code; objects are always called by in-process\line code. COM provides the underlying transparent RPC. 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The clear separation of interface from implementation provided by location transparency for some situa
tions gets in the way when performance is of critical concern. When designing an interface while focusing on making it natural and functional from the client\rquote s point of view, one is sometimes lead to design deci
sions that are in tension with allowing for efficient implementation of that interface across a network. What is needed is not pure location transparency, but \ldblquote location transparency, unless you need to care.\rdblquote  COM pro
vides this capability. An object implementor can if he wishes support {\i custom marshaling}
 which allows his objects to take special action when they are used from across the network, different action if he would like than is used in the local case. The key point is that this is done co
mpletely transparently to the client. Taken as a whole, this architecture allows one to design client / object interfaces at their natural and easy semantic level without regard to network performance issues, then at a later address network performance is
sues without disrupting the established design.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
Not only are there situations where there is a need for designs optimized for cross network efficiency, but there are also cases where in-process efficiency is more important.   Just as COM provides mechani
sms whereby the remote case can be optimized (custom marshaling) it also allows for the design of interfaces that are optimized for the in-process case.}}
\par Also note again that COM is not a specification for how applications are structured: it is a specification for how applications interoperate. For this reason, COM is not concerned with the internal structure of an application\emdash 
that is the job of programming languages and development environments. Conversely, programming environments have no set standards fo
r working with objects outside of the immediate application. C++, for example, works extremely well to work with objects inside an application, but has no support for working with objects outside the application. Generally all other programming languages 
are the same in this regard. Therefore COM, through language-independent interfaces, picks up where programming languages leave off to provide the network-wide interoperability.
\par {\*\bkmkstart _Toc298215737}{\*\bkmkstart _Toc306725099}{\*\bkmkstart _Toc324051524}{\*\bkmkstart _Toc324051708}{\*\bkmkstart _Toc324051951}{\*\bkmkstart _Toc335191153}{\*\bkmkstart _Toc339182925}{\pntext\pard\plain\b 1.6\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The COM Library{\*\bkmkend _Toc298215737}{\*\bkmkend _Toc306725099}{\*\bkmkend _Toc324051524}{\*\bkmkend _Toc324051708}
{\*\bkmkend _Toc324051951}{\*\bkmkend _Toc335191153}{\*\bkmkend _Toc339182925}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 It should be clear by this time that COM itself involves some systems-level code, that is, some implementation of its own. However, at the core the Component Object Model by itself is a specification (hence 
\ldblquote Model\rdblquote ) for how objects and their clients interact through the binary standard of interfaces. As a specification it defines a number of other standards for interoperability:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}The fundamental process of interface negotiation through {\cs58\f5\fs16\lang1024 QueryInterface}.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}A {\i reference counting} mechanism through objects (and their resources) are managed even when connected to multiple clients.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Rules for memory allocation and responsibility for those allocations when exchanged between independently developed components.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Consistent and rich error reporting facilities.
\par \pard \qj\sa60\widctlpar In addition to being a specification, COM is also an implementation contained what is called the \ldblquote COM Library.\rdblquote 
 The implementation is provided through a library (such as a DLL on Microsoft Windows) that includes:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}A small number
 of fundamental API functions that facilitate the creation of COM applications, both clients and servers. For clients, COM supplies basic object creation functions; for servers the facilities to expose their objects.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}
Implementation locator services through which COM determines from a class identifier which server implements that class and where that server is located. This includes support for a level of indirection, usually a system registry, between the identity of 
an object class and the packaging of the implementation such that clients are independent of the packaging which can change in the future.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Transparent remote procedure calls when an object is running in a local or remote server, as illustrated in Figure 1-8 in the previous section.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}A standard mechanism to allow an application to control how memory is allocated within its process.
\par \pard \qj\sa60\widctlpar In general, only one vendor needs to, or should, implement a COM Library for any particular operating system. For example, Microsoft has implemented COM on Microso
ft Windows 3.1, Microsoft Windows 95, Microsoft Windows NT, and the Apple Macintosh.  Part V of this document specifies in detail the internals of the COM Library for those vendors who wish to implement the COM Library on a platform for which it does not 
already have support.
\par {\*\bkmkstart _Toc298215738}{\*\bkmkstart _Toc298216108}{\*\bkmkstart _Toc324051525}{\*\bkmkstart _Toc324051709}{\*\bkmkstart _Toc324051952}{\*\bkmkstart _Toc335191154}{\*\bkmkstart _Toc339182926}{\pntext\pard\plain\b 1.7\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 COM as a Foundation{\*\bkmkend _Toc298215738}{\*\bkmkend _Toc298216108}{\*\bkmkend _Toc324051525}{\*\bkmkend _Toc324051709}
{\*\bkmkend _Toc324051952}{\*\bkmkend _Toc335191154}{\*\bkmkend _Toc339182926}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The binary standard of interfaces is the key to COM\rquote s extensible architecture, providing the foundation upon which is built the rest of COM and other systems such as OLE.
\par {\*\bkmkstart _Toc298215739}{\*\bkmkstart _Toc298216109}{\*\bkmkstart _Toc324051526}{\*\bkmkstart _Toc324051710}{\*\bkmkstart _Toc324051953}{\pntext\pard\plain\b\i\fs22 1.7.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 COM Infrastructure{\*\bkmkend _Toc298215739}{\*\bkmkend _Toc298216109}{\*\bkmkend _Toc324051526}{\*\bkmkend _Toc324051710}{\*\bkmkend _Toc324051953}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM provides more than just the fundamental object creation and management facilities: it also builds an infrastructure of three other core operating system components.
\par {\b Persistent Storage}: A set of interfaces and an implementation of those interfaces that create structured storage, otherwise known as a \ldblquote file system within a file.\rdblquote 
 Information in a file is structured in a hierarchical fashion which enables sharing storage between processes, incremental access to information, transactioning support, and the ability for any
 code in the system to browse the elements of information in the file. In addition, COM defines standard \ldblquote persistent storage\rdblquote 
 interfaces that objects implement to support the ability to save their persistent state to permanent, or persistent, storage devices such that the state of the object can be restored at a later time.
\par {\b Persistent, Intelligent Names (Monikers)}: The ability to give a specific {\i instantiation} of an object a particular name that would allow a client to reconnect to that {\i exact same object instance with the same state }
(not just another object of the same class) at a later time. This also includes the ability to assign a name to some sort of {\i operation}
, such as a query, that could be repeatedly executed using only that name to refer to the operation. This level of indirection allows changes to happen behind the name without requiring any changes to the client that stores that particular name. This tech
nology is centered around a type of object called a {\i moniker }and COM defines a set of interfaces that moniker objects implement. COM also defines a standard {\i composite moniker}
 that is used to create complex names that are built of simpler monikers. Monikers also implement one of the persistent storage interfaces meaning that they know how to save their name or other information to somewhere permanent. Monikers are \ldblquote 
intelligent\rdblquote  because they know how to take the name information and somehow relocate the specific object or perform an operation to which that name refers.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar 
\f4\fs16 {\cs38\super \chftn } \tab Monikers are COM\rquote s way of providing support for what other object systems (e.g. CORBA) call persistent interfaces.}}
\par {\b Uniform Data Transfer}: Standard interfaces through which data is exchanged between a client and an ob
ject and through which a client can ask an object to send notification (call event functions in the client) in case of a data change. The standards include powerful structures used to describe data formats as well as the storage mediums on which the data 
is exchanged.
\par The combination of the foundation and the infrastructure CO
M components reveals a system that describes how to create and communicate with objects, how to store them, how to label to them, and how to exchange data with them. These four aspects of COM form the core of information management. Furthermore, the infra
structure components not only build on the foundation, but monikers and uniform data transfer also build on storage as shown in Figure 1-9. The result is a system that is not only very rich, but also deep, which means that work done in an application to i
mplement lower level features is leveraged to build higher level features.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {\pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {\object\objemb\objw0\objh0\objscalex62\objscaley62{\*\objclass MSDraw.1.01}{\*\objdata 01050000020000000c0000004d53447261772e312e3031000000000000000000
3c0a0000
08004c487a18010009000003fa04000005005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700015a00000026060f00a9004d72456402009f0000009d0001006e006900fc03b8020000000000000100030000000000ffffff0000000000ffffff000100
000100000001000000000001000000000000010c0053797374656d0003008a00ff00290003015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e0000002606
0f0012004d724564030008000000fbfffdff60108a05050000000b02fdfffbff050000000c028d056510030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e000e00000026060f001200ffff
ffff000008000000fbffdf0360108a050e00000026060f0012004d7245640300080000001800fc0360108a0507000000fc02000000000000ffff040000002d01000008000000fa0205000100000000000000040000002d010100090000001c06900090008a056010fc0318000e00000026060f0012004d72456403000800
00000300e70344106f05050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01020004000000f0010000
08000000fa0206000700000000000000040000002d010000090000001c069000900072054710e40300000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005904e601ce0911030e00000026060f0012004d72456403000800000076040302ce09110307000000fc020000
00000000ffff040000002d01030004000000f0010200040000002d01010004000000f0010000090000001c06900090001103ce09030276040e00000026060f0012004d7245640300080000006104ee01b209f502050000000902000000002d00000042010500000028000000080000000800000001000100000000002000
00000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01000004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000f802b509eb015e040a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff0000080000006f0aef010b0f1a030e00000026060f0012004d7245640300080000008c0a0c020b0f1a0307000000fc02000000000000ffff040000002d01030004000000f0010000040000002d01010004000000f0010200090000001c06900090001a030b0f
0c028c0a0e00000026060f0012004d724564030008000000770af701ef0efe02050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff00
0000dd000000040000002d01000004000000f001030008000000fa0206000700000000000000040000002d010200090000001c06900090000103f20ef401740a0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009b02fdffaf083a010e00000026060f0012004d724564
030008000000b8021a00af083a0107000000fc02000000000000ffff040000002d01030004000000f0010000040000002d01010004000000f0010200090000001c06900090003a01af081a00b8020e00000026060f0012004d724564030008000000a302050093081e01050000000902000000002d000000420105000000
2800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01000004000000f001030008000000fa0206000700000000000000040000002d010200090000001c06
90009000210196080200a0020a00000026060f000a00ffffffff010000000000040000002e01180004000000020101001c000000fb0280ff000000000000bc020000000000000000417269616c00f37708b2f377ffffffff00f84c06d7e9ec77000000000c000000040000002d0103001f000000320ad6046c0130000000
54686520436f6d706f6e656e74204f626a656374204d6f64656c20616e6420436f6d706f6e656e74204f626a6563747310000000320aaa029c0a11000000496e74656c6c6967656e74204e616d65730010000000320a9f02d7041200000050657273697374656e742053746f7261676512000000320ac600f70215000000
556e69666f726d2044617461205472616e73666572000e00000026060f001200ffffffff0000080000005807f3029e07ea030b00000026060f000c004d724564010002000000000008000000250302007b07fb027b07ad0307000000fc02000000000000ffff040000002d01040004000000f00100000400000002010200
040000002d01010004000000f00102000b00000026060f000c004d72456401000200000000000a000000240303007b07ea039e077203580772030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000091061d01d706f90108000000fa020600070000000000000004000000
2d0100000b00000026060f000c004d72456401000200000000000800000025030200b9062501b206bc01040000002d01010004000000f00100000b00000026060f000c004d72456401000200000000000a00000024030300ae06f901d7068401910680010a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff000008000000a80cf302ee0ce40308000000fa0206000700000000000000040000002d0100000b00000026060f000c004d72456401000200000000000800000025030200cb0cfb02cb0ca703040000002d01010004000000f00100000b00000026060f000c004d72456401000200000000000a000000
24030300cb0ce403ee0c6d03a80c6d030a00000026060f000a00ffffffff0100000000001c000000fb021000070000000000bc02000000000102022253797374656d00060c00130100f84c06250000005002f77f10b8180107e4ec77040000002d01000004000000f001030007000000fc02010000000000000004000000
2d01020004000000f0010400040000002701ffff040000002701ffff030000000000574f5700574f5700574f5700574f5700574f5700574f5700574f5700574f5700574f5700574f5700574f57005700574f5700574f5700574f5700574f5700574f57000105000000000000}{\result {
{\pict\wmetafile8\picw18508\pich6266\picwgoal10493\pichgoal3552 \picscalex62\picscaley62 
010009000003fa04000005005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700015a00000026060f00a9004d72456402009f0000009d0001006e006900fc03b8020000000000000100030000000000ffffff0000000000ffffff00010000010000000100
0000000001000000000000010c0053797374656d0003008a00ff00290003015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e00000026060f0012004d724564
030008000000fbfffdff60108a05050000000b02fdfffbff050000000c028d056510030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e000e00000026060f001200ffffffff000008000000fb
ffdf0360108a050e00000026060f0012004d7245640300080000001800fc0360108a0507000000fc02000000000000ffff040000002d01000008000000fa0205000100000000000000040000002d010100090000001c06900090008a056010fc0318000e00000026060f0012004d7245640300080000000300e70344106f05
050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01020004000000f001000008000000fa020600070000
0000000000040000002d010000090000001c069000900072054710e40300000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005904e601ce0911030e00000026060f0012004d72456403000800000076040302ce09110307000000fc02000000000000ffff040000002d01
030004000000f0010200040000002d01010004000000f0010000090000001c06900090001103ce09030276040e00000026060f0012004d7245640300080000006104ee01b209f502050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000
000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01000004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000f802b509eb015e040a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff0000080000006f0aef010b0f1a030e00000026060f0012004d7245640300080000008c0a0c020b0f1a0307000000fc02000000000000ffff040000002d01030004000000f0010000040000002d01010004000000f0010200090000001c06900090001a030b0f0c028c0a0e00000026060f0012004d
724564030008000000770af701ef0efe02050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d0100000400
0000f001030008000000fa0206000700000000000000040000002d010200090000001c06900090000103f20ef401740a0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009b02fdffaf083a010e00000026060f0012004d724564030008000000b8021a00af083a01070000
00fc02000000000000ffff040000002d01030004000000f0010000040000002d01010004000000f0010200090000001c06900090003a01af081a00b8020e00000026060f0012004d724564030008000000a302050093081e01050000000902000000002d000000420105000000280000000800000008000000010001000000
0000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01000004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000210196080200a0020a00000026060f
000a00ffffffff010000000000040000002e01180004000000020101001c000000fb0280ff000000000000bc020000000000000000417269616c00f37708b2f377ffffffff00f84c06d7e9ec77000000000c000000040000002d0103001f000000320ad6046c013000000054686520436f6d706f6e656e74204f626a656374
204d6f64656c20616e6420436f6d706f6e656e74204f626a6563747310000000320aaa029c0a11000000496e74656c6c6967656e74204e616d65730010000000320a9f02d7041200000050657273697374656e742053746f7261676512000000320ac600f70215000000556e69666f726d2044617461205472616e73666572
000e00000026060f001200ffffffff0000080000005807f3029e07ea030b00000026060f000c004d724564010002000000000008000000250302007b07fb027b07ad0307000000fc02000000000000ffff040000002d01040004000000f00100000400000002010200040000002d01010004000000f00102000b0000002606
0f000c004d72456401000200000000000a000000240303007b07ea039e077203580772030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000091061d01d706f90108000000fa0206000700000000000000040000002d0100000b00000026060f000c004d7245640100020000
0000000800000025030200b9062501b206bc01040000002d01010004000000f00100000b00000026060f000c004d72456401000200000000000a00000024030300ae06f901d7068401910680010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a80cf302ee0ce4030800
0000fa0206000700000000000000040000002d0100000b00000026060f000c004d72456401000200000000000800000025030200cb0cfb02cb0ca703040000002d01010004000000f00100000b00000026060f000c004d72456401000200000000000a00000024030300cb0ce403ee0c6d03a80c6d030a00000026060f000a
00ffffffff0100000000001c000000fb021000070000000000bc02000000000102022253797374656d00060c00130100f84c06250000005002f77f10b8180107e4ec77040000002d01000004000000f001030007000000fc020100000000000000040000002d01020004000000f0010400040000002701ffff040000002701
ffff03000000000000}}}}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 1-9: COM is built in progressively higher level technologies that\line depend upon lower level technologies.
\par {\*\bkmkstart _Toc298215740}{\*\bkmkstart _Toc298216110}{\*\bkmkstart _Toc324051527}{\*\bkmkstart _Toc324051711}{\*\bkmkstart _Toc324051954}{\pntext\pard\plain\b\i\fs22 1.7.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 OLE{\*\bkmkend _Toc298215740}{\*\bkmkend _Toc298216110}{\*\bkmkend _Toc324051527}{\*\bkmkend _Toc324051711}{\*\bkmkend _Toc324051954}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Microsoft\rquote s OLE technology is really a collection of additional higher-level 
technologies that build upon COM and its infrastructure. OLE version 2.0 was the first deployment of a subset of this COM specification that included support for in-process and local objects and all the infrastructure technologies but did not sup
port remote objects. OLE 2 includes mostly user-interface oriented features based on usability, application integration, and automation of tasks. All of these features are implemented by means of specific interfaces on different objects and defined sequen
ces of operation in both clients and servers and their relationships and dependencies on the lower level infrastructure of COM is shown in Figure 1-10.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {\pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {\object\objemb\objw0\objh0\objscalex52\objscaley52{\*\objclass MSDraw.1.01}{\*\objdata 01050000020000000c0000004d53447261772e312e3031000000000000000000
dc1e0000
0800fa51e43c010009000003540f000006005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700015a00000026060f00a9004d72456402009f0000009d00010084007e00fc03b8020000000000000100030000000000ffffff0000000000ffffff000100
000100000001000000000001000000000000010c0053797374656d0003008a00ff00290003015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e0000002606
0f0012004d7245640300080000002b00fbffc212ca0d050000000b02fbff2b00050000000c02cf0d9712030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e000e00000026060f001200ffff
ffff0000080000003300fbffc212e608050000000902c0c0c0002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000c0c0c000ffffff00dd00000077000000dd00000077000000dd00000077000000dd00000077000000040000002d0100000800
0000fa02060000000000c0c0c000040000002d0101000b00000026060f000c004d724564010002000000000010000000240306003b005b073b000300ba120300b812db08c40ade08c30a5b0708000000fa0206000700000000000000040000002d01020004000000f00101000b00000026060f000c004d72456401000200
0000000010000000250306003b005b073b000300ba120300b812db08c40ade08c30a5b070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002b007b07ba12ca0d050000000902808080002d00000042010500000028000000080000000800000001000100000000002000
00000000000000000000000000000000000080808000ffffff00dd000000ee00000077000000bb000000dd000000ee00000077000000bb000000040000002d01010004000000f001000008000000fa0205000100000000000000040000002d01000004000000f00102000b00000026060f000c004d724564010002000000
000012000000240307003b0093073b00c20db212c20db2123309700a3809730a83073300830708000000fa0206000700000000000000040000002d0102000b00000026060f000c004d724564010002000000000012000000250307003b0093073b00c20db212c20db2123309700a3809730a8307330083070a0000002606
0f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a910fd07ef10d00b0b00000026060f000c004d72456401000200000000000800000025030200cc100508cc10930b07000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200
0b00000026060f000c004d72456401000200000000000a00000024030300cc10d00bef105a0ba9105a0b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009301c20bf9116e0d0e00000026060f0012004d724564030008000000b001df0bf9116e0d090000001c069000
90006e0df911df0bb0010e00000026060f0012004d7245640300080000009b01ca0bdd11520d050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff000000
77000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000550de011c70b98010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e805d209e10afd0a0e00000026060f00
12004d7245640300080000000506ef09e10afd0a07000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c0690009000fd0ae10aef0905060e00000026060f0012004d724564030008000000f005da09c50ae10a050000000902000000002d000000
4201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200
090000001c0690009000e40ac80ad709ed050a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b50bd2098810fd0a0e00000026060f0012004d724564030008000000d20bef098810fd0a07000000fc02000000000000ffff040000002d01030004000000f00101000400
00002d01000004000000f0010200090000001c0690009000fd0a8810ef09d20b0e00000026060f0012004d724564030008000000bd0bda096c10e10a050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffff
ff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000e40a6f10d709ba0b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff
000008000000ff0df906891124080e00000026060f0012004d7245640300080000001c0e16078911240807000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c06900090002408891116071c0e0e00000026060f0012004d724564030008000000
070e01076d110808050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f00103000800
0000fa0206000700000000000000040000002d010200090000001c06900090000b087011fe06040e0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006d030408810941090e00000026060f0012004d7245640300080000008a0321088109410907000000fc0200000000
0000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c06900090004109810921088a030e00000026060f0012004d72456403000800000075030c0865092509050000000902000000002d000000420105000000280000000800000008000000010001000000000020000000
0000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c069000900028096809090872030a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff000008000000d301ae006d0835020e00000026060f0012004d724564030008000000f001cb006d08350207000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c069000900035026d08cb00
f0010e00000026060f0012004d724564030008000000db01b60051081902050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000
dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c06900090001c025408b300d8010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001f04bd033f0aea040e00000026060f0012004d7245640300
080000003c04da033f0aea0407000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c0690009000ea043f0ada033c040e00000026060f0012004d7245640300080000002704c503230ace04050000000902000000002d0000004201050000002800
000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c069000
9000d104260ac20324040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008f0874011b0eb4020e00000026060f0012004d724564030008000000ac0891011b0eb40207000000fc02000000000000ffff040000002d01030004000000f0010100040000002d0100000400
0000f0010200090000001c0690009000b4021b0e9101ac080e00000026060f0012004d72456403000800000097087c01ff0d9802050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c06900090009b02020e790194080a00000026060f000a00ffffffff010000000000040000002e01180004000000020101001c000000fb02
80ff000000000000bc020000000000000022417269616c00f37708b2f377ffffffff00f84206d7e9ec77000000000c000000040000002d0103001f000000320ab90c94033000000054686520436f6d706f6e656e74204f626a656374204d6f64656c20616e6420436f6d706f6e656e74204f626a6563747310000000320a
840a190c11000000496e74656c6c6967656e74204e616d6573650c000000320aa0075a0e0a0000004175746f6d6174696f6e10000000320a820a39061200000050657273697374656e742053746f7261676512000000320ac408c90315000000556e69666f726d2044617461205472616e73666572000b000000320a3202
690a070000004c696e6b696e67200c000000320a7904c10509000000456d62656464696e67000e00000026060f001200ffffffff000008000000e102ce009207f80111000000320a4001e10213000000496e2d506c6163652041637469766174696f6e000f000000320ada014b03100000002856697375616c2045646974
696e67290a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cd020b021303d30b0b00000026060f000c004d72456401000200000000000800000025030200f0021302f002960b07000000fc02000000000000ffff040000002d01040004000000f0010100040000000201
0200040000002d01000004000000f00102000b00000026060f000c004d72456401000200000000000a00000024030300f002d30b13035e0bcd025e0b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c6040b020c05ba0308000000fa02060007000000000000000400
00002d0101000b00000026060f000c004d72456401000200000000000800000025030200ea041302e9047d03040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300e804ba030c054303c60443030a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff0000080000006b04c104b1040d0808000000fa0206000700000000000000040000002d0101000b00000026060f000c004d724564010002000000000008000000250302008e04c9048e04d007040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00
0000240303008e040d08b10497076b0497070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000095098c02db09ba0308000000fa0206000700000000000000040000002d0101000b00000026060f000c004d72456401000200000000000800000025030200b6099402b809
7d03040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300b909ba03db094303950943030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000190b8a025f0bbe0b08000000fa02060007000000000000000400
00002d0101000b00000026060f000c004d724564010002000000000008000000250302003c0b92023c0b810b040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a000000240303003c0bbe0b5f0b470b190b470b0a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff0000080000005b0c9002a10cd80908000000fa0206000700000000000000040000002d0101000b00000026060f000c004d724564010002000000000008000000250302007e0c98027e0c9b09040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00
0000240303007e0cd809a10c64095b0c64090a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000083015a00351037050e00000026060f0012004d7245640300080000008b0162002d102f0508000000fa0206000700000000000000040000002d01010007000000fc020100
000000000000040000002d01020004000000f0010400090000001c06e100e100320530105f0088010e00000026060f0012004d7245640300080000009b0172001d101f05090000001c06c100c100220520106f0098010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
e40c18034410730404000000020101001c000000fb0270ff000000000000bc020000000000000022417269616c00f37708b2f377ffffffff00f84206d7e9ec77000000000c000000040000002d01040004000000f00103000b000000320aa203e40c08000000436f6d706f756e640c000000320a4f04e40c09000000446f
63756d656e7473000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008d08d60ad308cd0b0b00000026060f000c004d72456401000200000000000800000025030200b008de0ab008900b07000000fc02000000000000ffff040000002d01030004000000020102000400
00002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300b008cd0bd308550b8d08550b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cd0636091307f70908000000fa0206000700000000000000040000002d01
01000b00000026060f000c004d72456401000200000000000800000025030200f0063e09f006ba09040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300f006f70913077f09cd067f090a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff000008000000e60dd60a2c0ec70b08000000fa0206000700000000000000040000002d0101000b00000026060f000c004d72456401000200000000000800000025030200090ede0a090e8a0b040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a0000002403
0300090ec70b2c0e500be60d500b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000077052b06690943070e00000026060f0012004d7245640300080000009405480669094307090000001c069000900043076909480694050e00000026060f0012004d72456403000800
00007f0533064d092707050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f0010300
08000000fa0206000700000000000000040000002d010300090000001c06900090002a07500930067c050a00000026060f000a00ffffffff01000000000004000000020101001c000000fb0280ff000000000000bc020000000000000022417269616c00f37708b2f377ffffffff00f84206d7e9ec77000000000c000000
040000002d01050004000000f00104000d000000320ad306fc050b0000004472616720262044726f70000e00000026060f001200ffffffff000008000000de081a0724090c080b00000026060f000c004d72456401000200000000000800000025030200010922070109cf0707000000fc02000000000000ffff04000000
2d01040004000000f00101000400000002010200040000002d01000004000000f00103000b00000026060f000c004d72456401000200000000000a0000002403030001090c0824099407de0894070a00000026060f000a00ffffffff01000000000008000000fa0206000700000000000000040000002d0101000b000000
26060f000c004d724564010002000000000008000000250302002a045a04ee025a040b00000026060f000c004d724564010002000000000008000000250302008405a606ee02a6060b00000026060f000c004d7245640100020000000000080000002503020078039208ee0292080e00000026060f0012004d7245640300
08000000e102420409036f0407000000180472040c033f04de020e00000026060f0012004d724564030008000000e10294060903c106070000001804c4060c039106de020e00000026060f0012004d724564030008000000db0284080303b208070000001804b50806038108d8020b00000026060f000c004d7245640100
02000000000008000000250302009d086402ee0264020e00000026060f0012004d724564030008000000db02510203037e02070000001804810206034e02d8020e00000026060f001200ffffffff000008000000a109c304e709d7090b00000026060f000c004d72456401000200000000000800000025030200c409cb04
c4099a09040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300c409d709e7096309a10963090a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000450e03088b0ecc0908000000fa0206000700000000000000
040000002d0101000b00000026060f000c004d72456401000200000000000800000025030200680e0b08680e8f09040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300680ecc098b0e5509450e55090a00000026060f000a00ffffffff0100000000000e00
000026060f001200ffffffff0000080000001008cc045608390608000000fa0206000700000080808000040000002d0101000b00000026060f000c004d724564010002000000000008000000250302003608d4043208fc0507000000fc02000080808000ffff040000002d01030004000000f0010400040000002d010000
04000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300310839065608c2051008c0050a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000240868054c08950508000000fa0206000700000080808000040000002d01010007000000
180498054f08650521080b00000026060f000c004d72456401000200000000000a00000025030300980a9902980a72053408720504000000020101001c000000fb0270ff000000000000bc020000000000000022417269616c00f37708b2f377ffffffff00f84206d7e9ec77000000000c000000040000002d0104000400
0000f001050009000000320acb08e30003000000434f4d0009000000320a7906ef00030000004f4c45001c000000fb021000070000000000bc02000000000102022253797374656d00060c00130100f84206250000005002f77fb085190107e4ec77040000002d01050004000000f0010400040000002d01000004000000
f0010100040000002d01020004000000f0010300040000002701ffff040000002701ffff030000000000574f5700574f5700574f5700574f5700574f5700574f57005700574f5700574f5700574f5700574f5700574f57000105000000000000}{\result {{\pict\wmetafile8\picw20986\pich15588
\picwgoal11898\pichgoal8837 \picscalex52\picscaley52 
010009000003540f000006005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700015a00000026060f00a9004d72456402009f0000009d00010084007e00fc03b8020000000000000100030000000000ffffff0000000000ffffff00010000010000000100
0000000001000000000000010c0053797374656d0003008a00ff00290003015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e00000026060f0012004d724564
0300080000002b00fbffc212ca0d050000000b02fbff2b00050000000c02cf0d9712030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e000e00000026060f001200ffffffff00000800000033
00fbffc212e608050000000902c0c0c0002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000c0c0c000ffffff00dd00000077000000dd00000077000000dd00000077000000dd00000077000000040000002d01000008000000fa02060000000000
c0c0c000040000002d0101000b00000026060f000c004d724564010002000000000010000000240306003b005b073b000300ba120300b812db08c40ade08c30a5b0708000000fa0206000700000000000000040000002d01020004000000f00101000b00000026060f000c004d724564010002000000000010000000250306
003b005b073b000300ba120300b812db08c40ade08c30a5b070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002b007b07ba12ca0d050000000902808080002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000
00000000000080808000ffffff00dd000000ee00000077000000bb000000dd000000ee00000077000000bb000000040000002d01010004000000f001000008000000fa0205000100000000000000040000002d01000004000000f00102000b00000026060f000c004d724564010002000000000012000000240307003b0093
073b00c20db212c20db2123309700a3809730a83073300830708000000fa0206000700000000000000040000002d0102000b00000026060f000c004d724564010002000000000012000000250307003b0093073b00c20db212c20db2123309700a3809730a8307330083070a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff000008000000a910fd07ef10d00b0b00000026060f000c004d72456401000200000000000800000025030200cc100508cc10930b07000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f00102000b00000026060f000c004d72456401
000200000000000a00000024030300cc10d00bef105a0ba9105a0b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009301c20bf9116e0d0e00000026060f0012004d724564030008000000b001df0bf9116e0d090000001c06900090006e0df911df0bb0010e0000002606
0f0012004d7245640300080000009b01ca0bdd11520d050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d
01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000550de011c70b98010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e805d209e10afd0a0e00000026060f0012004d7245640300080000000506ef09e10a
fd0a07000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c0690009000fd0ae10aef0905060e00000026060f0012004d724564030008000000f005da09c50ae10a050000000902000000002d00000042010500000028000000080000000800000001
00010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000e40ac80ad709ed050a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b50bd2098810fd0a0e00000026060f0012004d724564030008000000d20bef098810fd0a07000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c0690
009000fd0a8810ef09d20b0e00000026060f0012004d724564030008000000bd0bda096c10e10a050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff000000
77000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000e40a6f10d709ba0b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ff0df906891124080e00000026060f0012
004d7245640300080000001c0e16078911240807000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c06900090002408891116071c0e0e00000026060f0012004d724564030008000000070e01076d110808050000000902000000002d0000004201
050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000
001c06900090000b087011fe06040e0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006d030408810941090e00000026060f0012004d7245640300080000008a0321088109410907000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01
000004000000f0010200090000001c06900090004109810921088a030e00000026060f0012004d72456403000800000075030c0865092509050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000
0077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c069000900028096809090872030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
d301ae006d0835020e00000026060f0012004d724564030008000000f001cb006d08350207000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c069000900035026d08cb00f0010e00000026060f0012004d724564030008000000db01b600510819
02050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700
000000000000040000002d010200090000001c06900090001c025408b300d8010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001f04bd033f0aea040e00000026060f0012004d7245640300080000003c04da033f0aea0407000000fc02000000000000ffff040000002d
01030004000000f0010100040000002d01000004000000f0010200090000001c0690009000ea043f0ada033c040e00000026060f0012004d7245640300080000002704c503230ace04050000000902000000002d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000
00000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010200090000001c0690009000d104260ac20324040a00000026060f000a00ffffffff0100000000000e0000
0026060f001200ffffffff0000080000008f0874011b0eb4020e00000026060f0012004d724564030008000000ac0891011b0eb40207000000fc02000000000000ffff040000002d01030004000000f0010100040000002d01000004000000f0010200090000001c0690009000b4021b0e9101ac080e00000026060f001200
4d72456403000800000097087c01ff0d9802050000000902000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004
000000f001030008000000fa0206000700000000000000040000002d010200090000001c06900090009b02020e790194080a00000026060f000a00ffffffff010000000000040000002e01180004000000020101001c000000fb0280ff000000000000bc020000000000000022417269616c00f37708b2f377ffffffff00f8
4206d7e9ec77000000000c000000040000002d0103001f000000320ab90c94033000000054686520436f6d706f6e656e74204f626a656374204d6f64656c20616e6420436f6d706f6e656e74204f626a6563747310000000320a840a190c11000000496e74656c6c6967656e74204e616d6573650c000000320aa0075a0e0a
0000004175746f6d6174696f6e10000000320a820a39061200000050657273697374656e742053746f7261676512000000320ac408c90315000000556e69666f726d2044617461205472616e73666572000b000000320a3202690a070000004c696e6b696e67200c000000320a7904c10509000000456d62656464696e6700
0e00000026060f001200ffffffff000008000000e102ce009207f80111000000320a4001e10213000000496e2d506c6163652041637469766174696f6e000f000000320ada014b03100000002856697375616c2045646974696e67290a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
0008000000cd020b021303d30b0b00000026060f000c004d72456401000200000000000800000025030200f0021302f002960b07000000fc02000000000000ffff040000002d01040004000000f00101000400000002010200040000002d01000004000000f00102000b00000026060f000c004d7245640100020000000000
0a00000024030300f002d30b13035e0bcd025e0b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c6040b020c05ba0308000000fa0206000700000000000000040000002d0101000b00000026060f000c004d72456401000200000000000800000025030200ea041302e9
047d03040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300e804ba030c054303c60443030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b04c104b1040d0808000000fa02060007000000000000000400
00002d0101000b00000026060f000c004d724564010002000000000008000000250302008e04c9048e04d007040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a000000240303008e040d08b10497076b0497070a00000026060f000a00ffffffff0100000000000e00000026
060f001200ffffffff00000800000095098c02db09ba0308000000fa0206000700000000000000040000002d0101000b00000026060f000c004d72456401000200000000000800000025030200b6099402b8097d03040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a000000
24030300b909ba03db094303950943030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000190b8a025f0bbe0b08000000fa0206000700000000000000040000002d0101000b00000026060f000c004d724564010002000000000008000000250302003c0b92023c0b810b04
0000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a000000240303003c0bbe0b5f0b470b190b470b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005b0c9002a10cd80908000000fa0206000700000000000000040000002d01
01000b00000026060f000c004d724564010002000000000008000000250302007e0c98027e0c9b09040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a000000240303007e0cd809a10c64095b0c64090a00000026060f000a00ffffffff0100000000000e00000026060f0012
00ffffffff00000800000083015a00351037050e00000026060f0012004d7245640300080000008b0162002d102f0508000000fa0206000700000000000000040000002d01010007000000fc020100000000000000040000002d01020004000000f0010400090000001c06e100e100320530105f0088010e00000026060f00
12004d7245640300080000009b0172001d101f05090000001c06c100c100220520106f0098010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e40c18034410730404000000020101001c000000fb0270ff000000000000bc020000000000000022417269616c00f37708
b2f377ffffffff00f84206d7e9ec77000000000c000000040000002d01040004000000f00103000b000000320aa203e40c08000000436f6d706f756e640c000000320a4f04e40c09000000446f63756d656e7473000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008d08
d60ad308cd0b0b00000026060f000c004d72456401000200000000000800000025030200b008de0ab008900b07000000fc02000000000000ffff040000002d0103000400000002010200040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300b008cd0bd30855
0b8d08550b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cd0636091307f70908000000fa0206000700000000000000040000002d0101000b00000026060f000c004d72456401000200000000000800000025030200f0063e09f006ba09040000002d01000004000000
f00101000b00000026060f000c004d72456401000200000000000a00000024030300f006f70913077f09cd067f090a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e60dd60a2c0ec70b08000000fa0206000700000000000000040000002d0101000b00000026060f000c
004d72456401000200000000000800000025030200090ede0a090e8a0b040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300090ec70b2c0e500be60d500b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
77052b06690943070e00000026060f0012004d7245640300080000009405480669094307090000001c069000900043076909480694050e00000026060f0012004d7245640300080000007f0533064d092707050000000902000000002d00000042010500000028000000080000000800000001000100000000002000000000
00000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001030008000000fa0206000700000000000000040000002d010300090000001c06900090002a07500930067c050a00000026060f000a00ffffffff
01000000000004000000020101001c000000fb0280ff000000000000bc020000000000000022417269616c00f37708b2f377ffffffff00f84206d7e9ec77000000000c000000040000002d01050004000000f00104000d000000320ad306fc050b0000004472616720262044726f70000e00000026060f001200ffffffff00
0008000000de081a0724090c080b00000026060f000c004d72456401000200000000000800000025030200010922070109cf0707000000fc02000000000000ffff040000002d01040004000000f00101000400000002010200040000002d01000004000000f00103000b00000026060f000c004d7245640100020000000000
0a0000002403030001090c0824099407de0894070a00000026060f000a00ffffffff01000000000008000000fa0206000700000000000000040000002d0101000b00000026060f000c004d724564010002000000000008000000250302002a045a04ee025a040b00000026060f000c004d7245640100020000000000080000
00250302008405a606ee02a6060b00000026060f000c004d7245640100020000000000080000002503020078039208ee0292080e00000026060f0012004d724564030008000000e102420409036f0407000000180472040c033f04de020e00000026060f0012004d724564030008000000e10294060903c106070000001804
c4060c039106de020e00000026060f0012004d724564030008000000db0284080303b208070000001804b50806038108d8020b00000026060f000c004d724564010002000000000008000000250302009d086402ee0264020e00000026060f0012004d724564030008000000db02510203037e02070000001804810206034e
02d8020e00000026060f001200ffffffff000008000000a109c304e709d7090b00000026060f000c004d72456401000200000000000800000025030200c409cb04c4099a09040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300c409d709e7096309a1096309
0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000450e03088b0ecc0908000000fa0206000700000000000000040000002d0101000b00000026060f000c004d72456401000200000000000800000025030200680e0b08680e8f09040000002d01000004000000f00101000b
00000026060f000c004d72456401000200000000000a00000024030300680ecc098b0e5509450e55090a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001008cc045608390608000000fa0206000700000080808000040000002d0101000b00000026060f000c004d724564
010002000000000008000000250302003608d4043208fc0507000000fc02000080808000ffff040000002d01030004000000f0010400040000002d01000004000000f00101000b00000026060f000c004d72456401000200000000000a00000024030300310839065608c2051008c0050a00000026060f000a00ffffffff01
00000000000e00000026060f0012004d724564030008000000240868054c08950508000000fa0206000700000080808000040000002d01010007000000180498054f08650521080b00000026060f000c004d72456401000200000000000a00000025030300980a9902980a72053408720504000000020101001c000000fb02
70ff000000000000bc020000000000000022417269616c00f37708b2f377ffffffff00f84206d7e9ec77000000000c000000040000002d01040004000000f001050009000000320acb08e30003000000434f4d0009000000320a7906ef00030000004f4c45001c000000fb021000070000000000bc02000000000102022253
797374656d00060c00130100f84206250000005002f77fb085190107e4ec77040000002d01050004000000f0010400040000002d01000004000000f0010100040000002d01020004000000f0010300040000002701ffff040000002701ffff03000000000000}}}}}
\par \pard\plain \s76\qc\sb120\sa240\widctlpar \b\f4\fs20 Figure 1-10: OLE builds its features on COM.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\b Drag & Drop}: The ability to exchange data by picking up a selection with the mouse and visibly dropping it onto another window.
\par {\b Automation}: The ability to create \ldblquote programmable\rdblquote  applications that can be driven externally from a script running in another application to automate common end user tasks. Automation enables cross-application macro programming.

\par {\b Compound Documents}: The ability to embed or link information in a central document encouraging a more document-centric user interface. Also includes In-Place Activation (also called \ldblquote Visual Editing\rdblquote 
) as a user interface improvement to embedding where the end user can works on information from different applications in the context of the compound document without having to switch to other windows.
\par Microsoft in cooperation with othe
r vendors is continuing to enhance OLE with new interfaces to extend compound documents and to define architectures for creating components such as OLE Controls, OLE DB, OLE for Design & Modeling, OLE for Healthcare, and in the future more system-level OL
E architectures that build not only on the COM infrastructure but also on the rest of OLE as well. Again, the key is lever
aged work: by implementing lower level features in an application you create a strong base of reusable code for higher level features. 
\par 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page left intentionally blank.
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc337440765}{\*\bkmkstart _Ref335035148}{\*\bkmkstart _Ref335035181}{\*\bkmkstart _Ref335035184}{\*\bkmkstart _Toc339182927}
Part II: Component Object Model Programming Interface{\*\bkmkend _Toc337440765}{\*\bkmkend _Toc339182927}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Part II contains the programming interface to COM, the suite of interfaces and APIs by which Component Object Model software is implemented and used.
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par {\*\bkmkstart _Toc337439302}{\*\bkmkstart _Toc337440766}{\*\bkmkstart _Toc339182928}{\pntext\pard\plain\b\fs28 2.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}
\b\f4\fs28 Component Object Model Technical Overview{\*\bkmkend _Ref335035148}{\*\bkmkend _Ref335035181}{\*\bkmkend _Ref335035184}{\*\bkmkend _Toc337439302}{\*\bkmkend _Toc337440766}{\*\bkmkend _Toc339182928}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Chapter 1 introduced some important challenges and problems in computing today and the Component Object Model as a solution to these problems. Chapter 1 introduced interfaces, mentioned the base interface called {
\cs58\f5\fs16\lang1024 IUnknown}{\i ,} and described how interfaces are generally used to communicate between an object and a client of that object, and explained the role that COM has in that communication to provide location transparency.
\par Yet there are plenty of topics that have not been covered in much technical detail, specifically, how certain mechanisms work, some of the interfaces involved, and how some of these interfaces are used on a high level. This chapter will describe COM in a 
more technical light 
but not going as far as describing individual interface functions or COM Library API functions. Instead, this chapter will refer to later chapters in the COM Specification that cover various topics in complete detail including the specifications for funct
ions and interfaces themselves.
\par {\*\bkmkstart _Toc298215743}{\*\bkmkstart _Toc306725105}This chapter is generally organized in the same order as Chapter 1 and covers the following topics which are then treated in complete detail in the indicated chapters:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 Objects and Interfaces: A comparison of interfaces to C++ classes, the {\cs58\f5\fs16\lang1024 
IUnknown }interface (including the {\cs58\f5\fs16\lang1024 QueryInterface }
function and reference counting), the structure of an instantiated interface and the benefits of that structure, and how clients of objects deal with interfaces. Chapter 3 covers the underlying interfaces and API functions themselves.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}COM Applications: The responsibilities of all applications making use of COM which includes rules for memory management. How applications meet these responsibilities is covered in Chapter 4.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}COM Clients and Servers: The roles and responsibilities of each specific type of application, the use of class identifiers, and the COM Library\rquote 
s role in providing communication. Chapter 5 and 6 treat COM Clients and Servers separately. How COM achieves location transparency is described in Chapter 7.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Reusability: A discussion about why implementation inheritance is not used in COM and what mechanisms are instead available. How an object server is written to handle the COM mechanisms is a topic of Chapter 6.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Connectable Objects: A brief overview of the connection point interfaces and semantics.  The actual functional specification of connectable objects is in Chapter 9.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}
Persistent Storage: A detailed look at what persistent storage is, what benefits it holds for applications including incremental access and transactioning support, leaving the APIs and interface specifications to Chapter 10.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Persistent, Intelligent Names: Why it is important to assign names to individual object instantiations (as opposed to a class identifier for an object class) and the mechanisms for such naming including moni
ker objects. The interfaces a moniker implements as well as other support functions are described in Chapter 11.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}
Uniform Data Transfer: The separation of transfer protocols from data exchange, improvements to data format descriptions, the expansion of available exchange mediums (over global memory), and data change notification mechanisms. New data structures and in
terfaces specified to support data transfer is given in Chapter 12.
\par {\*\bkmkstart _Toc324051529}{\*\bkmkstart _Toc324051714}{\*\bkmkstart _Toc324051956}{\*\bkmkstart _Toc337439303}{\*\bkmkstart _Toc337440767}{\*\bkmkstart _Toc339182929}{\pntext\pard\plain\b 2.1\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Objects and Interfaces{\*\bkmkend _Toc298215743}{\*\bkmkend _Toc306725105}{\*\bkmkend _Toc324051529}{\*\bkmkend _Toc324051714}{\*\bkmkend _Toc324051956}{\*\bkmkend _Toc337439303}
{\*\bkmkend _Toc337440767}{\*\bkmkend _Toc339182929}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Chapter 1 described that interfaces are\emdash strongly typed semantic contracts between client and object\emdash 
and that an object in COM is any structure that exposes its functionality through the interface mechanism. In addition, Chapter 1 noted how interfaces foll
ow a binary standard and how such a standard enables clients and objects to interoperate regardless of the programming languages used to implement them. While the {\i type }
of an interface is by colloquial convention referred to with a name starting with an \ldblquote I\rdblquote  (for interface), this name is only of significance in source-level programming tools. Each interface itself\emdash the immutable contract, that is
\emdash as a functional group is referred to at runtime with a globally-unique interface identifier, an \ldblquote IID\rdblquote  that allows a client to ask an object if it supports the semantics of the interface without unneces
sary overhead and without versioning problems. Clients ask questions using a {\cs58\f5\fs16\lang1024 QueryInterface }function that all objects support through the base interface, {\cs58\f5\fs16\lang1024 IUnknown}.
\par Furthermore, clients always deal with objects through interface pointers and never directly access the object itself. Therefore an interface is not an object, and an object can, in fact, have more than one interface if it has more than one group of functi
onality it supports.
\par Let\rquote s now turn to how interfaces manifest themselves and how they work.
\par {\*\bkmkstart _Toc298215744}{\*\bkmkstart _Toc306725106}{\*\bkmkstart _Toc324051530}{\*\bkmkstart _Toc324051715}{\*\bkmkstart _Toc324051957}{\pntext\pard\plain\b\i\fs22 2.1.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Interfaces and C++ Classes{\*\bkmkend _Toc298215744}{\*\bkmkend _Toc306725106}{\*\bkmkend _Toc324051530}{\*\bkmkend _Toc324051715}{\*\bkmkend _Toc324051957}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As just reiterated, an interface is not an object, nor is it an object class. Given an interface definition by itself, that is, the type definition for an interface name that begins with \ldblquote I,\rdblquote 
 you cannot create an object of that type. This is one reason why the prefix \ldblquote I\rdblquote  is used instead of the common C++ convention of using a \ldblquote C\rdblquote  to prefix an object class, such as {\cs58\f5\fs16\lang1024 CMyClass}
. While you can instantiate an object of a C++ class, you cannot instantiate an object of an interface type.
\par In C++ applications, interfaces are, in fact, defined as {\i abstract base classes}. That is, the interface is a C++ class that contains nothing but pure virtual member functions. This means that the interface carries no im
plementation and only prescribes the function signatures for some other class to implement\emdash C++ compilers will generate compile-time errors for code that attempts to instantiate an abstract base class. C++ applica
tions implement COM objects by inheriting these function signatures from one or more interfaces, overriding each interface function, and providing an implementation of each function. This is how a C++ COM application \ldblquote implements interfaces
\rdblquote  on an object. 
\par Implementing objects and interfaces in other languages is similar in nature, depending on the language. In C, for example, an interface is a structure containing a pointer to a table of function pointers, one for each method in the interface. It is very s
traightforward to use or to implement a COM object in C, or indeed in any programming language which supports the notion of function pointers. No special tools or language enhancements are required (though of course such things may be desirable).
\par The abstract-base class comparison exposes an attribute of the \ldblquote contract\rdblquote  concept of interfaces: if you want to implement any single function in an interface, you must provide some implementation for {\i every}
 function in that interface. The implementation might be nothing more than a single return statement when the object has nothing to do in that interface function. In most cases there is some meaningful implementation in
 each function, but the number of lines of code varies greatly (one line to hundreds, potentially).
\par A particular object will provide implementations for the functions in every interface that it supports. Objects which have the same set of interfaces and the same implementations for each are often said (loosely) to be instances of the same class because 
they generally implement those interfaces in a certain way. However, all access to the instances of the class by clients will only be through interfaces; cli
ents know nothing about an object other than it supports certain interfaces. As a result, classes play a much less significant role in COM than they do in other object oriented systems.
\par COM uses the word \ldblquote interface\rdblquote  in a sense different from that typically used in object-oriented programming using C++. In the C++ context, \ldblquote interface\rdblquote  describes {\i all }
the functions that a class supports and that clients of an object can call to interact with it. A COM interface refers to a pre-defined group of related functions that a COM class implements, but does not necessarily represent {\i all }
the functions that the class supports. This separation of an object\rquote s functionality into groups is what enables COM and COM applications to avoid the problems inherent with versioning traditional all-inclusive interfaces.
\par {\*\bkmkstart _Toc288620958}{\*\bkmkstart _Toc288628774}{\*\bkmkstart _Toc288994517}{\*\bkmkstart _Toc298215745}{\*\bkmkstart _Toc306725107}{\*\bkmkstart _Toc324051531}{\*\bkmkstart _Toc324051716}{\*\bkmkstart _Toc324051958}{\pntext\pard\plain\b\i\fs22 2.
1.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Interfaces and Inheritance{\*\bkmkend _Toc288620958}{\*\bkmkend _Toc288628774}{\*\bkmkend _Toc288994517}
{\*\bkmkend _Toc298215745}{\*\bkmkend _Toc306725107}{\*\bkmkend _Toc324051531}{\*\bkmkend _Toc324051716}{\*\bkmkend _Toc324051958}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM separates class hierarchy (or indeed any other {\i implementation }technology) from interface hierarchy and both of those from any implementation hierarchy.  Therefore, interface inheritan
ce is only applied to reuse the definition of the contract associated with the base interface. There is no selective inheritance in COM: if one interface inherits from another, it includes all the functions that the other interface defines, for the same r
eason than an object must implement all interface functions it inherits.
\par Inheritance is used sparingly in the COM interfaces. Most of the pre-defined interfaces inherit directly from {\cs58\f5\fs16\lang1024 IUnknown }(to receive the fundamental functions like {\cs58\f5\fs16\lang1024 QueryInterface}), rathe
r than inheriting from another interface to add more functionality. Because COM interfaces are inherited from {\cs58\f5\fs16\lang1024 IUnknown}
, they tend to be small and distinct from one another. This keeps functionality in separate groups that can be independently updated from the other interfaces, and can be recombined with other interfaces in semantically useful ways.
\par In addition, interfaces only use single inheritance, never multiple inheritance, to obtain functions from a base interface. Providing otherwise would significant
ly complicate the interface method call sequence, which is just an indirect function call, and, further, the utility of multiple inheritance is subsumed within the capabilities provided by {\cs58\f5\fs16\lang1024 QueryInterface}.
\par {\*\bkmkstart _Toc288620944}{\*\bkmkstart _Toc288628760}{\*\bkmkstart _Toc288994503}{\*\bkmkstart _Toc298215746}{\*\bkmkstart _Toc306725108}{\*\bkmkstart _Toc324051532}{\*\bkmkstart _Toc324051717}{\*\bkmkstart _Toc324051959}{\pntext\pard\plain\b\i\fs22 2.
1.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Interface Definitions: IDL{\*\bkmkend _Toc288620944}{\*\bkmkend _Toc288628760}{\*\bkmkend _Toc288994503}
{\*\bkmkend _Toc298215746}{\*\bkmkend _Toc306725108}{\*\bkmkend _Toc324051532}{\*\bkmkend _Toc324051717}{\*\bkmkend _Toc324051959}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 When a designer creates an interface, that designer usually defines it using an Interface Description Lan
guage (IDL). From this definition an IDL compiler can generate header files for programming languages such that applications can use that interface, create proxy and st
ub objects to provide for remote procedure calls, and output necessary to enable RPC calls across a network.
\par IDL is simply a tool (one of possibly many) for the convenience of the interface designer and is not central to COM\rquote 
s interoperability. It really just saves the designer from manually creating many header files for each programming environment and from creating proxy and stub objects by hand, which would not likely be a fun task.
\par Chapter 13 describes the Microsoft Interface Description Language in detail.  In addition, Chapter 14 covers Type Libraries which are the machine readable form of IDL, used by tools and other components at runtime.
\par {\*\bkmkstart _Toc298215747}{\*\bkmkstart _Toc306725109}{\*\bkmkstart _Toc324051533}{\*\bkmkstart _Toc324051718}{\*\bkmkstart _Toc324051960}{\*\bkmkstart _Toc288620948}{\*\bkmkstart _Toc288628764}{\*\bkmkstart _Toc288994507}{\*\bkmkstart _Toc288620946}
{\*\bkmkstart _Toc288628762}{\*\bkmkstart _Toc288994505}{\pntext\pard\plain\b\i\fs22 2.1.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Basic Operations: The {\i0 IUnknown }
Interface{\*\bkmkend _Toc298215747}{\*\bkmkend _Toc306725109}{\*\bkmkend _Toc324051533}{\*\bkmkend _Toc324051718}{\*\bkmkend _Toc324051960}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\*\bkmkend _Toc288620948}{\*\bkmkend _Toc288628764}{\*\bkmkend _Toc288994507}All objects in COM, through any interface, allow clients access to two basic operations:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 Navigating between multiple interfaces on an object through the {\cs58\f5\fs16\lang1024 
QueryInterface }function.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Controlling the object\rquote s lifetime through a reference counting mechanism handled with functions called {\cs58\f5\fs16\lang1024 AddRef }and {\cs58\f5\fs16\lang1024 Release}.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Both of these operations as well as the three functions (and only these three) make up the {\cs58\f5\fs16\lang1024 IUnknown }
interface from which all other interfaces inherit. That is, all interfaces are polymorphic with {\cs58\f5\fs16\lang1024 IUnknown }so they all contain {\cs58\f5\fs16\lang1024 QueryInterface}, {\cs58\f5\fs16\lang1024 AddRef}, and {\cs58\f5\fs16\lang1024 
Release }functions.
\par {\*\bkmkstart _Toc288620950}{\*\bkmkstart _Toc288628766}{\*\bkmkstart _Toc288994509}{\*\bkmkstart _Toc298215748}{\*\bkmkstart _Toc306725110}{\pntext\pard\plain\b\fs20\lang1024 2.1.4.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Navigating Multiple Interfaces: the {\i QueryInterface }Function{\*\bkmkend _Toc288620950}{\*\bkmkend _Toc288628766}{\*\bkmkend _Toc288994509}{\*\bkmkend _Toc298215748}
{\*\bkmkend _Toc306725110}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As described in Chapter 1, {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }is the mechanism by which a client, having obtained one interface pointer on a particular object, can request additional pointers to {\i other 
}interfaces on that same object. An input parameter to {\cs58\f5\fs16\lang1024 QueryInterface }is the interface identifier (IID) of the interface being requested. If the ob
ject supports this interface, it returns that interface on itself through an accompanying output parameter typed as a generic void; if not, the object returns an error.
\par In effect, what {\cs58\f5\fs16\lang1024 QueryInterface }accomplishes is a switch between contracts on the object. A given interface embodies the interaction that a certain contract requires. Interfaces are groups of functions because con
tracts in practice invariably require more than one supporting function. {\cs58\f5\fs16\lang1024 QueryInterface }separates the request \ldblquote Do you support a given contract?\rdblquote 
 from the high-performance use of that contract once negotiations have been successful. Thus, the (minimal) cost of the contract negotiation is amortized over the subsequent use of the contract. 
\par Conversely, {\cs58\f5\fs16\lang1024 QueryInterface }provides a robust and reliable way for a component to indicate that in fact does {\i not} support a given contract. That is, if using {\cs58\f5\fs16\lang1024 QueryInterface }one asks an \ldblquote old
\rdblquote  object whether it supports a \ldblquote new\rdblquote  interface (one, say, that was invented after the old object has been shipped), then the old object will reliably and robustly answer \ldblquote no;\rdblquote 
 the technology which supports this is the algorithm by which II
Ds are allocated. While this may seem like a small point, it is excruciatingly important to the overall architecture of the system, and this capability to robustly inquire of old things about new functionality is, surprisingly, a feature not prese
nt in most other object architectures.
\par The strengths and benefits of the {\cs58\f5\fs16\lang1024 QueryInterface }mechanism need not be reiterated here further, but there is one pressing issue: how does a client obtain its first interface pointer to an object? That question is of cen
tral interest to COM applications but has no one answer. There are, in fact, four methods through which a client obtains its first interface pointer to a given object:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 Call a COM Library API function that creates an object of a pre-determined type\emdash tha
t is, the function will only return a pointer to one specific interface for a specific object class.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Call a COM Library API function that can create an object based on a class identifier and that returns any type interface pointer requested.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Call a member function of some interface that creates another object (or connects to an existing one) and returns an interface pointer on that separate object.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Connecting to objects through an \ldblquote intelligent/persistent name\rdblquote  (moniker) falls into this category.}}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Implement an object with an interface through which other objects pass their interface pointer to the client directly. This is the case where the client is an object implementor and passes a pointer to its ob
ject to another object to establish a bi-directional connection.
\par {\*\bkmkstart _Toc288620951}{\*\bkmkstart _Toc288628767}{\*\bkmkstart _Toc288994510}{\*\bkmkstart _Toc298215749}{\*\bkmkstart _Toc306725111}{\pntext\pard\plain\b\fs20\lang1024 2.1.4.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Reference Counting{\*\bkmkend _Toc288620951}{\*\bkmkend _Toc288628767}{\*\bkmkend _Toc288994510}: Controlling Object Life-cycle{\*\bkmkend _Toc298215749}{\*\bkmkend _Toc306725111}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Just like an application must free memory it allocated once that memory is no longer in use, a client of an object is responsible for freeing the object when that object is no longer needed. In an object-oriented sy
stem the client can only do this by giving the object an instruction to free itself.
\par However, the difficulty lies in having the object know when it is safe to free itself. COM objects, which are dynamically allocated, must allow the client to decide when the object is no longer in use, especially
 for local or remote objects that may be in use by multiple clients at the same time\emdash the object must wait until {\i all} clients are finished with it before freeing itself.
\par COM specifies a {\i reference counting }mechanism to provide this control. Each object maintains a 32-bit ref
erence count that tracks how many clients are connected to it, that is, how many pointers exist to any of its interfaces in any client. The use of a 32-bit counter (more than four billions clients) means that there\rquote s virtually no chance of 
overloading the count.
\par The two {\cs58\f5\fs16\lang1024 IUnknown} functions of {\cs58\f5\fs16\lang1024 AddRef} and {\cs58\f5\fs16\lang1024 Release} that all objects must implement control the count: {\cs58\f5\fs16\lang1024 AddRef} increments the count and {
\cs58\f5\fs16\lang1024 Release}{\i  }decrements it. When the reference count is decremented to zero, {\cs58\f5\fs16\lang1024 Release} is allowed to free the object because no one else is using it anywhere. Most objects have only one implemen
tation of these functions (along with {\cs58\f5\fs16\lang1024 QueryInterface}) that are shared between all interfaces, though this is just a common implementation approach. Architecturally, from a client\rquote 
s perspective, reference counting is strictly and clearly a per-interface notion.
\par Whenever a client calls a function that returns a new interface pointer to it, such as {\cs58\f5\fs16\lang1024 QueryInterface}, the function being called is responsible for incrementing the reference count through the returned pointer. For ex
ample, when a client first creates an object it receives back an interface pointer to an object that, from the client\rquote s point of view, has a reference count of one. If the client calls {\cs58\f5\fs16\lang1024 QueryInterface }once for another inter
face pointer, the reference count is two. The client must then call {\cs58\f5\fs16\lang1024 Release }through {\i both} pointers (in any order) to decrement the reference count to zero before the object as a whole can free itself.
\par In general, every copy of any pointer to any interface requires a reference count on it. Chapter 3, however, identifies some important optimizations that can be made to eliminate extra unnecessary overhead with ref
erence counting and identifies the specific cases in which calling {\cs58\f5\fs16\lang1024 AddRef} is absolutely necessary.
\par {\*\bkmkstart _Toc298215750}{\*\bkmkstart _Toc306725112}{\*\bkmkstart _Toc324051534}{\*\bkmkstart _Toc324051719}{\*\bkmkstart _Toc324051961}{\pntext\pard\plain\b\i\fs22 2.1.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 How an Interface Works{\*\bkmkend _Toc288620946}{\*\bkmkend _Toc288628762}{\*\bkmkend _Toc288994505}{\*\bkmkend _Toc298215750}{\*\bkmkend _Toc306725112}{\*\bkmkend _Toc324051534}
{\*\bkmkend _Toc324051719}{\*\bkmkend _Toc324051961}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An instantiation of an interface{\i  }implementation (because the defined interfaces themselves cannot be in
stantiated without implementation) is simply pointer to an array of pointers to functions. Any code that has access to that array\emdash a pointer through which it can access the array\emdash can call the functions in that inter
face. In reality, a pointer to an interface is actually a pointer to a pointer to the table of function pointers. This is an inconvenient way to speak about interfaces, so the term \ldblquote interface pointer\rdblquote 
 is used instead to refer to this multiple indirection. Conceptually, then, an interface pointer can be viewed simply as a pointer to a function table in which you can call those functions by dereferen
cing them by means of the interface pointer as shown in Figure 2-1.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw19446\pich11244\picwgoal11025\pichgoal6375 \picscalex70\picscaley70 
010009000003ce0e000008003100000000000e00000026060f001200ffffffff000008000000fef5aefa3807a4040a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02aefafef5050000000c02f6093a1131000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000fdf5adfa280793040e00000026060f001200ffffffff00000800000039f91dfd58fbf8fd07000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200070000001b0409fe69fb2dfd49f9050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff00
0000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100070000001b04f8fd58fb1dfd39f9050000001402000000000a00000026060f000a00ffffffff0100000000000e
00000026060f001200ffffffff00000800000009f69dfb40f948fc07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200070000001b0459fc51f9adfb19f6050000001402000000002d00000042010500000028000000080000000800000001000100000000002000000000000000
00000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100070000001b0448
fc40f99dfb09f6050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a1fc0dfdf000600007000000fc020000000000020000040000002d01010004000000f0010300040000002d010200070000001b04710001011dfdb1fc05000000140200000000
2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208
000000fa0206000800000000000002040000002d01010004000000f0010400070000001b046000f0000dfda1fc050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007df938fd1ffbedfd1c000000fb02a0ff00000000000090010000000000000000
417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010012000000320aabfdb7f907000000706f696e746572fc35003600150036001a003600200004000000020102000a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a7fce3fde600ebfd040000002d01020007000000fc020100000000000000040000002d01050004000000f001010004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f
4603000000000000957fc5773002f87f040000002d01010004000000f0010400030000001e000700000016048bfee60043fda7fc08000000fa0206000800000000000002040000002d010300050000001402e3fd70f8050000001302e3fd1505040000002d010200040000002d01050004000000f0010300040000002701ff
ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000075fc60fcfc0015fd1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d010300040000002e011800050000000a02
000000000500000009020000000204000000020101002b000000320ad3fcaffc18000000496e746572666163652046756e6374696f6e205461626c651b0035001b00350020001b003500300036001a003b003500360030001a001600350035001b003b00350036001500350004000000020102000a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff000008000000fdf5a0fb39f955fc1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01040004000000f0010300040000002e011800050000000a0200000000
05000000090200000002040000000201010021000000320a13fc37f611000000496e7465726661636520506f696e7465726e1b0035001b00350020001b003500300036001a0040003600150035001b003500200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
0008000000a7fcbbfee600c3fe040000002d010200040000002d010500040000002d01010004000000f0010400030000001e0007000000160463ffe6001bfea7fc08000000fa0206000800000000000002040000002d010300050000001402bbfe70f8050000001302bbfe1505040000002d010200040000002d0105000400
0000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a7fc93ffe6009bff040000002d010200040000002d010500030000001e000700000016043b00e600f3fea7fc08000000fa0206000800000000000002040000002d0103000500000014
0293ff70f805000000130293ff1505040000002d010200040000002d01050004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b5fc28fd8c00ddfd1c000000fb02a0ff00000000000090010000000000000000417269616c000f03
00ed4e0338f70f037884c577000000000c000000c015f87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a9bfdeffc14000000506f696e74657220746f2046756e6374696f6e3140003500160035001b00350020001b001b0035001b003a0036
00350030001b00150035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a003adfa2807b3fc07000000fc020000000000020000040000002d010400090000001c06d800d800c4fc3907bdfab00305000000140293ff15052d0000004201
050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff0208000000fa0206
000800000000000002040000002d010400090000001c06d500d500b3fc2807adfaa00305000000140293ff15051c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b016f87f040000002d01070004000000f0010300040000002e0118000500
00000a02000000000500000009020000000204000000020101001c000000320a1cfbff030e00000046756e6374696f6e31282e2e2e293b003500350030001b00150036003500360020001a001b001b00200004000000020102001c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338
f70f037884c577000000000c000000c015f87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a8ffb8f04010000007b01200004000000020102001c000000fb02a0ff00000000000090010000000000000000417269616c00
0f0300ed4e0338f70f037884c577000000000c000000b016f87f040000002d01070004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a02fc8f04030000002e2e2e011b001a001b0004000000020102001c000000fb02a0ff000000000000900100
00000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a75fc8f04010000007d01200004000000020102000a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff00000800000090f740fc48f998fd08000000fa0206000800000000000002040000002d01070004000000f0010400040000002d0105000a0000002503030090f740fc90f790fdd1f890fd07000000fc020000000000020000040000002d01040004000000f00106
00040000002d0102000a0000002403030040f990fdc8f86cfdc8f8b3fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b5fc08fe8c00bdfe1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c00
00006018f87f040000002d01060004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a7bfeeffc14000000506f696e74657220746f2046756e6374696f6e3240003500160035001b00350020001b001b0035001b003a003600350030001b00150035
003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b5fcd8fe8c008dff1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d0103000400
0000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a4bffeffc14000000506f696e74657220746f2046756e6374696f6e3340003500160035001b00350020001b001b0035001b003a003600350030001b00150035003600350004000000020102000a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004dfea8ff19ff5d001c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006018f87f040000002d01060004000000f0010300040000002e0118000500
00000a02000000000500000009020000000204000000020101000c000000320a1b0087fe030000002e2e2e001b001a001b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000050fb90fda8fc98fd040000002d010200040000002d01050004000000f0
01070004000000f0010400040000002d01010004000000f0010600030000001e0007000000160438fe64fcf0fc50fb08000000fa0206000800000000000002040000002d01030005000000140290fd00fa05000000130290fdf0fd040000002d010200040000002d01050004000000f0010300040000002701ffff07000000
fc020000000000020000040000002d0103000a00000024030300a0fc90fd29fc6cfd29fcb3fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a0034dfd280753ff07000000fc020000000000020000040000002d01040004000000f0010300090000001c06d800d80064
ff39075dfdb00305000000140290fdf0fd2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000
090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400090000001c06d500d50053ff28074dfda00305000000140290fdf0fd1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b016f87f040000
002d010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320abcfdff030e00000046756e6374696f6e32282e2e2e293b003500350030001b00150036003500360020001a001b001b00200004000000020102001c000000fb02a0ff0000000000009001000000000000
0000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a2ffe8f04010000007b01200004000000020102001c000000fb02a0ff00000000000090
010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b016f87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320aa2fe8f04030000002e2e2eff1b001a001b0004000000020102001c00
0000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a15ff8f04010000007d012000040000
00020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a003edff2807f30107000000fc020000000000020000040000002d01060004000000f0010300040000002d010200090000001c06d800d80004023907fdffb00305000000140290fdf0fd2d00000042010500
00002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001060005000000090200000002050000000102ffffff0208000000fa02060008
00000000000002040000002d01060004000000f0010400090000001c06d500d500f3012807edffa00305000000140290fdf0fd1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d01040004000000f001070004000000
2e011800050000000a02000000000500000009020000000204000000020101001c000000320a5c00ff030e00000046756e6374696f6e33282e2e2e293b003500350030001b00150036003500360020001a001b001b00200004000000020102001c000000fb02a0ff00000000000090010000000000000000417269616c000f
0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01070004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320acf008f04010000007b01200004000000020102001c000000fb02a0ff00000000000090010000000000000000
417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d01040004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a42018f04030000002e2e2eff1b001a001b0004000000020102001c000000fb02a0ff000000
00000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01070004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320ab5018f04010000007d01200004000000020102000a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a0038d022807930407000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06d800d800a40439079d02b00305000000140290fdf0fd2d00000042010500000028000000080000
00080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa02060008000000000000020400
00002d01040004000000f0010600090000001c06d500d500930428078d02a00305000000140290fdf0fd1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b016f87f040000002d01060004000000f0010700040000002e011800050000000a
02000000000500000009020000000204000000020101000c000000320aa803ff03030000002e2e2eff1b001a001b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f000b0fb980398fd08000000fa0206000800000000000002040000002d010700
04000000f0010400040000002d0105000c00000025030400f00090fd700290fd7002b0fb2103b0fb07000000fc020000000000020000040000002d01040004000000f0010300040000002d0102000a000000240303009003b0fb19038cfb1903d3fb0a00000026060f000a00ffffffff0100000000000e00000026060f0012
00ffffffff000008000000f00050fe980358fe040000002d010200040000002d01050004000000f001070004000000f0010400040000002d01010004000000f0010600030000001e00070000001604f8fe5403b0fdf00008000000fa0206000800000000000002040000002d01030005000000140250fe50fe050000001302
50fe3006040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300900350fe1a032cfe1a0373fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f00010ff9803f80008
000000fa0206000800000000000002040000002d010400040000002d0105000c00000025030400f00010ff700210ff7002f0002103f000040000002d010300040000002d0102000a000000240303009003f0001903cc00190313010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000
08000000f000000098039803040000002d010400040000002d0105000c00000025030400f0000000a9010000a901900322039003040000002d010300040000002d0102000a000000240303009003900318036c031803b3030a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000
000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f001040004000000f001030003000000000000002d0100}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-1: An interface pointer is a pointer to a pointer to an array of pointers\line to the functions in the interface.
\par \pard\plain \qj\sa60\widctlpar\tx10170 \f4\fs20 Since these function tables are inconvenient to draw they are represented with the \ldblquote plug-in jack\rdblquote  or \ldblquote bubbles and push-pins\rdblquote 
 diagram first shown in Chapter 1 to mean exactly the same thing:
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw11324\pich2354\picwgoal6420\pichgoal1335 \picscalex70\picscaley70 
0100090000033704000006003100000000000e00000026060f001200ffffffff00000800000088f67005900086070a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02700588f6050000000c021602080a31000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000089f66d05800073070e00000026060f001200ffffffff00000800000089f63506c0f9e00607000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200070000001b04f106d1f9450699f6050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff00
0000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100070000001b04e006c0f9350689f6050000001402000000000a00000026060f000a00ffffffff0100000000000e
00000026060f001200ffffffff0000080000008df63806c9f9ed061c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d010400040000002e011800050000000a0200000000050000000902000000020400000002010100
21000000320aab06c7f611000000496e7465726661636520506f696e746572001b0035001b00350020001b003500300036001a0040003600150035001b003500200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f8fc6d058000730707000000fc
020000000000020000040000002d01050004000000f0010300040000002d010200090000001c06d800d800840791007d0508fd050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000
ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f0010100090000001c06d500d500730780006d05f8fc050000001402000000001c000000fb0270
ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01010004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a9706e8fd060000004f626a656374700050002000
50004800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000008fb3006a0fbc80607000000fc020000000000020000040000002d01040004000000f0010300040000002d010200070000001804d106a9fb380610fb050000001402000000002d0000
004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000
fa0206000800000000000002040000002d01040004000000f0010500070000001804c806a0fb300608fb050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a0fb7806f8fc8006040000002d01020007000000fc020100000000000000040000002d
01050004000000f001040004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010100030000001e000700000016042007f8fcd805a0fb08000000fa0206000800000000000002
040000002d010100050000001402780650fa050000001302780640fe040000002d010200040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8f9800610fb8806040000002d010200040000002d010500030000
001e000700000016042807ccfae005b8f908000000fa0206000800000000000002040000002d010100050000001402800668f8050000001302800658fc040000002d010200040000002d01050004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a0000002403030008fb8006
91fa5c0691faa3060a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f0010100030000000000ff
fffdff00004c00c72f00000000c4088f3500}}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 
Objects with multiple interfaces are merely capable of providing more than one function table. Function tables can be created manually in a C application or almost automatically with C++ (and other object ori
ented languages that support COM). Chapter 3 describes exactly how this is accomplished along with how the implementation of the interface functions know exactly which object is being used at any given time.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
With appropriate compiler support (which is inherent in C and C++), a client can call an interface function through the name of the function and not its position in the array. The names of functions and the fact that an interface is a type allows the comp
iler to check the types of parameters and return values of each interface function call. In contrast, such type-checking is not available even in C or C++ if a client used a position-based calling scheme.
\par {\*\bkmkstart _Toc288620959}{\*\bkmkstart _Toc288628775}{\*\bkmkstart _Toc288994518}{\*\bkmkstart _Toc298215751}{\*\bkmkstart _Toc306725113}{\*\bkmkstart _Toc324051535}{\*\bkmkstart _Toc324051720}{\*\bkmkstart _Toc324051962}{\pntext\pard\plain\b\i\fs22 2.
1.6\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Interfaces Enable Interoperability{\*\bkmkend _Toc288620959}{\*\bkmkend _Toc288628775}{\*\bkmkend _Toc288994518}
{\*\bkmkend _Toc298215751}{\*\bkmkend _Toc306725113}{\*\bkmkend _Toc324051535}{\*\bkmkend _Toc324051720}{\*\bkmkend _Toc324051962}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM is designed around the use of interfaces because interfaces enable interoperability. There are three properties of interfaces that provide this: polymorphism, encapsulation, and transparent remoting.
\par {\*\bkmkstart _Toc288620960}{\*\bkmkstart _Toc288628776}{\*\bkmkstart _Toc288994519}{\*\bkmkstart _Toc298215752}{\*\bkmkstart _Toc306725114}{\pntext\pard\plain\b\fs20\lang1024 2.1.6.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Polymorphism{\*\bkmkend _Toc288620960}{\*\bkmkend _Toc288628776}{\*\bkmkend _Toc288994519}{\*\bkmkend _Toc298215752}{\*\bkmkend _Toc306725114}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\i Polymorphism}
 means the ability to assume many forms, and in object-oriented programming it describes the ability to have a single statement invoke different functions at different times. All COM interfaces are polymorphic; when you call a function using an interface 
pointer, you don\rquote t specify which implementation is invoked. A call to {\cs58\f5\fs16\lang1024 pInterface->SomeFunction }can cause different code to run depending on what kind of object is the implementor of the interface pointed by {
\cs58\f5\fs16\lang1024 pInterface}{\i \emdash }while the semantics of the function are always the same, the implementation details can vary.
\par Because the interface standard is a binary standard, clients that know how to use a given interface can interact with any object that supports that interface {\i no matter how the object implements that contract}. This al
lows interoperability as you can write an application that can cooperate with other applications without you knowing who or what they are beforehand.
\par {\*\bkmkstart _Toc288620961}{\*\bkmkstart _Toc288628777}{\*\bkmkstart _Toc288994520}{\*\bkmkstart _Toc298215753}{\*\bkmkstart _Toc306725115}{\pntext\pard\plain\b\fs20\lang1024 2.1.6.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Encapsulation{\*\bkmkend _Toc288620961}{\*\bkmkend _Toc288628777}{\*\bkmkend _Toc288994520}{\*\bkmkend _Toc298215753}{\*\bkmkend _Toc306725115}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Other advantages of COM arise from its enforcement of encapsulation. If you have implemented an interface, you can change or update the implementation without affecting any of the clients of your class. Simi
larly, you are immune to changes that others make in their implementations of their interfaces; if they improve their implementation, you can benefit from it without recompiling your code.
\par This separation of contract and implementation can also allow you to take advantage of the different implementations underlying an interface, even though the interface remains the same. Different implementa
tions of the same interface are interchangeable, so you can choose from multiple implementations depending on the situation.
\par Interfaces provides extensibility; a class can support new functionality by implementing additional interfaces without interfering with any of its existing clients. Code using an object\rquote s {\cs58\f5\fs16\lang1024 ISomeInterface}
 is unaffected if the class is revised to in addition support {\cs58\f5\fs16\lang1024 IAnotherInterface}.
\par {\*\bkmkstart _Toc288620962}{\*\bkmkstart _Toc288628778}{\*\bkmkstart _Toc288994521}{\*\bkmkstart _Toc298215754}{\*\bkmkstart _Toc306725116}{\pntext\pard\plain\b\fs20\lang1024 2.1.6.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Transparent Remoting{\*\bkmkend _Toc288620962}{\*\bkmkend _Toc288628778}{\*\bkmkend _Toc288994521}{\*\bkmkend _Toc298215754}{\*\bkmkend _Toc306725116}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM interfaces allow one application to interact with others anywhere on the network just as if they were on the same machine. This expands the range of an object\rquote 
s interoperability: your application can use any object that supports a given contract, no matter how the object implements that contract, and no matter what machine the object resides on.
\par Before COM, class code such as C++ class libraries ran in same process, either linked into the executable or as a dynamic-link library. Now class code can run in a separate process, on the same machine or on a differ
ent machine, and your application can use it with no special code. COM can intercept calls to interfaces through the function table and generate remote procedure calls instead.
\par {\*\bkmkstart _Toc298215755}{\*\bkmkstart _Toc306725117}{\*\bkmkstart _Toc324051536}{\*\bkmkstart _Toc324051721}{\*\bkmkstart _Toc324051963}{\*\bkmkstart _Toc337439304}{\*\bkmkstart _Toc337440768}{\*\bkmkstart _Toc339182930}{\pntext\pard\plain\b 2.2\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 COM Application Responsibilities{\*\bkmkend _Toc298215755}{\*\bkmkend _Toc306725117}{\*\bkmkend _Toc324051536}
{\*\bkmkend _Toc324051721}{\*\bkmkend _Toc324051963}{\*\bkmkend _Toc337439304}{\*\bkmkend _Toc337440768}{\*\bkmkend _Toc339182930}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Each process that uses COM in any way\emdash client, server, object implementor\emdash is responsible for three things:
\par {\pntext\pard\plain\fs20 1.\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}Verify that the COM Library is a compatible version with the COM function {\cs58\f5\fs16\lang1024 CoBuildVersion}{\i .}

\par {\pntext\pard\plain\fs20 2.\tab}Initialize the COM Library before using any other functions in it by calling the COM function {\cs58\f5\fs16\lang1024 CoInitialize}.
\par {\pntext\pard\plain\fs20 3.\tab}Un-initialize the COM Library when it is no longer in use by calling the COM function {\cs58\f5\fs16\lang1024 CoUninitialize}{\i .}
\par \pard \qj\sa60\widctlpar While these responsibilities and functions are covered in detail in Chapter 4, note first that most COM Library functions, primarily those that deal with the COM foundation, are prefixed with \ldblquote Co\rdblquote 
 to identify their origin. The COM Library may implement other functions to support persistent storage, naming, and data transfer without the \ldblquote {\cs58\f5\fs16\lang1024 Co}\rdblquote  prefix.
\par {\*\bkmkstart _Toc298215756}{\*\bkmkstart _Toc306725118}{\*\bkmkstart _Toc324051537}{\*\bkmkstart _Toc324051722}{\*\bkmkstart _Toc324051964}{\pntext\pard\plain\b\i\fs22 2.2.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Memory Management Rules{\*\bkmkend _Toc298215756}{\*\bkmkend _Toc306725118}{\*\bkmkend _Toc324051537}{\*\bkmkend _Toc324051722}{\*\bkmkend _Toc324051964}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In COM there are many interface member functions and APIs which are called by code written by one pro
gramming organization and implemented by code written by another. Many of the parameters and return values of these functions are of types that can be passed around b
y value; however, sometimes there arises the need to pass data structures for which this is not the case, and for which it is therefore necessary that the caller and the callee agree as to the allocation and de-allocation policy. This could in theory be d
ecided and documented on an individual function by function basis, but it is much more reasonable to adopt a universal convention for dealing with these parameters. Also, having a clear convention is important technically in order that the COM remote proc
edure call implementation can correctly manage memory.
\par Memory management of pointers to interfaces is always provided by member functions in the interface in question. For all the COM interfaces these are the {\cs58\f5\fs16\lang1024 AddRef} and {\cs58\f5\fs16\lang1024 Release} functions found in the {
\cs58\f5\fs16\lang1024 IUnknown}{\i  }interface, from which again all other COM interfaces derive (as described earlier in this chapter). This section relates only to non-by-value parameters which are {\i not}
 pointers to interfaces but are instead more mundane things like strings, pointers to structures, etc.
\par The COM Library provides an implementation of a memory allocator (see {\cs58\f5\fs16\lang1024 CoGetMalloc}{\pard\plain \qj\sa60\widctlpar \v\f4\fs20 {\xe {CoGetMalloc}}}{\cs58\f5\fs16\lang1024  }and {\cs58\f5\fs16\lang1024 CoTaskMemA}{
\cs58\f5\fs16\lang1024 l}{\cs58\f5\fs16\lang1024 loc}{\pard\plain \qj\sa60\widctlpar \v\f4\fs20 {\xe {CoTaskMemAlloc}}}
). Whenever ownership of an allocated chunk of memory is passed through a COM interface or between a client and the COM library, this allocator must be used to allocate the memory.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Any internally-used memory in COM and in-process objects can use any allocation scheme desired, but the COM memory allocator is a handy, efficient, and thread-safe allocator.
}}
\par Each parameter to and the return value of a function can be classified into one of three groups: an {\b in} parameter, an {\b out} parameter (which includes return values), or an {\b in-out} parameter. In each class of parame
ter, the responsibility for allocating and freeing non-by-value parameters is the following:
\par \pard\plain \s75\fi-1800\li2520\ri360\sa120\widctlpar \f4\fs20 {\b in} parameter{\pard\plain \s75\fi-1800\li2520\ri360\sa120\widctlpar \v\f9\fs12 {\xe {\f9\fs12 \ldblquote inparameter\rdblquote }}}\tab Allocated and freed by the caller.
\par {\b out} parameter{\pard\plain \s75\fi-1800\li2520\ri360\sa120\widctlpar \v\f9\fs12 {\xe {\f9\fs12 \ldblquote outparameter\rdblquote }}}\tab Allocated by the callee; freed by the caller.
\par {\b in-out} parameter{\pard\plain \s75\fi-1800\li2520\ri360\sa120\widctlpar \v\f9\fs12 {\xe {\f9\fs12 \ldblquote in-outparameter\rdblquote }}}\tab 
Initially allocated by the caller, then freed and re-allocated by the callee if necessary. As with out parameters, the caller is responsible for freeing the final returned value.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
In the latter two cases there is one piece of code that allocates the memory and a different piece of code that frees it. In order for this to be successful, the two pieces of code must of course have knowledge of which memory allocator is being 
used. Again, it is often the case that the two pieces of code are written by independent development organizations. To make this work, we require that the COM allocator be used.
\par Further, the treatment of out and in-out parameters in failure conditions needs special attention. If a function returns a status code which is a failure code, then in general the caller has no way to clean up the {\i out }or {\i in-out }
parameters. This leads to a few additional rules:
\par \pard\plain \s75\fi-1800\li2520\ri360\sa60\widctlpar \f4\fs20 {\b out} parameter\tab In error returns, out parameters must be {\i always }reliably set to a value which will be cleaned up without any action on the caller\rquote s part. Fur
ther, it is the case that all out pointer parameters (usually passed in a pointer-to-pointer parameter, but which can also be passed as a member of a caller-allocate callee-fill structure) {\i must}
 explicitly be set to NULL. The most straightforward way to ensure this is (in part) to set these values to NULL on function entry.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
This rule is stronger than it might seem to need to be in order to promote more robust application interoperability.}}
\par \pard \s75\fi-1800\li2520\ri360\sa120\widctlpar \tab (On success returns, the semantics of the function of course determine the legal return values.)
\par {\b in-out} parameter\tab In error returns, all in-out parameters must either be left alone by the callee (and thus remaining at the value to which it was initialized by the caller; if the caller didn\rquote t initialize it, then it\rquote 
s an out parameter, not an in-out parameter) or be explicitly set as in the out parameter error return case.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The specific COM APIs and interfaces that apply to memory management are discussed further below.
\par Remember that these memory management conventions for COM applications apply only across public interfaces and APIs\emdash there is no requirement at all that memory allocation strictly internal to a COM application need be done using these mechanisms.

\par {\*\bkmkstart _Toc298215757}{\*\bkmkstart _Toc306725119}{\*\bkmkstart _Toc324051538}{\*\bkmkstart _Toc324051723}{\*\bkmkstart _Toc324051965}{\*\bkmkstart _Toc337439305}{\*\bkmkstart _Toc337440769}{\*\bkmkstart _Toc339182931}{\pntext\pard\plain\b 2.3\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The COM Client/Server Model{\*\bkmkend _Toc298215757}{\*\bkmkend _Toc306725119}{\*\bkmkend _Toc324051538}
{\*\bkmkend _Toc324051723}{\*\bkmkend _Toc324051965}{\*\bkmkend _Toc337439305}{\*\bkmkend _Toc337440769}{\*\bkmkend _Toc339182931}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Chapter 1 mentioned how COM supports a model of client/server interaction between a user of an object\rquote s services, the client, and the implementor of that object and its services, the server. T
o be more precise, the client is {\i any }
piece of code (not necessarily an application) that somehow obtains a pointer through which it can access the services of an object and then invokes those services when necessary. The server is some piece of code that implements the object and structures 
in such a way that the COM Library can match that implementation to a class identifier, or CLSID. The involvement of a class identifier is what differentiates a server from a more general object implementor.
\par The COM Library uses the CLSID to provide \ldblquote implementation locator\rdblquote  services to clients. A client need only tell COM the CLSID it wants and the type of server\emdash in-process, local, or remote\emdash 
that it allows COM to load or launch. COM, in turn, locates the implementation of that class and establishes a connection between it and the client. This relationship between client, COM, and server is illustrated in Figure 2-2 on the next page.
\par Chapter 1 also introduced the idea of Location transparency, where clients and servers never need to know how far apart they actually are, that is, whether they are in the same process, different processes, or different machines.
\par This section now takes a closer look at the mechanisms in COM that make this transparency work as well as the responsibilities of client and server applications.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw21140\pich11006\picwgoal11985\pichgoal6240 \picscalex50\picscaley50 
010009000003ca0a000008003100000000000e00000026060f001200ffffffff00000800000084f720fb3e0ae0040a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0220fb84f7050000000c02c009ba1231000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000087f723fb250ac7040e00000026060f001200ffffffff00000800000087f72ffb65fdc0ff07000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0624012401d9ff7efd47fb9ff7050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0622012201c0ff65fd2ffb87f7050000001402000000001c000000fb0270ff0000000000
00bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a48fdaaf906000000436c69656e746800280028005000580030000400000002010200
1c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000100af87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320af5fdeaf80b0000004170706c69
636174696f6e006800580058002800280050005000300028005800580004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f6fd05015603c70407000000fc020000000000020000040000002d01040004000000f0010300040000002d01020007000000
1b04e0046f031d010efe050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005
000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100070000001b04c70456030501f6fd050000001402000000001c000000fb0220ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000
100ff87f040000002d01010004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a25039cff03000000434f4dffa200ae00bb0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000
00740423fb250aa10007000000fc020000000000020000040000002d01050004000000f0010300040000002d010200090000001c065f015f01ba003e0a3bfb8c04050000001402000000002d000000420105000000280000000800000008000000010001000000000020000000000000000000000000000000000000000000
0000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f0010400090000001c065d015d01a100250a23fb7404050000
001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000550659ff910848001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01040004000000f0010100
040000002e011800050000000a020000000005000000090200000002040000000201010010000000320af8ff8f060600000053657276657260005000380050005000380004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0fac8fffefdbd02040000
002d01020007000000fc020100000000000000040000002d01010004000000f001050004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d0003500d48033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010400030000001e00070000001604
7e02bafdc8ffd0fa08000000fa0206000800000000000002040000002d010400050000001402dbfcaaf7050000001302a2051c01040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300f6fdb602b9fd4d0289fd81020a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004e03bd00a805ab02040000002d010200040000002d01010004000000f0010400030000001e00070000001604ab026405ee004e0308000000fa0206000800000000000002040000002d010400050000001402d7fef2070500
000013028904fc00040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300a005bc003005eb005c0521010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007c05f5fb3e
09a0fe07000000fc020000000000020000040000002d01050004000000f0010400090000001c06aa00aa00b9fe57090dfc94050500000014028904fc002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000
ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c06a800a800a0fe3e09f5fb7c050500000014028904fc001c000000fb0270ff000000000000bc
020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000100af87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a72fd7906060000004f626a65637470005800280050005000300004000000020102000a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003903eefcda0386fd07000000fc020000000000020000040000002d01070004000000f0010400040000002d0102000700000018049ffdf30306fd51030500000014028904fc002d000000420105000000280000000800000008
0000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff0208000000fa020600080000000000000204000000
2d01070004000000f001050007000000180486fdda03eefc39030500000014028904fc000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000db0336fd78053efd040000002d010200040000002d01010004000000f001070004000000f0010400040000002d010300040000
00f0010600030000001e00070000001604defd780596fcdb0308000000fa0206000800000000000002040000002d01040005000000140236fd460205000000130236fd0507040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff00000800000038fc38fd4d0341fd040000002d010200040000002d010100030000001e00070000001604e1fd090398fc38fc08000000fa0206000800000000000002040000002d01040005000000140237fd2bf50500000013023afd520a040000002d010200040000002d01010004000000f001040004
0000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300450339fdcd0215fdcd025cfd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000cfa3401c5fc82021c000000fb0290ff000000000000bc020000000000000000417269616c00
0f03500d480338f70f037884c577000000000c000000001af87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320ab60146fa0b0000002831292093437265617465fc25003f0025001f00380051002b003f003e0025003f0004000000020102001c
000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000100ff87f040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a3c029afa070000004f626a656374
9401570045001f003e003e002600380004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ed03bc01a5070a031c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af8
7f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a3e02bc040a000000283229204c6f6361746525003f0025001f00440045003e003e0026003e0004000000020102001c000000fb0290ff000000000000bc02000000000000
0000417269616c000f03500d480338f70f037884c577000000000c000000100ff87f040000002d01060004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320ac40227040e000000696d706c656d656e746174696f6e1f00640044001f003f0063003e
00450025003e0026001f004400450004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003efc43fd9803d80108000000fa0206000800000000000002040000002d010500040000002d0101000b00000017088cfd980346fd3ffcd801980330f93efc0a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000018fe44fffb0118011c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01070004000000f0010600040000002e01180005
0000000a02000000000500000009020000000204000000020101001e000000320ac6ff90fe0f0000002833292020476574206f626a656374ef25003f0025001f001f0057003f0025001f00440045001f003e003e00260004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03
500d480338f70f037884c577000000000c000000100ff87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010022000000320a4c0052fe12000000696e7465726661636520696f696e7465722c1f00450025003e002c0025003e003f003e001f
001f0045001f00440025003f002b001f0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01070004000000f0010600040000002e011800050000000a0200000000050000000902000000020400
0000020101001f000000320ad20074fe1000000072657475726e20746f20436c69656e742c003e00250045002b0045001f00250044002000500020001f003e004400260004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000008fc08fd78fc80fd040000
002d010400040000002d010200040000002d01050007000000180480fd78fc08fd08fc0500000014023afd520a0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005ffefcfb42024afd1c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d
480338f70f037884c577000000000c000000100ff87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010022000000320a7efc99fe120000002834292043616c6c20696e7465726661636525003f0025001f0051003e001f001f0020001f0044
0025003f002b0026003e003e003e0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000
0201010012000000320a04fd53ff070000006d656d626572730064003e00630045003e002c003e0004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ff
ffffff010000000000040000002d010200040000002d01010004000000f001050004000000f0010400040000002d01030004000000f001070003000000000000020000040000002d01060000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-2: Clients locate and access objects through implementation locator\line services in COM. COM then connects the client to the object in a server. Compare\line 
this with Figure 1-2 in Chapter 1.
\par {\*\bkmkstart _Toc288620965}{\*\bkmkstart _Toc290731913}{\*\bkmkstart _Toc290737542}{\*\bkmkstart _Toc290784916}{\*\bkmkstart _Toc298215758}{\*\bkmkstart _Toc306725120}{\*\bkmkstart _Toc324051539}{\*\bkmkstart _Toc324051724}{\*\bkmkstart _Toc324051966}
{\pntext\pard\plain\b\i\fs22 2.3.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 COM Objects and Class Identifiers{\*\bkmkend _Toc288620965}{\*\bkmkend _Toc290731913}
{\*\bkmkend _Toc290737542}{\*\bkmkend _Toc290784916}{\*\bkmkend _Toc298215758}{\*\bkmkend _Toc306725120}{\*\bkmkend _Toc324051539}{\*\bkmkend _Toc324051724}{\*\bkmkend _Toc324051966}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
A COM class is a particular implementation of certain interfaces; the implementation consists of machine code that is executed whenever you interact with an instance of the COM class. COM is designed to allow a class to be used by different applications, 
including applications written without knowledge of that particular class\rquote s existence. Therefore class code exists either in a dynamic linked library ({\cs58\f5\fs16\lang1024 DLL}) or in another appli
cation (EXE). COM specifies a mechanism by which the class code can be used by many different applications.
\par A COM object is an object that is identified by a unique 128-bit {\cs58\f5\fs16\lang1024 CLSID} that associates an object class with a particular {\cs58\f5\fs16\lang1024 DLL} or {\cs58\f5\fs16\lang1024 EXE} in the file system. A {\cs58\f5\fs16\lang1024 
CLSID} is a {\cs58\f5\fs16\lang1024 GUID} itself (like an interface identifier), so no other class, no matter what vendor writes it, has a duplicate {\cs58\f5\fs16\lang1024 CLSID}. Servers implementors generally obtain {\cs58\f5\fs16\lang1024 CLSIDs}
 through the {\cs58\f5\fs16\lang1024 CoCreateGUID}{\i  }function in COM, or through a COM-enabled tool that internally calls this function.
\par The use of unique {\cs58\f5\fs16\lang1024 CLSIDs} avoids the possibility of name collisions among classes because {\cs58\f5\fs16\lang1024 CLSIDs}
 are in no way connected to the names used in the underlying implementation. So, for example, two different vendors can write classes which they call {\cs58\f5\fs16\lang1024 \ldblquote StackClass,\rdblquote } but each will have a unique {
\cs58\f5\fs16\lang1024 CLSID} and therefore avoid any possibility of a collision.
\par Further, no central authoritative and bureaucratic body is needed to allocate or assign {\cs58\f5\fs16\lang1024 CLSIDs}. Thus, server implementors across the world can independently develop and deploy their software without fear of acci
dental collision with software written by others.
\par On its host system, COM maintains a registration database (or \ldblquote registry\rdblquote ) of all the {\cs58\f5\fs16\lang1024 CLSIDs} for the servers installed on the system, that is, a mapping between each {\cs58\f5\fs16\lang1024 CLSID}
 and the location of the {\cs58\f5\fs16\lang1024 DLL} or {\cs58\f5\fs16\lang1024 EXE} that houses the server for that {\cs58\f5\fs16\lang1024 CLSID}
. COM consults this database whenever a client wants to create an instance of a COM class and use its services. That client, however, only needs to know the {\cs58\f5\fs16\lang1024 CLSID} which keeps it independent of the specific location of the {
\cs58\f5\fs16\lang1024 DLL} or {\cs58\f5\fs16\lang1024 EXE} on the particular machine.
\par If a requested {\cs58\f5\fs16\lang1024 CLSID}
 is not found in the local registration database, various other administratively-controlled algorithms are available by which the implementation is attempted to be located on the network to which the local machine may be attached; these are explained in m
ore detail below.
\par Given a {\cs58\f5\fs16\lang1024 CLSID}, COM invokes a part of itself called the Service Control Manager (SCM{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
Colloquially, of course, pronounced \ldblquote scum.\rdblquote }}) which is the system element that locates the code for that {\cs58\f5\fs16\lang1024 CLSID}. The code may exist as a {\cs58\f5\fs16\lang1024 DLL} or {\cs58\f5\fs16\lang1024 EXE}
 on the same machine or on another machine: the {\cs58\f5\fs16\lang1024 SCM} isolates most of COM, as well as all applications, from the specific actions necessary to locate code. We\rquote ll return a discussion of the {\cs58\f5\fs16\lang1024 SCM}
 in a moment after examining the roles of the client and server applications.
\par {\*\bkmkstart _Toc298215759}{\*\bkmkstart _Toc306725121}{\*\bkmkstart _Toc324051540}{\*\bkmkstart _Toc324051725}{\*\bkmkstart _Toc324051967}{\pntext\pard\plain\b\i\fs22 2.3.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 COM Clients{\*\bkmkend _Toc298215759}{\*\bkmkend _Toc306725121}{\*\bkmkend _Toc324051540}{\*\bkmkend _Toc324051725}{\*\bkmkend _Toc324051967}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Whatever application passes a {\cs58\f5\fs16\lang1024 CLSID} to COM and asks for an instantiated object in return is a COM Client. Of course, since t
his client uses COM, it is also a COM application that must perform the required steps described above and in subsequent chapters.
\par Regardless of the type of server in use (in-process, local, or remote), a COM Client always asks COM to instantiate objects in exactly the same manner. The simplest method for creating one object is to call the COM function {\cs58\f5\fs16\lang1024 
CoCreateInstance}. This creates one object of the given {\cs58\f5\fs16\lang1024 CLSID} and returns an interface pointer of whatever type the client requests. Alternately, the client can obtain an interface pointer to what is called the \ldblquote 
class factory\rdblquote  object for a CLSID by calling {\cs58\f5\fs16\lang1024 CoGetClassObject}. This class factory supports an interface called {\cs58\f5\fs16\lang1024 IClassFactory}
 through which the client asks that factory to manufacture an object of its class. At that point the client has interface pointers for {\i two separate objects}, the class factory and an object of that class, that each have their own reference counts. It
\rquote s an important distinction that is illustrated in Figure 2-3 and clarified further in Chapter 5.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw23944\pich10080\picwgoal13575\pichgoal5715 \picscalex50\picscaley50 
010009000003910b000008003300000000000e00000026060f001200ffffffff000008000000cef5e8f9040bd6020a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02e8f9cef5050000000c02ee08361533000000f700000317000000000080808000ffffff0000000000800000000080000080800000000080008000800000808000c0c0
c000c0dcc000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000cef5e7f9040bc8020e00000026060f001200ffffffff0000080000009effe7f94207c8020e00000026060f
001200ffffffff000008000000e00018fa4207c80207000000fc020000000000020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0698019801d902530728faf000050000001402000000002d00000042010500000028000000080000000800000001000100000000002000
00000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06960196
01c802420718fae000050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e50139fb0a06d0fd07000000fc020000000000020000040000002d01040004000000f0010300040000002d0102001000000024030600f50149fbf5018dfd4802e0fd1a06
e0fd1a069cfbc70549fb050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005
000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f00101001000000024030600e9013dfbe9017afd3b02ccfd0606ccfd06068ffbb4053dfb0500000014020000000008000000fa0206000800000000000002040000002d01010004000000f00104000700
0000fc020100000000000000040000002d01040008000000250302003b028ffb06068ffb08000000250302003b028ffbe9013dfb08000000250302003b028ffb3b02ccfd050000001402000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c
000000a01af87f040000002d010500040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320acffc77020d000000436c61737320466163746f7279005c00240047004700480023004e00480047002a004f003100480004000000020102000a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff0000080000009eff33fc4e00e3fc07000000fc020000808080020000040000002d01060004000000f0010300040000002d010200070000001804f4fc5f0043fcaeff050000001402000000002d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010100
070000001804e3fc4e0033fc9eff050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000460093fc16029bfc040000002d010200040000002d01040004000000f001060004000000f00103001c000000fb021000070000000000bc0200000000010202
2253797374656d0003500d48033002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010500030000001e000700000016043bfd1602f3fb460008000000fa0206000800000000000002040000002d01030005000000140293fcd60305000000130293fc7efe040000002d010200040000002d01
040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ec0186feaa06a60107000000fc020000000000020000040000002d0103001000000024030600fc0196fefc0152016002b601ba06b601ba06fafe560696fe05000000140293
fc7efe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001030005000000090200000002050000000102ffff
ff0208000000fa0206000800000000000002040000002d0103001000000024030600f0018afef0013f015302a201a606a201a606edfe43068afe05000000140293fc7efe08000000fa0206000800000000000002040000002d01060004000000f0010300040000002d01040008000000250302005302edfea606edfe080000
00250302005302edfef0018afe08000000250302005302edfe5302a20105000000140293fc7efe1c000000fb0260ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000a01af87f040000002d010300040000002e011800050000000a0200000000050000000902
00000002040000000201010010000000320a73009103060000004f626a6563747c0059002400590050002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8ff3b005800eb0007000000fc020000808080020000040000002d01070004000000f0
010500040000002d010200070000001804fc0069004b00b8ff05000000140293fc7efe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd0000000400
00002d01050004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010600070000001804eb0058003b00a8ff05000000140293fc7efe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
000000a8ff33ff5800e3ff07000000fc020000808080020000040000002d01060004000000f0010500040000002d010200070000001804f4ff690043ffb8ff05000000140293fc7efe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000
ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010700070000001804e3ff580033ffa8ff05000000140293fc7e
fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000500080ff20028bff040000002d010200040000002d01040004000000f001060004000000f0010500040000002d01010004000000f0010300030000001e000700000016042b002002e0fe500008000000fa0206000800
000000000002040000002d0103000500000014027dffe00305000000130286ff88fe040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000050009b002002a300040000002d010200040000002d
010400030000001e0007000000160443012002fbff500008000000fa0206000800000000000002040000002d0103000500000014029b00e0030500000013029b0088fe040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff000008000000bb02e7f957050ffb1c000000fb0240ff000000000000bc02000000000000001254696d6573204e657720526f6d616e007884c577000000000c000000a01af87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ab1
faf502060000005365727665726b005500550060005500560004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cef587fa50fc68fe07000000fc020000000000020000040000002d01050009000000
1c06f800f80081fe69fc9ffae6f50500000014029b0088fe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f0
01050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c06f600f60068fe50fc87facef50500000014029b0088fe1c000000fb0240ff000000000000bc02000000000000001254696d6573204e657720526f6d616e007884c577000000000c000000
d014f87f040000002d01070004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010010000000320aadfc10f806000000436c69656e748b003500350056006a00400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff00000800000060fc68fcb0ff70fc040000002d010200040000002d01040004000000f001050004000000f0010600040000002d01010004000000f0010700030000001e0007000000160410fd6cffc8fb60fc08000000fa0206000800000000000002040000002d01030005000000140268fc18f905000000130268fc
f002040000002d010200040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300a8ff68fc32ff44fc32ff8bfc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009efc36fb57ff84fc1c0000
00fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000d00af87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320ab8fbd8fc0b0000002831292093437265617465ff25003f00
25001f00380051002b003f003e0025003f0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000000019f87f040000002d01060004000000f0010500040000002e011800050000000a02000000000500000009020000000204
0000000201010016000000320a3efcdbfc0a000000616e204f626a656374943e0045001f00570044001f003f003e002500380004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000460756fd040ba4fe1c000000fb0290ff000000000000bc0200000000
00000000417269616c000f03500d480338f70f037884c577000000000c000000d00af87f040000002d01050004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320ad8fd80070f000000283229204d616e7566616374757265fe25003f0025001f005d
003f004400440026003e003e00260044002c003e0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000000019f87f040000002d01060004000000f0010500040000002e011800050000000a02000000000500000009020000
0002040000000201010010000000320a5efe7208060000004f626a656374570045001f003e003e00260004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d80530fd8807cafe08000000fa0206000800000000000002040000002d010500040000002d
0104000b000000170830fddc05b3fece06d8fe880730fd3004040000002d010300040000002d0102000a000000240303007306c6fef006c8fede0684fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020fba0fca8ff90ff040000002d010500040000002d0104000b00
000017088eff17ffa0fca4ff90fffe03a0fc20fb040000002d010300040000002d0102000a000000240303008fff8cff18ff67ff16ffadff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000040fc36fd2a000aff1c000000fb0290ff000000000000bc0200000000000000
00417269616c000f03500d480338f70f037884c577000000000c000000a01af87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320ab8fd9cfc0f000000283329202052657475726e206e6577ef25003f0025001f001f005100
3e00260044002c0044001f0045003e00570004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000000019f87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204
0000000201010021000000320a3efe7afc11000000696e7465726661636520706f696e746572001f00450025003e002c0025003e003f003e001f00440045001f00440026003e002c0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c5770000
00000c000000a01af87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010015000000320ac4fe5afd09000000746f20636c69656e7400250045001f003e001f001f003f004400250004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff00000800000038fb80fd88fbd0fd040000002d010500070000001804d0fd88fb80fd38fb05000000140268fcf0020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e50500400080000000000
0000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01040004000000f001050004000000f0010300040000002d01010004000000f00107000300000000000f03500d480338f70f037884c577000000000c000000e00cf87f0400000000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-3: A COM Client creates objects through a class factory.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 CoCreateInstance }function internally calls {\cs58\f5\fs16\lang1024 CoGetClassObject }itself. It\rquote 
s just a more convenient function for clients that want to create one object.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The bottom line is that a COM Client, in addition to its responsibilities as a COM application, is responsible to use COM to obtain a class factory, ask that factory to create an object, initialize the object, and to call that object\rquote 
s (and the class factory\rquote s) {\cs58\f5\fs16\lang1024 Release} function 
when the client is finished with it. These steps are the bulk of Chapter 5 which also explains some features of COM that allow clients to manage when servers are loaded and unloaded to optimize performance.
\par {\*\bkmkstart _Toc298215760}{\*\bkmkstart _Toc306725122}{\*\bkmkstart _Toc324051541}{\*\bkmkstart _Toc324051726}{\*\bkmkstart _Toc324051968}{\pntext\pard\plain\b\i\fs22 2.3.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 COM Servers{\*\bkmkend _Toc298215760}{\*\bkmkend _Toc306725122}{\*\bkmkend _Toc324051541}{\*\bkmkend _Toc324051726}{\*\bkmkend _Toc324051968}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 There are two basic kinds of object servers:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 {\b Dynamic Link Library (DLL) Based: }
The server is implemented in a module that can be loaded into, and will execute within, a client\rquote s address space.  (The term DLL is used in this specification to describe any shared library mechanism that is present on a given COM platform.)
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\b EXE Based: }The server is implemented as a stand-alone executable module.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Since COM allows for distributed objects, it also allows for the two basic kinds of servers to implemented on a remote machine. To allow client applications to activate remote objects, COM defines the Service Control Manager (SCM) whose role is described 
below under \ldblquote The COM Library.\rdblquote 
\par As a client is responsible for using a class factory and for server management, a server is responsible for imple
menting the class factory, implementing the class of objects that the factory manufactures, exposing the class factory to COM, and providing for unloading the server under the right conditions. A diagram illustrating what exists inside a server module ({
\cs58\f5\fs16\lang1024 EXE} or {\cs58\f5\fs16\lang1024 DLL}) is shown in Figure 2-4.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw22939\pich14499\picwgoal13005\pichgoal8220 \picscalex50\picscaley50 
010009000003ee0d000008003300000000000e00000026060f001200ffffffff000008000000c2f530fa140a08070a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0230fac2f5050000000c02d80c521433000000f700000317000000000080808000ffffff0000000000800000000080000080800000000080008000800000808000c0c0
c000c0dcc000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000c3f530fa160a07070e00000026060f001200ffffffff00000800000018fd30fa7a03f20507000000fc0200
00000000020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c069801980103068b0340fa28fd050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00
000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0696019601f2057a0330fa18fd050000001402000000000a00000026060f000a
00ffffffff0100000000000e00000026060f001200ffffffff000008000000b7f72700e3fb16011c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d010400040000002e011800050000000a0200000000050000000902
0000000204000000020101001b000000320ac600f1f70d00000049436c617373466163746f727900280068002800500050005000580050005000300058003800500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003dfe59ff6202f00107000000fc
020000000000020000040000002d01050004000000f0010300040000002d01020010000000240306004dfe69ff4dfead01a0fe0002720200027202bcff1f0269ff050000001402000000002d000000420105000000280000000800000008000000010001000000000020000000000000000000000000000000000000000000
0000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f0010100100000002403060041fe5dff41fe9a0193feec015e
02ec015e02afff0c025dff0500000014020000000008000000fa0206000800000000000002040000002d01010004000000f001050007000000fc020100000000000000040000002d010500080000002503020093feafff5e02afff080000002503020093feafff41fe5dff080000002503020093feafff93feec0105000000
1402000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01060004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320aa200bafe0e0000
00436c61737320466163746f72793a5c00240047004700480023004e00480047002a004f00310048002a0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d01040004000000f001060004000000
2e011800050000000a02000000000500000009020000000204000000020101001c000000320a3c01bafe0e00000063726561746573204f626a65637447003200470047002b0047004700240064004e002300470048002a0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff000008000000f6fb5300a6fc030107000000fc020000808080020000040000002d01060004000000f0010300040000002d0102000700000018041401b7fc630006fc050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000
000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f00101000700000018040301a6fc5300f6fb050000
001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009efcb3006efebb00040000002d010200040000002d01050004000000f001060004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f
4603000000000000957fc5773002f87f040000002d01010004000000f0010400030000001e000700000016045b016efe13009efc08000000fa0206000800000000000002040000002d010300050000001402b3002e00050000001302b300d6fa040000002d010200040000002d01050004000000f0010300040000002701ff
ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001cfe3efbda025efe07000000fc020000000000020000040000002d01030010000000240306002cfe4efb2cfe0afe90fe6efeea026efeea02b2fb86024efb050000001402b300d6fa2d00000042010500000028000000
08000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001030005000000090200000002050000000102ffffff0208000000fa02060008000000000000
02040000002d010300100000002403060020fe42fb20fef7fd83fe5afed6025afed602a5fb730242fb050000001402b300d6fa08000000fa0206000800000000000002040000002d01060004000000f0010300040000002d010500080000002503020083fea5fbd602a5fb080000002503020083fea5fb20fe42fb08000000
2503020083fea5fb83fe5afe050000001402b300d6fa1c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d010300040000002e011800050000000a02000000000500000009020000000204000000020101001000000032
0a2bfdc1ff060000004f626a6563747c0059002400590050002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d8fbf3fc88fca3fd07000000fc020000808080020000040000002d01070004000000f0010400040000002d010200070000001804
b4fd99fc03fde8fb050000001402b300d6fa2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f0010700050000
00090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010600070000001804a3fd88fcf3fcd8fb050000001402b300d6fa0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d8fbebfb88fc9bfc07000000fc02
0000808080020000040000002d01060004000000f0010400040000002d010200070000001804acfc99fcfbfbe8fb050000001402b300d6fa2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd
000000ff00000077000000ff000000dd000000040000002d01040004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f00107000700000018049bfc88fcebfbd8fb050000001402b300d6fa0a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff00000800000080fc38fc50fe43fc040000002d010200040000002d01050004000000f001060004000000f0010400040000002d01010004000000f0010300030000001e00070000001604e3fc50fe98fb80fc08000000fa0206000800000000000002040000002d010300050000
00140235fc10000500000013023efcb8fa040000002d010200040000002d01050004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080fc53fd50fe5bfd040000002d010200040000002d010500030000001e00070000001604fbfd
50feb3fc80fc08000000fa0206000800000000000002040000002d01030005000000140253fd100005000000130253fdb8fa040000002d010200040000002d01050004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c3f503fcd0
fb9ffd1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010021000000320aa2fc7df6110000004f626a65637420496e74
65726661636573007000580028005000500030002800280058003000500038003000500050005000500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d01040004000000f0010300040000002e
011800050000000a020000000005000000090200000002040000000201010025000000320a4ffdfdf514000000286173206d616e792061732064657369726564293000500050002800800050005800500028005000500028005800510050002800380050005800300004000000020102000a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff000008000000fbfd700288020c041c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d01030004000000f0010400040000002e011800050000000a0200000000050000
00090200000002040000000201010019000000320a0f0335fe0c0000004578706f7375726520666f7260005000580058005000580038005000280030005800380004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004
f87f040000002d01040004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010021000000320abc0335fe1100000020202020636c61737320666163746f72796528002800280028005000280050005000500028003000500051002f0058003800510004000000020102
000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000002fe41043602dd051c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d01030004000000f0010400040000002e01
1800050000000a020000000005000000090200000002040000000201010015000000320ae0043cfe09000000556e6c6f6164696e670468005800280058005000580028005800580004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000
000c0000006004f87f040000002d01040004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a8d053cfe0d000000202020206d656368616e69736d74280028002800280080005000500058005000580028005000800004000000020102000a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005405d402160a56051c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d01030004000000f0010400040000002e011800050000
000a02000000000500000009020000000204000000020101001c000000320a81038e050e000000496d706c656d656e746174696f6e2c0086005900230059008600590059002c0059002c0024005900590004000000020102001c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f7
0f037884c577000000000c0000006004f87f040000002d01040004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320a41049205100000006469666665727320666f7220444c4c73590024002c002c005900360050002c002d00590035002c00740059
005900500004000000020102001c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a016f87f040000002d01030004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a
0105370609000000616e6420455845732e025900590059002c006b006b006b0050002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000490221034505ef03040000002d010200040000002d010500040000002d01010004000000f0010300030000
001e000700000016048f0445058102850208000000fa0206000800000000000002040000002d010300050000001402ad0431080500000013025b0255ff040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303004a022103
b4026103c6021d030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006402f0034e05f404040000002d010200040000002d01050004000000f0010300030000001e0007000000160494054e055003a00208000000fa0206000800000000000002040000002d010300050000
001402f4022808050000001302e80582ff040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303006502ec04e002e704ca02a5040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000
080000001f05c9fbfc094bfe1c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a76fc66050e00000049
6d706c656d656e746174696f6e2c0086005900230059008600590059002c0059002c0024005900590004000000020102001c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01060004000000f0010400040000002e01
1800050000000a020000000005000000090200000002040000000201010021000000320a36fd5905110000006964656e746963616c20666f7220616e790024005900590059002c0024005000580024002c002d00590035002d0059005900500004000000020102001c000000fb0260ff000000000000900100000000000000
00417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d01040004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010012000000320af6fd6d06070000006d6f64756c652e618500590059005900240059002c00040000000201
02000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006a0214013905da03040000002d010200040000002d01050004000000f0010300040000002d01010004000000f0010400030000001e00070000001604da0339054f01a60208000000fa020600080000000000000204
0000002d0103000500000014029006f80705000000130256fea3ff040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303006b021301a5027e01d7024c010a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff000008000000c802dffc2a05e7fc040000002d010200040000002d01050004000000f0010300030000001e0007000000160487fd2a053ffc040308000000fa0206000800000000000002040000002d010300050000001402dffc7c07050000001302dffc6e00040000002d010200040000002d01050004
000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300c902dffc410302fd4103bbfc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cbfddf050c0307071c000000fb0240ff000000000000bc02000000000000
001254696d6573204e657720526f6d616e007884c577000000000c000000a016f87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320aa90605fe0d000000536572766572204d6f64756c65036b00550055006000550056003000b50060006b006a
003600550004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f00103000400
00002d01010004000000f0010400030000000000ffffffff00}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-4: The general structure of a COM server.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 How a server accomplishes these requirements depends on whether the server is implemented as a {\cs58\f5\fs16\lang1024 DLL} or {\cs58\f5\fs16\lang1024 EXE}
, but is independent of whether the server is on the same machine as the client or on a remote machine. That is, remote servers are the same as local servers but have been registered to be visible to remote clients. Chapter 6 goes into all the necessary d
etails about these implementations as well as how the server publishes its existence to COM in the registration database.
\par A special kind of server is called an \ldblquote custom object handler{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 handler}}}\rdblquote 
 that works in conjunction with a local server to provide a partial in-process implementation of an object class.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
Strictly speaking, the \ldblquote handler\rdblquote  is simply the representative of a remote object that resides in the client\rquote s process and which internally contains the remote connection. There is thus {\i always}
 a handler present when remoting is being done, though very often the handler is a trivial one which merely forwards all calls. In that sense, \ldblquote handler\rdblquote  is synonymous with the terms \ldblquote proxy object\rdblquote  or \ldblquote 
object proxy.\rdblquote  In practice the term \ldblquote handler\rdblquote  tends to be used more when there is in fact a non-trivial handler, with \ldblquote proxy\rdblquote  usually used when the handler is in fact trivial.}}
 Since in-process code is normally much faster to load, in-process calls are extremely fast,  and certain resources can be shared only within a single process space, handlers can help improve performance of general object operations as well as
 the quality of operations such as printing. An object handler is architecturally similar to an in-process server but with more specialized semantics for its use. While the client can control the loading of handlers, it doesn\rquote 
t have to do any special work whatsoever to work with them. The existence of a handler changes nothing for clients.
\par {\*\bkmkstart _Toc298215761}{\*\bkmkstart _Toc306725123}{\*\bkmkstart _Toc324051542}{\*\bkmkstart _Toc324051727}{\*\bkmkstart _Toc324051969}{\pntext\pard\plain\b\i\fs22 2.3.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 The COM Library and Service Control Manager{\*\bkmkend _Toc298215761}{\*\bkmkend _Toc306725123}{\*\bkmkend _Toc324051542}{\*\bkmkend _Toc324051727}{\*\bkmkend _Toc324051969}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As described in Chapter 1, the COM Library itself is the implementation of the standard API functions defined in COM al
ong with support for communicating between objects and clients. The COM Library is then the underlying \ldblquote plumbing\rdblquote 
 that makes everything work transparently through RPC as shown in Figure 2-5 (this the same figure as Figure 1-8 in Chapter 1, repeated here for convenience). Whenever COM deter
mines that it has to establish communication between a client and a local or remote server, it creates \ldblquote proxy\rdblquote  objects that act as in-process objects to the client. These proxies then talk to \ldblquote stub\rdblquote 
 objects that are in the
 same process as the server and can call the server directly. The stubs pick up RPC calls from the proxies, turn them into function calls to the real object, then pass the return values back to the proxy via RPC which in turn returns them to the client.{
\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Readers more familiar with RPC than with COM will recognize \ldblquote client stub\rdblquote  and \ldblquote server stub\rdblquote 
 rather than \ldblquote proxy\rdblquote  and \ldblquote stub\rdblquote  but the phrases are analogous.}} The underlying remote procedure call mechanism is based on the standard DCE remote procedure call mechanism.
\par \pard\plain \s40\qc\li360\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw24288\pich14763\picwgoal13770\pichgoal8370 \picscalex60\picscaley60 
010009000003221e000008003100000000000e00000026060f001200ffffffff000008000000b0f59cfa340bb0070a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b029cfab0f5050000000c02140d841531000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000b2f59afa380bb0070e00000026060f001200ffffffff000008000000b2f59afa260058050e00000026060f001200ff
ffffff0000080000005afc20ffbafea40407000000fc020000000000020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0698009800b504cbfe30ff6afc050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000
000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0696009600a404ba
fe20ff5afc050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fafbfafadaff74fe07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06de00de0085feebff0afb0afc0500000014020000
00002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff
0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c06dc00dc0074fedafffafafafb050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003cfc6ffb26ff84fd07000000fc02000000000002000004000000
2d01010004000000f0010300040000002d010200090000001c068500850095fd37ff7ffb4cfc050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077
000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400090000001c068300830084fd26ff6ffb3cfc050000001402000000001c000000fb02a0ff000000000000bc0200000000
00000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a58fcb7fc0a000000496e2d50726f636573731b003a002000400026003a003600350035003600040000
00020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d006f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320acbfc17fd06000000
4f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000018f6f8fcc2f92a0007000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06cc00cc003b00d3f908
fd28f6050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f00104000500000009020000
0002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c06ca00ca002a00c2f9f8fc18f6050000001402000000001c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f8
7f040000002d01010004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a67fe45f706000000436c69656e745c001d001c0048004700230004000000020102001c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed
4e0338f70f037884c577000000000c000000d006f87f040000002d01050004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a01ffb0f60b0000004170706c69636174696f6e005500480047001c001d004000470023001d00470047000400000002
0102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000bdf93effbafbe2ff040000002d01020007000000fc020100000000000000040000002d01010004000000f001040004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d
000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010500030000001e00070000001604820076fb9efebdf908000000fa0206000800000000000002040000002d010400050000001402a2fec8f70500000013027600a7fd040000002d010200040000002d01010004000000f0
010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300b2fbdaff4afb96ff36fbd8ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000aef92cfc60fb36fd040000002d010200040000002d01010004000000f00104000300
00001e0007000000160436fd1cfb50fcaef908000000fa0206000800000000000002040000002d01040005000000140230fe04f80500000013022afb02fd040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a0000002403030058fb2b
fce0fa4bfc04fb87fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000095fc80ff6afe140107000000fc020000000000020000040000002d01050004000000f0010400090000001c066500650025017bfe90ffa5fc0500000014022afb02fd2d0000004201050000002800
000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000
000002040000002d010500090000001c066300630014016afe80ff95fc0500000014022afb02fd1c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d010600040000002e011800050000000a0200000000050000000902
0000000204000000020101000f000000320a06001dfd050000004c6f63616c002c002c0028002800140004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01070004000000f0010600040000002e
011800050000000a020000000005000000090200000002040000000201010010000000320a5c000bfd060000004f626a65637438002c00140028002800180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f
040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320ab20017fd0500000050726f78790030001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
0000005cfbedfb47fc58fc0e00000026060f001200ffffffff0000080000005cfbedfbc0fb58fc040000002d01020005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f001050007000000180458fcc0fbedfb5cfb0500000014022afb02fd0a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8fb20fc47fc28fc040000002d010200040000002d01010004000000f001070004000000f0010400040000002d01030004000000f0010600030000001e00070000001604c8fc47fc80fbb8fb08000000fa02060008000000000000
02040000002d01040005000000140220fc31fb05000000130220fcc6fc040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b0fcbc0285fe
500407000000fc020000000000020000040000002d010400090000001c0665006500610496fecc02c0fc05000000140220fcc6fc2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff
00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400090000001c0663006300500485febc02b0fc05000000140220fcc6fc1c000000fb02b8ff000000000000bc020000000000000000
417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a420312fd0600000052656d6f74653400280040002c001800280004000000020102001c000000fb02b8ff000000
000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a980326fd060000004f626a65637438002c00140028002800
180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320aee0332
fd0500000050726f78796530001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005cfba7fc47fc12fd0e00000026060f001200ffffffff0000080000005cfba7fcc0fb12fd040000002d0102000500000009020000000205000000
0102ffffff0208000000fa0206000800000000000002040000002d01070004000000f001040007000000180412fdc0fba7fc5cfb05000000140220fcc6fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8fbdafc47fce2fc040000002d010200040000002d01010004
000000f001070004000000f0010500040000002d01030004000000f0010600030000001e0007000000160482fd47fc3afcb8fb08000000fa0206000800000000000002040000002d010400050000001402dafc31fb050000001302dafcc6fc040000002d010200040000002d01010004000000f0010400040000002701ffff
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b6fbbfffa1fc2a000e00000026060f001200ffffffff000008000000b6fbbfff1afc2a002d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018042a001afcbfffb6fb0500
00001402dafcc6fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000012fcf2ffa1fcfaff040000002d010200040000002d01010004000000f001050004000000f0010400030000001e000700000016049a00a1fc52ff12fc08000000fa0206000800000000000002040000
002d010400050000001402f2ff8bfb050000001302f2ff20fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b6fb6700a1fcd2000e00
000026060f001200ffffffff000008000000b6fb67001afcd2002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d010400050000
00090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804d2001afc6700b6fb050000001402f2ff20fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000012fc9a00a1fca200040000002d010200040000002d01
010004000000f001050004000000f0010400030000001e000700000016044201a1fcfaff12fc08000000fa0206000800000000000002040000002d0104000500000014029a008bfb0500000013029a0020fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffff
ff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cefbf502b9fc60030e00000026060f001200ffffffff000008000000cefbf50232fc60032d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000
00000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804600332fcf502cefb0500000014029a0020fd0a00000026
060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002afc2803b9fc3003040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604d003b9fc88022afc08000000fa0206000800000000000002040000002d0104000500000014022803
a3fb050000001302280338fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cefba303b9fc0e040e00000026060f001200ffffffff00
0008000000cefba30332fc0e042d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102
ffffff0208000000fa0206000800000000000002040000002d0105000700000018040e0432fca303cefb050000001402280338fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002afcd603b9fcde03040000002d010200040000002d01010004000000f0010500040000
00f0010400030000001e000700000016047e04b9fc36032afc08000000fa0206000800000000000002040000002d010400050000001402d603a3fb050000001302d60338fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a0000002606
0f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000026fca5fdd2ff5afe1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d010400040000002e011800050000000a0200000000050000
00090200000002040000000201010021000000320a18fe60fc11000000496e2d50726f6365737320536572766572001b003a002000400026003a0036003500350036001b0040003500250036003500250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800
0000f8fc890154fe3e021c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d006f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320afc0132
fd03000000434f4d0045004b00500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000aef91000d8fb0c03040000002d010200040000002d010100040000002d01030004000000f0010500030000001e00070000001604c802a5fb1000aef908000000
fa0206000800000000000002040000002d0104000500000014021cfd8cf7050000001302f805f2fd040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300d0fb0503a8fb920270fbba020a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000b2f59afa2600580508000000fa0206000800000000000002040000002d010500040000002d010100070000001b04580526009afab2f5070000001b0448051600aafac2f50a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff00000800000014f6d9fa30fac8fb1c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a78fb4ef60e
000000436c69656e742050726f636573736800200020005000500028002800600030005000480050004800480004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006000f3fea701a8ff1c000000fb02
a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a66ff9a00030000005250430145004000460004
000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000024004f046b0104051c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01060004000000f0010700
040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320ac2045e0003000000525043ff45004000460004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80130fb900a08000e00000026060f001200ff
ffffff000008000000520632fc320aacff07000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c06de00de00bdff430a42fc6206050000001402f805f2fd2d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000
00000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c06dc00dc00acff320a32fc5206050000001402f805f2fd0a00000026060f000a
00ffffffff0100000000000e00000026060f001200ffffffff0000080000009406a7fc7e09bcfe07000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c0685008500cdfe8f09b7fca406050000001402f805f2fd2d000000420105000000280000000800000008000000
0100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c0683008300bcfe7e09a7
fc9406050000001402f805f2fd1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320a
90fd8707050000004c6f63616c003b003a00360035001b0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009
0200000002040000000201010010000000320a03fe6f07060000004f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b40525fd9f0690fd0e00000026060f001200ffffffff000008000000b40525fd1806
90fd040000002d01020005000000090200000002050000000102ffffff02040000002d01050007000000180490fd180625fdb405050000001402f805f2fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000100658fd9f0660fd040000002d010200040000002d01010004
000000f001050004000000f0010400040000002d01030004000000f0010600030000001e0007000000160400fe9f06b8fc100608000000fa0206000800000000000002040000002d01040005000000140258fd890505000000130258fd1e07040000002d010200040000002d01010004000000f0010400040000002701ffff
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b405dffd9f064afe0e00000026060f001200ffffffff000008000000b405dffd18064afe2d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018044afe1806dffdb4050500
0000140258fd1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000100612fe9f061afe040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604bafe9f0672fd100608000000fa0206000800000000000002040000
002d01040005000000140212fe890505000000130212fe1e07040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001e07edfeda09a2ff1c00
0000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a60ff58070c0000004c6f63616c205365727665723b003a
00360035001b001a0040003600250036003500250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000030028efc900436ff07000000fc020000000000020000040000002d010500090000001c069800980047ffa1049efc400205000000140212fe1e07
2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208
000000fa0206000800000000000002040000002d010500090000001c069600960036ff90048efc300205000000140212fe1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b02eefc400482fe07000000fc020000000000020000040000002d01070004000000f001
0600040000002d010200090000001c066500650093fe5104fefc7b0205000000140212fe1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd0000
00040000002d01060004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010500090000001c066300630082fe4004eefc6b0205000000140212fe1e071c000000fb02b8ff000000000000bc020000000000000000417269616c00
0f0300ed4e0338f70f037884c577000000000c000000d006f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320acafd01030400000053747562300018002c002c0004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000ce028ffe2a0444ff1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000
09020000000204000000020101000c000000320a02ff080303000000434f4d0045004b00500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003a045afdb40564fd040000002d010200040000002d01010004000000f001070004000000f001060004
0000002d01030004000000f0010400030000001e0007000000160404fe7005bafc3a0408000000fa0206000800000000000002040000002d01040005000000140258fdc8020500000013025efd1e07040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc0200000000000200000400
00002d0104000a00000024030300ac055cfd340538fd34057efd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80130fb900a080008000000fa0206000800000000000002040000002d010500040000002d010100070000001b040800900a30fbc801070000001b04f8
ff800a40fbd8010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000640349fb390938fc1c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d010600040000002e011800
050000000a020000000005000000090200000002040000000201010025000000320ae8fb9e03140000004c6f63616c205365727665722050726f636573735000500048005000200028006000500030004800500030002800600030005000480051004800480004000000020102000a00000026060f000a00ffffffff010000
0000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080015801380bb0070e00000026060f001200ffffffff0000080000008a0636036a0ab00607000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c06de00de00
c1067b0a46039a060500000014025efd1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f0010700050000
00090200000002050000000102ffffff02040000002d010500090000001c06dc00dc00b0066a0a36038a060500000014025efd1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cc06ab03b609c00507000000fc020000000000020000040000002d01070004000000
f0010400040000002d010200090000001c0685008500d105c709bb03dc060500000014025efd1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd
000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c0683008300c005b609ab03cc060500000014025efd1e071c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000
d006f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a94048d070600000052656d6f74654500360055003b002000350004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f
0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a0705a707060000004f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff000008000000ec052904d70694040e00000026060f001200ffffffff000008000000ec05290450069404040000002d01020005000000090200000002050000000102ffffff02040000002d010500070000001804940450062904ec050500000014025efd1e070a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000048065c04d7066404040000002d010200040000002d01010004000000f001050004000000f0010400040000002d01030004000000f0010600030000001e000700000016040405d706bc03480608000000fa02060008000000
00000002040000002d0104000500000014025c04c1050500000013025c045607040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ec05e3
04d7064e050e00000026060f001200ffffffff000008000000ec05e30450064e052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd00000004000000
2d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018044e055006e304ec050500000014025c0456070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000048061605d7061e05040000002d0102
00040000002d01010004000000f001050004000000f0010400030000001e00070000001604be05d7067604480608000000fa0206000800000000000002040000002d0104000500000014021605c10505000000130216055607040000002d010200040000002d01010004000000f0010400040000002701ffff0a0000002606
0f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000607f105280aa6061c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d01040004
0000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a640640070d00000052656d6f746520536572766572054500360055003b00200035001b0040003500260035003500260004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200
ffffffff0000080000007602b403d6045c0607000000fc020000000000020000040000002d010500090000001c06980098006d06e704c4038602050000001402160556072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff
00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c06960096005c06d604b4037602050000001402160556070a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b10214048604a80507000000fc020000000000020000040000002d01070004000000f0010600040000002d010200090000001c0665006500b90597042404c102050000001402160556072d0000004201050000002800000008000000080000
000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01
070004000000f0010500090000001c0663006300a80586041404b102050000001402160556071c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01050004000000f0010400040000002e011800050000000a02000000
000500000009020000000204000000020101000d000000320af00447030400000053747562300018002c002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001403b50570046a061c000000fb02a0ff000000000000bc0200000000000000004172
69616c000f0300ed4e0338f70f037884c577000000000c000000a014f87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a28064e0303000000434f4d0045004b00500004000000020102000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff0000080000008c04600400066a04040000002d010200040000002d01010004000000f001070004000000f0010600040000002d01030004000000f0010400030000001e000700000016040a05bc05c0038c0408000000fa0206000800000000000002040000002d010400
050000001402640420030500000013025e046407040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300f805600481053e04810584040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffff
ff00000800000000024802c80a200708000000fa0206000800000000000002040000002d010500040000002d010100070000001b042007c80a48020002070000001b041007b80a580210020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007c036902f10958031c000000
fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d006f87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010027000000320a0803b6031500000052656d6f7465205365727665722050726f
636573730068005000780050002800500028006000500030004800500030002800600030005000480051004800480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080015801380bb007070000001b04b007380b5801800108000000fa0206001000
000000000002040000002d01070004000000f0010500070000001b04a007280b6801900108000000fa0206000800000000000002040000002d01050004000000f0010700070000001b048807100b8001a8010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000c047101c9
0860021c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a100246040e0000005265
6d6f7465204d616368696e656800500078005000280050002800780050004800500020005000510004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002cfed0fd980238000c000000250304002cfe30
009600c3fe490033ff30020afe040000002d010400040000002d0102000a000000240303009002cffd1802f0fd3c022cfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000056fe6003d802ee04040000002d010500040000002d0101000c0000002503040056fe6003cc00
4a047e0002046802be04040000002d010400040000002d0102000a00000024030300d002e7046e029a045402dc040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffff
ff010000000000040000002d010200040000002d01010004000000f001050004000000f0010400040000002d01030004000000f00107000300000000009800110098001800980018009800180098001800980017009800130000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-5: COM provides transparent access to local and remote servers\line through proxy and stub objects.
\par {\*\bkmkstart _Toc298215762}{\*\bkmkstart _Toc306725124}{\*\bkmkstart _Toc324051543}{\*\bkmkstart _Toc324051728}{\*\bkmkstart _Toc324051970}{\pntext\pard\plain\b\i\fs22 2.3.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Architecture for Distributed Objects{\*\bkmkend _Toc298215762}{\*\bkmkend _Toc306725124}{\*\bkmkend _Toc324051543}{\*\bkmkend _Toc324051728}{\*\bkmkend _Toc324051970}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The COM architecture for object distribution is similar to the remoting architecture. When a client wants to connect to a server object, the name of the server is stored in the system registry. With distributed objects, the server can implemented as an in
-process DLL, a local executable, or as executable or DLL running remotely. A component called the Service Control Manager (SCM) is responsible for locating the server and running it. The next section, \ldblquote The Service Control Manager\rdblquote 
, explains the role of the SCM in greater depth and Chapter 15 contains the specification for it\rquote s interfaces.
\par Making a call to an interface method in a remote object involves the cooperation of several components. The interface proxy is a piece of interface-specific code that resides in the client\rquote s process space and pre
pares the interface parameters for transmittal. It packages, or marshals, them in such a way that they can be recreated and understood in the receiving process. The interface stub, also a piece of interface-specific code, resides in the server\rquote 
s process space and reverses the work of the proxy. The stub unpackages, or unmarshals, the sent parameters and forwards them on to the server. It also packages reply information to send back to the client.
\par The actual transmitting of the data across the network is handled by the RPC runtime library and the channel, part of the COM library. The channel works transparently with different channel types and supports both single and multi-threaded applications.

\par The flow of communication between the components involved in interface remoting is shown in Figure 2-6. On the client side of the process boundary, the client\rquote 
s method call goes through the proxy and then onto the channel. Note that the channel is part of the COM library. The channel sends the buffer containing the marshaled parameters to the RPC runtime library who transmit
s it across the process boundary. The RPC runtime and the COM libraries exist on both sides of the process.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw15081\pich13943\picwgoal8550\pichgoal7905 \picscalex50\picscaley50 
0100090000034111000008003100000000000e00000026060f001200ffffffff000008000000b8f9acf9140706060a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02acf9b8f9050000000c025a0c5c0d31000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000b8f9abf90007fc050e00000026060f001200ffffffff000008000000b8f990feb0ff400107000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06ac00ac005901c9ffa8fed0f9050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00dd0000007700
0000dd00000077000000dd00000077000000dd00000077000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06aa00aa004001b0ff90feb8f9050000001402000000001c000000fb0270ff0000000000
00bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000001023f87f040000002d010400040000002e011800050000000a02000000001c000000fb0270ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000001024f87f0400
00002d01050004000000f0010400040000002e011800050000000a02000000001c000000fb0270ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000001023f87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009
0200000002040000000201010018000000320abc0020fc0b000000434f4d204c696272617279006800700078002800580028005800380050003800500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005200e7fa5a00fc05040000002d0102000700
0000fc020100000000000000040000002d01050004000000f001010004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d000550241c013002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010400030000001e00070000001604fc053a02e7fa72
fe08000000fa0206000800000000000002040000002d010300050000001402daef4a0005000000130201114a00050000001402daef5a0005000000130201115a00040000002d010200040000002d01050004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200
ffffffff00000800000036ffabf9d60121fb1c000000fb0280ff0000000000009001ff00000000000022417269616c003c0550241c0138f73c057884c577000000000c0000001023f87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a3cfa70
ff0700000050726f636573734e55002b004700400047004000400004000000020102001c000000fb0280ff0000000000009001ff00000000000022417269616c003c0550241c0138f73c057884c577000000000c000000a022f87f040000002d01040004000000f0010300040000002e011800050000000a02000000000500
0000090200000002040000000201010013000000320ad6fa70ff08000000426f756e646172795500480047004700470047002b00400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000000fa90fa10fdb8fb07000000fc020000000000020000040000
002d010300090000001c064a004a00d1fb29fda8fa18fa05000000140201115a002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd00000004000000
2d01060004000000f001030005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010300090000001c0648004800b8fb10fd90fa00fa05000000140201115a001c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c5
77000000000c0000001024f87f040000002d01070004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a47fbd2fa06000000436c69656e745c002400240047004e002b0004000000020102000a00000026060f000a00ffffffff0100000000000e00
000026060f001200ffffffff00000800000008fa80fc18fd98fd07000000fc020000000000020000040000002d01040004000000f0010600040000002d010200090000001c0646004600b1fd31fd98fc20fa05000000140201115a002d00000042010500000028000000080000000800000001000100000000002000000000
00000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f001030009000000
1c064400440098fd18fd80fc08fa05000000140201115a001c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000001023f87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000
00020101000f000000320a2ffddafa0500000050726f787900550032004e004800470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000008fae0fe18fdf8ff07000000fc020000000000020000040000002d01070004000000f0010600040000002d01
0200090000001c0646004600110031fdf8fe20fa05000000140201115a002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d0106
0004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010400090000001c0644004400f8ff18fde0fe08fa05000000140201115a001c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c0138f7
3c057884c577000000000c000000a022f87f040000002d01040004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a8fff8ffa070000004368616e6e656c005c004f0047004e004e004700240004000000020102000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000c0f9e001c8fd000307000000fc020000000000020000040000002d01030004000000f0010600040000002d010200090000001c06480048001903e1fdf801d8f905000000140201115a002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001030005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010300040000
00f0010700090000001c06460046000003c8fde001c0f905000000140201115a001c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000001024f87f040000002d01070004000000f0010400040000002e011800050000000a020000000005000000
090200000002040000000201010018000000320a930227fa0b0000005250432052756e74696d65005c0056005c0024005c004e004f002a0024007200470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000018fa200428fd380507000000fc02000000
0000020000040000002d01040004000000f0010600040000002d010200090000001c0646004600510541fd380430fa05000000140201115a002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000
dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010300090000001c0644004400380528fd200418fa05000000140201115a001c000000fb0280ff000000
000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000001023f87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010015000000320acf0471fa090000005472616e73706f7274004e0032004700
4e0048004e004e0032002a0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080fbb0fb88fb78fc040000002d010200040000002d01050004000000f001040004000000f0010600040000002d01010004000000f0010300030000001e000700000016
0434fc28fcb0fbe0fa08000000fa0206000800000000000002040000002d010300050000001402f0fa80fb05000000130230fd80fb040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030080fb71fca3fbf9fb5dfbf9fb
0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080fb90fd88fbe8fe040000002d010200040000002d01050004000000f0010300030000001e00070000001604a4fe28fc90fde0fa08000000fa0206000800000000000002040000002d01030005000000140240fc80fb05
0000001302300080fb040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030080fbe1fea3fb69fe5dfb69fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080fb0000
88fbe801040000002d010200040000002d01050004000000f0010300030000001e00070000001604a40128fc0000e0fa08000000fa0206000800000000000002040000002d01030005000000140220fe80fb050000001302c00380fb040000002d010200040000002d01050004000000f0010300040000002701ffff070000
00fc020000000000020000040000002d0103000a0000002403030080fbe101a3fb6b015dfb6b010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080fb000388fb2804040000002d010200040000002d01050004000000f0010300030000001e00070000001604e40328fc
0003e0fa08000000fa0206000800000000000002040000002d010300050000001402e00180fb050000001302400580fb040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030080fb2104a3fba9035dfba9030a00000026
060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000080190fe0007400107000000fc020000000000020000040000002d01040004000000f0010300090000001c06ac00ac0059011907a8fe2001050000001402400580fb2d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00dd00000077000000dd00000077000000dd00000077000000dd00000077000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400090000
001c06aa00aa004001000790fe0801050000001402400580fb1c000000fb0270ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c000000a022f87f040000002d010600040000002e011800050000000a02000000001c000000fb0270ff000000000000bc0200000000
00000000417269616c003c0550241c0138f73c057884c577000000000c0000001024f87f040000002d01070004000000f0010600040000002e011800050000000a02000000001c000000fb0270ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c000000a022f87f04
0000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010018000000320abc0020010b000000434f4d204c696272617279006800700078002800580028005800380050003800500004000000020102000500000009020000000204000000020101001300
0000320abc00a0050800000020202020202020202800280028002800280028002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000300390fa4006b8fb07000000fc020000000000020000040000002d01070004000000f0010300040000002d
010200090000001c064a004a00d1fb5906a8fa4803050000001402400580fb2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01
030004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010400090000001c0648004800b8fb400690fa3003050000001402400580fb1c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c0138
f73c057884c577000000000c000000e021f87f040000002d01040004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a47fbed03060000004f626a65637464004e002300480047002a0004000000020102000a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff000008000000380380fc480698fd07000000fc020000000000020000040000002d01060004000000f0010300040000002d010200090000001c0646004600b1fd610698fc5003050000001402400580fb2d00000042010500000028000000080000000800000001000100000000
00200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f001
0700090000001c064400440098fd480680fc3803050000001402400580fb1c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000001024f87f040000002d01070004000000f0010400040000002e011800050000000a020000000005000000090200
00000204000000020101000d000000320a2ffd2e04040000005374756255002b004e004e0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003803e0fe4806f8ff07000000fc020000000000020000040000002d01040004000000f001030004000000
2d010200090000001c064600460011006106f8fe5003050000001402400580fb2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d
01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010600090000001c0644004400f8ff4806e0fe3803050000001402400580fb1c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c01
38f73c057884c577000000000c000000a022f87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a8fffbf03070000004368616e6e656c005c004f0047004e004e004700240004000000020102000a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff000008000000c002e001f806000307000000fc020000000000020000040000002d01070004000000f0010300040000002d010200090000001c064800480019031107f801d802050000001402400580fb2d0000004201050000002800000008000000080000000100
010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004
000000f0010400090000001c06460046000003f806e001c002050000001402400580fb1c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c000000e021f87f040000002d01040004000000f0010600040000002e011800050000000a02000000000500
0000090200000002040000000201010018000000320a93023f030b0000005250432052756e74696d65005c0056005c0024005c004e004f002a0024007200470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000480320045806380507000000fc0200
00000000020000040000002d01060004000000f0010300040000002d010200090000001c06460046005105710638046003050000001402400580fb2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff00
0000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010700090000001c06440044003805580620044803050000001402400580fb1c000000fb0280ff00
0000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000001024f87f040000002d01070004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010015000000320acf04a103090000005472616e73706f7274004e003200
47004e0048004e004e0032002a0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b004b0fbb80478fc040000002d010200040000002d01050004000000f001060004000000f0010300040000002d01010004000000f0010700030000001e00070000
00160478fc5805ecfb100408000000fa0206000800000000000002040000002d010300050000001402f0fab00405000000130230fdb004040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300b004affb8d0427fcd304
27fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b00490fdb804e8fe040000002d010200040000002d01050004000000f0010300030000001e00070000001604e8fe5805ccfd100408000000fa0206000800000000000002040000002d01030005000000140240fcb0
040500000013023000b004040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300b0048ffd8d0407fed30407fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b004
0000b804e801040000002d010200040000002d01050004000000f0010300030000001e00070000001604e80158053c00100408000000fa0206000800000000000002040000002d01030005000000140220feb004050000001302c003b004040000002d010200040000002d01050004000000f0010300040000002701ffff07
000000fc020000000000020000040000002d0103000a00000024030300b004ffff8d047500d30475000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b0040003b8042804040000002d010200040000002d01050004000000f0010300030000001e000700000016042804
58053c03100408000000fa0206000800000000000002040000002d010300050000001402e001b0040500000013024005b004040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300b004ff028d047703d30477030a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000030fdb0043803b804040000002d010200040000002d01050004000000f0010300030000001e000700000016045805f402100430fd08000000fa0206000800000000000002040000002d010300050000001402b00430f705000000
1302b0043009040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303003003b004b8028c04b802d3040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f
001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f0010300030000000000cb00e1014200e101560100002503a9002500cd011f00cd011f00ce011b0000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-6. Components of COM\rquote s distributed architecture.
\par {\*\bkmkstart _Toc298215763}{\*\bkmkstart _Toc306725125}{\*\bkmkstart _Toc324051544}{\*\bkmkstart _Toc324051729}{\*\bkmkstart _Toc324051971}{\pntext\pard\plain\b\i\fs22 2.3.6\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 The Service Control Manager{\*\bkmkend _Toc298215763}{\*\bkmkend _Toc306725125}{\*\bkmkend _Toc324051544}{\*\bkmkend _Toc324051729}{\*\bkmkend _Toc324051971}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The Service Control Manager ensures that when a client request is made, the appropriate server is connected and ready to receive the request. The SCM keeps a database of class information based on the sys
tem registry that the client caches locally through the COM library. This is the basis for COM\rquote s implementation locator services as shown in Figure 2-7.
\par When a client makes a request to create an object of a {\cs58\f5\fs16\lang1024 CLSID}, the COM Library contacts the local SCM (the one on the same machine) and requests that the appropriate server be located or launched, and a class fac
tory returned to the COM Library. After that, the COM Library, or the client, can ask the class factory to create an object.
\par \pard \qj\sa60\keepn\widctlpar The actions taken by the local SCM depend on the type of object server that is registered for the {\cs58\f5\fs16\lang1024 CLSID}:
\par \pard\plain \s74\fi-2160\li2880\sa120\widctlpar \f4\fs20 {\b In-Process}\tab The SCM returns the file path of the DLL containing the object server implementation. The COM library then loads the DLL and asks it for its class factory interface pointer.

\par {\b Local}\tab The SCM starts the local executable which registers a class factory on startup. That pointer is then available to COM.
\par {\b Remote}\tab The local SCM contacts the SCM running on the appropriate remote machine and forwards the request to the remote SCM. The remote SCM launches the server which registers a class factory like the local server 
with COM on that remote machine. The remote SCM then maintains a connection to that class factory and returns an RPC connection to the local SCM which corresponds to that remote class factory. The local SCM then returns that connection to COM which create
s a class factory proxy which will internally forward requests to the remote SCM via the RPC connection and thus on to the remote server.
\par \pard\plain \s40\qc\keep\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {{\pict\wmetafile8\picw22013\pich14102\picwgoal12480\pichgoal7995 \picscalex60\picscaley60 
0100090000036e1b000008003100000000000e00000026060f001200ffffffff000008000000cef5ecf84e096a050a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02ecf8cef5050000000c027e0c801331000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000d0f5ebf840095a050e00000026060f001200ffffffff000008000000a8fb96f9a801e60307000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0680018001f703b901a6f9b8fb050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c067e017e01e603a80196f9a8fb050000001402000000000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000d0f500f97af932fc07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06cc00cc0043fc8bf910f9e0f5050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400040000
00f0010100090000001c06ca00ca0032fc7af900f9d0f5050000001402000000001c000000fb0280ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d010100040000002e011800050000000a0200000000050000000902000000020400
00000201010010000000320a6ffafdf606000000436c69656e745c001d001c0048004700230004000000020102001c000000fb0280ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010100040000002e01180005
0000000a020000000005000000090200000002040000000201010018000000320a09fb68f60b0000004170706c69636174696f6e005500480047001c001d004000470023001d004700470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007bf98efa
f0fb98fa040000002d01020007000000fc020100000000000000040000002d01010004000000f001040004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d0003500d48033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010500030000001e
0007000000160438fbacfbeef97bf908000000fa0206000800000000000002040000002d0104000500000014028cfa0ef705000000130292fa55fe040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300e8fb90fa71fb
6cfa71fbb3fa0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ebfb1efec0fdb2ff07000000fc020000000000020000040000002d01050004000000f0010400090000001c0665006500c3ffd1fd2efefbfb05000000140292fa55fe2d0000004201050000002800000008
000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002
040000002d010500090000001c0663006300b2ffc0fd1efeebfb05000000140292fa55fe1c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d010600040000002e011800050000000a0200000000050000000902000000
0204000000020101000f000000320aa4fe73fc050000004c6f63616c002c002c0028002800140004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000002e011800
050000000a020000000005000000090200000002040000000201010010000000320afafe61fc060000004f626a65637438002c00140028002800180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000
002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320a50ff6dfc0500000050726f78790030001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
06fc1201dbfda60207000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c0665006500b702ecfd220116fc05000000140292fa55fe2d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000000000
00ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010500090000001c0663006300a602dbfd120106fc05000000
140292fa55fe1c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a980168fc060000
0052656d6f74653400280040002c001800280004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002
040000000201010010000000320aee017cfc060000004f626a65637438002c00140028002800180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01050004000000f0010600040000002e0118
00050000000a02000000000500000009020000000204000000020101000f000000320a440288fc0500000050726f78796530001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000cfb5dfe70fbc8fe040000002d01020005000000
090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010700070000001804c8fe70fb5dfe0cfb05000000140292fa55fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000068fb90fef7fb98fe040000002d0102
00040000002d01010004000000f001060004000000f0010400040000002d01030004000000f0010500030000001e0007000000160438fff7fbf0fd68fb08000000fa0206000800000000000002040000002d01040005000000140290fee1fa05000000130290fe76fc040000002d010200040000002d01010004000000f001
0400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000cfb05ff70fb70ff2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff0000
00dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050007000000180470ff70fb05ff0cfb05000000140290fe76fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200
ffffffff00000800000068fb38fff7fb40ff040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604e0fff7fb98fe68fb08000000fa0206000800000000000002040000002d01040005000000140238ffe1fa05000000130238ff76fc040000002d010200040000002d
01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000024fb4b0188fbb6012d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00
000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804b60188fb4b0124fb05000000140238ff76fc0a00000026060f000a00ffffffff0100000000000e
00000026060f001200ffffffff00000800000080fb7e010ffc8601040000002d010200040000002d01010004000000f001050004000000f0010400030000001e0007000000160426020ffcde0080fb08000000fa0206000800000000000002040000002d0104000500000014027e01f9fa0500000013027e018efc04000000
2d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000024fbf90188fb64022d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000
000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804640288fbf90124fb0500000014027e018efc0a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff00000800000080fb2c020ffc3402040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604d4020ffc8c0180fb08000000fa0206000800000000000002040000002d0104000500000014022c02f9fa0500000013
022c028efc040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000defdb1f985ff8dfa1c000000fb0280ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884
c577000000000c000000f00bf87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a42fa18fe03000000434f4d005c0064006b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
0000008801a3031f05cb041c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a1604
c2010e00000052504320436f6e6e656374696f6e4500400046001a0046003a003b003b003500350020001b003b003a0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01040004000000f00105
00040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320a8904c20110000000746f2052656d6f74652053657276657220003b001a004600350055003b00200035001b0040003500260035003600250004000000020102000a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff000008000000640237fdd5055ffe1c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010400040000002e011800050000000a0200000000050000000902000000
0204000000020101001c000000320aaafd9e020e00000052504320436f6e6e656374696f6e4500400046001a0046003a003b003b003500350020001b003b003a0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00b
f87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320a1dfe9e020f000000746f204c6f63616c205365727665720020003b001a003b003b00350035001b001b0040003500250036003500260004000000020102000a00000026
060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000072f9ebf8d3fb86fa1c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010400040000002e01180005000000
0a020000000005000000090200000002040000000201010018000000320a5ef9c1f90b00000028312920436c69656e743afb2000350020001b0045001b001b0035003b002000200004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000
000c000000f00bf87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010012000000320ad1f9f1f9070000009343726561746565300045002600350035002000360004000000020102001c000000fb02a0ff000000000000bc02000000000000
0000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a44faacf90a000000616e204f626a6563749435003b001b004a003b001b003500350020
00300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0fd40fd8801700307000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d0106001000000024030600bcfe40fdd0fd5400bcfe68039400
680380015400940040fd0500000014022c028efc1c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101
000d000000320a30fff0fe0400000053434d3a600068007800300004000000020102001c000000fb0290ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010700040000002e011800050000000a02000000000500
0000090200000002040000000201010013000000320ac0ffd4fe080000004c6f63617465732c3e003f0038003e001f003e0038001f0004000000020102001c000000fb0290ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004
000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a460065fe0d00000072756e7320736572766572732c0025003f003e0038001f0038003e00260038003e00250038001f0004000000020102001c000000fb0290ff0000000000009001000000000000
0000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320acc0023fe10000000283329209348657265927320796f757225003f0025001f00250051
003e0026003e00190038001f0038003e003f00250004000000020102001c000000fb0290ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010500040000002e011800050000000a02000000000500000009020000
0002040000000201010018000000320a52017afe0b000000436f6e6e656374696f6e940051003e003e003f003e0038001f0019003e003f00250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a0fb90fac8ff38fd08000000fa0206000800000000
000002040000002d01050004000000f0010600040000002d0101000b000000170890faa4fbdafcbeffd8ffc8ff90fa80f707000000fc020000000000020000040000002d01060004000000f0010400040000002d0102000a00000024030300c4ff34fdd6ffb8fc90ffc2fc0a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff0000080000004dfe93fa8901bbfb1c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01040004000000f0010700040000002e011800050000000a0200000000050000000902000000
0204000000020101001e000000320a06fb87fe0f00000028322920434f4d3a20209346696e64002000350020001b0045004b00500020001b001a0030003b001b003a003b0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c00
0000e00cf87f040000002d01070004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a79fb11ff09000000612053657276657294fa35001b00400035002600350036002500300004000000020102000a00000026060f000a00ffffffff0100000000
000e00000026060f001200ffffffff00000800000080fd30fe7806f0fe040000002d010500040000002d0101000c00000025030400f1fddbfea00250fee001c8fe02063efe040000002d010600040000002d0102000a0000002403030070062ffef4051cfefe0562fe0a0000002403030081fde9fefafdfdfef2fdb7fe0a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fd000278063804040000002d010500040000002d0101000c0000002503040016fe1f026f025803d701e10206061204040000002d010600040000002d0102000a00000024030300700631040706ee03f30530040a00000024
030300a9fdff0111fe410225feff010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b046efa400602fc07000000fc020000000000020000040000002d01040004000000f0010600090000001c066500650013fc51067efa7b040500000014022c028efc2d0000004201
050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff02040000002d0105
00090000001c066300630002fc40066efa6b040500000014022c028efc1c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01040004000000f0010700040000002e011800050000000a02000000000500000009020000
0002040000000201010016000000320a1ffb9a040a000000496e2d50726f6365737314002c00180030001c002c00280028002800280004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004
000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a75fbe104060000004f626a65637438002c00140028002800180004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008c03adfa
f00318fb040000002d01020005000000090200000002050000000102ffffff02040000002d01050007000000180418fbf003adfa8c030500000014022c028efc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e803e0fa7704e8fa040000002d010200040000002d0101
0004000000f001050004000000f0010600040000002d01030004000000f0010700030000001e0007000000160488fb770440fae80308000000fa0206000800000000000002040000002d010400050000001402e0fa6103050000001302e0faf604040000002d010200040000002d01010004000000f0010400040000002701
ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008c0355fbf003c0fb2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff0000
0077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804c0fbf00355fb8c03050000001402e0faf6040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800
0000e80388fb770490fb040000002d010200040000002d01010004000000f001050004000000f0010400030000001e0007000000160430fc7704e8fae80308000000fa0206000800000000000002040000002d01040005000000140288fb610305000000130288fbf604040000002d010200040000002d01010004000000f0
010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b07aefd400942ff07000000fc020000000000020000040000002d010400090000001c066500650053ff5109befd7b0705000000140288fbf6042d0000004201050000002800000008000000
080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000
002d010400090000001c066300630042ff4009aefd6b0705000000140288fbf6041c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d010600040000002e011800050000000a0200000000050000000902000000020400
0000020101000f000000320a5ffef307050000004c6f63616c002c002c0028002800140004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01070004000000f0010600040000002e011800050000
000a020000000005000000090200000002040000000201010010000000320ab5fee107060000004f626a65637438002c00140028002800180004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008c06edfdf00658fe040000002d010200050000000902
00000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f001040007000000180458fef006edfd8c0605000000140288fbf6040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e80620fe770728fe040000002d01020004
0000002d01010004000000f001060004000000f0010500040000002d01030004000000f0010700030000001e00070000001604c8fe770780fde80608000000fa0206000800000000000002040000002d01040005000000140220fe610605000000130220fef607040000002d010200040000002d01010004000000f0010400
040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008c0695fef00600ff2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd
000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050007000000180400fff00695fe8c0605000000140220fef6070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff000008000000e806c8fe7707d0fe040000002d010200040000002d01010004000000f001050004000000f0010400030000001e0007000000160470ff770728fee80608000000fa0206000800000000000002040000002d010400050000001402c8fe6106050000001302c8fef607040000002d010200040000002d0101
0004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002b07c60300095a0507000000fc020000000000020000040000002d010400090000001c06650065006b051109d6033b07050000001402c8fef6072d0000004201050000002800
000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000
000002040000002d010400090000001c06630063005a050009c6032b07050000001402c8fef6071c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d010600040000002e011800050000000a0200000000050000000902
00000002040000000201010010000000320a77048d070600000052656d6f74653400280040002c001800280004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000
002e011800050000000a020000000005000000090200000002040000000201010010000000320acd04a107060000004f626a65637438002c00140028002800180004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004c060504b0067004040000002d01
020005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f00104000700000018047004b00605044c06050000001402c8fef6070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a80638043707400404
0000002d010200040000002d01010004000000f001060004000000f0010500040000002d01030004000000f0010700030000001e00070000001604e00437079803a80608000000fa0206000800000000000002040000002d010400050000001402380421060500000013023804b607040000002d010200040000002d010100
04000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004c06ad04b00618052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077
000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018041805b006ad044c060500000014023804b6070a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff000008000000a806e0043707e804040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604880537074004a80608000000fa0206000800000000000002040000002d010400050000001402e0042106050000001302e004b607040000002d0102
00040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000900028ff980730ff040000002d010200040000002d010100030000001e00070000001604d0ff540788fe900008000000fa02060008000000000000020400
00002d01040005000000140228ff90f905000000130228ff900e040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300900728ff190704ff19074bff0a00000026060f000a00ffffffff0100000000000e00000026060f
001200ffffffff000008000000e0fff8fb800410fe040000002d010200040000002d01010004000000f0010400030000001e00070000001604b0fe3c0458fbe0ff08000000fa0206000800000000000002040000002d010400050000001402180048fb050000001302e8f91009040000002d010200040000002d0101000400
0000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a000000240303007804f8fbfc030afc18044afc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0f778fb08fb88fe08000000fa0206000800000000000002040000002d0105
00040000002d0101000b000000170883feaafa7cfbd0f788fe38fe70f8d0f7040000002d010400040000002d0102000a0000002403030004fb84fe8ffa59fe8bfa9ffe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0f788fb18fb7001040000002d01050004000000
2d0101000b00000017086701b9fa8cfbd0f7700158fea8f5d0f7040000002d010400040000002d0102000a0000002403030014fb6c01a1fa3a0199fa80010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0f7a0fb9903c0fc040000002d010500040000002d0101000b
0000001708fafb5b03a4fbd0f7c0fca20388fad0f7040000002d010400040000002d0102000a000000240303009503c2fb2103eefb4b0326fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000005f6a3fec1f83e001c000000fb02a0ff000000000000bc02000000000000
0000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a16ff97f60800000028342920434f4d3a2000350020001b0045004b005000200004000000020102001c0000
00fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a89ff3ff60c0000009348657265927320
796f7572300045003600250035001b0036001a0036003a003b00250004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01060004000000f0010700040000002e011800050000000a020000000005
000000090200000002040000000201010013000000320afcffa4f608000000706f696e746572943b003a001b003b00200035002500300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fd58fde8ff18fe040000002d010200040000002d010100
04000000f001050004000000f0010400040000002d01030004000000f0010600030000001e00070000001604b8fee8ffb8fce4fd08000000fa0206000800000000000002040000002d010400050000001402c8fe1802050000001302a0fc70fb040000002d010200040000002d01010004000000f0010400040000002701ff
ff07000000fc020000000000020000040000002d0104000a00000024030300a9fd58fd0ffe9efd25fe5cfd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005c02a7019806cf021c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d4803
38f70f037884c577000000000c000000e00cf87f040000002d010500040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a1a0296020e00000041736b2072656d6f74652053434d4500360035001b002500360055003b00200035001b0040004500500004000000020102
001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010027000000320a8d02960215000000746f206c
61756e6368206170706c69636174696f6e0020003b001a001b0035003b003b0035003b001a0036003a003b001b001a003600350020001b003a003b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007c0237ff6306ecff1c000000fb02a0ff000000
000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010022000000320aaaffb602120000004c61756e6368206170706c6963617469
6f6e3b0035003b003a0036003a001b0035003b003b001a001b003500360020001a003b003b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000400008024007f00308000000fa0206000800000000000002040000002d010600040000002d0101000c
00000025030400400008020b042f039203c802ce06c703040000002d010400040000002d0102000a000000240303003807e903d206a403bc06e6030a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e50500400080000000000000000000000
0a00000026060f000a00ffffffff010000000000040000002d010200040000002d01010004000000f001060004000000f0010400040000002d01030004000000f0010500030000000000574f572000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Figure 2-7: COM delegates responsibility of loading and launching servers to the SCM.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Note that if the remote SCM determines that the remote server is actually an in-process server, it launches a \ldblquote surrogate\rdblquote 
 server that then loads that in-process server. The surrogate does nothing more than pass all requests on through to the loaded DLL.
\par {\*\bkmkstart _Toc298215764}{\*\bkmkstart _Toc306725126}{\*\bkmkstart _Toc324051545}{\*\bkmkstart _Toc324051730}{\*\bkmkstart _Toc324051972}{\pntext\pard\plain\b\i\fs22 2.3.7\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Application Security{\*\bkmkstart here}{\*\bkmkend _Toc298215764}{\*\bkmkend _Toc306725126}{\*\bkmkend _Toc324051545}{\*\bkmkend _Toc324051730}{\*\bkmkend _Toc324051972}{\*\bkmkend here}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The technology in COM provides security for applications, regardless of whether they run remotely. There is a default level of security that is provided to non-security-aware applications such as existing OLE appli
cations. Beyond the default, applications that are security-aware can control who is granted access to their services and the type of access that is granted.
\par \pard\plain \s40\qc\keep\keepn\widctlpar\posxr\posyb\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {{\pict\wmetafile8\picw9048\pich9233\picwgoal5130\pichgoal5234 \picscalex60\picscaley60 
010009000003c10b000006003100000000000e00000026060f001200ffffffff00000800000020f840f924006e010a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0240f920f8050000000c022e08040831000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000020f83ff9100058010e00000026060f001200ffffffff00000800000020f890fa30fbb8fb07000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c064a004a00d1fb49fba8fa38f8050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0648004800b8fb30fb90fa20f8050000001402000000001c000000fb0290ff0000000000
00bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000008023f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010013000000320afffad9f808000000436c69656e74203151001f001f003e00450025001f003f000400
0000020102001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000000020f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a85fbd3f8080000
002855736572203129250051003e003f002b001f003f00250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020f870fc30fb98fd07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c064a00
4a00b1fd49fb88fc38f8050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005
000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c064800480098fd30fb70fc20f8050000001402000000001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c57700000000
0c0000003024f87f040000002d01010004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010013000000320adffcd9f808000000436c69656e74203251001f001f003e00450025001f003f0004000000020102001c000000fb0290ff000000000000bc020000000000
000000417269616c003c0550241c0138f73c057884c577000000000c0000000020f87f040000002d01050004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a65fdd3f8080000002855736572203229250051003e003f002b001f003f0025000400
0000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020f850fe30fb78ff07000000fc020000000000020000040000002d01010004000000f0010300040000002d010200090000001c064a004a0091ff49fb68fe38f8050000001402000000002d000000420105
0000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa020600
0800000000000002040000002d01010004000000f0010400090000001c064800480078ff30fb50fe20f8050000001402000000001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000008023f87f040000002d01040004000000f0010500040000
002e011800050000000a020000000005000000090200000002040000000201010013000000320abffed9f808000000436c69656e74203351001f001f003e00450025001f003f0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c57700000000
0c0000000020f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a45ffd3f8080000002855736572203229250051003e003f002b001f003f00250004000000020102000a00000026060f000a00ffffffff0100000000000e
00000026060f001200ffffffff00000800000020f8300030fb580107000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c064a004a00710149fb480038f8050000001402000000002d000000420105000000280000000800000008000000010001000000000020000000
0000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100090000
001c0648004800580130fb300020f8050000001402000000001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000003024f87f040000002d01010004000000f0010500040000002e011800050000000a0200000000050000000902000000020400
00000201010013000000320a9f00d9f808000000436c69656e74203451001f001f003e00450025001f003f0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000000020f87f040000002d01050004000000f0010100040000
002e011800050000000a020000000005000000090200000002040000000201010013000000320a2501d3f8080000002855736572203329250051003e003f002b001f003f00250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000000fd90fa1000b8fb
07000000fc020000000000020000040000002d01010004000000f0010300040000002d010200090000001c064a004a00d1fb2900a8fa18fd050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000
0077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400090000001c0648004800b8fb100090fa00fd050000001402000000001c00
0000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000008023f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320afffa72fd0a00000053746172746564
2062794b0025003e002c0025003e0045001f0044003f0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000000020f87f040000002d01050004000000f0010400040000002e011800050000000a0200000000050000000902
00000002040000000201010010000000320a85fbd9fd0600000055736572203151003e003e002c001f003e0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000000fd60fd100088fe07000000fc020000000000020000040000002d01040004000000f0
010300040000002d010200090000001c064a004a00a1fe290078fd18fd050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd00
0000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c064800480088fe100060fd00fd050000001402000000001c000000fb0290ff000000000000bc020000000000000000417269616c
003c0550241c0138f73c057884c577000000000c0000003024f87f040000002d01010004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320acffd72fd0a000000537461727465642062794b0025003e002c0025003e0045001f0044003f0004000000
020102001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000000020f87f040000002d01050004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a55fed9fd0600000055
736572203251003e003e002c001f003e0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000000fd30001000580107000000fc020000000000020000040000002d01010004000000f0010300040000002d010200090000001c064a004a00710129004800
18fd050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f0010100050000000902000000
02050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400090000001c064800480058011000300000fd050000001402000000001c000000fb0290ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000008023f87f
040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a9f0072fd0a000000537461727465642062794b0025003e002c0025003e0045001f0044003f0004000000020102001c000000fb0290ff000000000000bc0200000000000000
00417269616c003c0550241c0138f73c057884c577000000000c0000000020f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a2501d9fd0600000055736572203351003e003e002c001f003e0004000000020102000a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a6f83ff9cdfa1bfa1c000000fb0280ff000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000008023f87f040000002d01040004000000f0010500040000002e01180005
0000000a020000000005000000090200000002040000000201010012000000320ad0f9e0f807000000436c69656e7473205c002400240047004e002b00470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000056fd3ff961ff1bfa1c000000fb0280ff
000000000000bc020000000000000000417269616c003c0550241c0138f73c057884c577000000000c0000000020f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ad0f990fd0600000053657276657255004800310048
004700320004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020fb20fb08fd28fb040000002d01020007000000fc020100000000000000040000002d01040004000000f001010004000000f00103001c000000fb021000070000000000bc0200000000
0102022253797374656d000550241c013002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010500030000001e00070000001604c8fbc4fc80fa20fb08000000fa0206000800000000000002040000002d01030005000000140220fb40f905000000130220fbe0fe040000002d010200040000
002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030000fd20fb88fcfcfa88fc43fb0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020fb00fd08fdf8fd040000002d010200040000002d010400
04000000f0010300030000001e00070000001604d2fdc4fc00fd20fb08000000fa0206000800000000000002040000002d01030005000000140210fc40f9050000001302e0fee0fe040000002d010200040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a
0000002403030000fdf1fda5fc9cfd85fcdafd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020fbf0fd08fde8fe040000002d010200040000002d01040004000000f0010300030000001e00070000001604e8fec4fc0efe20fb08000000fa0206000800000000000002
040000002d010300050000001402d0ff40f905000000130200fde0fe040000002d010200040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030000fdeffd85fc06fea5fc44fe0a00000026060f000a00ffffffff0100000000000e00000026
060f001200ffffffff00000800000020fbc00008fdc800040000002d010200040000002d01040004000000f0010300030000001e000700000016046801c4fc200020fb08000000fa0206000800000000000002040000002d010300050000001402c00040f9050000001302c000e0fe040000002d010200040000002d010400
04000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030000fdc00088fc9c0088fce3000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a
00000026060f000a00ffffffff010000000000040000002d010200040000002d01040004000000f001030003000000000077000000ff000000dd000000040000002d01030004000000f0010600050000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\posxr\posyb\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Figure 2-8. A non-security-aware server
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Default security insures that system integrity is maintained. When multiple users require the services of a single non-security-aware server, a separate instance for each user is run. Each client/server connection r
emains independent from the others, preventing clients from accessing each others\rquote  data. All non-security-aware servers are run as the security principal who caused them to run. An example involving four clients that all require server \ldblquote X
\rdblquote  is illustrated in Figure 2-8. Since two of the clients are the same user (User2), one instance of server X can service both clients.
\par The technology used in COM for distribution implements this security system with the authentication services provided by RPC. These services are accessed by applications through the COM library when a call is made to {\cs58\f5\fs16\lang1024 CoInitialize}
. This security system imposes a restriction on where no
n-security-aware applications can run. Since the system cannot start a session on another machine without the proper credentials, all servers that run in the client security context normally run where their client is running. The {\cs58\f5\fs16\lang1024 
AtBits}{\i  }attribute associated with that class controls where a server is run.
\par Security-aware servers are those applications that do not allow global access to their services. These servers may run either where the client is running, where their data is stored, or elsewhere depending 
on a rich set of activation rules. Rather than running as one of their clients; security-aware servers are themselves security principals. Security-aware servers may participate in two-way authentication whereby clients can ask for verification. Security-
aware servers can use the services offered by the RPC security provider(s) or supply their own security implementation.
\par {\*\bkmkstart _Toc291903844}{\*\bkmkstart _Toc298215765}{\*\bkmkstart _Toc306725127}{\*\bkmkstart _Toc324051546}{\*\bkmkstart _Toc324051731}{\*\bkmkstart _Toc324051973}{\*\bkmkstart _Toc337439306}{\*\bkmkstart _Toc337440770}{\*\bkmkstart _Toc339182932}
{\pntext\pard\plain\b 2.4\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Object Reusability{\*\bkmkend _Toc291903844}{\*\bkmkend _Toc298215765}
{\*\bkmkend _Toc306725127}{\*\bkmkend _Toc324051546}{\*\bkmkend _Toc324051731}{\*\bkmkend _Toc324051973}{\*\bkmkend _Toc337439306}{\*\bkmkend _Toc337440770}{\*\bkmkend _Toc339182932}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An important goal of any object model is that component authors can reuse and extend objects provided by others as
 pieces of their own component implementations. Implementation inheritance is one way this can be achieved: to reuse code in the process of building a new object, you inherit implementation from it and override methods in the tradition of C++ and other la
nguages. However, as a result of many years experi
ence, many people believe traditional language-style implementation inheritance technology as the basis for object reuse is simply not robust enough for large, evolving systems composed of software components. (See page {\field{\*\fldinst 
 PAGEREF impl_inh }{\fldrslt {\lang1024 16}}} for more information.) For this reason COM introduces other reusability mechanisms.
\par {\*\bkmkstart _Toc291903847}{\*\bkmkstart _Toc298215766}{\*\bkmkstart _Toc306725128}{\*\bkmkstart _Toc324051547}{\*\bkmkstart _Toc324051732}{\*\bkmkstart _Toc324051974}{\pntext\pard\plain\b\i\fs22 2.4.1\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 COM Reusability Mechanisms{\*\bkmkend _Toc291903847}{\*\bkmkend _Toc298215766}{\*\bkmkend _Toc306725128}{\*\bkmkend _Toc324051547}
{\*\bkmkend _Toc324051732}{\*\bkmkend _Toc324051974}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The key point to building reusable components is black-box reuse which means the piece of code attempt
ing to reuse another component knows nothing, and does not need to know anything, about the internal structure or implementation of the component being used. In other words, the code attempting to reuse a component depends upon the {\i behavior}
 of the component and not the exact {\i implementation}.
\par To achieve black-box reusability, COM supports two mechanisms through which one object may reuse another. For convenience, the object being reused is called the \ldblquote inner object\rdblquote  and the object making use of that inner object is the 
\ldblquote outer object.\rdblquote 
\par {\pntext\pard\plain\fs20 1.\tab}\pard\plain \s73\fi-360\li1080\ri360\sa120\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f4\fs20 {\b Containment/Delegation}: the outer object behaves like an object client to the inner ob
ject. The outer object \ldblquote contains\rdblquote  the inner object and when the outer object wishes to use the services of the inner object the outer object simply delegates implementation to the inner object\rquote 
s interfaces. In other words, the outer object uses the inner\rquote s services to implement itself. It is not necessary that the outer and inner objects support the same interfaces; in fact, the outer object may use an inner object\rquote 
s interface to help implement parts of a different interface on the outer object especially when the complexity of the interfaces differs greatly.
\par {\pntext\pard\plain\fs20 2.\tab}{\b Aggregation}: the outer object wishes to expose interfaces from the 
inner object as if they were implemented on the outer object itself. This is useful when the outer object would always delegate every call to one of its interfaces to the same interface of the inner object. Aggregation is a convenience to allow the outer 
object to avoid extra implementation overhead in such cases.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 These two mechanisms are illustrated in Figures 2-9 and 2-10. The important part to both these mechanisms is how the outer object appears to its clients. As far as the clients are concerned, both 
objects implement interfaces {\i A}, {\i B}, and {\i C}. Furthermore, the client treats the outer object as a black box, and thus does not care, nor does it need to care, about the internal structure of the outer object\emdash 
the client only cares about behavior.
\par Containment is simple to implement for an outer object: during its creation, the outer object creates whatever inner objects it needs to use as any other client would. This is nothing new\emdash 
the process is like a C++ object that itself contains a C++ string object that it uses to perform certain string functions even if the outer object is not considered a \ldblquote string\rdblquote  object in its own right.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw21378\pich14340\picwgoal12120\pichgoal8130 \picscalex46\picscaley45 
010009000003111a000008006b00000000000e00000026060f001200ffffffff00000800000034f630fa2409e4060a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0230fa34f6050000000c02b40cf0126b000000f70000033300000000005c0414006004140064041400680418006c041800700418007408180078081c007c081c008008
1c0084081c00880820008c0820009008200094082000980824009c082400a0082400a4082400a8082400ac0c2800b00c2800b40c2800b80c2800bc0c2c00c00c2c00c40c2c00c80c2c00cc0c3000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dcc000a6caf000fffbf000a0
a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000034f630fa0b09ce060e00000026060f001200ffffffff0000080000009afcf603b0fd0c0508000000fa0205000000000000000000040000002d01
010007000000fc020100000000000000040000002d010200030000001e002900000026060f004700544e505007803d000000030100ffff000000009afcf603b0fd0c059afcf603a8fd0405ffff000032003200320032005c000100010000f34e64decf560e21309afcf603b0fd0c05000700000016040c05b0fdf6039afc0a
00000026060f000a00544e5050070000000000040000002d010100040000002d010200030000001e00060000002606160002000200060000002606150002000200040000002d010100040000002d010200030000001e0007000000160400000000000000000600000026060110020000000500000026060010000008000000
fa0206000100000000000002040000002d0103000700000018040c05b0fdf6039afc06000000260601100200020012000000260602101a000200010100000000b40a0000000001008e613f218262e4614261040000002d010100040000002d01020004000000f0010300040000002701ffff06000000260616000200ffff06
000000260615000200ffff07000000fc0200005e0616020000040000002d0103000700000018040d05b1fdf6039afc07000000fc020000600616020000040000002d01040004000000f00103000700000018040c05b0fdf7039bfc07000000fc020000610616020000040000002d01030004000000f0010400070000001804
0b05affdf8039cfc07000000fc020000620616020000040000002d01040004000000f00103000700000018040905adfdfa039efc07000000fc020000630616020000040000002d01030004000000f00104000700000018040805acfdfb039ffc07000000fc020000640617020000040000002d01040004000000f001030007
00000018040705abfdfc03a0fc07000000fc020000650617020000040000002d01030004000000f00104000700000018040605aafdfd03a1fc07000000fc020000660717020000040000002d01040004000000f00103000700000018040405a8fdff03a3fc07000000fc020000670717020000040000002d01030004000000
f00104000700000018040305a7fd0004a4fc07000000fc020000680718020000040000002d01040004000000f00103000700000018040205a6fd0104a5fc07000000fc020000690718020000040000002d01030004000000f00104000700000018040105a5fd0204a6fc07000000fc0200006a0718020000040000002d0104
0004000000f0010300070000001804ff04a3fd0404a8fc07000000fc0200006b0718020000040000002d01030004000000f0010400070000001804fe04a2fd0504a9fc07000000fc0200006c0719020000040000002d01040004000000f0010300070000001804fd04a1fd0604aafc07000000fc0200006d07190200000400
00002d01030004000000f0010400070000001804fc04a0fd0704abfc07000000fc0200006e0719020000040000002d01040004000000f0010300070000001804fa049efd0904adfc07000000fc0200006f0719020000040000002d01030004000000f0010400070000001804f9049dfd0a04aefc07000000fc020000700719
020000040000002d01040004000000f0010300070000001804f8049cfd0b04affc07000000fc02000071071a020000040000002d01030004000000f0010400070000001804f7049bfd0c04b0fc07000000fc02000072071a020000040000002d01040004000000f0010300070000001804f50499fd0e04b2fc07000000fc02
000073071a020000040000002d01030004000000f0010400070000001804f40498fd0f04b3fc07000000fc02000074081a020000040000002d01040004000000f0010300070000001804f30497fd1004b4fc07000000fc02000075081b020000040000002d01030004000000f0010400070000001804f20496fd1104b5fc07
000000fc02000076081b020000040000002d01040004000000f0010300070000001804f00494fd1304b7fc07000000fc02000077081b020000040000002d01030004000000f0010400070000001804ef0493fd1404b8fc07000000fc02000078081b020000040000002d01040004000000f0010300070000001804ee0492fd
1504b9fc07000000fc02000079081c020000040000002d01030004000000f0010400070000001804ed0491fd1604bafc07000000fc0200007a081c020000040000002d01040004000000f0010300070000001804eb048ffd1804bcfc07000000fc0200007b081c020000040000002d01030004000000f00104000700000018
04ea048efd1904bdfc07000000fc0200007c081c020000040000002d01040004000000f0010300070000001804e9048dfd1a04befc07000000fc0200007d081d020000040000002d01030004000000f0010400070000001804e8048cfd1b04bffc07000000fc0200007e081d020000040000002d01040004000000f0010300
070000001804e7048bfd1c04c0fc07000000fc0200007f081d020000040000002d01030004000000f0010400070000001804e50489fd1e04c2fc07000000fc02000080081d020000040000002d01040004000000f0010300070000001804e40488fd1f04c3fc07000000fc02000081081d020000040000002d010300040000
00f0010400070000001804e30487fd2004c4fc07000000fc02000082081e020000040000002d01040004000000f0010300070000001804e20486fd2104c5fc07000000fc02000083091e020000040000002d01030004000000f0010400070000001804e00484fd2304c7fc07000000fc02000084091e020000040000002d01
040004000000f0010300070000001804df0483fd2404c8fc07000000fc02000085091e020000040000002d01030004000000f0010400070000001804de0482fd2504c9fc07000000fc02000086091f020000040000002d01040004000000f0010300070000001804dd0481fd2604cafc07000000fc02000087091f02000004
0000002d01030004000000f0010400070000001804db047ffd2804ccfc07000000fc02000088091f020000040000002d01040004000000f0010300070000001804da047efd2904cdfc07000000fc02000089091f020000040000002d01030004000000f0010400070000001804d9047dfd2a04cefc07000000fc0200008a09
20020000040000002d01040004000000f0010300070000001804d8047cfd2b04cffc07000000fc0200008b0920020000040000002d01030004000000f0010400070000001804d6047afd2d04d1fc07000000fc0200008c0920020000040000002d01040004000000f0010300070000001804d50479fd2e04d2fc07000000fc
0200008d0920020000040000002d01030004000000f0010400070000001804d40478fd2f04d3fc07000000fc0200008e0920020000040000002d01040004000000f0010300070000001804d30477fd3004d4fc07000000fc0200008f0921020000040000002d01030004000000f0010400070000001804d10475fd3204d6fc
07000000fc020000900921020000040000002d01040004000000f0010300070000001804d00474fd3304d7fc07000000fc020000910a21020000040000002d01030004000000f0010400070000001804cf0473fd3404d8fc07000000fc020000920a21020000040000002d01040004000000f0010300070000001804ce0472
fd3504d9fc07000000fc020000930a22020000040000002d01030004000000f0010400070000001804cc0470fd3704dbfc07000000fc020000940a22020000040000002d01040004000000f0010300070000001804cb046ffd3804dcfc07000000fc020000950a22020000040000002d01030004000000f001040007000000
1804ca046efd3904ddfc07000000fc020000960a22020000040000002d01040004000000f0010300070000001804c9046dfd3a04defc07000000fc020000970a23020000040000002d01030004000000f0010400070000001804c8046cfd3b04dffc07000000fc020000980a23020000040000002d01040004000000f00103
00070000001804c6046afd3d04e1fc07000000fc020000990a23020000040000002d01030004000000f0010400070000001804c50469fd3e04e2fc07000000fc0200009a0a23020000040000002d01040004000000f0010300070000001804c40468fd3f04e3fc07000000fc0200009b0a24020000040000002d0103000400
0000f0010400070000001804c30467fd4004e4fc07000000fc0200009c0a24020000040000002d01040004000000f0010300070000001804c10465fd4204e6fc07000000fc0200009d0a24020000040000002d01030004000000f0010400070000001804c00464fd4304e7fc07000000fc0200009e0a24020000040000002d
01040004000000f0010300070000001804bf0463fd4404e8fc07000000fc0200009f0b24020000040000002d01030004000000f0010400070000001804be0462fd4504e9fc07000000fc020000a00b25020000040000002d01040004000000f0010300070000001804bc0460fd4704ebfc07000000fc020000a10b25020000
040000002d01030004000000f0010400070000001804bb045ffd4804ecfc07000000fc020000a20b25020000040000002d01040004000000f0010300070000001804ba045efd4904edfc07000000fc020000a30b25020000040000002d01030004000000f0010400070000001804b9045dfd4a04eefc07000000fc020000a4
0b26020000040000002d01040004000000f0010300070000001804b7045bfd4c04f0fc07000000fc020000a50b26020000040000002d01030004000000f0010400070000001804b6045afd4d04f1fc07000000fc020000a60b26020000040000002d01040004000000f0010300070000001804b50459fd4e04f2fc07000000
fc020000a70b26020000040000002d01030004000000f0010400070000001804b40458fd4f04f3fc07000000fc020000a80b27020000040000002d01040004000000f0010300070000001804b20456fd5104f5fc07000000fc020000a90b27020000040000002d01030004000000f0010400070000001804b10455fd5204f6
fc07000000fc020000aa0b27020000040000002d01040004000000f0010300070000001804b00454fd5304f7fc07000000fc020000ab0b27020000040000002d01030004000000f0010400070000001804af0453fd5404f8fc07000000fc020000ac0b27020000040000002d01040004000000f0010300070000001804ad04
51fd5604fafc07000000fc020000ad0b28020000040000002d01030004000000f0010400070000001804ac0450fd5704fbfc07000000fc020000ae0c28020000040000002d01040004000000f0010300070000001804ab044ffd5804fcfc07000000fc020000af0c28020000040000002d01030004000000f0010400070000
001804aa044efd5904fdfc07000000fc020000b00c28020000040000002d01040004000000f0010300070000001804a8044cfd5b04fffc07000000fc020000b10c29020000040000002d01030004000000f0010400070000001804a7044bfd5c0400fd07000000fc020000b20c29020000040000002d01040004000000f001
0300070000001804a6044afd5d0401fd07000000fc020000b30c29020000040000002d01030004000000f0010400070000001804a50449fd5e0402fd07000000fc020000b40c29020000040000002d01040004000000f0010300070000001804a40448fd5f0403fd07000000fc020000b50c2a020000040000002d01030004
000000f0010400070000001804a20446fd610405fd07000000fc020000b60c2a020000040000002d01040004000000f0010300070000001804a10445fd620406fd07000000fc020000b70c2a020000040000002d01030004000000f0010400070000001804a00444fd630407fd07000000fc020000b80c2a02000004000000
2d01040004000000f00103000700000018049f0443fd640408fd07000000fc020000b90c2b020000040000002d01030004000000f00104000700000018049d0441fd66040afd07000000fc020000ba0c2b020000040000002d01040004000000f00103000700000018049c0440fd67040bfd07000000fc020000bb0c2b0200
00040000002d01030004000000f00104000700000018049b043ffd68040cfd07000000fc020000bc0d2b020000040000002d01040004000000f00103000700000018049a043efd69040dfd07000000fc020000bd0d2b020000040000002d01030004000000f001040007000000180498043cfd6b040ffd07000000fc020000
be0d2c020000040000002d01040004000000f001030007000000180497043bfd6c0410fd07000000fc020000bf0d2c020000040000002d01030004000000f001040007000000180496043afd6d0411fd07000000fc020000c00d2c020000040000002d01040004000000f0010300070000001804950439fd6e0412fd070000
00fc020000c10d2c020000040000002d01030004000000f0010400070000001804930437fd700414fd07000000fc020000c20d2d020000040000002d01040004000000f0010300070000001804920436fd710415fd07000000fc020000c30d2d020000040000002d01030004000000f0010400070000001804910435fd7204
16fd07000000fc020000c40d2d020000040000002d01040004000000f0010300070000001804900434fd730417fd07000000fc020000c50d2d020000040000002d01030004000000f00104000700000018048e0432fd750419fd07000000fc020000c60d2e020000040000002d01040004000000f00103000700000018048d
0431fd76041afd07000000fc020000c70d2e020000040000002d01030004000000f00104000700000018048c0430fd77041bfd07000000fc020000c80d2e020000040000002d01040004000000f00103000700000018048b042ffd78041cfd07000000fc020000c90d2e020000040000002d01030004000000f00104000700
0000180489042dfd7a041efd07000000fc020000ca0d2e020000040000002d01040004000000f001030007000000180488042cfd7b041ffd07000000fc020000cb0e2f020000040000002d01030004000000f001040007000000180487042bfd7c0420fd07000000fc020000cc0e2f020000040000002d01040004000000f0
01030007000000180486042afd7d0421fd07000000fc020000cd0e2f020000040000002d01030004000000f0010400070000001804840428fd7f0423fd07000000fc020000ce0e2f020000040000002d01040004000000f0010300070000001804830427fd800424fd060000002606011002000100040000002d0101000400
00002d01020004000000f0010400040000002701ffff0a00000026060f000a00544e50500800000000000a00000026060f000a00544e5050088000000000040000002d010100040000002d010200040000002701ffff08000000fa02060008000000ffffff02040000002d0103000700000018040c05b0fdf6039afc0a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000099faa2fd0b09ce0607000000fc020000000000020000040000002d010400040000002d010100090000001c064b024b02e7062409bafdb1fa050000001402000000002d0000004201050000002800000008000000080000000100
010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004
000000f0010300090000001c0649024902ce060b09a2fd99fa050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001a013e03d007e90507000000fc020000000000020000040000002d01030004000000f0010500040000002d010100090000001c06
aa00aa000206e90756033201050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f00103
0005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01030004000000f0010400090000001c06a800a800e905d0073e031a01050000001402000000001c000000fb0260ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c5770000
00000c000000c017f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a120486020c000000496e6e6572204f626a6563742c006200620059003e002d007c0062002c0059005900360004000000020102001c000000fb0270ff000000000000bc
020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01060004000000f001040005000000090200000002040000000201010009000000320a12042c06010000003a01300004000000020102001c000000fb0270ff000000000000bc0200000000000000004172
69616c000f03500d480338f70f037884c577000000000c000000c017f87f040000002d01040004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320ac4042d0210000000436f6e7461696e656420696e73696465680058005800300050002800580050
005800280028005800500028005800500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01060004000000f0010400040000002e011800050000000a0200000000050000000902000000020400
00000201010019000000320a7105bd020c0000004f75746572204f626a65637470005800300050003800280070005800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e6f785ffb9f8580007000000fc02000000000002000004
0000002d01040004000000f0010500040000002d0101000700000018047100d2f89dfffef7050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff0000007700
0000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f00103000700000018045800b9f885ffe6f7050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026
060f001200ffffffff000008000000aff8e8ff98faf3ff040000002d010100040000002d01020004000000f001040004000000f00105001c000000fb021000070000000000bc02000000000102022253797374656d0003500d48033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010600
030000001e00070000001604930098fa48ffaff808000000fa0206000800000000000002040000002d010400050000001402eeffcef6050000001302e5ff71fc040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff0000080000003df675ff1ef775001c000000fb0260ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a210074f6
0100000041016b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000034f6b50115f7b5021c000000fb0260ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d0105
0004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a61026bf60100000042016b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000039f6e30323f7e3041c000000fb0260ff
00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a8f0470f6010000004301740004000000020102000a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000710330fa2808cafb1c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d01050004000000f0010400040000002e011800
050000000a02000000000500000009020000000204000000020101001c000000320acefaa8030e00000049556e6b6e6f776e206b6e6f77732800680050004800500050006800500028004800500051006800480004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d48
0338f70f037884c577000000000c000000001af87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a7bfb58040b000000412c20422c20616e6420436f60002800280060002800280050005000500028006800040000000201
02000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c30433ffc9087a011c000000fb0270ff0000000000009001ff00000000000022417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d01050004000000f0010400040000002e
011800050000000a020000000005000000090200000002040000000201010013000000320ad1ff82050800000049556e6b6e6f776e2800680050004800500050006800500004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c00
0000001af87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a7e000e050e000000636f6e74726f6c7320496e6e65724800500050002800300050002000480028002800500050005000300004000000020102001c000000fb
0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320a2b01fa040f0000004f626a656374206c6966
6574696d650070005000200050004800280028002000200028005000280020007800500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d1062702d9063d03040000002d010100040000002d010200040000002d01030004000000f0010500030000
001e000700000016043d0379072702310608000000fa0206000800000000000002040000002d0104000500000014021901d1060500000013024304d106040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff
00000800000021fbf4fd28001cff1c000000fb0240ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320abefe5bfb0c0000
004f75746572204f626a6563749500760040006a004b0035009600750035006b006b00400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000095fe170468ffea0407000000fc020000000000020000040000002d010500070000001804030581ff2f04
adfe0500000014024304d1062d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f0010500050000000902000000
02050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804ea0468ff170495fe0500000014024304d1060a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000066ff7d041e018504040000002d010100040000002d01020004000000
f001050004000000f0010600040000002d01030004000000f0010400030000001e0007000000160425051e01dd0366ff08000000fa0206000800000000000002040000002d0104000500000014027d04b6fd0500000013027d04c602040000002d010100040000002d01020004000000f0010400040000002701ffff0a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006efd190458fe19051c000000fb0260ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d010400040000002e011800050000000a0200000000
05000000090200000002040000000201010009000000320ac504a5fd010000004301740004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009ffb7303a2fe500408000000fa0206000800000000000002040000002d0105000b000000170842049ffbb8
035bfe2505c7fe73039ffb07000000fc020000000000020000040000002d010600040000002d0101000a000000240303009efef20350fe900328fec8030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006605c7fb39069afc07000000fc02000000000002000004000000
2d01070004000000f0010600070000001804b3fc5206dffb7e050500000014027d04c6022d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd00000004
0000002d01060004000000f001070005000000090200000002050000000102ffffff02040000002d0105000700000018049afc3906c7fb66050500000014027d04c6020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cc0590fcd405a6fd040000002d01010004000000
2d01020004000000f001050004000000f0010600040000002d01030004000000f0010400030000001e00070000001604a6fd740690fc2c0508000000fa0206000800000000000002040000002d01040005000000140282fbcc05050000001302acfecc05040000002d010100040000002d01020004000000f0010400040000
002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000078fc1900cc010f031c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d010400040000002e0118000500
00000a020000000005000000090200000002040000000201010021000000320ab800b2fc110000004f75746572204f626a6563742075736573007000580030005000380028007000580028005000500030002800580050005000500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269
616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320a6501f6fc10000000496e6e6572204f626a6563749273204328005800580050003800280070005800
2800500050003000280050002800680004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000
00020101001c000000320a12020afd0e000000696d706c656d656e746174696f6e2800800058002800500080005000580030005000300028005800580004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f0400
00002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320abf025afd0e000000617320616e7920636c69656e742e5000500028005000580050002800500028002800510057003000280004000000020102000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000d3f690fdc1f92aff1c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000800af87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500
0000090200000002040000000201010013000000320a2efe3ef70800000045787465726e616c6000480028005000300050005000200004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01050004
000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010016000000320adbfe0af70a000000496e7465726661636573280050002800500030002800500048005000480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff000008000000f6f7cd01c9f8a00207000000fc020000000000020000040000002d010400070000001804b902e2f8e5010ef8050000001402acfecc052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff000000770000
00ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400070000001804a002c9f8cd01f6f7050000001402acfecc050a00000026060f000a00ffffffff01000000
00000e00000026060f001200ffffffff000008000000bff83002a8fa3b02040000002d010100040000002d01020004000000f001040004000000f0010600040000002d01030004000000f0010500030000001e00070000001604db02a8fa9001bff808000000fa0206000800000000000002040000002d0104000500000014
023602def60500000013022d0281fc040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f6f7ed03c9f8c00407000000fc020000000000020000040000002d010400070000001804d904e2f8
05040ef80500000014022d0281fc2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200
000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400070000001804c004c9f8ed03f6f70500000014022d0281fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000bff85004b0fb5b04040000002d010100040000002d0102000400
0000f001040004000000f0010500030000001e00070000001604fb04b0fbb003bff808000000fa0206000800000000000002040000002d0104000500000014025604d6f50500000013024d0491fe040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff010000
0000000e00000026060f001200ffffffff00000800000070fb1804d8fb900407000000fc020000000000020000040000002d01040008000000fa0206000800000000000002040000002d0105000700000018049004d8fb180470fb0500000014024d0491fe0a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff0000080000006b0684013e07570207000000fc020000000000020000040000002d01060004000000f0010400040000002d010100070000001804700257079c0183060500000014024d0491fe2d000000420105000000280000000800000008000000010001000000000020000000000000000000000000
0000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f001050007000000180457023e078401
6b060500000014024d0491fe0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010100040000002d01020004000000f0010600040000
00f0010400030000000000f0010500040000002d01030004000000f00106000300000000000efbdaf500}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-9: Containment of an inner object and delegation to its interfaces.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Aggregation is almost as simple to implement, the primary difference being the implementation of the three {\cs58\f5\fs16\lang1024 IUnknown}{\i  }functions: {\cs58\f5\fs16\lang1024 QueryInterface}{\i , }{
\cs58\f5\fs16\lang1024 AddRef}{\i , }and{\i  }{\cs58\f5\fs16\lang1024 Release}. The catch is that from the client\rquote s perspective, any {\cs58\f5\fs16\lang1024 IUnknown} function on the outer object must affect the outer object. That is, {
\cs58\f5\fs16\lang1024 AddRef} and {\cs58\f5\fs16\lang1024 Release} affect the outer object and {\cs58\f5\fs16\lang1024 QueryInterface} exposes all the interfaces available on the outer object. However, if the outer object simply exposes an inner object
\rquote s interface as it\rquote s own, that inner object\rquote s {\cs58\f5\fs16\lang1024 IUnknown}{\i  }members called through that interface will behave differently than those {\cs58\f5\fs16\lang1024 IUnknown} members on the outer object\rquote 
s interfaces, a sheer violation of the rules and properties governing {\cs58\f5\fs16\lang1024 IUnknown}.
\par The solution is for the outer object to somehow pass the inner object some {\cs58\f5\fs16\lang1024 IUnknown} pointer to which the inner object can re-route (that is, delegate) {\cs58\f5\fs16\lang1024 IUnknown}
 calls in its own interfaces, and yet there must be a method through which the outer object can access the inner object\rquote s {\cs58\f5\fs16\lang1024 IUnknown}
 functions that only affect the inner object. COM provides specific support for this solution as described in Chapter 6.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw21378\pich14340\picwgoal12120\pichgoal8130 \picscalex45\picscaley45 
0100090000031e1a000008006b00000000000e00000026060f001200ffffffff0000080000004cf6a6f93c095a060a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02a6f94cf6050000000c02b40cf0126b000000f70000033300000000005c0414006004140064041400680418006c041800700418007408180078081c007c081c008008
1c0084081c00880820008c0820009008200094082000980824009c082400a0082400a4082400a8082400ac0c2800b00c2800b40c2800b80c2800bc0c2c00c00c2c00c40c2c00c80c2c00cc0c3000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dcc000a6caf000fffbf000a0
a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff0000080000004cf6a8f9230946060e00000026060f001200ffffffff000008000000b2fc6e03c8fd840408000000fa0205000000000000000000040000002d01
010007000000fc020100000000000000040000002d010200030000001e002900000026060f004700544e505007803d000000030100ffff00000000b2fc6e03c8fd8404b2fc6e03c0fd7c04ffff000032003200320032005c000100010000f34e64decf560e2130b2fc6e03c8fd8404000700000016048404c8fd6e03b2fc0a
00000026060f000a00544e5050070000000000040000002d010100040000002d010200030000001e00060000002606160002000200060000002606150002000200040000002d010100040000002d010200030000001e0007000000160400000000000000000600000026060110020000000500000026060010000008000000
fa0206000100000000000002040000002d0103000700000018048404c8fd6e03b2fc06000000260601100200020012000000260602101a000200010100000000b40a0000000001008e613f218262e4614261040000002d010100040000002d01020004000000f0010300040000002701ffff06000000260616000200ffff06
000000260615000200ffff07000000fc0200005e0616020000040000002d0103000700000018048504c9fd6e03b2fc07000000fc020000600616020000040000002d01040004000000f00103000700000018048404c8fd6f03b3fc07000000fc020000610616020000040000002d01030004000000f0010400070000001804
8304c7fd7003b4fc07000000fc020000620616020000040000002d01040004000000f00103000700000018048104c5fd7203b6fc07000000fc020000630616020000040000002d01030004000000f00104000700000018048004c4fd7303b7fc07000000fc020000640617020000040000002d01040004000000f001030007
00000018047f04c3fd7403b8fc07000000fc020000650617020000040000002d01030004000000f00104000700000018047e04c2fd7503b9fc07000000fc020000660717020000040000002d01040004000000f00103000700000018047c04c0fd7703bbfc07000000fc020000670717020000040000002d01030004000000
f00104000700000018047b04bffd7803bcfc07000000fc020000680718020000040000002d01040004000000f00103000700000018047a04befd7903bdfc07000000fc020000690718020000040000002d01030004000000f00104000700000018047904bdfd7a03befc07000000fc0200006a0718020000040000002d0104
0004000000f00103000700000018047704bbfd7c03c0fc07000000fc0200006b0718020000040000002d01030004000000f00104000700000018047604bafd7d03c1fc07000000fc0200006c0719020000040000002d01040004000000f00103000700000018047504b9fd7e03c2fc07000000fc0200006d07190200000400
00002d01030004000000f00104000700000018047404b8fd7f03c3fc07000000fc0200006e0719020000040000002d01040004000000f00103000700000018047204b6fd8103c5fc07000000fc0200006f0719020000040000002d01030004000000f00104000700000018047104b5fd8203c6fc07000000fc020000700719
020000040000002d01040004000000f00103000700000018047004b4fd8303c7fc07000000fc02000071071a020000040000002d01030004000000f00104000700000018046f04b3fd8403c8fc07000000fc02000072071a020000040000002d01040004000000f00103000700000018046d04b1fd8603cafc07000000fc02
000073071a020000040000002d01030004000000f00104000700000018046c04b0fd8703cbfc07000000fc02000074081a020000040000002d01040004000000f00103000700000018046b04affd8803ccfc07000000fc02000075081b020000040000002d01030004000000f00104000700000018046a04aefd8903cdfc07
000000fc02000076081b020000040000002d01040004000000f00103000700000018046804acfd8b03cffc07000000fc02000077081b020000040000002d01030004000000f00104000700000018046704abfd8c03d0fc07000000fc02000078081b020000040000002d01040004000000f00103000700000018046604aafd
8d03d1fc07000000fc02000079081c020000040000002d01030004000000f00104000700000018046504a9fd8e03d2fc07000000fc0200007a081c020000040000002d01040004000000f00103000700000018046304a7fd9003d4fc07000000fc0200007b081c020000040000002d01030004000000f00104000700000018
046204a6fd9103d5fc07000000fc0200007c081c020000040000002d01040004000000f00103000700000018046104a5fd9203d6fc07000000fc0200007d081d020000040000002d01030004000000f00104000700000018046004a4fd9303d7fc07000000fc0200007e081d020000040000002d01040004000000f0010300
0700000018045f04a3fd9403d8fc07000000fc0200007f081d020000040000002d01030004000000f00104000700000018045d04a1fd9603dafc07000000fc02000080081d020000040000002d01040004000000f00103000700000018045c04a0fd9703dbfc07000000fc02000081081d020000040000002d010300040000
00f00104000700000018045b049ffd9803dcfc07000000fc02000082081e020000040000002d01040004000000f00103000700000018045a049efd9903ddfc07000000fc02000083091e020000040000002d01030004000000f001040007000000180458049cfd9b03dffc07000000fc02000084091e020000040000002d01
040004000000f001030007000000180457049bfd9c03e0fc07000000fc02000085091e020000040000002d01030004000000f001040007000000180456049afd9d03e1fc07000000fc02000086091f020000040000002d01040004000000f0010300070000001804550499fd9e03e2fc07000000fc02000087091f02000004
0000002d01030004000000f0010400070000001804530497fda003e4fc07000000fc02000088091f020000040000002d01040004000000f0010300070000001804520496fda103e5fc07000000fc02000089091f020000040000002d01030004000000f0010400070000001804510495fda203e6fc07000000fc0200008a09
20020000040000002d01040004000000f0010300070000001804500494fda303e7fc07000000fc0200008b0920020000040000002d01030004000000f00104000700000018044e0492fda503e9fc07000000fc0200008c0920020000040000002d01040004000000f00103000700000018044d0491fda603eafc07000000fc
0200008d0920020000040000002d01030004000000f00104000700000018044c0490fda703ebfc07000000fc0200008e0920020000040000002d01040004000000f00103000700000018044b048ffda803ecfc07000000fc0200008f0921020000040000002d01030004000000f001040007000000180449048dfdaa03eefc
07000000fc020000900921020000040000002d01040004000000f001030007000000180448048cfdab03effc07000000fc020000910a21020000040000002d01030004000000f001040007000000180447048bfdac03f0fc07000000fc020000920a21020000040000002d01040004000000f001030007000000180446048a
fdad03f1fc07000000fc020000930a22020000040000002d01030004000000f0010400070000001804440488fdaf03f3fc07000000fc020000940a22020000040000002d01040004000000f0010300070000001804430487fdb003f4fc07000000fc020000950a22020000040000002d01030004000000f001040007000000
1804420486fdb103f5fc07000000fc020000960a22020000040000002d01040004000000f0010300070000001804410485fdb203f6fc07000000fc020000970a23020000040000002d01030004000000f0010400070000001804400484fdb303f7fc07000000fc020000980a23020000040000002d01040004000000f00103
000700000018043e0482fdb503f9fc07000000fc020000990a23020000040000002d01030004000000f00104000700000018043d0481fdb603fafc07000000fc0200009a0a23020000040000002d01040004000000f00103000700000018043c0480fdb703fbfc07000000fc0200009b0a24020000040000002d0103000400
0000f00104000700000018043b047ffdb803fcfc07000000fc0200009c0a24020000040000002d01040004000000f001030007000000180439047dfdba03fefc07000000fc0200009d0a24020000040000002d01030004000000f001040007000000180438047cfdbb03fffc07000000fc0200009e0a24020000040000002d
01040004000000f001030007000000180437047bfdbc0300fd07000000fc0200009f0b24020000040000002d01030004000000f001040007000000180436047afdbd0301fd07000000fc020000a00b25020000040000002d01040004000000f0010300070000001804340478fdbf0303fd07000000fc020000a10b25020000
040000002d01030004000000f0010400070000001804330477fdc00304fd07000000fc020000a20b25020000040000002d01040004000000f0010300070000001804320476fdc10305fd07000000fc020000a30b25020000040000002d01030004000000f0010400070000001804310475fdc20306fd07000000fc020000a4
0b26020000040000002d01040004000000f00103000700000018042f0473fdc40308fd07000000fc020000a50b26020000040000002d01030004000000f00104000700000018042e0472fdc50309fd07000000fc020000a60b26020000040000002d01040004000000f00103000700000018042d0471fdc6030afd07000000
fc020000a70b26020000040000002d01030004000000f00104000700000018042c0470fdc7030bfd07000000fc020000a80b27020000040000002d01040004000000f00103000700000018042a046efdc9030dfd07000000fc020000a90b27020000040000002d01030004000000f001040007000000180429046dfdca030e
fd07000000fc020000aa0b27020000040000002d01040004000000f001030007000000180428046cfdcb030ffd07000000fc020000ab0b27020000040000002d01030004000000f001040007000000180427046bfdcc0310fd07000000fc020000ac0b27020000040000002d01040004000000f00103000700000018042504
69fdce0312fd07000000fc020000ad0b28020000040000002d01030004000000f0010400070000001804240468fdcf0313fd07000000fc020000ae0c28020000040000002d01040004000000f0010300070000001804230467fdd00314fd07000000fc020000af0c28020000040000002d01030004000000f0010400070000
001804220466fdd10315fd07000000fc020000b00c28020000040000002d01040004000000f0010300070000001804200464fdd30317fd07000000fc020000b10c29020000040000002d01030004000000f00104000700000018041f0463fdd40318fd07000000fc020000b20c29020000040000002d01040004000000f001
03000700000018041e0462fdd50319fd07000000fc020000b30c29020000040000002d01030004000000f00104000700000018041d0461fdd6031afd07000000fc020000b40c29020000040000002d01040004000000f00103000700000018041c0460fdd7031bfd07000000fc020000b50c2a020000040000002d01030004
000000f00104000700000018041a045efdd9031dfd07000000fc020000b60c2a020000040000002d01040004000000f001030007000000180419045dfdda031efd07000000fc020000b70c2a020000040000002d01030004000000f001040007000000180418045cfddb031ffd07000000fc020000b80c2a02000004000000
2d01040004000000f001030007000000180417045bfddc0320fd07000000fc020000b90c2b020000040000002d01030004000000f0010400070000001804150459fdde0322fd07000000fc020000ba0c2b020000040000002d01040004000000f0010300070000001804140458fddf0323fd07000000fc020000bb0c2b0200
00040000002d01030004000000f0010400070000001804130457fde00324fd07000000fc020000bc0d2b020000040000002d01040004000000f0010300070000001804120456fde10325fd07000000fc020000bd0d2b020000040000002d01030004000000f0010400070000001804100454fde30327fd07000000fc020000
be0d2c020000040000002d01040004000000f00103000700000018040f0453fde40328fd07000000fc020000bf0d2c020000040000002d01030004000000f00104000700000018040e0452fde50329fd07000000fc020000c00d2c020000040000002d01040004000000f00103000700000018040d0451fde6032afd070000
00fc020000c10d2c020000040000002d01030004000000f00104000700000018040b044ffde8032cfd07000000fc020000c20d2d020000040000002d01040004000000f00103000700000018040a044efde9032dfd07000000fc020000c30d2d020000040000002d01030004000000f001040007000000180409044dfdea03
2efd07000000fc020000c40d2d020000040000002d01040004000000f001030007000000180408044cfdeb032ffd07000000fc020000c50d2d020000040000002d01030004000000f001040007000000180406044afded0331fd07000000fc020000c60d2e020000040000002d01040004000000f001030007000000180405
0449fdee0332fd07000000fc020000c70d2e020000040000002d01030004000000f0010400070000001804040448fdef0333fd07000000fc020000c80d2e020000040000002d01040004000000f0010300070000001804030447fdf00334fd07000000fc020000c90d2e020000040000002d01030004000000f00104000700
00001804010445fdf20336fd07000000fc020000ca0d2e020000040000002d01040004000000f0010300070000001804000444fdf30337fd07000000fc020000cb0e2f020000040000002d01030004000000f0010400070000001804ff0343fdf40338fd07000000fc020000cc0e2f020000040000002d01040004000000f0
010300070000001804fe0342fdf50339fd07000000fc020000cd0e2f020000040000002d01030004000000f0010400070000001804fc0340fdf7033bfd07000000fc020000ce0e2f020000040000002d01040004000000f0010300070000001804fb033ffdf8033cfd060000002606011002000100040000002d0101000400
00002d01020004000000f0010400040000002701ffff0a00000026060f000a00544e50500800000000000a00000026060f000a00544e5050088000000000040000002d010100040000002d010200040000002701ffff08000000fa02060008000000ffffff02040000002d0103000700000018048404c8fd6e03b2fc0a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b1fa1afd2309460607000000fc020000000000020000040000002d010400040000002d010100090000001c064b024b025f063c0932fdc9fa050000001402000000002d0000004201050000002800000008000000080000000100
010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004
000000f0010300090000001c0649024902460623091afdb1fa050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003201b602e807610507000000fc020000000000020000040000002d01030004000000f0010500040000002d010100090000001c06
aa00aa007a050108ce024a01050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f00103
0005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01030004000000f0010400090000001c06a800a8006105e807b6023201050000001402000000001c000000fb0260ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c5770000
00000c000000a01af87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a8a039e020c000000496e6e6572204f626a6563742c006200620059003e002d007c0062002c0059005900360004000000020102001c000000fb0270ff000000000000bc
020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000400bf87f040000002d01060004000000f001040005000000090200000002040000000201010009000000320a8a034406010000003a00300004000000020102001c000000fb0270ff000000000000bc0200000000000000004172
69616c000f03500d480338f70f037884c577000000000c000000a01af87f040000002d01040004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320a3c04450210000000436f6e7461696e656420696e73696465680058005800300050002800580050
005800280028005800500028005800500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000400bf87f040000002d01060004000000f0010400040000002e011800050000000a0200000000050000000902000000020400
00000201010019000000320ae904d5020c0000004f75746572204f626a65637470005800300050003800280070005800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fef7fdfed1f8d0ff07000000fc02000000000002000004
0000002d01040004000000f0010500040000002d010100070000001804e9ffeaf815ff16f8050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff0000007700
0000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010300070000001804d0ffd1f8fdfefef7050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026
060f001200ffffffff000008000000c7f860ffb0fa6bff040000002d010100040000002d01020004000000f001040004000000f00105001c000000fb021000070000000000bc02000000000102022253797374656d0003500d48033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010600
030000001e000700000016040b00b0fac0fec7f808000000fa0206000800000000000002040000002d01040005000000140266ffe6f60500000013025dff89fc040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff00000800000055f6edfe36f7edff1c000000fb0260ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000400bf87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a99ff8cf6
0100000041006b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004cf62d012df72d021c000000fb0260ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000d00af87f040000002d0105
0004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320ad90183f60100000042006b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000051f65b033bf75b041c000000fb0260ff
00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000400bf87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a070488f6010000004300740004000000020102000a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008903a8f93f0842fb1c000000fb0270ff0000000000009001ff00000000000022417269616c000f03500d480338f70f037884c577000000000c000000d00af87f040000002d01050004000000f0010400040000002e011800
050000000a020000000005000000090200000002040000000201010013000000320a46fac0030800000049556e6b6e6f776e2800680050004800500050006800500004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c00000040
0bf87f040000002d01040004000000f001050005000000090200000002040000000201010010000000320a46fa400606000000206b6e6f777328004800500050006800480004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c00
0000d00af87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320af3fa70040b000000412c20422c20616e642043006000280028006000280028005000500050002800680004000000020102000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000c304c3fec9080a011c000000fb0270ff0000000000009001ff00000000000022417269616c000f03500d480338f70f037884c577000000000c000000400bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500
0000090200000002040000000201010013000000320a61ff82050800000049556e6b6e6f776e2800680050004800500050006800500004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000d00af87f040000002d01050004
000000f00104001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000400bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a0e000e050e00
0000636f6e74726f6c7320496e6e65724800500050002800300050002000480028002800500050005000300004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000d00af87f040000002d01050004000000f0010400040000
002e011800050000000a02000000000500000009020000000204000000020101001e000000320abb00fa040f0000004f626a656374206c69666574696d650070005000200050004800280028002000200028005000280020007800500004000000020102000a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff000008000000e9069f01f106b502040000002d010100040000002d010200040000002d01030004000000f0010500030000001e00070000001604b50291079f01490608000000fa0206000800000000000002040000002d0104000500000014029100e906050000001302bb03e906040000002d01010004
0000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b9fbc4fdc000ecfe1c000000fb0240ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000d00af87f
040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a8efef3fb0c0000004f75746572204f626a6563749500760040006a004b0035009600750035006b006b00400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026
060f001200ffffffff0000080000007e053ffb510612fc07000000fc020000000000020000040000002d0105000700000018042bfc6a0657fb9605050000001402bb03e9062d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00
ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050007000000180412fc51063ffb7e05050000001402bb03e9060a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff000008000000e40508fcec051efd040000002d010100040000002d01020004000000f001050004000000f0010600040000002d01030004000000f0010400030000001e000700000016041efd8c0608fc440508000000fa0206000800000000000002040000002d01
0400050000001402fafae40505000000130224fee405040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000074fbc103f0000a061c000000fb0270ff000000000000bc02000000000000000041
7269616c000f03500d480338f70f037884c577000000000c000000d00af87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a60044efc0e000000496e6e6572204f626a6563749273280058005800500038002800700058002800500050003000
2800500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000a01af87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010022000000320a0d
05aefb1200000043206578706f736564206469726563746c7968002800500050005800580050005000580028005800280038005000500030002800500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000d00af87f0400
00002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010021000000320aba05c6fb1100000066726f6d204f75746572204f626a656374003000380058008000280070005800300050003800280070005800280050005000300004000000020102000a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ebf608fdd9f9a2fe1c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000a01af87f040000002d01050004000000f0010400040000002e0118000500
00000a020000000005000000090200000002040000000201010013000000320aa6fd56f70800000045787465726e616c6000480028005000300050005000200004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000d00af8
7f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a53fe22f70a000000496e7465726661636573280050002800500030002800500048005000480004000000020102000a00000026060f000a00ffffffff0100000000000e00
000026060f001200ffffffff0000080000000ef84501e1f8180207000000fc020000000000020000040000002d0105000700000018043102faf85d0126f805000000140224fee4052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ff
ffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018041802e1f845010ef805000000140224fee4050a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d7f8a801c0fab301040000002d010100040000002d01020004000000f001050004000000f0010600040000002d01030004000000f0010400030000001e000700000016045302c0fa0801d7f808000000fa0206000800000000000002040000
002d010400050000001402ae01f6f6050000001302a50199fc040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000ef86503e1f8380407000000fc020000000000020000040000002d010400
0700000018045104faf87d0326f8050000001402a50199fc2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f0
01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0104000700000018043804e1f865030ef8050000001402a50199fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d7f8c8033801d303040000002d010100
040000002d01020004000000f001040004000000f0010500030000001e00070000001604730438012803d7f808000000fa0206000800000000000002040000002d010400050000001402ce037ef0050000001302c5038909040000002d010100040000002d01020004000000f0010400040000002701ffff0a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c801b8fb8005180308000000fa0206000800000000000002040000002d0104000b00000017081403c801c1fb2105700a3009b8fbc80107000000fc020000000000020000040000002d010500040000002d0101000a000000240303007c05
bcfb0105a8fb0905eefb0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000004fcb1ff0002fa011c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000a01af87f040000002d010600040000002e
011800050000000a020000000005000000090200000002040000000201010019000000320a50005afd0c000000496e6e6572204f626a65637428005800580050003800280070005800280050005000300004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f7
0f037884c577000000000c000000001af87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010016000000320afd0046fc0a00000064656c65676174657320580050002800500058005000300050005000280004000000020102001c000000fb
0270ff000000000000bc02ff00000000000022417269616c000f03500d480338f70f037884c577000000000c000000a01af87f040000002d01060004000000f001070005000000090200000002040000000201010013000000320afd0006ff0800000049556e6b6e6f776e2800680058005000580058007000580004000000
020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01070004000000f00106001c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000
00a01af87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010027000000320aaa013efc1500000063616c6c7320746f204f75746572204f626a6563740050005000280028005000280030005800280070005800300050003800280070005800
280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008306e4005607b70107000000fc020000000000020000040000002d01070004000000f0010500070000001804d0016f07fc009b06050000001402c50389092d0000004201050000
002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001070005000000090200000002050000000102ffffff02040000002d0104000700
00001804b7015607e4008306050000001402c50389090a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010100040000002d01020004
000000f001040004000000f0010500040000002d01030004000000f00106000300000000000efbdaf500}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-10: Aggregation of an inner object where the outer object exposes one or\line more of the inner object\rquote s interfaces as it\rquote s own.
\par {\*\bkmkstart _Toc337439307}{\*\bkmkstart _Toc337440771}{\*\bkmkstart _Toc298215767}{\*\bkmkstart _Toc306725129}{\*\bkmkstart _Toc324051548}{\*\bkmkstart _Toc324051733}{\*\bkmkstart _Toc324051975}{\*\bkmkstart _Toc339182933}{\pntext\pard\plain\b 2.5\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Connectable Objects and Events{\*\bkmkend _Toc337439307}{\*\bkmkend _Toc337440771}{\*\bkmkend _Toc339182933}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In the preceding discussions of interfaces it was implied that, from the object\rquote s perspective, the interfaces were \ldblquote incoming\rdblquote .  \ldblquote Incoming,\rdblquote 
 in the context of a client-object relationship, implies that the object \ldblquote listens\rdblquote  to what the client has to say.  In other words, incoming interfaces and t
heir member functions receive input from the outside.  COM also defines mechanisms where objects can support \ldblquote outgoing\rdblquote  interfaces.  Outgo
ing interfaces  allow objects to have two-way conversations, so to speak, with clients.  When an object supports one or more outgoing interfaces, it is said to be {\i connectable.}  One of the most obvious uses for out
going interfaces is for event notification.  This section describes Connectable Objects.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
OLE Controls use the Connectable Objects mechanisms extensively.}}
\par A  connectable object (also called a {\i source}) can have as many outgoing interfaces as it likes.  Each interface is composed of distinct member functions, with each function representing a single {\i event, notification, } or {\i request.}
  Events and notifications are eq
uivalent concepts (and interchangeable terms), as they are both used to tell the client that something interesting happened in the object.  Events and notifications differ from a request in that the object expects response from the client.  A request, on 
the other hand, is how an object asks the client a question and expects a response.
\par In all of these cases, there must be some client that listens to what the object has to say and uses that information wisely.  It is the client, therefore, that actually implements these interfaces on objects called {\i sinks.}  From the sink\rquote 
s perspective, the interfaces are incoming, meaning that the sink listens through them.  A connectable object plays the role of a client as far as the sink is concerned; thus, the sink is what the object\rquote s client uses to listen to that object.  

\par An object doesn\rquote t necessarily have a one-to-one relationship with a sink. In fact, a single instance of an object usually supports any number of connections to sinks in any number of separate clients.  This is called {\i multicasting.}{
\cs38\i\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Note that this usage of the term {\i multicasting} may differ from what some readers are accustomed to.  In some systems {\i 
multicasting} is used to describe a connection-less broadcast.  Connectable objects are obviously connection oriented.}}{\i   }In addition, any sink can be connected to any number of objects. 
\par Chapter 11 covers the Connectable Object interfaces ({\cs58\f5\fs16\lang1024 IConnectionPoint }and {\cs58\f5\fs16\lang1024 IConnectionPointContainer}) in complete detail.
\par {\*\bkmkstart _Toc337439308}{\*\bkmkstart _Toc337440772}{\*\bkmkstart _Toc339182934}{\pntext\pard\plain\b 2.6\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 
Persistent Storage{\*\bkmkend _Toc298215767}{\*\bkmkend _Toc306725129}{\*\bkmkend _Toc324051548}{\*\bkmkend _Toc324051733}{\*\bkmkend _Toc324051975}{\*\bkmkend _Toc337439308}{\*\bkmkend _Toc337440772}{\*\bkmkend _Toc339182934}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As mentioned in Chapter 1, the enhanced COM services define a number of storage-related interfaces, collectively called Persistent Storage or Structured Storage. By definition of the term {\i interface}
, these interfaces carry no implementation. They describe a way to create a \ldblquote file system within a file,\rdblquote 
 and they provide some extremely powerful features for applications including incremental access, transactioning, and a sharable medium that can be used for data exchange or for storing the persistent data of ob
jects that know how to read and write such data themselves. The following sections deal with the structure of storage and the other features.
\par {\*\bkmkstart _Toc298215768}{\*\bkmkstart _Toc306725130}{\*\bkmkstart _Toc324051549}{\*\bkmkstart _Toc324051734}{\*\bkmkstart _Toc324051976}{\pntext\pard\plain\b\i\fs22 2.6.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 A File System Within A File{\*\bkmkend _Toc298215768}{\*\bkmkend _Toc306725130}{\*\bkmkend _Toc324051549}{\*\bkmkend _Toc324051734}{\*\bkmkend _Toc324051976}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Years ago, before there were \ldblquote disk operating systems,\rdblquote 
 applications had to write persistent data directly to a disk drive (or drum) by sending commands directly to the hardware disk controller. Those applications were responsible for managing the absolute
 location of the data on the disk, making sure that it was not overwriting data that was already there. This was not too much of a problem seeing as how most disks were under complete control of a single application that took over the entire computer.

\par The advent of computer systems that could run more than one application brought about problems where all the applications had to make sure they did not write over each other\rquote 
s data on the disk. It therefore became beneficial that each adopted a standard of marking the disk sectors that were used and which ones were free. In time, these standards became the \ldblquote disk operating system\rdblquote  which provided a 
\ldblquote file system.\rdblquote  Now, instead of dealing directly with absolute disk sectors and so forth, applications simply told the file system to write blocks of data to the disk. Furthermore, the file system
 allowed applications to create a hierarchy of information using directories which could contain not only files but other sub-directories which in turn contained more files, more sub-directories, etc.
\par The file system provided a single level of indirection b
etween applications and the disk, and the result was that every application saw a file as a single contiguous stream of bytes on the disk. Underneath, however, the file system was storing the file in dis-contiguous sectors according to some algorithm that
 optimized read and write time for each file. The indirection provided from the file system freed applications from having to care about the absolute position of data on a storage device.
\par Today, virtually all system APIs for file input and output provide applications with some way to write in
formation into a flat file that applications see as a single stream of bytes that can grow as large as necessary until the disk is full. For a long time these APIs have been sufficient for applications to store their persistent information. Applications h
ave made some incredible innovations in how they deal with a single stream of information to provide features like incremental \ldblquote fast\rdblquote  saves.
\par However, a major feature of COM is interoperability, the basis for integration between applications. {\i This integration brings with it the need to have multiple applications write information to the same file on the underlying file system. }
This is exactly the same problem that the computer industry faced years ago when multiple applications began to share the same disk drive. The solution then was to create a file system to provide a level of indirection between an application \ldblquote 
file\rdblquote  and the underlying disk sectors.
\par Thus, the solution for the integration problem today is another level of indirection: a file system {\i within }
a file. Instead of requiring that a large contiguous sequence of bytes on the disk be manipulated through a single file handle with a single seek pointer, COM defines how to treat a single file system entity as a structured collection of two types of obje
cts\emdash storages and streams\emdash that act like directories and files, respectively.
\par {\*\bkmkstart _Toc298215769}{\*\bkmkstart _Toc306725131}{\*\bkmkstart _Toc324051550}{\*\bkmkstart _Toc324051735}{\*\bkmkstart _Toc324051977}{\pntext\pard\plain\b\i\fs22 2.6.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Storage and Stream Objects{\*\bkmkend _Toc298215769}{\*\bkmkend _Toc306725131}{\*\bkmkend _Toc324051550}{\*\bkmkend _Toc324051735}{\*\bkmkend _Toc324051977}
\par \pard\plain \qj\sa60\keep\widctlpar \f4\fs20 Within COM\rquote s Persistent Storage definition there are two types of storage elements: storage objects and stream o
bjects. These are objects generally implemented by the COM library itself; applications rarely, if ever, need to implement these storage elements themselves.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 
{\cs38\super \chftn }\tab This specification recommends that the COM implementation on a given platform (Windows, Macintosh, etc.) includes a standard storage implementation for use by all applications.}} These objects, like all others in COM, imple
ment interfaces: {\cs58\f5\fs16\lang1024 IStream}{\i  }for stream objects, {\cs58\f5\fs16\lang1024 IStorage} for storage objects as detailed in Chapter 8.
\par \pard \qj\sa60\widctlpar A stream object is the concept
ual equivalent of a single disk file as we understand disk files today. Streams are the basic file-system component in which data lives, and each stream in itself has access rights and a single seek pointer. Through its {\i IStream }
interface stream can be told to read, write, seek, and perform a few other operations on its underlying data. Streams are named by using a text string and can contain any inter
nal structure you desire because they are simply a flat stream of bytes. In addition, the functions in the {\i I}{\i S}{\i tream }interface map nearly one-to-one with standard file-handle based functions such as those in the ANSI C run-time library.

\par A storage object is the conceptual equivalent of a directory. Each storage, like a directory, can contain any number of sub-storages (sub-directories) and any number of streams (files). Furthermore, each storage has its own access rights. The {
\cs58\f5\fs16\lang1024 IStorage}{\i  }interface describes the capabilities of a storage object such as enumerate elements (dir), move, copy, rename, create, destroy, and so forth. A storage object itself cannot store appli
cation-defined data except that it implicitly stores the names of the elements (storages and streams) contained within it.
\par Storage and stream objects, when implemented by COM as a standard on a system, are sharable between processes. This is a key feature that enables objects running in-process or out-of-process to have equal in
cremental access to their on-disk storage. Since COM is loaded into each process separately, it must use some operating-system supported shared memory mechanisms to communicate between processes about opened elements and their access modes.
\par {\*\bkmkstart _Toc298215770}{\*\bkmkstart _Toc306725132}{\*\bkmkstart _Toc324051551}{\*\bkmkstart _Toc324051736}{\*\bkmkstart _Toc324051978}{\pntext\pard\plain\b\i\fs22 2.6.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Application Design with Structured Storage{\*\bkmkend _Toc298215770}{\*\bkmkend _Toc306725132}{\*\bkmkend _Toc324051551}{\*\bkmkend _Toc324051736}{\*\bkmkend _Toc324051978}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM\rquote s structured storage built out of storage and stream objects makes it much easier to design applications that by their nature produce structured information. For example, consider a \ldblquote diary
\rdblquote  program that allows a user to make entries for any day of any month of any year. Entries are made in the form of some kind of object that itself manages some 
information. Users wanting to write some text into the diary would store a text object; if they wanted to save a scan of a newspaper clip they could use a bitmap objects, and so forth.
\par \pard\plain \s40\qc\keep\keepn\widctlpar\pvpg\phpg\posx1865\posy7488\absh-5623\absw8448\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {{\pict\wmetafile8\picw22727\pich17383\picwgoal12885\pichgoal9855 \picscalex50\picscaley50 
0100090000031d23000008003100000000000e00000026060f001200ffffffff000008000000eaf450f80c09b6070a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0250f8eaf4050000000c02660f221431000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000060f550f80809b8070e00000026060f001200ffffffff0000080000005004a0fc0809b8072d00000042010500000028
00000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010008000000fa0205000000000000000000040000002d01020005000000090200000002050000000102
ffffff0208000000fa0206000800000000000002040000002d010300070000001b04b8070809a0fc5004050000001402000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d010400040000002e011800050000
000a020000000005000000090200000002040000000201010016000000320a42fd28050a00000044617920486561646572680050004800280068005000500050005000300004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c00
0000d00ef87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320aeffd6c06030000002e2e2e0028002800280004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338
f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a9cfe28050a00000044617920486561646572680050004800280068005000500050005000300004000000020102001c000000
fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a49ff6c06030000002e2e2eff2800280028
0004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320af6ff3805
0b00000054657874204f626a656374005800500048002800280070005000200050004800280004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01050004000000f0010400040000002e01180005
0000000a02000000000500000009020000000204000000020101000d000000320aa3001c060400000054657874580050004800280004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d0104000400
0000f0010500040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000
00020101001b000000320afd01e4040d0000004269746d6170204f626a65637400600020002800780050005000280070005000200050004800280004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f04000000
2d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010019000000320aaa0224050c000000466f726d617420496e666f2e58005000300078005000280028002800500028005000280004000000020102001c000000fb0270ff00000000000090010000000000
000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a570330060400000042697473600020002800480004000000020102001c000000fb02
70ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010500040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c5
77000000000c000000d00ef87f040000002d01050004000000f0010400040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010500040000002e011800
050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a0b06bc
040e00000044726177696e67204f626a6563746800300050006800200050005000280070005000200050004800280004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010500
040000002e011800050000000a020000000005000000090200000002040000000201010013000000320ab806ac05080000004d65746166696c657800500028005000280020002000500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000028f650f8e0
fa68030e00000026060f001200ffffffff00000800000028f650f8e0fa6803040000002d01020005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f0010300070000001b046803e0fa50f828f6050000001402000000001c000000fb0270ff00000000
000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01030004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a48f90cf70b00000046696c6520486561646572005800200020
005000280068005000500050005000300004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010300040000002e011800050000000a0200000000050000000902000000020400
0000020101001c000000320af5f9d0f60e0000004f666673657420746f20796561727000280028004800500028002800280050002800480050005000300004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f04
0000002d01030004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320aa2fad0f60e0000004f666673657420746f20796561727000280028004800500028002800280050002800480050005000300004000000020102001c000000fb0270ff00000000
000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010300040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c
000000e00cf87f040000002d01030004000000f0010400040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010300040000002e011800050000000a02
0000000005000000090200000002040000000201010018000000320aa9fce8f60b00000059656172204865616465726560005000500030002800680050005000500051002f0004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c
000000e00cf87f040000002d01030004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320a56fd94f60f0000004f666673657420746f206d6f6e7468f77000280028004800500028002800280050002800780050005000280050000400000002010200
1c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320a03fe94f60f0000004f66667365
7420746f206d6f6e74680070002800280048005000280028002800500028007800500050002800500004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01030004000000f0010400040000002e01
1800050000000a02000000000500000009020000000204000000020101001e000000320ab0fe94f60f0000004f666665737420746f206d6f6e7468f770002800280050004800280028002800500028007800500050002800500004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c
000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010300040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d0103000400
0000f0010400040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010300040000002e011800050000000a02000000001c000000fb0270ff0000000000
0090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01030004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a6401e8f60b000000596561722048656164657200600050005000
30002800680050005000500051002f0004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01040004000000f0010300040000002e011800050000000a020000000005000000090200000002040000
00020101000c000000320a110244f8030000002e2e2e0028002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000028f690fbe0fa98fb040000002d01020007000000fc020100000000000000040000002d01030004000000f001050004000000
f00101001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010400030000001e0007000000160438fce0faf0fa28f608000000fa0206000800000000000002040000002d01040005000000140290
fb78f105000000130290fb88ff040000002d010200040000002d01030004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000028f6a0ffe0faa8ff040000002d010200040000002d010300030000001e000700000016044800e0fa00ff
28f608000000fa0206000800000000000002040000002d010400050000001402a0ff78f1050000001302a0ff88ff040000002d010200040000002d01030004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f0012
00ffffffff000008000000500470ff080978ff040000002d010200040000002d010300030000001e0007000000160418000809d0fe500408000000fa0206000800000000000002040000002d01040005000000140270ffa0ff05000000130270ffb00d040000002d010200040000002d01030004000000f001040004000000
2701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005004680108097001040000002d010200040000002d010300030000001e0007000000160410020809c800500408000000fa0206000800000000000002040000002d0104000500000014026801a0ff0500000013
026801b00d040000002d010200040000002d01030004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005004580508096005040000002d010200040000002d010300030000001e0007000000160400060809b804500408000000fa02
06000800000000000002040000002d0104000500000014025805a0ff0500000013025805b00d040000002d010200040000002d01030004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fd10fb600228060e00000026060f0012
00ffffffff000008000000a8fd10fb600228062d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002
050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001b042806600210fba8fd0500000014025805b00d1c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d010600040000002e
011800050000000a020000000005000000090200000002040000000201010019000000320a08fc37fe0c0000004d6f6e74682048656164657278005000500028005000280068005000500050005100300004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f7
0f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320ab5fc68fe0d0000004f666673657420746f20646179747000280028004800500028002800280050002800500050004800040000
00020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a62fd68fe0d000000
4f666673657420746f2064617900700028002800480050002800280028005000280050005000480004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000002e0118
00050000000a02000000000500000009020000000204000000020101001b000000320a0ffe68fe0d0000004f666673657420746f2064617974700028002800480050002800280028005000280050005000480004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e03
38f70f037884c577000000000c000000d00ef87f040000002d01060004000000f0010700040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f001060004
0000002e011800050000000a020000000005000000090200000002040000000201010019000000320a69ff37fe0c0000004d6f6e74682048656164657278005000500028005000280068005000500050005100300004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed
4e0338f70f037884c577000000000c000000d00ef87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a1600c4ff030000002e2e2eff28002800280004000000020102001c000000fb0270ff00000000000090010000000000
000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f0400
00002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a700137fe0c0000004d6f6e74682048656164657278005000500028005000280068005000500050005100300004000000020102001c000000fb0270ff0000000000009001000000
0000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a1d02c4ff030000002e2e2e0028002800280004000000020102001c000000fb02
70ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01060004000000f0010700040000002e011800050000000a02000000001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c5
77000000000c000000e00cf87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a770380fe0a00000044617920486561646572680050004800280068005000500050005000300004000000020102001c000000fb0270ff0000
0000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a240450fe0e0000004f666673657420746f205465787470
00280028004800500028002800280050002800580050004800280004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500
000009020000000204000000020101001f000000320ad104fcfd100000004f666673657420746f204269746d6170700028002800480050002800280028005000280060002000280078005000500004000000020102001c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f0378
84c577000000000c000000d00ef87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010021000000320a7e05d4fd110000004f666673657420746f2044726177696e670070002800280048005000280028002800500028006800300050006800
20005000500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fd900060029800040000002d010200040000002d01030004000000f001050004000000f0010400040000002d01010004000000f0010600030000001e0007000000160438016002f0
ffa8fd08000000fa0206000800000000000002040000002d0104000500000014029000f8f805000000130290000807040000002d010200040000002d01030004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fd800260028802
040000002d010200040000002d010300030000001e0007000000160428036002e001a8fd08000000fa0206000800000000000002040000002d0104000500000014028002f8f805000000130280020807040000002d010200040000002d01030004000000f0010400040000002701ffff0a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000a8fd70fe600278fe040000002d010200040000002d010300030000001e0007000000160418ff6002d0fda8fd08000000fa0206000800000000000002040000002d01040005000000140270fef8f805000000130270fe0807040000002d010200040000002d01
030004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e0f5b0f9e0f610fc08000000fa0206000800000000000002040000002d0104000c0000002503040090f6b0f9e0f5b0f9e0
f508fc69f608fc07000000fc020000000000020000040000002d010500040000002d0102000a00000024030300d8f608fc61f6e4fb61f62bfc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000060f560faa8f63800040000002d010400040000002d0103000c0000002503
0400a0f660fa60f560fa60f53000e9f53000040000002d010500040000002d0102000a0000002403030058f63000e1f50c00e1f553000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000090fa80fbf8fd38fd040000002d010200040000002d01030004000000f001040004
000000f0010500030000001e0007000000160438fdb4fd9efb90fa08000000fa0206000800000000000002040000002d010400050000001402e0fe30f7050000001302d0f95001040000002d010200040000002d01030004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00
000024030300f0fd7ffb78fd94fb96fdd2fb0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000090fac0fdc8fde8fe040000002d010200040000002d01030004000000f0010400030000001e0007000000160488ff84fd20fd90fa08000000fa020600080000000000000204
0000002d010400050000001402a0fc60f70500000013020000f000040000002d010200040000002d01030004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300c0fde0fe5cfd98fe44fddafe0a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff00000800000090fa80fec8fd2801040000002d010200040000002d01030004000000f0010400030000001e00070000001604ef0084fd80fe90fa08000000fa0206000800000000000002040000002d010400050000001402e0fb60f7050000001302c003f000040000002d010200040000002d01030004
000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300c0fd21017afdba004efdf0000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080f830fad8ff580405000000140280f880f8050000001402600380f80800
0000fa0206000100000000000002040000002d010500040000002d010300050000001302670380f8050000001402800380f8050000001302870380f8050000001402a00380f8050000001302a70380f8050000001402c00380f8050000001302c70380f8050000001402e00380f8050000001302e70380f805000000140200
0480f8050000001302070480f8050000001402200480f8050000001302270480f8050000001402400480f8050000001302470480f8050000001402500490f8050000001302500497f80500000014025004b0f80500000013025004b7f80500000014025004d0f80500000013025004d7f80500000014025004f0f805000000
13025004f7f8050000001402500410f9050000001302500417f9050000001402500430f9050000001302500437f9050000001402500450f9050000001302500457f9050000001402500470f9050000001302500477f9050000001402500490f9050000001302500497f90500000014025004b0f90500000013025004b7f905
00000014025004d0f90500000013025004d7f90500000014025004f0f90500000013025004f7f9050000001402500410fa050000001302500417fa050000001402500430fa050000001302500437fa050000001402500450fa050000001302500457fa050000001402500470fa050000001302500477fa0500000014025004
90fa050000001302500497fa0500000014025004b0fa0500000013025004b7fa0500000014025004d0fa0500000013025004d7fa0500000014025004f0fa0500000013025004f7fa050000001402500410fb050000001302500417fb050000001402500430fb050000001302500437fb050000001402500450fb0500000013
02500457fb050000001402500470fb050000001302500477fb050000001402500490fb050000001302500497fb0500000014025004b0fb0500000013025004b7fb0500000014025004d0fb0500000013025004d7fb0500000014024004e0fb0500000013023904e0fb0500000014022004e0fb0500000013021904e0fb0500
000014020004e0fb050000001302f903e0fb050000001402e003e0fb050000001302d903e0fb050000001402c003e0fb050000001302b903e0fb050000001402a003e0fb0500000013029903e0fb0500000014028003e0fb0500000013027903e0fb0500000014026003e0fb0500000013025903e0fb0500000014024003e0
fb0500000013023903e0fb0500000014022003e0fb0500000013021903e0fb0500000014020003e0fb050000001302f902e0fb050000001402e002e0fb050000001302d902e0fb050000001402c002e0fb050000001302b902e0fb050000001402a002e0fb0500000013029902e0fb0500000014028002e0fb050000001302
7902e0fb0500000014026002e0fb0500000013025902e0fb0500000014024002e0fb0500000013023902e0fb0500000014022002e0fb0500000013021902e0fb0500000014020002e0fb050000001302f901e0fb050000001402e001e0fb050000001302d901e0fb050000001402c001e0fb050000001302b901e0fb050000
001402a001e0fb0500000013029901e0fb0500000014028001e0fb0500000013027901e0fb0500000014026001e0fb0500000013025901e0fb0500000014024001e0fb0500000013023901e0fb0500000014022001e0fb0500000013021901e0fb0500000014020001e0fb050000001302f900e0fb050000001402e000e0fb
050000001302d900e0fb050000001402c000e0fb050000001302b900e0fb050000001402a000e0fb0500000013029900e0fb0500000014028000e0fb0500000013027900e0fb0500000014026000e0fb0500000013025900e0fb0500000014024000e0fb0500000013023900e0fb0500000014022000e0fb05000000130219
00e0fb0500000014020000e0fb050000001302f9ffe0fb050000001402e0ffe0fb050000001302d9ffe0fb050000001402c0ffe0fb050000001302b9ffe0fb050000001402a0ffe0fb05000000130299ffe0fb05000000140280ffe0fb05000000130279ffe0fb05000000140260ffe0fb05000000130259ffe0fb05000000
140240ffe0fb05000000130239ffe0fb05000000140220ffe0fb05000000130219ffe0fb05000000140200ffe0fb050000001302f9fee0fb050000001402e0fee0fb050000001302d9fee0fb050000001402c0fee0fb050000001302b9fee0fb050000001402a0fee0fb05000000130299fee0fb05000000140280fee0fb05
000000130279fee0fb05000000140260fee0fb05000000130259fee0fb05000000140240fee0fb05000000130239fee0fb05000000140220fee0fb05000000130219fee0fb05000000140200fee0fb050000001302f9fde0fb050000001402e0fde0fb050000001302d9fde0fb050000001402c0fde0fb050000001302b9fd
e0fb050000001402a0fde0fb05000000130299fde0fb05000000140280fde0fb05000000130279fde0fb05000000140260fde0fb05000000130259fde0fb05000000140240fde0fb05000000130239fde0fb05000000140220fde0fb05000000130219fde0fb05000000140200fde0fb050000001302f9fce0fb0500000014
02e0fce0fb050000001302d9fce0fb050000001402c0fce0fb050000001302b9fce0fb050000001402a0fce0fb05000000130299fce0fb05000000140280fce0fb05000000130279fce0fb05000000140260fce0fb05000000130259fce0fb05000000140240fce0fb05000000130239fce0fb05000000140220fce0fb0500
0000130219fce0fb05000000140200fce0fb050000001302f9fbe0fb050000001402e0fbe0fb050000001302d9fbe0fb050000001402c0fbe0fb050000001302b9fbe0fb050000001402a0fbe0fb05000000130299fbe0fb05000000140280fbe0fb05000000130279fbe0fb05000000140260fbe0fb05000000130259fbe0
fb05000000140240fbe0fb05000000130239fbe0fb05000000140220fbe0fb05000000130219fbe0fb05000000140200fbe0fb050000001302f9fae0fb050000001402e0fae0fb050000001302d9fae0fb050000001402c0fae0fb050000001302b9fae0fb050000001402a0fae0fb05000000130299fae0fb050000001402
80fae0fb05000000130279fae0fb05000000140260fae0fb05000000130259fae0fb05000000140240fae0fb05000000130239fae0fb05000000140230faf0fb05000000130230faf7fb05000000140230fa10fc05000000130230fa17fc05000000140230fa30fc05000000130230fa37fc05000000140230fa50fc050000
00130230fa57fc05000000140230fa70fc05000000130230fa77fc05000000140230fa90fc05000000130230fa97fc05000000140230fab0fc05000000130230fab7fc05000000140230fad0fc05000000130230fad7fc05000000140230faf0fc05000000130230faf7fc05000000140230fa10fd05000000130230fa17fd
05000000140230fa30fd05000000130230fa37fd05000000140230fa50fd05000000130230fa57fd05000000140230fa70fd05000000130230fa77fd05000000140230fa90fd05000000130230fa97fd05000000140230fab0fd05000000130230fab7fd05000000140230fad0fd05000000130230fad7fd05000000140230
faf0fd05000000130230faf7fd05000000140230fa10fe05000000130230fa17fe05000000140230fa30fe05000000130230fa37fe05000000140230fa50fe05000000130230fa57fe05000000140230fa70fe05000000130230fa77fe05000000140230fa90fe05000000130230fa97fe05000000140230fab0fe05000000
130230fab7fe05000000140230fad0fe05000000130230fad7fe05000000140230faf0fe05000000130230faf7fe05000000140230fa10ff05000000130230fa17ff05000000140230fa30ff05000000130230fa37ff05000000140230fa50ff05000000130230fa57ff05000000140230fa70ff05000000130230fa77ff05
000000140230fa90ff05000000130230fa97ff05000000140230fab0ff05000000130230fab7ff05000000140230fad0ff05000000130230fad0ff05000000140230fad0ff05000000130237fad0ff05000000140250fad0ff05000000130257fad0ff05000000140270fad0ff05000000130277fad0ff05000000140290fa
d0ff05000000130297fad0ff050000001402b0fad0ff050000001302b0fad0ff040000002d010400040000002d0102000a00000024030300d0ff21fbf3ffa8faadffa8fa0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000000080fb580728070500000014020000000005
00000014020c06000008000000fa0206000100000000000002040000002d01060004000000f0010500040000002d010300050000001302130600000500000014022c060000050000001302330600000500000014024c060000050000001302530600000500000014026c060000050000001302730600000500000014028c06
000005000000130293060000050000001402ac060000050000001302b3060000050000001402cc060000050000001302d3060000050000001402ec060000050000001302f30600000500000014020c0700000500000013021307000005000000140220070c000500000013022007130005000000140220072c000500000013
022007330005000000140220074c000500000013022007530005000000140220076c000500000013022007730005000000140220078c00050000001302200793000500000014022007ac000500000013022007b3000500000014022007cc000500000013022007d3000500000014022007ec000500000013022007f3000500
0000140220070c010500000013022007130105000000140220072c010500000013022007330105000000140220074c010500000013022007530105000000140220076c010500000013022007730105000000140220078c01050000001302200793010500000014022007ac010500000013022007b3010500000014022007cc
010500000013022007d3010500000014022007ec010500000013022007f30105000000140220070c020500000013022007130205000000140220072c020500000013022007330205000000140220074c020500000013022007530205000000140220076c020500000013022007730205000000140220078c02050000001302
200793020500000014022007ac020500000013022007b3020500000014022007cc020500000013022007d3020500000014022007ec020500000013022007f30205000000140220070c030500000013022007130305000000140220072c030500000013022007330305000000140220074c0305000000130220075303050000
001402140760030500000013020d076003050000001402f4066003050000001302ed066003050000001402d4066003050000001302cd066003050000001402b4066003050000001302ad066003050000001402940660030500000013028d066003050000001402740660030500000013026d06600305000000140254066003
0500000013024d066003050000001402340660030500000013022d066003050000001402140660030500000013020d066003050000001402f4056003050000001302ed056003050000001402d4056003050000001302cd056003050000001402b4056003050000001302ad056003050000001402940560030500000013028d
056003050000001402740560030500000013026d056003050000001402540560030500000013024d056003050000001402340560030500000013022d056003050000001402140560030500000013020d056003050000001402f4046003050000001302ed046003050000001402d4046003050000001302cd04600305000000
1402b4046003050000001302ad046003050000001402940460030500000013028d046003050000001402740460030500000013026d046003050000001402540460030500000013024d046003050000001402340460030500000013022d046003050000001402140460030500000013020d046003050000001402f403600305
0000001302ed036003050000001402d4036003050000001302cd036003050000001402b4036003050000001302ad036003050000001402940360030500000013028d036003050000001402740360030500000013026d036003050000001402540360030500000013024d036003050000001402340360030500000013022d03
6003050000001402140360030500000013020d036003050000001402f4026003050000001302ed026003050000001402d4026003050000001302cd026003050000001402b4026003050000001302ad026003050000001402940260030500000013028d026003050000001402740260030500000013026d0260030500000014
02540260030500000013024d026003050000001402340260030500000013022d026003050000001402140260030500000013020d026003050000001402f4016003050000001302ed016003050000001402d4016003050000001302cd016003050000001402b4016003050000001302ad016003050000001402940160030500
000013028d016003050000001402740160030500000013026d016003050000001402540160030500000013024d016003050000001402340160030500000013022d016003050000001402140160030500000013020d016003050000001402f4006003050000001302ed006003050000001402d4006003050000001302cd0060
03050000001402b4006003050000001302ad006003050000001402940060030500000013028d006003050000001402740060030500000013026d006003050000001402540060030500000013024d006003050000001402340060030500000013022d006003050000001402140060030500000013020d006003050000001402
f4ff6003050000001302edff6003050000001402d4ff6003050000001302cdff6003050000001402b4ff6003050000001302adff600305000000140294ff60030500000013028dff600305000000140274ff60030500000013026dff600305000000140254ff60030500000013024dff600305000000140234ff6003050000
0013022dff600305000000140214ff60030500000013020dff6003050000001402f4fe6003050000001302edfe6003050000001402d4fe6003050000001302cdfe6003050000001402b4fe6003050000001302adfe600305000000140294fe60030500000013028dfe600305000000140274fe60030500000013026dfe6003
05000000140254fe60030500000013024dfe600305000000140234fe60030500000013022dfe600305000000140214fe60030500000013020dfe6003050000001402f4fd6003050000001302edfd6003050000001402d4fd6003050000001302cdfd6003050000001402b4fd6003050000001302adfd600305000000140294
fd60030500000013028dfd600305000000140274fd60030500000013026dfd600305000000140254fd60030500000013024dfd600305000000140234fd60030500000013022dfd600305000000140214fd60030500000013020dfd6003050000001402f4fc6003050000001302edfc6003050000001402d4fc600305000000
1302cdfc6003050000001402b4fc6003050000001302adfc600305000000140294fc60030500000013028dfc600305000000140274fc60030500000013026dfc600305000000140254fc60030500000013024dfc600305000000140234fc60030500000013022dfc600305000000140214fc60030500000013020dfc600305
0000001402f4fb6003050000001302edfb6003050000001402d4fb6003050000001302cdfb6003050000001402b4fb6003050000001302adfb600305000000140294fb60030500000013028dfb600305000000140280fb6c0305000000130280fb730305000000140280fb8c0305000000130280fb930305000000140280fb
ac0305000000130280fbb30305000000140280fbcc0305000000130280fbd30305000000140280fbec0305000000130280fbf30305000000140280fb0c0405000000130280fb130405000000140280fb2c0405000000130280fb330405000000140280fb4c0405000000130280fb530405000000140280fb6c040500000013
0280fb730405000000140280fb8c0405000000130280fb930405000000140280fbac0405000000130280fbb30405000000140280fbcc0405000000130280fbd30405000000140280fbec0405000000130280fbf30405000000140280fb0c0505000000130280fb130505000000140280fb2c0505000000130280fb33050500
0000140280fb4c0505000000130280fb530505000000140280fb6c0505000000130280fb730505000000140280fb8c0505000000130280fb930505000000140280fbac0505000000130280fbb30505000000140280fbcc0505000000130280fbd30505000000140280fbec0505000000130280fbf30505000000140280fb0c
0605000000130280fb130605000000140280fb2c0605000000130280fb330605000000140280fb4c0605000000130280fb530605000000140280fb6c0605000000130280fb730605000000140280fb8c0605000000130280fb930605000000140280fbac0605000000130280fbb30605000000140280fbcc06050000001302
80fbd30605000000140280fbec0605000000130280fbf30605000000140280fb0c0705000000130280fb130705000000140280fb2c0705000000130280fb330705000000140280fb4c0705000000130280fb500705000000140280fb500705000000130283fb50070500000014029cfb5007050000001302a3fb5007050000
001402bcfb5007050000001302c3fb5007050000001402dcfb5007050000001302e3fb5007050000001402fcfb500705000000130203fc50070500000014021cfc500705000000130223fc5007040000002d010400040000002d0102000a00000024030300500795fc73071cfc2d071cfc0a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff000008000000a0fc70fcf8fd380308000000fa0206000800000000000002040000002d01050004000000f0010600040000002d0103000c00000025030400f0fd70fca0fc70fca0fc300380fd3003040000002d010400040000002d0102000a00000024030300f0fd300379
fd0c0379fd53030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000500408fe080910fe040000002d010200040000002d01030004000000f001050004000000f0010400030000001e00070000001604b0fe080968fd500408000000fa020600080000000000000204000000
2d01040005000000140208fea0ff05000000130208feb00d040000002d010200040000002d01030004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003002e8ff78040804040000002d010200040000002d010300030000001e0007
0000001604080450042400300208000000fa0206000800000000000002040000002d0104000500000014021808f0ff050000001302d0fbb006040000002d010200040000002d01030004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a000000240303007004e7ff16044100
540463000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004002f8019004b004040000002d010200040000002d01030004000000f0010400030000001e00070000001604b00456043402400208000000fa0206000800000000000002040000002d01040005000000140258
07f8ff05000000130248ffd006040000002d010200040000002d01030004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a000000240303008804f7011f043c0255046a020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
400250057804b805040000002d010200040000002d01030004000000f0010400030000001e0007000000160458063404b004400208000000fa0206000800000000000002040000002d010400050000001402f00410000500000013021006a006040000002d010200040000002d01030004000000f0010400040000002701ff
ff07000000fc020000000000020000040000002d0104000a000000240303007004b00500047a05f403be050a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80128fd780430fd040000002d010200040000002d01030004000000f0010400030000001e00070000001604
d0fd340488fcc80108000000fa0206000800000000000002040000002d01040005000000140228fd20ff05000000130228fd1807040000002d010200040000002d01030004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300700428fdf80304fdf8034bfd0a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d001d8fd800460fe040000002d010200040000002d01030004000000f0010400030000001e0007000000160400ff3c0438fdd00108000000fa0206000800000000000002040000002d01040005000000140258fd28ff0500
00001302d8fe2007040000002d010200040000002d01030004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300780458fe090420fefd0364fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004ef8550410
fc0a051c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010028000000320ac80488f81600000028636f6e74696e756174
696f6e206f662066696c652920003000350036001a0016003500360035001b001500350036001a0036001a001b001b00150015003600200004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e5050040008000000000000
00000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01030004000000f0010400040000002d01010004000000f001050003000000000090f8d00458f900}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\pvpg\phpg\posx1865\posy7488\absh-5623\absw8448\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Figure 2-11: A flat-file structure for a diary application. This\line sort of structure is difficult to manage.

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Without a powerful means to structure information of this kind, the diary application might be forced to manage some hideous file structure with an overabundance
 of file position cross-reference pointers as shown in Figure 2-11.
\par There are many problems in trying to put structured information into a flat file. First, there is the sheer te
dium of managing all the cross-reference pointers in all the different structures of the file. Whenever a piece of information grows or moves in the file, every cross-reference offset referring to that information must be updated as well. Therefore even a
 small change in the size of one of the text objects or an addition of a day or
 month might precipitate changes throughout the rest of the file to update seek offsets. While not only tedious to manage, the application will have to spend enormous amounts of time moving information around in the file to make space for data that expand
s. That, or the application can move the newly enlarged data to the end of the file and patch a few seek offsets, but that introduces the whole problem of garbage collection, that is, managing the free space created in the middle of the file to minimize w
aste as well as overall file size.
\par The problems are compounded even further with objects that are capable of reading and writing their own information to storage. In the example here, the diary application would prefer to give each objects in it\emdash text, bitmap, drawing, table, etc.
\emdash its own piece of the file in which the object can write whatever the it wants, however much it wants. The only practical way to do this with a single flat file is for the diary application to ask each object for a memory copy of what
 the object would like to store, and then the diary would write that information into a place in its own file. This is really the only way in which the diary could man
age the location of all the information. Now while this works reasonably well for small data, consider an object that wants to store a 10MB bitmap scan of a true-color photograph\emdash 
exchanging that much data through memory is horribly inefficient. Furthermore, if the end user wants to later make changes to that bitmap, the diary would have to load the bitmap {\i in entirety}
 from its file and pass it back to the object. This is again extraordinarily inefficient.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
This mechanism, in fact, was employed by compound documents in Microsoft\rquote s OLE version 1.0. The problems describe here were some of the major limitations of OLE 1.0 which provided much of the impetus for COM\rquote s Persistent Storage technology.}
}
\par COM\rquote s Persistent Storage technology solves these problems through the extra level of indirection of a file system within a file. With COM, the diary appli
cation can create a structured hierarchy where the root file itself has sub-storages for each year in the diary. Each year sub-storage has a sub-storage for each month, and each month has a sub-storage for each day. Each day then would have yet another su
b-storage or perhaps just a stream for each piece of information that the user stores in that day.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
The application would only create year, month, and day substorages for those days that had information in them, that is, the diary application would create sparse storage for efficiency.}} This configuration is illustrated in Figure 2-12.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw23918\pich18388\picwgoal13560\pichgoal10425 \picscalex50\picscaley50 
010009000003e31c000008003100000000000e00000026060f001200ffffffff00000800000056f502f8860a4c080a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0202f856f5050000000c024a10301531000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000058f500f8700a38080e00000026060f001200ffffffff00000800000088f5400750f9380807000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200070000001804510869f95807a0f5050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff00
0000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100070000001804380850f9400788f5050000001402000000001c000000fb0260ff00000000000090010000000000
000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ae80766f60600000053747265616d6b002c00350059005900860004000000020102000a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff00000800000058f5200680f9e80607000000fc020000000000020000040000002d01050004000000f0010300040000002d010200090000001c0632003200010799f9380670f5050000001402000000002d0000004201050000002800000008000000080000
000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01
050004000000f0010100090000001c0630003000e80680f9200658f5050000001402000000001c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01010004000000f0010400040000002e011800050000000a02000000
0005000000090200000002040000000201010012000000320ab00650f60700000053746f72616765006b002c005900350059005900590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e8f600f8600868fb0e00000026060f001200ffffffff0000
0800000018fd00f8c002f8f807000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c063e003e0011f9d90218f830fd050000001402000000002d000000420105000000280000000800000008000000010001000000000020000000000000000000000000000000000000
0000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010500090000001c063c003c00f8f8c00200f818fd
050000001402000000001c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000300af87f040000002d01050004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010018000000320aa8f872
fe0b000000526f6f74202846696c6529007400590059002c002c0036006100240024005900350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e8f6a0fa40fb68fb07000000fc020000000000020000040000002d01010004000000f00103000400
00002d010200090000001c063200320081fb59fbb8fa00f7050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000
002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400090000001c063000300068fb40fba0fae8f6050000001402000000001c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed
4e0338f70f037884c577000000000c000000d00ef87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a30fb24f807000000596561722e2e2e006b005900590035002c002d002c0004000000020102000a00000026060f000a
00ffffffff0100000000000e00000026060f001200ffffffff000008000000980420f9600818fa07000000fc020000000000020000040000002d01050004000000f0010300040000002d01020007000000180431fa790838f9b004050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500040000
00f001010007000000180418fa600820f99804050000001402000000001c000000fb0290ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01010004000000f0010400040000002e011800050000000a02000000000500000009020000
0002040000000201010018000000320abaf957050b00000046696c6520486561646572004400190019003e00200050003f003e003e003f00250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e8fff0f8f0ff08fb040000002d01020007000000fc
020100000000000000040000002d01040004000000f001050004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010100030000001e00070000001604c4fa9000f0f848ff0800
0000fa0206000800000000000002040000002d010100050000001402e0f6e8ff05000000130210fde8ff040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a00000024030300e8ff01fb0b0089fac5ff89fa0a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff00000800000038fbf0f8f0ff08fb040000002d010200040000002d01040004000000f0010100030000001e00070000001604a8fbf0ff50f874fb08000000fa0206000800000000000002040000002d010100050000001402e0f6980405000000130210fd88f60400
00002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a0000002403030039fb00fbb3fbf1fa97fbb1fa0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b80290f8d00458f9040000002d0102
00040000002d01040004000000f0010100030000001e00070000001604f8f98c04f0f7b80208000000fa0206000800000000000002040000002d010100050000001402d0f7a80005000000130210fad806040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000
040000002d0101000a00000024030300c80450f9650406f94d0448f90a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000098fbc0fbf0ffe8fc040000002d010200040000002d01040004000000f0010100030000001e0007
000000160488fdf0ff20fbd4fb08000000fa0206000800000000000002040000002d010100050000001402a0fa380405000000130200fe48f7040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a0000002403030099fbe0fc16fce4fc
04fca0fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000078f700fb700a38fe0e00000026060f001200ffffffff000008000000d8fd00fb3002c8fb07000000fc020000000000020000040000002d01050004000000f0010100090000001c0632003200e1fb490218fbf0
fd05000000140200fe48f72d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001050005000000090200000002
050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c0630003000c8fb300200fbd8fd05000000140200fe48f71c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000300af87f040000002d01060004
0000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a90fb57ff04000000596561726b0059005900350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80490fb900888fc07000000fc0200000000
00020000040000002d01070004000000f0010100040000002d010200070000001804a1fca908a8fbe00405000000140200fe48f72d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff
00000077000000ff000000dd000000040000002d01010004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f001050007000000180488fc900890fbc80405000000140200fe48f71c000000fb0290ff000000000000900100000000
00000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a2afc6b050b0000005965617220486561646572004b003e003e0026001f0051003e
003e003e003f00250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000480670fd700a38fe07000000fc020000000000020000040000002d01060004000000f0010100040000002d010200090000001c063200320051fe890a88fd6006050000001402
00fe48f72d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001060005000000090200000002050000000102ff
ffff0208000000fa0206000800000000000002040000002d01060004000000f0010700090000001c063000300038fe700a70fd480605000000140200fe48f71c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d010700
04000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a00fe3707080000004d6f6e74682e2e2e8500590059002d0059002c002d002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
00000078f780fca0fb48fd07000000fc020000000000020000040000002d01050004000000f0010100040000002d010200090000001c063200320061fdb9fb98fc90f705000000140200fe48f72d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000
00000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f0010600090000001c063000300048fda0fb80fc78f705
000000140200fe48f71c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000300af87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a10fd67f8
080000004d6f6e74682e2e2e8500590059002d0059002c002d002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000280260fbd004f8fb040000002d010200040000002d01040004000000f001050004000000f0010100040000002d010300040000
00f0010600030000001e0007000000160498fc8c04c0fa280208000000fa0206000800000000000002040000002d010100050000001402d0fa88ff05000000130280fc6807040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a000000
24030300c804f0fb5b04b5fb4d04f9fb0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e8ffc0fb5006d8fd040000002d010200040000002d01040004000000f0010100030000001e0007000000160478fe0c0620fbe8ff08000000fa0206000800000000000002040000
002d010100050000001402b0f988f9050000001302e0ffa80c040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a000000240303004806d0fde0058afdca05ccfd0a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff000008000000e8ffc0fbf0ff48fd040000002d010200040000002d01040004000000f0010100030000001e0007000000160404fd9000c0fb48ff08000000fa0206000800000000000002040000002d01010005000000140240fae8ff050000001302c0fee8ff040000002d010200040000002d010400040000
00f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a00000024030300e8ff41fd0b00cafcc5ffcafc0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f8f840fd9008d8000e000000
26060f001200ffffffff000008000000d8fd40fd000208fe07000000fc020000000000020000040000002d01050004000000f0010100090000001c063200320021fe190258fdf0fd050000001402c0fee8ff2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000
000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c063000300008fe000240fdd8fd05000000
1402c0fee8ff1c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d010600040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320ad0fd09ff050000004d6f6e74680085
00590059002d00590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f8f8c0fec0fcb8ff07000000fc020000000000020000040000002d01070004000000f0010100040000002d010200070000001804d1ffd9fcd8fe10f9050000001402c0fee8ff
2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001070005000000090200000002050000000102ffffff0208
000000fa0206000800000000000002040000002d01070004000000f0010500070000001804b8ffc0fcc0fef8f8050000001402c0fee8ff1c000000fb0290ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01050004000000f0010600
040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a5aff75f90c0000004d6f6e7468204865616465725d003f003e001f003e001f0051003f003e003e003e00260004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffff
ff000008000000f8fbd0fde0fdf8fe040000002d010200040000002d01040004000000f001070004000000f0010100040000002d01030004000000f0010500030000001e00070000001604cdfee0fdd0fd34fc08000000fa0206000800000000000002040000002d010100050000001402b0fcb8ff050000001302100018fa
040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a00000024030300f9fbf1fe70fcd2fe4cfc96fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000680410009008d80007000000fc
020000000000020000040000002d01050004000000f0010100090000001c0632003200f100a90828008004050000001402100018fa2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000
ff00000077000000ff000000dd000000040000002d01010004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c0630003000d800900810006804050000001402100018fa1c000000fb0260ff000000000000900100000000000000
00417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320aa000a705060000004461792e2e2e7400590050002c002c002d0004000000020102000a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff0000080000006804f0fe9008b8ff07000000fc020000000000020000040000002d01070004000000f0010100040000002d010200090000001c0632003200d1ffa90808ff8004050000001402100018fa2d00000042010500000028000000080000000800000001
00010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010700
04000000f0010500090000001c0630003000b8ff9008f0fe6804050000001402100018fa1c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000300af87f040000002d01050004000000f0010600040000002e011800050000000a020000000005
000000090200000002040000000201010010000000320a80ffa705060000004461792e2e2e7400590050002c002c002d0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c8fe00fec0ff1800040000002d010200040000002d01040004000000f001
070004000000f0010100040000002d01030004000000f0010500030000001e00070000001604d4ff600000fe28fe08000000fa0206000800000000000002040000002d010100050000001402f0fba8000500000013022002d8fd040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc
020000000000020000040000002d0101000a00000024030300c8fe110019ffb5ffd9fe97ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8ff00fe700458ff040000002d010200040000002d01040004000000f0010100030000001e00070000001604f8ff2c0460fd
b8ff08000000fa0206000800000000000002040000002d010100050000001402b0fc08fb050000001302a0001809040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a00000024030300680450fffc030dffea0351ff0a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8ff00fe70047800040000002d010200040000002d01040004000000f0010100030000001e0007000000160451002c0400feb8ff08000000fa0206000800000000000002040000002d01010005000000140290fb08fb050000001302e002
1809040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a000000240303006804710011041c00f1035a000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff00000800000098f9f802c8fee0050e00000026060f001200ffffffff000008000000a0faf802c8fec00307000000fc020000000000020000040000002d01050004000000f0010100090000001c0632003200d903e1fe1003b8fa050000001402e00218092d0000004201050000002800000008000000080000000100
010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050009
0000001c0630003000c003c8fef802a0fa050000001402e00218091c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d010600040000002e011800050000000a0200000000050000000902000000020400000002010100
18000000320a880317fb0b00000054657874204f626a656374006200590050002c002d007c0059002400590050002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000098f9e80460fde00507000000fc020000000000020000040000002d01070004
000000f0010100040000002d010200070000001804f90579fd0005b0f9050000001402e00218092d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd00
0000040000002d01010004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010500070000001804e00560fde80498f9050000001402e00218091c000000fb0280ff00000000000090010000000000000000417269616c000f0300
ed4e0338f70f037884c577000000000c000000d01af87f040000002d01050004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a8705fbfa04000000546578744e0047004000240004000000020102000a00000026060f000a00ffffffff01000000
00000e00000026060f001200ffffffff00000800000098fbc00380fce804040000002d010200040000002d01040004000000f001070004000000f0010100040000002d01030004000000f0010500030000001e00070000001604a40480fcc003c6fb08000000fa0206000800000000000002040000002d0101000500000014
02a00258fd0500000013020006b8fa040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a0000002403030099fbe104fefb9704c6fb6d040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff01000000
00000e00000026060f001200ffffffff00000800000008f810009803b0030e00000026060f001200ffffffff00000800000088fc1000b000d80007000000fc020000000000020000040000002d01050004000000f0010100090000001c0632003200f100c9002800a0fc0500000014020006b8fa2d00000042010500000028
00000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001050005000000090200000002050000000102ffffff0208000000fa02060008000000
00000002040000002d010500090000001c0630003000d800b000100088fc0500000014020006b8fa1c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d010600040000002e011800050000000a02000000000500000009
020000000204000000020101000c000000320aa00009fe030000004461790074005900500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000008f83001d0fb280207000000fc020000000000020000040000002d01070004000000f001010004000000
2d0102000700000018044102e9fb480120f80500000014020006b8fa2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004
000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f00105000700000018042802d0fb300108f80500000014020006b8fa1c000000fb0290ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577
000000000c000000300af87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010016000000320aca01bdf80a0000004461792048656164657251003e0038001f0051003e003f003e003e00260004000000020102000a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff00000800000038fba00090fc6801040000002d010200040000002d01040004000000f001070004000000f0010100040000002d01030004000000f0010500030000001e000700000016043e0190fca00074fb08000000fa0206000800000000000002040000002d01
0100050000001402e0ffd8fd0500000013022002e8f9040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a0000002403030039fb6101b2fb43018efb07010a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff000008000000f0fcd00070fef802040000002d010200040000002d01040004000000f0010100030000001e00070000001604b40270fed00019fd08000000fa0206000800000000000002040000002d010100050000001402b0fee0ff050000001302100578fb040000002d010200040000002d01040004000000f001
0100040000002701ffff07000000fc020000000000020000040000002d0101000a00000024030300f1fcf10251fda30217fd7b020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000058ffe8004801b003040000002d010200040000002d01040004000000f0010100030000
001e000700000016046c031701e80058ff08000000fa0206000800000000000002040000002d01010005000000140228fe70fd05000000130268062803040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a000000240303004001a903
1a013503e0005d030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b800800098031002040000002d010200040000002d01040004000000f0010100030000001e00070000001604e80154038000b80008000000fa0206000800000000000002040000002d010100050000
001402f8fee0fd05000000130290036806040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a00000024030300900309023803b1011603ef010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff0000080000006803f001e80980040e00000026060f001200ffffffff000008000000a805e802e0069003040000002d010200040000002d01040004000000f0010100030000001e0007000000160469039c06e802a80508000000fa0206000800000000000002040000002d0101
000500000014024802780405000000130228040808040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a00000024030300d80689037e0632035e0670030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff0000080000006803f0014808e00207000000fc020000000000020000040000002d01050004000000f0010100090000001c063c003c00f902610808028003050000001402280408082d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000000000
00ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c063a003a00e0024808f0016803050000001402280408081c00
0000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a9402b1030e00000044726177696e67204f626a65637474
003500590073002400590059002c007d0059002300590050002d0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020068803e809800407000000fc020000000000020000040000002d01070004000000f0010100040000002d010200070000001804
9904010aa0033806050000001402280408082d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f0010700050000
00090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f00105000700000018048004e80988032006050000001402280408081c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01a
f87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a27042007080000004d65746166696c656b0047002300480023001d001c00470004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000038ff98039008c8070e00000026060f001200ffffffff00000800000038ff98036003880407000000fc020000000000020000040000002d01060004000000f0010100040000002d010200090000001c063c003c00a1047903b00350ff0500
00001402280408082d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001060005000000090200000002050000
000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010700090000001c063a003a0088046003980338ff050000001402280408081c000000fb0260ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f04000000
2d01070004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a3c0452ff0d0000004269746d6170204f626a656374006b0023002d008500590059002c007d0059002300590050002d0004000000020102000a00000026060f000a00ffffffff010000
0000000e00000026060f001200ffffffff0000080000009801d0066005c80707000000fc020000000000020000040000002d01050004000000f0010100040000002d010200070000001804e1077905e806b001050000001402280408082d000000420105000000280000000800000008000000010001000000000020000000
0000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f0010600070000
001804c8076005d0069801050000001402280408081c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000007f87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201
01000d000000320a6f070d03040000004269747355001d002300400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80450059008480607000000fc020000000000020000040000002d01070004000000f0010100040000002d0102000700000018
046106a9086805e004050000001402280408082d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010004000000f00107000500
0000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010500070000001804480690085005c804050000001402280408081c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d0
1af87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010018000000320aef0561050b000000466f726d617420496e666f004e0047002b006b00470023002400240047002300470004000000020102000a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff000008000000600188049803d806040000002d010200040000002d01040004000000f001070004000000f0010100040000002d01030004000000f0010500030000001e00070000001604940657038804600108000000fa0206000800000000000002040000002d010100050000
001402400230ff0500000013021809c005040000002d010200040000002d01040004000000f0010100040000002701ffff07000000fc020000000000020000040000002d0101000a000000240303009003d10658036406260394060a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000
080000007802880430058805040000002d010200040000002d01040004000000f0010100030000001e000700000016042806ec04e803780208000000fa0206000800000000000002040000002d0101000500000014029003c8ff0500000013027806d807040000002d010200040000002d01040004000000f0010100040000
002701ffff07000000fc020000000000020000040000002d0101000a0000002403030028058005c3043605ab0478050a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e5050040008000000
00000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01040004000000f001010003000000000074fe60030500000013026dfe600305000000140254fe6003050000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-12: A structured storage scheme for a diary application. Every object that has\line some content is given its own storage or stream element for its own exclusive use.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This structure solves the problem of expanding information in one of the objects: the object itself expands the streams in its control and the COM implementation of storage figures out where to store all the informa
tion in the stream. The diary application doesn\rquote t have to lift a finger. Furthermore, the COM implementation automatically manages unused space in the entire file, again, relieving the diary application of a great burden.
\par In this sort of storage scheme, the objects that manage the content in the diary always have direct {\i incr}{\i e}{\i mental }access to their piece of storage. That is, when the object needs to store its data, it writes it {\i directly}
 into the diary file without having to involve the diary application itself. The object can, if it wants to, write {\i incremental changes}
 to that storage, thus leading to much better performance than the flat file scheme could possibly provide. If the end user wanted to make changes to that information later on, the object can then incrementally read as little information as necessary inst
ead of requiring the diary to read all the information into memory first. Incremental access, a feature that has traditionally been very hard to implement in applications, is now the {\i default mode of operation}. All of this leads to much bet
ter performance.
\par {\*\bkmkstart _Toc298215771}{\*\bkmkstart _Toc306725133}{\*\bkmkstart _Toc324051552}{\*\bkmkstart _Toc324051737}{\*\bkmkstart _Toc324051979}{\pntext\pard\plain\b\i\fs22 2.6.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Naming Elements{\*\bkmkend _Toc298215771}{\*\bkmkend _Toc306725133}{\*\bkmkend _Toc324051552}{\*\bkmkend _Toc324051737}{\*\bkmkend _Toc324051979}
\par \pard\plain \qj\sa60\keep\widctlpar \f4\fs20 Every storage and stream object in a structured file has a specific character name to identify it. These names are used to tell {\i IStorage}
 functions what element in that storage to open, destroy, move, copy, rename, etc. Depending on which component, client or object, actually defines and stores these names, different conventions and restrictions apply.
\par \pard \qj\sa60\widctlpar Names of root storage objects are in fact names of files in the underlying file system. Thus, they obey the conventions and restrictions that it imposes. Strings passed to storage{\f8 -}
related functions which name files are passed on un-interpreted and unchanged to the file system.
\par Names of elements contained within storage objects are managed by the implementation of the particular storage object in question. All implementations of storage objects must at the least support element names that are 32 characters in length; some implem
entations may if they wish choose to support longer names. Names are stored case-preserving, but are compared case-insensitive.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
Case sensitivity is a locale-sensitive operation: some characters compare case-insenstive-equal in some locales and -not-equal in others. In an IStorage implementation, the case-insenstive comparision is done with respect to the current locale in which 
the system is presently running. This has implications on the use of IStorage names for those who wish to create globally portable documents.}} As a result, applications which define element names must choose names which will work in either situation.

\par The names of elements inside an storage object must conform to certain conventions:
\par {\pntext\pard\plain\fs20 1.\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}The two specific names \ldblquote .\rdblquote  and \ldblquote ..\rdblquote  are reserved for future use.
\par {\pntext\pard\plain\fs20 2.\tab}Element names cannot contain any of the four characters \ldblquote \\\rdblquote , \ldblquote /\rdblquote , \ldblquote :\rdblquote , or \ldblquote !\rdblquote .
\par \pard \qj\sa60\widctlpar In addition, the name space in a storage element is partitioned in to different areas of ownership. Different pieces of code have the right to create elements in each area of the name space.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 The set of element names beginning with characters other than \lquote \\0x01\rquote  through 
\lquote \\0x1F\rquote  (that is, decimal 1 through decimal 31) are for use by the object whose data is stored in the {\i IStorage}. Conversely, the object must {\i not }use element names beginning with these characters.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Element names beginning with a {\cs58\f5\fs16\lang1024 \lquote \\0x01\rquote } and{\cs58\f5\fs16\lang1024  \lquote \\0x02\rquote }
 are for the exclusive use of COM and other system code built on it such as OLE Documents.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Element names beginning with a {\cs58\f5\fs16\lang1024 \lquote \\0x03\rquote } are for the exclusive use of the client which is managing the object. The client can use this space as a place t
o persistently store any information it wishes to associate with the object along with the rest of the storage for that object.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Element names beginning with a \lquote \\0x04\rquote  are for the exclusive use of the COM structured storage implementation itself. They will be useful, for example, should that implementation support other inter
faces in addition to {\cs58\f5\fs16\lang1024 IStorage}, and these interface need persistent state.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Element names beginning with {\cs58\f5\fs16\lang1024 \lquote \\0x05\rquote } and {\cs58\f5\fs16\lang1024 \lquote \\0x06\rquote } are for the exclusive use of COM and other system code built on it such as OLE Documents.

\par {\pntext\pard\plain\f1\fs20 \'b7\tab}All other names beginning with{\cs58\f5\fs16\lang1024  \lquote \\0x07\rquote } through {\cs58\f5\fs16\lang1024 \lquote \\0x1F\rquote  }are reserved for future definition and use by the system.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In general, an element\rquote 
s name is not considered useful to an end-user. Therefore, if a client wants to store specific user-readable names of objects, it usually uses some other mechanism. For example, the client may write its own stream under one of its o
wn storage elements that has the names of all the other objects within that same storage element. Another method would be for the client to store a stream named {\cs58\f5\fs16\lang1024 \ldblquote \\0x03Name\rdblquote } in each object\rquote 
s storage that would contain that object\rquote s name. Since the stream name itself begins with {\cs58\f5\fs16\lang1024 \lquote \\0x03\rquote } the client owns that stream even through the objects controls much of the rest of that storage element.
\par {\*\bkmkstart _Toc298215772}{\*\bkmkstart _Toc306725134}{\*\bkmkstart _Toc324051553}{\*\bkmkstart _Toc324051738}{\*\bkmkstart _Toc324051980}{\pntext\pard\plain\b\i\fs22 2.6.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Direct Access vs. Transacted Access{\*\bkmkend _Toc298215772}{\*\bkmkend _Toc306725134}{\*\bkmkend _Toc324051553}{\*\bkmkend _Toc324051738}{\*\bkmkend _Toc324051980}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Storage and stream elements support two fundamentally different modes of access: direct mode and transacted mode. Changes made while in direct mode{\pard\plain \qj\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 
\ldblquote directmode\rdblquote }}} are immediately and permanently made to the affected storage object. In transacted mode{\pard\plain \qj\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 \ldblquote transactedmode\rdblquote }}}
, changes are buffered so that they may be saved (\ldblquote committed\rdblquote ) or reverted when modifications are complete.
\par If an outermost level {\cs58\f5\fs16\lang1024 IStorage}{\i  }
is used in transacted mode, then when it commits, a robust two-phase commit operation is used to publish those changes to the underlying file on the file system. That is, great pains are taken are taken so as not to loose the user\rquote 
s data should an untimely crash occurs.
\par The need for transacted mode is best explained by an illustrative scenario. Imagine that a user has created a spreadsheet which contains a sound clip object, and that the sound clip is an object that uses the new per
sistent storage facilities provided in COM. Suppose the user opens the spreadsheet, opens the sound clip, makes some editing changes, then closes the sound clip at which point the changes are updated in the spreadsheet storage set aside for the sound 
clip. Now, at this instant, the user has a choice: save the spreadsheet or close the spreadsheet {\i without }
saving. Either way, the next time the user opens the spreadsheet, the sound clip had better be in the appropriate state. This implies that at the instant before the save vs. close decision was made, both the old and the new versions of the sound clip had 
to exist. Further, since large objects are precisely the ones that are expensive in time and space to copy, the new version should exist as a set of {\i differences} from the old.
\par The central issue is whose responsibility it is to keep track of the two versions. The client (the spreadsheet in this example) had the old version to begin with, so the question really boils down to how and when does the object (sound clip) communicate t
he new version to the spreadsheet. Applications today are in general already designed to keep edits separate from the persistent copy of an object until such time as the user does a save or update. Update time is thus the earliest tim
e at which the transfer should occur. The latest is immediately before the client saves itself. The most appropriate time seems to be one of these two extremes; no intermediate time has any discernible advantage.
\par COM specifies that this communication happens at the earlier time. When asked to update edits back to the client, an object using the new persistence support will write any changes to its storage) exactly as if it were doing a save to its own storage comp
letely outside the client. It is the responsibility of the client to keep these changes separate from the old version until {\i it} does a save (commit) or close (revert). Transacted mode on {\i IStorage }
makes dealing with this requirement easy and efficient.
\par The transaction on each storage is nested in the transaction of its parent storage. Think of the act of committing a transaction on an {\cs58\f5\fs16\lang1024 IStorage}{\i  }instance as \ldblquote publishing changes one more level outwards.\rdblquote 
 Inner objects publish changes to the transaction of the next object outwards; outermost objects publish changes permanently into the file system.
\par Let\rquote 
s examine for a moment the implications of using instead the second option, where the object keeps all editing changes to itself until it is known that the user wants to commit the client (save the file). This may happen many minutes after the contain
ed object was edited. COM must therefore allow for the possibility that in the interim time period the user closed the server used to edit the object, since such servers may consume significant system resources. To
 implement this second option, the server must presumably keep the changes to the old version around in a set of temporary files (remember, these are potentially {\i big} objects). At the client\rquote 
s commit time, every server would have to be restarted and asked to incorporate any changes back onto its persistent storage. This could be {\i very}
 time consuming, and could significantly slow the save operation. It would also cause reliability concern in the user\rquote s mind: what if for some reason (such as memory resources) a server cannot be restarted? Further, even when the client is closed {
\i without} saving, servers have to be awakened to clean up their temporary files. Finally, if a object is edited a second time before the client is committed, in this option its the client can only provide the {\i old, original}
 storage, not the storage that has the first edits. Thus, the server would have to recognize on startup that some edits to this object were lying around in the system. This is an awkward burden to place on servers: it amounts to requiring that they {\i 
all} support the ability to do incremental auto-save with automatic recovery from crashes. In short, this approach would significantly and unacceptably complicate the responsibilities of the object implementors.
\par To that end, it makes the most sense that the standard COM implementation of the storage system support transactioning through {\cs58\f5\fs16\lang1024 IStorage} and possibly {\cs58\f5\fs16\lang1024 IStream}.
\par {\*\bkmkstart _Toc298215773}{\*\bkmkstart _Toc306725135}{\*\bkmkstart _Toc324051554}{\*\bkmkstart _Toc324051739}{\*\bkmkstart _Toc324051981}{\pntext\pard\plain\b\i\fs22 2.6.6\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Browsing Elements{\*\bkmkend _Toc298215773}{\*\bkmkend _Toc306725135}{\*\bkmkend _Toc324051554}{\*\bkmkend _Toc324051739}{\*\bkmkend _Toc324051981}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 By its nature, COM\rquote 
s structured storage separates applications from the exact layout of information within a given file. Every element of information in that file is access using functions and interfaces implemented by COM. Because this implementation is central, a file gen
erated by some application using this structure can be browsed by some other piece of code, such as a system shell. In other words, any piece of code in the system can use COM to browse the entire hierarchy of elements within any structured file simply by
 navigating with the {\cs58\f5\fs16\lang1024 IStorage}{\i  }interface functions which provide directory-like services. If that piece of code also knows the format and the meaning of a specific stream that has a certain name, it could also {\i open}
 that stream and make use of the information in it, {\i without having to run the application that wrote the file.}
\par This is a powerful enabling technology for operating system shells that want to provide rich query tools to help end users look for information on their machine or even on a network. To make it really happen re
quires standards for certain stream names and the format of those streams such that the system shell can open the stream and execute queries against that information. For example, consider what is possible if all applications created a stream called 
\ldblquote Summary Information\rdblquote  underneath the root storage element of the file. In this stream the application would write information such as the author of the document, the cre
ate/modify/last saved time-stamps, title, subject, keywords, comments, a thumbnail sketch of the first page, etc. Using this information the system shell could find any documents that a certain user write before a cer
tain date or those that contained subject matter matched against a few keywords. Once those documents are found, the shell can then extract the title of the document along with the thumbnail sketch and give the user a very engaging display of the search r
esults.
\par This all being said, in the general the actual utility of this capability is perhaps significantly less t
han what one might first imagine. Suppose, for example, that I have a structured storage that contains some word processing document whose semantics and persistent representation I am unaware of, but which contains some number of contained objects, perhap
s the figures in the document, that I can identify by their being stored and tagged in contained sub-storages. One might naively think that it would be reasonable to be able to walk in and browse the figures from some system-provided generic browsing util
it
y. This would indeed work from a technical point of view; however, it is unlikely to be useable from a user interface perspective. The document may contain hundreds of figures, for example, that the user created and thinks about not with a name, not with 
a number, but only in the relationship of a particular figure to the rest of the document\rquote s information. {\i 
With what user interface could one reasonably present this list of objects to the user other than as some add-hoc and arbitrarily-ordered sequence? }Ther
e is, for example, no name associated with each object that one could use to leverage a file-system directory-browsing user interface design. In general, the {\i content}
 of a document can only be reasonably be presented to a human being using a tool that understands the semantics of the document content, and thus can show all of the information therein in its appropriate context.
\par {\*\bkmkstart _Toc298215774}{\*\bkmkstart _Toc306725136}{\*\bkmkstart _Toc324051555}{\*\bkmkstart _Toc324051740}{\*\bkmkstart _Toc324051982}{\pntext\pard\plain\b\i\fs22 2.6.7\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Persistent Objects{\*\bkmkend _Toc298215774}{\*\bkmkend _Toc306725136}{\*\bkmkend _Toc324051555}{\*\bkmkend _Toc324051740}{\*\bkmkend _Toc324051982}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Because COM allows an object to read and write itself to storage, there must be a way through which the cli
ent tells objects to do so. The way is, of course, additional interfaces that form a storage contract between the client and objects. When a client wants to tell and object to deal with storage, it queries the object for one of the persistence-related int
erfaces, as suits the context. The interfaces that objects can implement, in any combination, are described below:
\par \pard\plain \s75\fi-1800\li2520\ri360\sa120\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IPersistStorage}\tab Object can read and write its persistent state to a storage object. The client provides the object with an {\cs58\f5\fs16\lang1024 IStorage}
 pointer through this interface. This is the only {\cs58\f5\fs16\lang1024 IPersist*}{\i  }interface that includes semantics for incremental access.
\par {\cs58\f5\fs16\lang1024 IPersistStream}\tab Object can read and write its persistent state to a stream object. The client provides the object with an {\cs58\f5\fs16\lang1024 IStream} pointer through this interface.
\par {\cs58\f5\fs16\lang1024 IPersistFile}\tab Object can read and write its persistent state to a file on the underlying system directly. This interface does not involve {\cs58\f5\fs16\lang1024 IStorage}{\i  }or {\cs58\f5\fs16\lang1024 IStream} un
less the underlying file is itself access through these interfaces, but the {\cs58\f5\fs16\lang1024 IPersistFile}
 itself has no semantics relating to such structures. The client simply provides the object with a filename and orders to save or load; the object does whatever is necessary to fulfill the request.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 These interfaces and the rules governing them are described in Chapter 12.
\par {\*\bkmkstart _Toc298215775}{\*\bkmkstart _Toc306725137}{\*\bkmkstart _Toc324051556}{\*\bkmkstart _Toc324051741}{\*\bkmkstart _Toc324051983}{\*\bkmkstart _Toc337439309}{\*\bkmkstart _Toc337440773}{\*\bkmkstart _Toc339182935}{\pntext\pard\plain\b 2.7\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Persistent, Intelligent Names{\*\bkmkend _Toc298215775}{\*\bkmkend _Toc306725137}{\*\bkmkend _Toc324051556}
{\*\bkmkend _Toc324051741}{\*\bkmkend _Toc324051983}: Monikers{\*\bkmkend _Toc337439309}{\*\bkmkend _Toc337440773}{\*\bkmkend _Toc339182935}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 To set the context for why \ldblquote Persistent, Intelligent Names\rdblquote  are an important technology in COM, think for a moment about a standard, mundane file name. That file name refers to some co
llection of data that happens to be stored on disk somewhere. The file name describes the somewhere. In that sense, the file name is really a name for a particular \ldblquote object\rdblquote  of sorts where the object is defined by the data in the file.

\par The limitation is that a file name by itself is unintelligent; all the intelligence about what that filename means and how it gets used, as well as how it is stored persistently if necessary, is contained in whatever application is the client of that file
 name. The file name is nothing more than some piece of data in that client. This means that the client must have specific code to handle file names. This normally isn\rquote t seen as much of a problem\emdash 
most applications can deal with files and have been doing so for a long time.
\par Now introduce some sort of name that describes a query in a database. The introduce others that describe a file and a specific range of data within that file, such as a range of spreadsheet cells or a paragraph is a document. Introduce yet more than ident
ify a
 piece of code on the system somewhere that can execute some interesting operation. In a world where clients have to know what a name means in order to use it, those clients end up having to write specific code for each type of name causing that applicati
on to grow monolithically in size and complexity. This is one of the problems that COM was created to solve.
\par In COM, therefore, the intelligence of how to work with a particular name is encapsulated inside the name itself, where the name becomes an object that implements name-related interfaces. These objects are called {\i monikers}.{\cs38\super \chftn 
{\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab The word \ldblquote moniker\rdblquote  is fairly obscure synonym for \ldblquote nickname.\rdblquote }}
 A moniker implementation provides an abstraction to some underlying connection (or \ldblquote binding\rdblquote ) mechanism. Each different moniker class (with a different {\cs58\f5\fs16\lang1024 CLSID}
) has its own semantics as to what sort of object or operation it can refer to, which is {\i entirely }up to the moniker itself. A section below describes some typical types of monikers. While a moniker class itself defi
nes the operations necessary to locate some general type of object or perform some general type of action, each individual moniker {\i object }(each instantiation) maintains its own name data that identifies some other {\i particular}
 object or operation. The moniker class defines the functionality; a moniker object maintains the parameters.
\par With monikers, clients always work with names through an interface, rather than directly manipulating the strings (or whatever) themselves. This means that whenever a client wish
es to perform any operation with a name, it calls some code to do it instead of doing the work itself. This level of indirection means that the moniker can transparently provide a whole host of services, and that the client can seamlessly interoperate ove
r time with various different moniker implementations which implement these services in different ways.
\par {\*\bkmkstart _Toc298215776}{\*\bkmkstart _Toc306725138}{\*\bkmkstart _Toc324051557}{\*\bkmkstart _Toc324051742}{\*\bkmkstart _Toc324051984}{\pntext\pard\plain\b\i\fs22 2.7.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Moniker Objects{\*\bkmkend _Toc298215776}{\*\bkmkend _Toc306725138}{\*\bkmkend _Toc324051557}{\*\bkmkend _Toc324051742}{\*\bkmkend _Toc324051984}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A moniker is simply an object that supports the {\cs58\f5\fs16\lang1024 IMoniker} interface. {\cs58\f5\fs16\lang1024 IMoniker} interface includes the {\cs58\f5\fs16\lang1024 IPer\-sist\-Stream} interface;{
\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab One of the few instances of inheritance from one major interface to another, which the {\i IMoniker} designer later decided was actu
ally less preferable to having a moniker implement {\i IMoniker} and {\i IPersistStream }separately. See the first footnote in Chapter 9.}} thus, monikers can be saved to and loaded from streams. The persistent form of a moni
ker includes the data comprising its name and the CLSID of its implementation which is used during the loading process. This allows new kinds of monikers to be created transparently to clients.
\par The most basic operation in the {\cs58\f5\fs16\lang1024 IMoniker}{\i  }interface is that of {\i binding} to the object to which it points. The binding function in {\cs58\f5\fs16\lang1024 IMoniker}
 takes as a parameter the interface identifier by which the client wishes to talk to the bound object, runs whatever algorithm is necessary in order to locate the object, then returns a pointer of that interface type to the client. The client can also ask
 to bind to the object\rquote s {\i storage} (for example, the {\cs58\f5\fs16\lang1024 IStorage} containing the object) if desired, instead of to the running object through a slightly different {\cs58\f5\fs16\lang1024 IMoniker}
 function. As binding may be an expensive and time-consuming process, a client can control how long it is willing to wait for the binding to complete. Binding also takes place inside a specific \ldblquote bind context\rdblquote 
 that is given to the moniker. Such a context enables the binding process overall to be more efficient by avoiding repeated connections to the same object.
\par A moniker also supports an operation called \ldblquote reduction\rdblquote  through which it re-write
s itself into another equivalent moniker that will bind to the same object, but does so in a more efficient way. This capability is useful to enable the construction of user-defined macros or aliases as new kinds of moniker classes (such that when reduced
, the moniker to which the macro evaluates is returned) and to enable construction of a kind of moniker which tracks data as it moves about (such that when reduced, the new moniker contains a reference to the new location). Chapter 9 will expand on the re
duction concept.
\par Each moniker class can store arbitrary data its persistent representation, and can run arbitrary code at bind
ing time. The client therefore only knows each moniker by the presence of a persistent representation and whatever label the client wishes to assign to each moniker. For example, a spreadsheet as a client may keep, from the user\rquote 
s perspective, a list of \ldblquote links\rdblquote  to other spreadsheets where, in fact, each link was an arbitrary label for a moniker (regardless of whether the moniker is loa
ded or persistently on disk at the moment) where the moniker manages the real identity of the linked data. When the spreadsheet wants to resolve a link for the user, it only has to ask the moniker to bind to the object. After the binding is complete, the 
spreadsheet then has an interface pointer for the linked object and can talk to it directly\emdash the moniker falls out of the picture as its job is complete.
\par The label assigned to a moniker by a client does not have to be arbitrary. Monikers support the ability to produce a \ldblquote display name\rdblquote 
 for whatever object they represent that is suitable to show to an end user. A moniker that maintains a file name (such that it can find an application to load that file) would probably just use the file name directly as the dis
play name. Other monikers for things such as a query may want to provide a display name that is a little more readable than some query languages.
\par {\*\bkmkstart _Toc298215777}{\*\bkmkstart _Toc306725139}{\*\bkmkstart _Toc324051558}{\*\bkmkstart _Toc324051743}{\*\bkmkstart _Toc324051985}{\pntext\pard\plain\b\i\fs22 2.7.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Types of Monikers{\*\bkmkend _Toc298215777}{\*\bkmkend _Toc306725139}{\*\bkmkend _Toc324051558}{\*\bkmkend _Toc324051743}{\*\bkmkend _Toc324051985}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As some of the examples above has hinted, monikers can have many types, or classes, de
pending on the information they contain and the type of objects they can refer to. A moniker class is really defined by the information it persistently maintains and the binding operation is uses on that information.
\par COM itself, however, only specifies one standard moniker called the {\i generic composite} {\i moniker}. The composite moniker is special in two ways. First, its persistent data is {\i completely}
 composed of the persistent data of other monikers, that is, a composite moniker is a collection of other monikers. Second, binding a composite moniker simply tells the composite to bind each moniker it contains in sequence. Since the composite\rquote 
s behavior and persistent state is defined by other monikers, it is a standard type of moniker that works identically on any host system; the composite is {\i generic }
because it has no knowledge of its pieces except that they are monikers. Chapter 9 described the generic composite in more detail.
\par So what other types of monikers can go in a composite? Virtually any other type (including other composite monikers!). However, other types of monikers are not so generic and have more dependency on the under
lying operating system or the scenarios in which such a moniker is used.
\par For example, Microsoft\rquote s OLE defines four other specific monikers\emdash file, item, anti, pointer\emdash that it uses specifically to help implement \ldblquote linked objects\rdblquote 
 in its compound document technology. A file moniker, for example, maintains a file name as its persistent data and its binding process is one of locating an application that can load that file, launching the application, and retrieving from it an {
\cs58\f5\fs16\lang1024 IPersistFile}
 interface through which the file moniker can ask the application to load the file. Item monikers are used to describe smaller portions of a file that might have been loaded with a file moniker, such as a specific sheet of a three-dimensional spreadsheet 
or a range of cells in that sheet. To \ldblquote link\rdblquote  to a specific cell range in a specific sheet of a specific file, the single moniker used to describe the link is a gen
eric composite that is composed with a file moniker and two item monikers as illustrated in Figure 2-13. Each moniker in the composite is one step in the path to the final source of the link.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw18864\pich3069\picwgoal10695\pichgoal1740 \picscalex60\picscaley60 
010009000003de08000007003100000000000e00000026060f001200ffffffff000008000000a0f6b0fe560768010a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02b0fea0f6050000000c02b802b61031000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000a2f6aefe3f0753010e00000026060f001200ffffffff000008000000cbfaaefe3f07500107000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200070000001b0469015807c6fee3fa050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff00
0000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100070000001b0450013f07aefecbfa050000001402000000000a00000026060f000a00ffffffff0100000000000e
00000026060f001200ffffffff00000800000038fbe3fe25ff6d0007000000fc020000000000020000040000002d01040004000000f0010300040000002d010200070000001b0486003efffbfe50fb050000001402000000002d00000042010500000028000000080000000800000001000100000000002000000000000000
00000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100070000001b046d
0025ffe3fe38fb050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000077fbf7fe10ffbfff1c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000001005f87f040000002d01
0100040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a79ffb1fb0c000000433a5c51335250542e444f4351001f001f0057003f0050004b0045001f0051005700510004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff000008000000d5fbafffb3fe77001c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000008014f87f040000002d01050004000000f0010100040000002e011800050000000a02000000000500000009020000000204000000020101001900
0000320a31000ffc0c00000046696c65204d6f6e696b65724400190019003e0020005d003e003e00190038003f00250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000bdffe5fef6026d0007000000fc020000000000020000040000002d01010004
000000f0010300040000002d010200070000001b0486000f03fdfed5ff050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd00
0000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400070000001b046d00f602e5febdff050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffff
ff0000080000000300f6feb602beff1c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000601af87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010013000000
320a78ff3d000800000053414c455354424c4b004a003f004a004b0045004a003f0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000edffaffff00277001c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338
f70f037884c577000000000c0000008014f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a310027000c0000004974656d204d6f6e696b65721f001f003f005d001f005d003f003e00190038003e002500040000000201
02000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005aff44ff94ff7eff07000000fc020000ffffff020000040000002d01040004000000f0010300040000002d01020008000000fa0206000800000000000002040000002d01030004000000f00101000700000018047e
ff94ff44ff5aff050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007c03e5feb6066d0007000000fc020000000000020000040000002d01010004000000f0010400040000002d010200070000001b048600cf06fdfe940305000000140200000000
2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001010005000000090200000002050000000102ffffff0208
000000fa0206000800000000000002040000002d01010004000000f0010300070000001b046d00b606e5fe7c03050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c203f6fe9a06beff1c000000fb0290ff00000000000090010000000000000000
417269616c000f03d0bb550338f70f037884c577000000000c0000009017f87f040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a78fffc0309000000523243323a523743340051003e0051003e001f0051003f0051003e0004
000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ad03afffb00677001c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000008014f87f040000002d01050004000000f0010300
040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a3100e7030c0000004974656d204d6f6e696b65721f001f003f005d001f005d003f003e00190038003e00250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffff
ff000008000000190344ff53037eff07000000fc020000ffffff020000040000002d01030004000000f0010400040000002d01020008000000fa0206000800000000000002040000002d01040004000000f00101000700000018047eff530344ff1903050000001402000000000a00000026060f000a00ffffffff01000000
00000e00000026060f001200ffffffff000008000000a2f63f00cbf907011c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000001005f87f040000002d01010004000000f0010500040000002e011800050000000a020000000005000000090200
00000204000000020101001b000000320ac100dcf60d0000004d6f6e696b657220636c617373005d003f003e00190038003e0025001f00380019003f003800380004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000aafbfaffdbfb2d0007000000fc02
0000000000020000040000002d01050004000000f0010300040000002d01020008000000fa0206000800000000000002040000002d01030004000000f00104000700000018042d00dbfbfaffaafb050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000
00a0f91100cefb9800040000002d01020007000000fc020100000000000000040000002d01040004000000f001030004000000f00105001c000000fb021000070000000000bc02000000000102022253797374656d0003d0bb55033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010100
030000001e000700000016043801cefb71ffa0f908000000fa0206000800000000000002040000002d0101000500000014020f017af705000000130292ffecfd040000002d010200040000002d01040004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff00000800000030f7fcfe65fac4ff1c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000001005f87f040000002d010100040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a7eff6af7
0c000000446973706c6179204e616d655100190038003e0019003e0038001f0051003f005d003e0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000040fa58ff88fb62ff040000002d010200040000002d010400040000002d01030004000000f00101
00030000001e00070000001604020088fbb8fe40fa08000000fa0206000800000000000002040000002d01010005000000140256ff00f90500000013025cffc0fc040000002d010200040000002d01040004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200
ffffffff00000800000061fb44ff92fb78ff07000000fc020000000000020000040000002d01010008000000fa0206000800000000000002040000002d01050007000000180478ff92fb44ff61fb0500000014025cffc0fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000
005bfe8b00430453011c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000009017f87f040000002d010600040000002e011800050000000a02000000000500000009020000000204000000020101002d000000320a0d0195fe1900000047656e65
72696320436f6d706f73697465204d6f6e696b65720057003e003f003e002500190038001f0051003e005e003e003e00380019001f003f001f005d003e003f00180038003f00250004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f
001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01040004000000f001050004000000f0010100040000002d01030004000000f001060003000000000018fda7fd00}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-13: A composite moniker that is composed with a file moniker and two item monikers\line 
to describe the source of a link which is a cell range in a specific sheet of a spreadsheet file.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 More complete descriptions of the file, item, anti, and pointer monikers from OLE are provided in Chapter 9 as examples of how mo
nikers can be used. But monikers can represent virtually any type of information and operation, and are not limited to this basic set of OLE defined monikers.
\par {\*\bkmkstart _Toc298215778}{\*\bkmkstart _Toc306725140}{\*\bkmkstart _Toc324051559}{\*\bkmkstart _Toc324051744}{\*\bkmkstart _Toc324051986}{\pntext\pard\plain\b\i\fs22 2.7.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Connections and Reconnections{\*\bkmkend _Toc298215778}{\*\bkmkend _Toc306725140}{\*\bkmkend _Toc324051559}{\*\bkmkend _Toc324051744}{\*\bkmkend _Toc324051986}
\par \pard\plain \qj\sa60\keep\widctlpar \f4\fs20 How does a client come by a moniker in the first place? In other words, how does a client establish a con
nection to some object and obtain a moniker that describes that connection? The answer depends on the scenario involved but is generally one of two ways. First, the source of the object may have created a monike
r and made it available for consumption through a data transfer mechanism such (in the workstation case) as a clipboard or perhaps a drag & drop operation. Second, the client may have enough knowledge about a particular moniker class that it can synthesiz
e a moniker for some object using other known information such that the client can forget about that specific information itself and thereafter deal only with monikers. So regardless of how a client obtains a moniker, it can simply ask the moniker to bind
 to establish a connection to the object referred to by the moniker.
\par \pard \qj\sa60\widctlpar Binding a moniker does not always mean that the moniker must run the object itself. The object might al
ready be running within some appropriate scope (such as the current desktop) by the time the client wants to bind the moniker to it. Therefore the moniker need only connect to that running object.
\par COM supports this scenario through two mechanisms. The first is the {\i Running Object Table} in which objects register themselves and their monikers when they become running. This table is available to all monikers as they attempt to bind\emdash 
if a moniker sees that a matching moniker in the table, it can quickly connect to the already running object. 
\par {\*\bkmkstart _Toc298215779}{\*\bkmkstart _Toc306725141}{\*\bkmkstart _Toc324051560}{\*\bkmkstart _Toc324051745}{\*\bkmkstart _Toc324051987}{\*\bkmkstart _Toc337439310}{\*\bkmkstart _Toc337440774}{\*\bkmkstart _Toc339182936}{\pntext\pard\plain\b 2.8\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Uniform Data Transfer{\*\bkmkend _Toc298215779}{\*\bkmkend _Toc306725141}{\*\bkmkend _Toc324051560}{\*\bkmkend _Toc324051745}
{\*\bkmkend _Toc324051987}{\*\bkmkend _Toc337439310}{\*\bkmkend _Toc337440774}{\*\bkmkend _Toc339182936}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Just as COM provides interfaces for dealing with storage and object naming, it also provides interfaces for exchanging data between applications. So built on top of both COM and the Persistent Storage technology is Uniform Data Transfer, which provides th
e functionality to represent all data transfers through a single implementation of a {\i data object}. Data objects implement an interface called {\cs58\f5\fs16\lang1024 IDataObject}{\i  }
which encompasses the standard operations of get/set data and query/enumerate formats as well as functions through which a client of a data object can establish a notification loop to detect data changes in the object. In addition, this technology enables
 use of richer descriptions of data formats and the use of virtually any storage medium as the transfer medium.
\par {\*\bkmkstart _Toc298215780}{\*\bkmkstart _Toc306725142}{\*\bkmkstart _Toc324051561}{\*\bkmkstart _Toc324051746}{\*\bkmkstart _Toc324051988}{\pntext\pard\plain\b\i\fs22 2.8.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Isolation of Transfer Protocols{\*\bkmkend _Toc298215780}{\*\bkmkend _Toc306725142}{\*\bkmkend _Toc324051561}{\*\bkmkend _Toc324051746}{\*\bkmkend _Toc324051988}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The \ldblquote Uniform\rdblquote  in the name of this technology arose from the fact that the {\cs58\f5\fs16\lang1024 IDataObject}{\i  }interface separates all the common exchange operations from what is called a {
\i transfer protocol}. Existing protocols include facilities such as a \ldblquote clipboard\rdblquote  or a \ldblquote drag & drop\rdblquote 
 feature as well as compound documents as implemented in OLE. With Uniform Data Transfer, all protocols are concerned only with exchanging a pointer to an {\cs58\f5\fs16\lang1024 IDataObject} interface. The source of the data\emdash the server\emdash 
need only implement one data object which is usable in any exchange protocol and that\rquote s it. The consumer\emdash the client\emdash need only implement one piece of code to request data from a data object once it receives an {\cs58\f5\fs16\lang1024 
IDataObject}{\i  }pointer from any protocol. Once the pointer exchange has occurred, both sides deal with data exchange in a uniform fashion, through {\cs58\f5\fs16\lang1024 IDataObject}.
\par This uniformity not only reduces the code necessary to source or consume data, but also greatly simplifies the code needed to work with the protocol itself. Before COM was first implemented in OLE 2, each trans
fer protocol available on Microsoft Windows had its own set of functions that tightly bound the protocol to the act of requesting data, and so programmers had to implement specific code to handle each different protocol and exchange procedure. Now that th
e exchange functionality is separated from the protocol, dealing with each protocol requires only a minimum amount of code which is absolutely necessary for the semantics of that protocol.
\par While of course extremely useful in the context of OLE Documents, Uniform Data Transfer is a generic service with applications far beyond OLE Documents.
\par {\*\bkmkstart _Toc298215781}{\*\bkmkstart _Toc306725143}{\*\bkmkstart _Toc324051562}{\*\bkmkstart _Toc324051747}{\*\bkmkstart _Toc324051989}{\pntext\pard\plain\b\i\fs22 2.8.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Data Formats and Transfer Mediums{\*\bkmkend _Toc298215781}{\*\bkmkend _Toc306725143}{\*\bkmkend _Toc324051562}{\*\bkmkend _Toc324051747}{\*\bkmkend _Toc324051989}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Before Uniform Data Transfer, virtually all standard protocols for data transfer were quite weak at describ
ing the data being transferred and usually required the exchange to occur through global memory. This was especially true on Microsoft Windows: the format was described by a single 16-bit \ldblquote clipboard format\rdblquote 
 and the medium was always global memory.
\par The problem with the \ldblquote clipboard format\rdblquote  is that it can only describe the structure of the data, that is, identify the layout of the bits. For example, the format {\cs58\f5\fs16\lang1024 CF_TEXT} describes ASCII text. {
\cs58\f5\fs16\lang1024 CF_BITMAP} describes a device-dependent bitmap of so many colors and such and such dimensions, but was incapable of describing the actual device it depends upon. Furthermore, none of these formats gave any indication of what was ac
tually in the data such as the amount of detail\emdash whether a bitmap or metafile contained the full image or just a thumbnail sketch.
\par The problem with always using global memory as a transfer medium is apparent when large amounts of data are exchanged. Unless you have a machine with an obnoxious amount of memory, an exchange of, say, a 20MB scanned true-color bitmap through global memor
y is going to cause considerable swapping to virtual memory on the disk. Restricting exchanges to global memory means that no application can choose to exchange data {\i on disk} when it will usually {\i reside on disk}
 even when being manipulated and will usually use virtual memory on disk anyway. It would be much more efficient to allow the source of that data to indicate that the exchange happens on disk in the first place instead of forcing 20MB of data through a vi
rtual-memory bottleneck to just have it end up on disk once again.
\par Further, {\i latency} of the data transfer is sometimes an issue, particularly in network situations. One often needs or wants to start processing the {\i beginning }
of a large set of data before the end the data set has even reached the destination machine. To accomplish this, some abstraction on the medium by which the data is transferred is needed.
\par To solve these problems, COM defines two new data structures: {\cs58\f5\fs16\lang1024 FORMATETC }and {\cs58\f5\fs16\lang1024 STGMEDIUM}. {\cs58\f5\fs16\lang1024 FORMATETC }
is a better clipboard format, for the structure not only contains a clipboard format but also contains a device description, a detail description (full content, thumbnail sketch, iconic, and \lquote as printed\rquote ), and a flag indicating
 what storage device is used for a particular rendering. Two {\cs58\f5\fs16\lang1024 FORMATETC} structures that differ only by storage medium are, for all intents and purposes, two different formats. {\cs58\f5\fs16\lang1024 STGMEDIUM }
is then the better global memory handle which contains a flag indicating the medium as well as a pointer or handle or whatever is necessary to access that actual medium and get at the data. Two {\cs58\f5\fs16\lang1024 STGMEDIUM }
structures may indicate different mediums and have different references to data, but those mediums can easily contain the exact same data.
\par So {\cs58\f5\fs16\lang1024 FORMATETC} is what a consumer (client) uses to indicate the type of data it wants from a data source (object) and is used by the source to describe what formats it can provide. {\cs58\f5\fs16\lang1024 FORMATETC }
can describe virtually any data, including other objects such a monikers. A client can ask a data object for an enumeration of its formats by requesting the data object\rquote s {\cs58\f5\fs16\lang1024 IEnumFORMATETC}
 interface. Instead of an object blandly stating that it has \ldblquote text and a bitmap\rdblquote  it can say it has \ldblquote A device-independent string of text that is stored in global memory\rdblquote  and \ldblquote 
a thumbnail sketch bitmap rendered for a 100dpi dot-matrix printer which is stored in an {\cs58\f5\fs16\lang1024 IStorage }object.\rdblquote 
 This ability to tightly describe data will, in time, result in higher quality printer and screen output as well as more efficiency in data browsing where a thumbnail sketch is much faster to retrieve and display than a full detail rendering.
\par {\cs58\f5\fs16\lang1024 STGMEDIUM }means that data sources and consumers can now choose to use the most efficient exchange medium on a per-rendering basis. If the data is so big that it should be kept on disk, the data source can indi
cate a disk-based medium in it\rquote s preferred format, only using global memory as a backup if that\rquote s all the consumer understands. This has the benefit of using the {\i best}
 medium for exchanges as the default, thereby improving overall performance of data exchange between applications\emdash if some data is already on disk, it does not even have to be loaded in order to send it to a consumer who doesn\rquote 
t even have to load it upon receipt. {\i At worst}, COM\rquote s data exchange mechanisms would be {\i as good as anything available today} where all transfers restricted to global memory. {\i At best}
, data exchanges can be effectively instantaneous even for large data.
\par Note that two potential storage mediums that can be used in data exchange are storage objects and stream objects. Therefore Uniform Data Transfer as a technology itself builds upon the Persistent Storage technol
ogy as well as the basic COM foundation. Again, this enables each piece of code in an application to be leveraged elsewhere.
\par {\*\bkmkstart _Toc298215782}{\*\bkmkstart _Toc306725144}{\*\bkmkstart _Toc324051563}{\*\bkmkstart _Toc324051748}{\*\bkmkstart _Toc324051990}{\*\bkmkstart _Toc290731887}{\pntext\pard\plain\b\i\fs22 2.8.3\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Data Selection{\*\bkmkend _Toc298215782}{\*\bkmkend _Toc306725144}{\*\bkmkend _Toc324051563}{\*\bkmkend _Toc324051748}{\*\bkmkend _Toc324051990}

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A data object can vary to a number of degrees as to what exact data it can exchange through the {\cs58\f5\fs16\lang1024 IDataObject}
 interface. Some data objects, such as those representing the clipboard or those used in a drag & drop opera
tion, statically represent a specific selection of data in the source, such as a range of cells in a spreadsheet, a certain portion of a bitmap, or a certain amount of text. For the life of such static data objects, the data un
derneath them does not change.
\par Other types of data objects, however, may support the ability to dynamically change their data set. This ability, however, is not represented through the {\cs58\f5\fs16\lang1024 IDataObject}
 interface itself. In other words, the data object has to implement some {\i other} interface to support dynamic data selection. An example of such objects are those that support OLE for Real-Time Market Data (WOSA/XRT) specification.{\cs38\super \chftn 
{\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }  OLE for Real-Time Market Data was formerly called the \ldblquote WOSA Extensions for Real Time Market Data\rdblquote 
.   More information on this and other industry specific extensions to OLE is available from Microsoft.}} OLE for Real-Time Market Data uses a data object and the {\cs58\f5\fs16\lang1024 IDataObject }interface for exchange of data, but use the {
\cs58\f5\fs16\lang1024 IDispatch }inter
face from OLE Automation to allow consumers of the data to dynamically instruct the data object to change its working set. In other words, the OLE Automation technology (built on COM but not part of COM itself) allows the consumer to identify the specific
 marke
t issues and the information on those issues (high, low, volume, etc.) that it wants to obtain from the data object. In response, the data object internally determines where to retrieve that data and how to watch for changes in it. The data object then no
tifies the consumer of changes in the data through COM\rquote s Notification mechanism.
\par {\*\bkmkstart _Toc298215783}{\*\bkmkstart _Toc306725145}{\*\bkmkstart _Toc324051564}{\*\bkmkstart _Toc324051749}{\*\bkmkstart _Toc324051991}{\pntext\pard\plain\b\i\fs22 2.8.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Notification{\*\bkmkend _Toc290731887}{\*\bkmkend _Toc298215783}{\*\bkmkend _Toc306725145}{\*\bkmkend _Toc324051564}{\*\bkmkend _Toc324051749}{\*\bkmkend _Toc324051991}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Consumers of data from an external source might be interested in knowing when data in that source changes. This requires some mechanism through which a data
 object itself asynchronously notifies a client connected to it of just such an event at which point a client can remember to ask for an updated copy of the data when it later needs such an update.
\par COM handles notifications of this kind through an object called an {\i advise sink }which implements an interface called {\cs58\f5\fs16\lang1024 IAdviseSink}.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar 
\f4\fs16 {\cs38\super \chftn } \tab Astute readers will wonder why Uniform Data Transfer is defined using the Connectable Objects interfaced described previously.  The reason is simple: UDT was designed as part of the 
original OLE 2.0 specification in 1991, and Connectable Objects were not introduced until the release of the OLE Controls specification in 1993.}}
 This sink is a body that absorbs asynchronous notifications from a data source. The advise sink object itself, and the {\cs58\f5\fs16\lang1024 IAdviseSink }interface is implemented by the consumer of data which then hands an {\cs58\f5\fs16\lang1024 
IAdviseSink }pointer to the data object in question. When the data object detects a change, it then calls a function in {\cs58\f5\fs16\lang1024 IAdviseSink }to notify the consumer as illustrated in Figure 2-14.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw18362\pich9604\picwgoal10410\pichgoal5445 \picscalex50\picscaley50 
010009000003070e000008003100000000000e00000026060f001200ffffffff000008000000def7a4fb220826040a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02a4fbdef7050000000c028208441031000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000e0f7a5fb0c0828040e00000026060f001200ffffffff000008000000e0f7cffd85fd600207000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c062401240179029efde7fdf8f7050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0622012201600285fdcffde0f7050000001402000000000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff00000800000090f970ff9afc880107000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c0686008600a101b3fc88ffa8f9050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400040000
00f0010100090000001c068400840088019afc70ff90f9050000001402000000001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d010100040000002e011800050000000a0200000000050000000902000000020400
00000201010010000000320a4d0025fa0600000041647669736568005800500028005000500004000000020102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008007f87f040000002d01050004000000f0010100040000002e01180005
0000000a02000000000500000009020000000204000000020101000d000000320afa0079fa0400000053696e6b600028005800500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003cfe4e00ddfee60007000000fc02000000000002000004000000
2d01010004000000f0010300040000002d010200070000001804ff00f6fe660054fe050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff
000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400070000001804e600ddfe4e003cfe050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff0000080000009efc96003bfe9e00040000002d01020007000000fc020100000000000000040000002d01040004000000f001010004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d
01010004000000f0010500030000001e000700000016043e013bfef6ff9efc08000000fa0206000800000000000002040000002d0103000500000014029600c8ff050000001302960009fb040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff000008000000f6f811fe3afc00ff1c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008007f87f040000002d010300040000002e011800050000000a02000000000500000009020000000204000000020101
0013000000320ab0fe30f908000000436f6e73756d65726800580058005000580080005000380004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000067029ffd0c08300207000000fc020000000000020000040000002d010500090000001c0624012401
49022508b7fd7f02050000001402960009fb2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f0010500050000
00090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c062201220130020c089ffd6702050000001402960009fb0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008203d5fd4407800007000000fc0200000000
00020000040000002d01070004000000f0010600040000002d010200090000001c06aa00aa0099005d07edfd9a03050000001402960009fb2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd
000000ff00000077000000ff000000dd000000040000002d01060004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010500090000001c06a800a80080004407d5fd8203050000001402960009fb1c000000fb0270ff00000000
0000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01050004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320afbfec304040000004461746168005000300050000400000002
0102001c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008007f87f040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320aa8ff7f04060000004f62
6a65637470005800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003f01cefee00166ff07000000fc020000000000020000040000002d01050004000000f0010600040000002d0102000700000018047ffff901e6fe5701050000
001402960009fb2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f00105000500000009020000000205000000
0102ffffff0208000000fa0206000800000000000002040000002d01050004000000f001070007000000180466ffe001cefe3f01050000001402960009fb0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e10116ff7e031eff040000002d010200040000002d01040004
000000f001050004000000f0010600040000002d01010004000000f0010300030000001e00070000001604beff7e0376fee10108000000fa0206000800000000000002040000002d01030005000000140216ff4c0005000000130216ff0b05040000002d010200040000002d01040004000000f0010300040000002701ffff
0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009a03e1005e07d0011c000000fb0270ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000008007f87f040000002d010300040000002e011800050000000a0200
00000005000000090200000002040000000201010018000000320a8001d4030b0000004461746120536f75726365006800500030005000280060005800580038005000500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0fe9000680298000400
00002d010200040000002d010400040000002d01010004000000f0010300030000001e00070000001604fe3ffe3f01c00cff050000001402600260020500000014028f00d0fe08000000fa0206000100000000000002040000002d0103000500000013028f00d7fe0500000014028f00f0fe0500000013028f00f7fe050000
0014028f0010ff0500000013028f0017ff0500000014028f0030ff0500000013028f0037ff0500000014028f0050ff0500000013028f0057ff0500000014028f0070ff0500000013028f0077ff0500000014028f0090ff0500000013028f0097ff0500000014028f00b0ff0500000013028f00b7ff0500000014028f00d0ff
0500000013028f00d7ff0500000014028f00f0ff0500000013028f00f7ff0500000014028f0010000500000013028f0017000500000014028f0030000500000013028f0037000500000014028f0050000500000013028f0057000500000014028f0070000500000013028f0077000500000014028f0090000500000013028f
0097000500000014028f00b0000500000013028f00b7000500000014028f00d0000500000013028f00d7000500000014028f00f0000500000013028f00f7000500000014028f0010010500000013028f0017010500000014028f0030010500000013028f0037010500000014028f0050010500000013028f00570105000000
14028f0070010500000013028f0077010500000014028f0090010500000013028f0097010500000014028f00b0010500000013028f00b7010500000014028f00d0010500000013028f00d7010500000014028f00f0010500000013028f00f7010500000014028f0010020500000013028f0017020500000014028f00300205
00000013028f0037020500000014028f0050020500000013028f0057020500000014028f00d0fe040000002d010200040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300d1fe900046ffb30046ff6c000a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff0000080000001afd38fd8901f8fe08000000fa0206000800000000000002040000002d010500040000002d0104000b000000170803fe1afd84fe7601b0008a0138fdb8fc040000002d010300040000002d0102000a000000240303008501ddfe880160fe440172fe0a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080fe70fd8f005800040000002d010500040000002d0104000b0000001708540080fe92fd8d003803a80170fd80fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fd18ff
400120ff040000002d010200040000002d01040004000000f001050004000000f0010300030000001e00070000001604fe3ffc0001c001c0050000001402a8fda8fd05000000140217ffa8fd08000000fa0206000100000000000002040000002d01030005000000130217ffaffd05000000140217ffc8fd05000000130217
ffcffd05000000140217ffe8fd05000000130217ffeffd05000000140217ff08fe05000000130217ff0ffe05000000140217ff28fe05000000130217ff2ffe05000000140217ff48fe05000000130217ff4ffe05000000140217ff68fe05000000130217ff6ffe05000000140217ff88fe05000000130217ff8ffe05000000
140217ffa8fe05000000130217ffaffe05000000140217ffc8fe05000000130217ffcffe05000000140217ffe8fe05000000130217ffeffe05000000140217ff08ff05000000130217ff0fff05000000140217ff28ff05000000130217ff2fff05000000140217ff48ff05000000130217ff4fff05000000140217ff68ff05
000000130217ff6fff05000000140217ff88ff05000000130217ff8fff05000000140217ffa8ff05000000130217ffafff05000000140217ffc8ff05000000130217ffcfff05000000140217ffe8ff05000000130217ffefff05000000140217ff080005000000130217ff0f0005000000140217ff280005000000130217ff
2f0005000000140217ff480005000000130217ff4f0005000000140217ff680005000000130217ff6f0005000000140217ff880005000000130217ff8f0005000000140217ffa80005000000130217ffaf0005000000140217ffc80005000000130217ffcf0005000000140217ffe80005000000130217ffef000500000014
0217ff080105000000130217ff0f0105000000140217ff280105000000130217ff2f0105000000140217ff3801040000002d010200040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300380118ffc200f4fec2003bff0a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f6fda5fb880140fd1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d010500040000002e011800050000000a02000000000500000009
0200000002040000000201010021000000320a18fc68fe1100000043616c6c20746f2065737461626c6973680045003600150015001b001b0035001b00350030001b0035003600150015003000360004000000020102001c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f03
7884c577000000000c000000d01af87f040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010024000000320a8bfc30fe130000006e6f74696669636174696f6e2070617373657300350036001a0016001a001600300035001b001500360035001b
0035003500300030003600300004000000020102001c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201
010018000000320afefcc0fe0b0000004941647669736553696e6b6e1b00400035003000150030003600400015003600300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c3ff55ff3a020a001c000000fb02a0ff00000000000090010000000000
000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d01af87f040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320ac8fffdff0b00000049446174614f626a656374021b00450035001b0035004b003600
1500350030001b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b6fded002800a2011c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f040000002d0105
0004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a6001f0fd0b0000004941647669736553696e6b001b00400035003000150030003600400015003600300004000000020102000a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff000008000000eafe6000e003900208000000fa0206000800000000000002040000002d010600040000002d0104000b00000017086400e003c50125ff9002e00338fe8afe040000002d010300040000002d0102000a00000024030300eefe7f0125ffef0159ffc1010a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff00000800000011ff8d02cd0228041c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d006f87f040000002d01070004000000f0010500040000002e011800050000000a020000000005000000
090200000002040000000201010018000000320a0003e8ff0b0000004461746120736f7572636500450036001a0036001a0030003600350020003000360004000000020102001c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00af87f04
0000002d01050004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a73034bff140000006e6f746966696573204941647669736553696e6b350036001a0016001a001600350030001b001b0040003500300015003000360040001500350030000400
0000020102001c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d006f87f040000002d01070004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320ae60388ff0f0000
006f6e2064617461206368616e67657300350036001a00360035001b0035001b00300035003600350036003500300004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a000000
26060f000a00ffffffff010000000000040000002d010200040000002d01040004000000f001060004000000f0010300040000002d01010004000000f0010700030000000000040000002d01010004000000f0010400050000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 2-14: A consumer of data implements an object with the {\i IAdviseSink }interface\line through which data objects notify that consumer of data changes.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This is the most frequent situation where a client of one object, in this case the consumer, will itself imple
ment an object to which the data object acts as a client itself. Notice that there are no circular reference counts here: the consumer object and the advise sink have different COM object identities, and thus separate reference count
s. When the data object needs to notify the consumer, it simply calls the appropriate member function of {\cs58\f5\fs16\lang1024 IAdviseSink}{\i .}
\par So {\cs58\f5\fs16\lang1024 IAdviseSink }is more of a central collection of notifications of interest to a number of other interfaces and scenarios outside of {\cs58\f5\fs16\lang1024 IDataObject }
and data exchange. It contains, for example, a function for the event of a \lquote view\rquote 
 change, that is, when a particular view of data changes without a change in the underlying data. In addition, it contains functions for knowing when an object has save
d itself, closed, or been renamed. All of these other notifications are of particular use in compound document scenarios and are used in OLE, but not COM proper. Chapter 14 will describe these functions but the mechanisms by which they are called are not 
part of COM and are not covered in this specification. Interested readers should refer to the OLE 2 Specifications from Microsoft.
\par Finally, data objects can establish notifications with multiple advise sinks. COM provides some assistance for data objects to manage an arbitrary number of {\cs58\f5\fs16\lang1024 IAdviseSink}
 pointers through which the data object can pass each pointer to COM and then tell COM when to send notifications. COM in turn notifies all the advise sinks it maintains on behalf of the data object.
\par 
\par \sect \sectd \sbknone\linex0\endnhere {\*\bkmkstart _Toc339182937}{\pntext\pard\plain\b\fs28 3.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 
Objects And Interfaces{\*\bkmkend _Toc339182937}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This chapter describes in detail the heart of COM: the notion of interfaces and their relationships to the ob
jects on which they are implemented. More specifically, this chapter covers what an interface is (technically), interface calling conventions, object and interface identity, the fundamental interface called {\cs58\f5\fs16\lang1024 IUnknown}, and COM
\rquote s error reporting mechanism. In addition, this chapter describes how an object implements one or more interfaces as well as a special type of object called the \ldblquote enumerator\rdblquote  which comes up in various contexts in COM.
\par As described in Chapters 1 and 2, the COM Library provides the fundamental implementation locator services to clients and provides all the necessary glue to help clients communicate transparently with object re
gardless of where those objects execute: in-process, out-of-process, or on a different machine entirely. All servers expose their object\rquote s services through interfaces, and COM provides implementations of the \ldblquote proxy\rdblquote  and 
\ldblquote stub\rdblquote  objects that make communication possible between processes and machines where RPC is necessary.
\par However, as we\rquote ll see in this chapter and those that follow, the COM Library also provides fundamental API functions for both clients and servers or, in general, any piece of 
code that uses COM, application or not. These API functions will be described in the context of where other applications or DLLs use them. A COM implementor reading this document will find the specifications for each function offset clearly from the rest 
of the text. These functions are implemented in the COM Library to standardize the parts of this specification that applications should not have to implement nor would want to implement. Through the services of the COM Library, all clients can make use of
 all objects in all servers, and all servers can expose their objects to all clients. Only by having a standard is this possible, and the COM Library enforces that standard by doing most of the hard work.
\par Not all the COM Library functions are truly fundamental. Some are just convenient wrappers to common sequences of other calls, sometimes called \ldblquote helper functions.\rdblquote 
 Others exist simply to maintain global lists for the sake of all applications. Others just provide a solid implementation of functions that could be implemented in every application, but would be tedious and wasteful to do so.
\par {\*\bkmkstart _Toc324051566}{\*\bkmkstart _Toc324051751}{\*\bkmkstart _Toc324051993}{\*\bkmkstart _Toc339182938}{\pntext\pard\plain\b 3.1\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2
\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Interfaces{\*\bkmkend _Toc324051566}{\*\bkmkend _Toc324051751}{\*\bkmkend _Toc324051993}{\*\bkmkend _Toc339182938}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
An interface, in the COM definition, is a contract between the user, or client, of some object and the object itself. It is a promise on the part of the object to provide a certain level of service, of functionality, to that client. Chapters 1 and 2 have 
already explained why interfaces are important COM and the whole idea of an object model. This chapter will now fill out the definition of an interface on the technical side.
\par {\*\bkmkstart _Toc324051567}{\*\bkmkstart _Toc324051752}{\*\bkmkstart _Toc324051994}{\pntext\pard\plain\b\i\fs22 3.1.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
The Interface Binary Standard{\*\bkmkend _Toc324051567}{\*\bkmkend _Toc324051752}{\*\bkmkend _Toc324051994}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Technically speaking, an interface is some data structure that sits between the client\rquote s code and the object\rquote s implementation through which the client requests the object\rquote 
s services. The interface in this sense is nothing more than a set of member functio
ns that the client can call to access that object implementation. Those member functions are exposed outside the object implementor application such that clients, local or remote, can call those functions.
\par The client maintains a pointer to the interface which is, in actuality, a pointer to a pointer to an array of pointers to the object\rquote s implementations of the interface member functions. That\rquote s a lot of pointers; to clar
ify matters, the structure is illustrated in Figure 3-1.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw22013\pich5080\picwgoal12480\pichgoal2880 \picscalex50\picscaley50 
010009000003970a000008003100000000000e00000026060f001200ffffffff00000800000092f576fc1209f6000a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0276fc92f5050000000c028004801331000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000091f578fc0009e8000e00000026060f001200ffffffff00000800000001fa3dfd20fc18fe07000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200070000001b0429fe31fc4dfd11fa050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff00
0000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100070000001b0418fe20fc3dfd01fa050000001402000000000a00000026060f000a00ffffffff0100000000000e
00000026060f001200ffffffff00000800000091f54dfdc8f8f8fd07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200070000001b0409fed9f85dfda1f5050000001402000000002d00000042010500000028000000080000000800000001000100000000002000000000000000
00000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100070000001b04f8
fdc8f84dfd91f5050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000069fd2dfdb801800007000000fc020000000000020000040000002d01010004000000f0010300040000002d010200070000001b049100c9013dfd79fd05000000140200000000
2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208
000000fa0206000800000000000002040000002d01010004000000f0010400070000001b048000b8012dfd69fd050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000045fa58fde7fb0dfe1c000000fb02a0ff00000000000090010000000000000000
417269616c000f0300ed4e0338f70f037884c577000000000c0000002006f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010012000000320acbfd7ffa07000000706f696e7465720035003600150036001a003600200004000000020102000a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006ffd03feae010bfe040000002d01020007000000fc020100000000000000040000002d01050004000000f001010004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f
4603000000000000957fc5773002f87f040000002d01010004000000f0010400030000001e00070000001604abfeae0163fd6ffd08000000fa0206000800000000000002040000002d01030005000000140203fe38f905000000130203fedd05040000002d010200040000002d01050004000000f0010300040000002701ff
ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003dfd80fcc40135fd1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000002006f87f040000002d010300040000002e011800050000000a02
000000000500000009020000000204000000020101002b000000320af3fc77fd18000000496e746572666163652046756e6374696f6e205461626c651b0035001b00350020001b003500300036001a003b003500360030001a001600350035001b003b00350036001500350004000000020102000a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff00000800000095f550fdd1f805fe1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01040004000000f0010300040000002e011800050000000a0200000000
05000000090200000002040000000201010021000000320ac3fdcff511000000496e7465726661636520506f696e746572001b0035001b00350020001b003500300036001a0040003600150035001b003500200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
00080000006ffddbfeae01e3fe040000002d010200040000002d010500040000002d01010004000000f0010400030000001e0007000000160483ffae013bfe6ffd08000000fa0206000800000000000002040000002d010300050000001402dbfe38f9050000001302dbfedd05040000002d010200040000002d0105000400
0000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006ffdb3ffae01bbff040000002d010200040000002d010500030000001e000700000016045b00ae0113ff6ffd08000000fa0206000800000000000002040000002d0103000500000014
02b3ff38f9050000001302b3ffdd05040000002d010200040000002d01050004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007dfd48fd5401fdfd1c000000fb02a0ff00000000000090010000000000000000417269616c000f03
00ed4e0338f70f037884c577000000000c000000d00ef87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010025000000320abbfdb7fd14000000506f696e74657220746f2046756e6374696f6e3140003500160035001b00350020001b001b0035001b003a0036
00350030001b00150035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000700378fc0009e80007000000fc020000000000020000040000002d010400090000001c06db01db01f900110988fc8003050000001402b3ffdd052d0000004201
050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff0208000000fa0206
000800000000000002040000002d010400090000001c06d801d801e800000978fc7003050000001402b3ffdd051c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000002017f87f040000002d01070004000000f0010300040000002e0118000500
00000a020000000005000000090200000002040000000201010027000000320a8bfed903150000004f626a65637420496d706c656d656e746174696f6e00570045001f003e003e0026001f001f00630045001f003e0064003e00440026003e0025001f004500440004000000020102001c000000fb0290ff000000000000bc
020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000d00ef87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010028000000320a11fffa03160000006f6620696e746572666163652066756e6374696f
6e73440026001f001f00440026003e002c0025003e003e003f001f002500450044003e0026001f00440044003f0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007dfd28fe5401ddfe1c000000fb02a0ff0000000000009001000000000000000041
7269616c000f0300ed4e0338f70f037884c577000000000c0000002017f87f040000002d01070004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a9bfeb7fd14000000506f696e74657220746f2046756e6374696f6e3240003500160035001b00
350020001b001b0035001b003a003600350030001b00150035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007dfdf8fe5401adff1c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f0378
84c577000000000c000000d00ef87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a6bffb7fd14000000506f696e74657220746f2046756e6374696f6e3340003500160035001b00350020001b001b0035001b003a003600
350030001b00150035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000015ffc8ffe1ff7d001c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000002017f87f04
0000002d01070004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a3b004fff030000002e2e2e001b001a001b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000018fcb0fd
70fdb8fd040000002d010200040000002d01050004000000f001040004000000f0010600040000002d01010004000000f0010700030000001e0007000000160458fe2cfd10fd18fc08000000fa0206000800000000000002040000002d010300050000001402b0fdc8fa050000001302b0fdb8fe040000002d010200040000
002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030068fdb0fdf1fc8cfdf1fcd3fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c8f8b8fd10fac0fd040000002d010200040000002d010500
04000000f0010300030000001e0007000000160460feccf918fdc8f808000000fa0206000800000000000002040000002d010300050000001402b8fd88f7050000001302b8fd48fb040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a
0000002403030008fab8fd90f994fd90f9dbfd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c801a8fd7803b0fd040000002d010200040000002d01050004000000f0010300030000001e0007000000160450fe340308fdc80108000000fa0206000800000000000002
040000002d010300050000001402a8fd2000050000001302a8fd1805040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303007003a8fdf90284fdf902cbfd0a00000026060f000a00ffffffff0100000000000e00000026
060f001200ffffffff000008000000c80168fe780370fe040000002d010200040000002d01050004000000f0010300030000001e0007000000160410ff3403c8fdc80108000000fa0206000800000000000002040000002d01030005000000140268fe200005000000130268fe1805040000002d010200040000002d010500
04000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300700368fef90244fef9028bfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c00140ff700348ff040000002d010200040000002d01050004000000f0
010300030000001e00070000001604e8ff2c03a0fec00108000000fa0206000800000000000002040000002d01030005000000140240ff180005000000130240ff1005040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403
0300680340fff1021cfff10263ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c001100070031800040000002d010200040000002d01050004000000f0010300030000001e00070000001604b8002c0370ffc00108000000fa0206000800000000000002040000002d
0103000500000014021000180005000000130210001005040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030068031000f102ecfff10233000a00000026060f000a00ffffffff0100000000000a00000026060f000a00
ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f0010300030000000000000000004031df1900000c311434dc020c3100}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 3-1: The interface structure: a client has a pointer to an interface which is\line a pointer to a pointer to an array (table) of pointers to the object\rquote s implementation.
\par \pard\plain \qj\sa60\widctlpar\tx10170 \f4\fs20 By convention the pointer to the interface function table is called the {\cs58\f5\fs16\lang1024 pVtbl }pointer. The table itself is generally referred to with the name {\cs58\f5\fs16\lang1024 vtbl} for 
\ldblquote virtual function table.\rdblquote 
\par \pard \qj\sa60\widctlpar On a given implementation platform, a given method in a given interface (a particular IID, that is) has a fixed calling convention; this is decoupled from the implementation of the interface. In principle, this deci
sion can be made on a method by method basis, though in practice on a given platform virtually all methods in all interfaces use the same calling convention. On Microsoft\rquote s 16-bit Windows platform, this default is the {\cs58\f5\fs16\lang1024 
__far __cdecl }calling convention; on Win32 platforms, the {\cs58\f5\fs16\lang1024 __stdcall }calling convention is the default for methods which do not take a variable number of arguments, and {\cs58\f5\fs16\lang1024 __cdecl }is used for those that do.

\par In contrast, just for note, COM API functions (not interface members) use the standard host system-call calling convention, which on both Microsoft Win16 and Win32 is the {\cs58\f5\fs16\lang1024 __far __pascal }sequence.
\par Finally, and quite significantly, {\b\i all strings passed through all COM interfaces} (and, at least on Microsoft platforms, all COM APIs) {\b\i are Unicode}{\pard\plain \qj\sa60\widctlpar \b\v\f4\fs12 {\xe {\b\fs12 Unicode}}}{\b\i  strings}
. There simply is no other reasonable way to get interoperable objects in the face of (i) location transparency, and (ii) a high-efficiency object architecture that doesn\rquote 
t in all cases intervene system-provided code between client and server. Further, this burden is in practice not large.
\par \pard \qj\sa60\widctlpar\tx10170 When calling member functions, the caller must include an argument which is the pointer to the object in
stance itself. This is automatically provided in C++ compilers and completely hidden from the caller. The Microsoft Object Mapping{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } The 
\ldblquote Microsoft Object Mapping\rdblquote 
 is an open specification describing the detailed layout of C++ objects. It is supported by the MS C/C++ compiler, as well as C++ compilers from other vendors including Borland, Symantec, Watcom, , and others. This is also t
he location of the this pointer as placed by CFront when using the traditional right-to-left {\cs58\f5\lang1024 __cdecl }calling sequence. Thus, we achieve a large degree of interoperability.}}
 specifies that this pointer is pushed very last, immediately before the return address. The location of this pointer is the reason that the {\cs58\f5\fs16\lang1024 pIInterface}{\i  }pointer appears at the {\i beginning}
 of the argument list of the equivalent C function prototype: it means that the layout in the stack of the parameters to the C function prototype is exactly that expected by the member function implemented in C++, and so no re-ordering is required.
\par Usually the pointer to the interface itself is the pointer to the entire object structure (state variables, or whatever) and that structure immediately follows{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar 
\f4\fs16 {\cs38\super \chftn } \tab Usually this data {\i follows }the {\cs58\f5\lang1024 pVtbl }
pointer, but this is not required. It is perfectly legal for object-specific data to precede the vtbl pointer, and this in fact will be common with many C++ compilers.}} the {\cs58\f5\fs16\lang1024 pVtbl}{\i  }pointer memory as shown in Figure 3-2.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw22013\pich5106\picwgoal12480\pichgoal2895 \picscalex50\picscaley50 
010009000003190c000008003100000000000e00000026060f001200ffffffff00000800000040f62802c009ae060a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02280240f6050000000c028604801331000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000041f62802b009a0060e00000026060f001200ffffffff000008000000b1faed02d0fcc80307000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200070000001b04d903e1fcfd02c1fa050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff00
0000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100070000001b04c803d0fced02b1fa050000001402000000000a00000026060f000a00ffffffff0100000000000e
00000026060f001200ffffffff00000800000041f6fd0278f9a80307000000fc020000000000020000040000002d01040004000000f0010300040000002d010200070000001b04b90389f90d0351f6050000001402000000002d00000042010500000028000000080000000800000001000100000000002000000000000000
00000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100070000001b04a8
0378f9fd0241f6050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000019fedd026802300607000000fc020000000000020000040000002d01010004000000f0010300040000002d010200070000001b0441067902ed0229fe05000000140200000000
2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208
000000fa0206000800000000000002040000002d01010004000000f0010400070000001b0430066802dd0219fe050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ddfafa02bdfcd6031c000000fb0280ff000000000000bc02ff00000000000022
417269616c000f0300ed4e0338f70f037884c577000000000c000000100ef87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a8b0317fb060000006c705674626c24004e0055002b004e00240004000000020102000a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff0000080000001ffeb3035e02bb03040000002d01020007000000fc020100000000000000040000002d01050004000000f001010004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d000300ed4e033002f87f46030000
00000000957fc5773002f87f040000002d01010004000000f0010400030000001e000700000016045b045e0213031ffe08000000fa0206000800000000000002040000002d010300050000001402b303e8f9050000001302b3038d06040000002d010200040000002d01050004000000f0010300040000002701ffff0a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000edfd30027402e5021c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000100ef87f040000002d010300040000002e011800050000000a0200000000
0500000009020000000204000000020101002b000000320aa30227fe18000000496e746572666163652046756e6374696f6e205461626c651b0035001b00350020001b003500300036001a003b003500360030001a001600350035001b003b00350036001500350004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff00000800000045f6000381f9b5031c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01040004000000f0010300040000002e011800050000000a020000000005000000
090200000002040000000201010021000000320a73037ff611000000496e7465726661636520506f696e746572001b0035001b00350020001b003500300036001a0040003600150035001b003500200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000
001ffe8b045e029304040000002d010200040000002d010500040000002d01010004000000f0010400030000001e0007000000160433055e02eb031ffe08000000fa0206000800000000000002040000002d0103000500000014028b04e8f90500000013028b048d06040000002d010200040000002d01050004000000f001
0300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001ffe63055e026b05040000002d010200040000002d010500030000001e000700000016040b065e02c3041ffe08000000fa0206000800000000000002040000002d0103000500000014026305e8
f905000000130263058d06040000002d010200040000002d01050004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002dfef8020402ad031c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e03
38f70f037884c577000000000c000000c015f87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a6b0367fe14000000506f696e74657220746f2046756e6374696f6e3140003500160035001b00350020001b001b0035001b003a003600350030
001b00150035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020042802b009980607000000fc020000000000020000040000002d010400090000001c06db01db01a906c1093802300405000000140263058d062d000000420105000000
2800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff0208000000fa020600080000
0000000002040000002d010400090000001c06d801d8019806b0092802200405000000140263058d061c000000fb0290ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a015f87f040000002d01070004000000f0010300040000002e011800050000000a02
0000000005000000090200000002040000000201010027000000320a3b048904150000004f626a65637420496d706c656d656e746174696f6e00570045001f003e003e0026001f001f00630045001f003e0064003e00440026003e0025001f004500440004000000020102001c000000fb0290ff000000000000bc02000000
0000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010028000000320ac104aa04160000006f6620696e746572666163652066756e6374696f6e734400
26001f001f00440026003e002c0025003e003e003f001f002500450044003e0026001f00440044003f0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002dfed80304028d041c000000fb02a0ff00000000000090010000000000000000417269616c
000f0300ed4e0338f70f037884c577000000000c000000a015f87f040000002d01070004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a4b0467fe14000000506f696e74657220746f2046756e6374696f6e3240003500160035001b0035002000
1b001b0035001b003a003600350030001b00150035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002dfea80404025d051c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c57700
0000000c000000c015f87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010025000000320a1b0567fe14000000506f696e74657220746f2046756e6374696f6e3340003500160035001b00350020001b001b0035001b003a00360035003000
1b00150035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c5ff780591002d061c000000fb02a0ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000a015f87f040000002d
01070004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320aeb05ffff030000002e2e2e001b001a001b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c8fc600320fe6803
040000002d010200040000002d01050004000000f001040004000000f0010600040000002d01010004000000f0010700030000001e000700000016040804dcfdc002c8fc08000000fa0206000800000000000002040000002d010300050000001402600378fb050000001302600368ff040000002d010200040000002d0105
0004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030018fe6003a1fd3c03a1fd83030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000078f96803c0fa7003040000002d010200040000002d01050004000000
f0010300030000001e0007000000160410047cfac80278f908000000fa0206000800000000000002040000002d010300050000001402680338f80500000013026803f8fb040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024
030300b8fa680340fa440340fa8b030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007802580328046003040000002d010200040000002d01050004000000f0010300030000001e000700000016040004e403b802780208000000fa020600080000000000000204000000
2d0103000500000014025803d0000500000013025803c805040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030020045803a9033403a9037b030a00000026060f000a00ffffffff0100000000000e00000026060f0012
00ffffffff0000080000007802180428042004040000002d010200040000002d01050004000000f0010300030000001e00070000001604c004e4037803780208000000fa0206000800000000000002040000002d0103000500000014021804d0000500000013021804c805040000002d010200040000002d01050004000000
f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030020041804a903f403a9033b040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007002f0042004f804040000002d010200040000002d01050004000000f001030003
0000001e000700000016049805dc035004700208000000fa0206000800000000000002040000002d010300050000001402f004c800050000001302f004c005040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303001804
f004a103cc04a10313050a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007002c0052004c805040000002d010200040000002d01050004000000f0010300030000001e000700000016046806dc032005700208000000fa0206000800000000000002040000002d01030005
0000001402c005c800050000001302c005c005040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303001804c005a1039c05a103e3050a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff
000008000000b1fabd03d0fca00607000000fc020000000000020000040000002d01040004000000f0010300070000001b04b106e1fccd03c1fa050000001402c005c0052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff
00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400070000001b04a006d0fcbd03b1fa050000001402c005c0050a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff000008000000bcfa2a04c6fc3a061c000000fb0280ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000100ef87f040000002d010600040000002e011800050000000a0200000000050000000902000000
02040000000201010010000000320abb04f6fa060000004f626a65637464004e002300480047002a0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000c015f87f040000002d01070004000000f0010600040000002e01
1800050000000a02000000000500000009020000000204000000020101000f000000320a550520fb0500000053746174650055002b0047002b00470004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000100ef87f040000
002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320aef0532fb04000000446174615c0048002a00470004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e000000
26060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f001040004000000f0010300040000002d01010004000000f0010600030000000000000000000000470100004801000000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 3-2: Convention places object data following the pointer\line to the interface function table.
\par \pard\plain \qj\sa60\widctlpar\tx10170 \f4\fs20 Since the {\cs58\f5\fs16\lang1024 pVtbl} is received as the {\cs58\f5\fs16\lang1024 this} pointer in the interface function, the implementor of that function knows which object is being called\emdash 
an object is, after all, some structure and functions to manipulate that structure, and the interface definition here supplies both.
\par In any case, this \ldblquote {\cs58\f5\fs16\lang1024 vtbl}\rdblquote  structure is called a binary standard because on the binary level, the structure is completely determined by the 
particular interface being used and the platform on which it is being invoked. It is independent of the programming language or tool used to create it. In other words, a program can be written in C to generate this structure to match what C++ does automat
ically. For more details, see the section \ldblquote C vs. C++\rdblquote 
 below. You could even create this structure in assembly if so inclined. Since compilers for other languages eventually reduce source code to assembly (as is the compiler itself) it is really a matter for com
piler vendors to support this structure for languages such as Pascal, COBOL, Smalltalk, etc. Thus COM clients, objects, and servers can be written in any languages with appropriate compiler support.
\par Note that it is technically legal for the binary calling conventions for a given interface to vary according the particular implementation platform in question, though this flexibility should be exercised by COM system implementors only with very careful 
attention to source portability issues. It is the case, for example, that on the Macintosh, the {\cs58\f5\fs16\lang1024 pVtbl }pointer does not point to the first function in the {\cs58\f5\fs16\lang1024 vtbl}
, but rather to a dummy pointer slot (which is ignored) immediately before the first function; all the function pointers are thus offset by an index of one in the {\cs58\f5\fs16\lang1024 vtbl}.
\par An interface implementor is free to use the memory before and beyond the \ldblquote as-specified-by-the-standard\rdblquote  {\cs58\f5\fs16\lang1024 vtbl }for whatever purpose he may wish; others cannot assume anything about such memory.
\par {\*\bkmkstart _Toc324051568}{\*\bkmkstart _Toc324051753}{\*\bkmkstart _Toc324051995}{\pntext\pard\plain\b\i\fs22 3.1.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Interface Definition and Identity{\*\bkmkend _Toc324051568}{\*\bkmkend _Toc324051753}{\*\bkmkend _Toc324051995}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Every interface has a name that serves as the programmatic compile-time type in code that uses that inter
face (either as a client or as an object implementor). The convention is to name each interface with a capital \ldblquote I\rdblquote  followed by some descriptive label that indicates what functionality the interface encompasses. For example, {
\cs58\f5\fs16\lang1024 IUnknown}{\i  }is the label of the interface that represents the functionality of an object when all else about that object is unknown.
\par These programmatic types are defined in header files provided by the designer of the interface through use of the Interface Description Language (IDL, see next section). For C++, an interface is defined as an ab
stract base, that is, a structure containing nothing but \ldblquote pure virtual\rdblquote  member functions. This specification uses C++ {\i notation }to express the declaration of an interface. For example, the {\cs58\f5\fs16\lang1024 IUnknown}{\i  }
interface is declared as:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IUnknown}
\par \tab \{
\par \tab virtual HRESULT\tab {\b QueryInterface}(IID& iid, void** ppv) =0;
\par \tab virtual ULONG\tab \tab {\b AddRef}(void) =0;
\par \tab virtual ULONG\tab \tab {\b Release}(void) =0;
\par \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 where \ldblquote {\cs58\f5\fs16\lang1024 virtual}\rdblquote  and \ldblquote ={\cs58\f5\fs16\lang1024 0\rdblquote } describe the attribute of a \ldblquote pure virtual\rdblquote  function and where the{
\cs58\f5\fs16\lang1024  interface} keyword{\pard\plain \s44\qj\sb60\sa58\widctlpar \v\f4\fs12 {\xe {\fs12 \ldblquote interface\:definition\rdblquote }}} is defined as:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 #define    interface    struct

\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The programmatic name and definition of an interface defines a type such that an application can declare a pointer to an interface using standard C++ syntax as in {\cs58\f5\fs16\lang1024 IUnknown *.}
\par \pard\plain \qj\sa60\widctlpar\tx10170 \f4\fs20 In addition, this specification as a notation makes some use of the C++ reference mechanism in parameter passing, for example:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 QueryInterfa
ce(const IID& iid, void**ppv);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Usually \ldblquote const <type>&\rdblquote  is written as \ldblquote {\cs58\f5\fs16\lang1024 REF<type>}\rdblquote 
 as in REFIID for convenience. As you might expect, this example would appear in a C version of the interface as a parameter of type:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 const IID * const
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Input parameters passed by reference will themselves be {\cs58\f5\fs16\lang1024 const}, as shown here. In-out or out- parameters will not.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The use of the {\cs58\f5\fs16\lang1024 interface}{\i  }keyword is more a documentation technique than any requirement for implementation. An interface, as a binary standard, is definable in any pr
ogramming language as shown in the previous section. This specification\rquote s use of C++ syntax is just a convenience.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
And, indeed, this syntax will at times be somewhat abused.}} Also, for ease of reading, this speci
fication generally omits parameter types in code fragments such as this but does document those parameters and types fully with each member function. Types do, of course, appear in header files with interfaces.
\par It is very important to note that the programmatic name for an interface is only a {\i compile-time }type used in application source code. Each interface must also have a {\i run-time} identifier. This identifier enables a caller to query (via {
\cs58\f5\fs16\lang1024 QueryInterface}){\i  }an object for a desired interface. Interface identifiers are {\cs58\f5\fs16\lang1024 GUIDs}, that is, globally-unique 16 byte values, of type {\cs58\f5\fs16\lang1024 IID}
. The person who defines the interface allocates and assigns the {\cs58\f5\fs16\lang1024 IID }as with any other {\cs58\f5\fs16\lang1024 GUID,}
 and he informs others of his choice at the same time he informs them of the interface member functions, semantics, etc. Use of a {\cs58\f5\fs16\lang1024 GUID }for this purpose guarantees that the {\cs58\f5\fs16\lang1024 IID }
will be unique in all programs, on all machines, for all time, the run-time identifier for a given interface will in fact have the same 16 byte value.
\par Programmers who define interfaces convey the interface identifier to implementors or clients of that interface along with the other information about the interface (in the form of header files, accompanying seman
tic documentation, etc.). To make application source code independent of the representation of particular 
interface identifiers, it is standard practice that the header file defines a constant for each IID where the symbol is the name of the interface prefixed with {\cs58\f5\fs16\lang1024 \ldblquote IID_\rdblquote }
 such that the name can be derived algorithmically. For example, the interface {\cs58\f5\fs16\lang1024 IUnknown} has an identifier called {\cs58\f5\fs16\lang1024 IID_IUnknown}.
\par \pard \qj\sa60\widctlpar\tx10170 For brevity in this specification, this definition will not be repeated with each interface, though of course it is present in the COM implementation.
\par {\*\bkmkstart _Toc324051569}{\*\bkmkstart _Toc324051754}{\*\bkmkstart _Toc324051996}{\pntext\pard\plain\b\i\fs22 3.1.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Defining Interfaces: IDL{\*\bkmkend _Toc324051569}{\*\bkmkend _Toc324051754}{\*\bkmkend _Toc324051996}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The Interface Description Language (
IDL) is based on the Open Software Foundation (OSF) Distributed Computing Environment (DCE) specification for describing interfaces, operations, and attributes to define remote procedure calls. COM extends the IDL to support distributed objects.
\par A designer can define a new custom interface by writing an interface definition file. The interface definition file uses the IDL to describe data types and member functions of an interface. The interface definition file contains the information that defin
es the actual contract between the client application and server object. The interface contract specifies three things:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 {\i Language binding\emdash }
defines the programming model exposed to the application program using a particular programming language.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\i Application binary interface}\emdash specifies how consumers and providers of the interface interoperate on a particular target platform.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\i Network interface\emdash }defines how client applications access remote server objects via the network.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 After completing the interface definition file, the programmer runs the IDL compiler to generate the inter
face header and the source code necessary to build the interface proxy and interface stub that the interface definition file describes. The interface header file is made available so client applications can use the inter
face. The interface proxy and interface stub are used to construct the proxy and stub DLLs. The DLL containing the interface proxy must be distributed with all client applications that use the new interface. The DLL containing the in
terface stub must be distributed with all server objects that provide the new interface.
\par It is important to note that the IDL is a tool that makes the job of defining interfaces easier for the programmer, and is one of possibly many such tools. It is not the key to COM interoperability. COM compli
ance does not require that the IDL compiler be used. However, as IDL is broadly understood and used, it provides a convenient means by which interface specifications can be conveyed to other programmers.
\par {\*\bkmkstart _Toc324051570}{\*\bkmkstart _Toc324051755}{\*\bkmkstart _Toc324051997}{\pntext\pard\plain\b\i\fs22 3.1.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 C v
s. C++ vs. ...{\*\bkmkend _Toc324051570}{\*\bkmkend _Toc324051755}{\*\bkmkend _Toc324051997}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This specification documents COM interfaces using C++ syntax as a notation but (again) does not mean COM requires that programmers use C++, or any other particular language. COM is based on a {\i binary }in
teroperability standard, rather than a {\i language} interoperability standard. Any language supporting \ldblquote structure\rdblquote  or \ldblquote record\rdblquote  types containing double-indirected access to a table of function pointers is suitable.

\par However, this is not to say all languages are created equal. It is certainly true that since the binary vtbl standard is exactly what most C++ compilers generate on PC and many RISC platforms, C++ is a {\i convenient}
 language to use over a language such as C.
\par \pard \qj\sa60\keepn\widctlpar That being said, COM can declare interface declarations for both C++ and C (and for other languages if the COM implementor desires). The C++ definition of an interface, which in general is of the form:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface ISomeInterface{\b 
\par }\tab \{
\par \tab virtual RET_T  MemberFunction(ARG1_T arg1, ARG2_T arg2{\i\f4  /*, etc */});
\par \tab [Other member functions]
\par \tab ...
\par \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 then the corresponding C declaration of that interface looks like
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef struct ISomeInterface{\b 

\par \tab }\{
\par \tab ISomeInterfaceVtbl *  pVtbl;
\par \tab \} ISomeInterface;
\par 
\par typedef struct ISomeInterfaceVtbl ISomeInterfaceVtbl{\b ;}
\par 
\par struct ISomeInterfaceVtbl{\b 
\par \tab }\{
\par \tab RET_T (*MemberFunction)(ISomeInterface * this, ARG1_T arg1,
\par \tab \tab ARG2_T arg2{\i\f4  /*, etc */});
\par \tab [Other member functions]
\par \tab \} ;
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 This example also illustrates the algorithm for determining the signature of C form of an interface function given the corresponding C++ form of the interface function:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 
Use the same argument list as that of the member function, but add an initial parameter which is the pointer to the interface. This initial parameter is a pointer to a C type of the same name as the interface.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Define a structure type which is a table of function pointers corresponding to the vtbl layout of the interface.  The name of this structure type should be the name of the interface followed by \ldblquote Vtbl.
\rdblquote  Members in this structure have the same names as the member functions of the interface.
\par \pard\plain \qj\sa60\widctlpar\tx10170 \f4\fs20 
The C form of interfaces, when instantiated, generates exactly the same binary structure as a C++ interface does when some C++ class inherits the function signatures (but no implementation) from an interface and overrides each virtual function.
\par These structures show why C++ is more convenient for the object implementor because C++ will automati
cally generate the vtbl and the object structure pointing to it in the course of instantiating an object. A C object implementor must define and object structure with the {\cs58\f5\fs16\lang1024 pVtbl}{\i  }
field first, explicitly allocate both object structure and interface {\cs58\f5\fs16\lang1024 Vtbl }structure, explicitly fill in the fields of the {\cs58\f5\fs16\lang1024 Vtbl} structure, and explicitly point the {\cs58\f5\fs16\lang1024 pVtbl}
 field in the object structure to the {\cs58\f5\fs16\lang1024 Vtbl} structure. Filling the {\cs58\f5\fs16\lang1024 Vtbl}
 structure need only occur once in an application which then simplifies later object allocations. In any case, once the C program has done this explicit work the binary structure is indistinguishable from what C++ would generate.
\par On the client side of the picture there is also a small difference between using C and C++. Suppose the client application has a pointer to an {\cs58\f5\fs16\lang1024 ISomeInterface} on some object in the variable {\i psome}. If the client is com
piled using C++, then the following line of code would call a member function in the interface:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
psome->MemberFunction(arg1, arg2, /* other parameters */);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 A C++ compiler, upon noting that the type of {\cs58\f5\fs16\lang1024 psome}{\i  }is an {\cs58\f5\fs16\lang1024 ISomeInterface *} will know to actually perform the double indirection through the hidden {
\cs58\f5\fs16\lang1024 pVtbl} pointer and will remember to push the {\cs58\f5\fs16\lang1024 psome} pointer itself on the stack so the implementation of {\cs58\f5\fs16\lang1024 MemberFunction}{\i  }
knows which object to work with. This is, in fact, what C++ compilers do for any member function call; C++ programmers just never see it.
\par \pard\plain \qj\sa60\widctlpar\tx10170 \f4\fs20 What C++ actually does is be expressed in C as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
psome->lpVtbl->MemberFunction(psome, arg1, arg2, /* other parameters */);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 This is, in fact, how a client written in C would make the same call. These two lines of code show why C++ is more convenient\emdash 
there is simply less typing and therefore fewer chances to make mistakes. The resulting source code is somewhat cleaner as well. The key point to remember, however, is that {\i 
how the client calls an interface member depends solely on the language used to implement the client and is completely unrelated to the language used to implement the object}
. The code shown above to call an interface function is the code necessary to work with the interface binary standard and not the object itself.
\par {\*\bkmkstart _Toc324051571}{\*\bkmkstart _Toc324051756}{\*\bkmkstart _Toc324051998}{\pntext\pard\plain\b\i\fs22 3.1.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Remoting Magic Through Vtbls{\*\bkmkend _Toc324051571}{\*\bkmkend _Toc324051756}{\*\bkmkend _Toc324051998}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The double indirection of the {\i vtbl}
 structure has an additional, indeed enormous, benefit: the pointers in the table of function pointers do not need to point directly to the real implementation in the real object. This is the heart of Location Transparency.
\par It is true that in the in-process server case, where the object is loaded directly into the client process, the function pointers in the table are, in fact, the actual pointers to the actual implementation. So a function call from the clie
nt to an interface member directly transfers execution control to the interface member function.
\par However, this cannot possibly work for local, let alone remote, object, because pointers to memory are ab
solutely not sharable between processes. What must still happen to achieve transparency is that the client continues to call interface member functions {\i as if it were calling the actual implementation}
. In other words, the client uniformly transfers control to some object\rquote s member function by making the call.
\par \pard\plain \s40\qc\li360\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw24288\pich14763\picwgoal13770\pichgoal8370 \picscalex60\picscaley60 
010009000003221e000008003100000000000e00000026060f001200ffffffff000008000000b0f59cfa340bb0070a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b029cfab0f5050000000c02140d841531000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000b2f59afa380bb0070e00000026060f001200ffffffff000008000000b2f59afa260058050e00000026060f001200ff
ffffff0000080000005afc20ffbafea40407000000fc020000000000020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0698009800b504cbfe30ff6afc050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000
000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0696009600a404ba
fe20ff5afc050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fafbfafadaff74fe07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06de00de0085feebff0afb0afc0500000014020000
00002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff
0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c06dc00dc0074fedafffafafafb050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003cfc6ffb26ff84fd07000000fc02000000000002000004000000
2d01010004000000f0010300040000002d010200090000001c068500850095fd37ff7ffb4cfc050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077
000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400090000001c068300830084fd26ff6ffb3cfc050000001402000000001c000000fb02a0ff000000000000bc0200000000
00000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a58fcb7fc0a000000496e2d50726f636573731b003a002000400026003a003600350035003600040000
00020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000006f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320acbfc17fd06000000
4f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000018f6f8fcc2f92a0007000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06cc00cc003b00d3f908
fd28f6050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f00104000500000009020000
0002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f0010100090000001c06ca00ca002a00c2f9f8fc18f6050000001402000000001c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000701af8
7f040000002d01010004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a67fe45f706000000436c69656e745c001d001c0048004700230004000000020102001c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed
4e0338f70f037884c577000000000c0000000006f87f040000002d01050004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a01ffb0f60b0000004170706c69636174696f6e005500480047001c001d004000470023001d00470047000400000002
0102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000bdf93effbafbe2ff040000002d01020007000000fc020100000000000000040000002d01010004000000f001040004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d
000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010500030000001e00070000001604820076fb9efebdf908000000fa0206000800000000000002040000002d010400050000001402a2fec8f70500000013027600a7fd040000002d010200040000002d01010004000000f0
010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300b2fbdaff4afb96ff36fbd8ff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000aef92cfc60fb36fd040000002d010200040000002d01010004000000f00104000300
00001e0007000000160436fd1cfb50fcaef908000000fa0206000800000000000002040000002d01040005000000140230fe04f80500000013022afb02fd040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a0000002403030058fb2b
fce0fa4bfc04fb87fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000095fc80ff6afe140107000000fc020000000000020000040000002d01050004000000f0010400090000001c066500650025017bfe90ffa5fc0500000014022afb02fd2d0000004201050000002800
000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000
000002040000002d010500090000001c066300630014016afe80ff95fc0500000014022afb02fd1c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d010600040000002e011800050000000a0200000000050000000902
0000000204000000020101000f000000320a06001dfd050000004c6f63616c002c002c0028002800140004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000701af87f040000002d01070004000000f0010600040000002e
011800050000000a020000000005000000090200000002040000000201010010000000320a5c000bfd060000004f626a65637438002c00140028002800180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f
040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320ab20017fd0500000050726f78790030001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
0000005cfbedfb47fc58fc0e00000026060f001200ffffffff0000080000005cfbedfbc0fb58fc040000002d01020005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f001050007000000180458fcc0fbedfb5cfb0500000014022afb02fd0a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8fb20fc47fc28fc040000002d010200040000002d01010004000000f001070004000000f0010400040000002d01030004000000f0010600030000001e00070000001604c8fc47fc80fbb8fb08000000fa02060008000000000000
02040000002d01040005000000140220fc31fb05000000130220fcc6fc040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b0fcbc0285fe
500407000000fc020000000000020000040000002d010400090000001c0665006500610496fecc02c0fc05000000140220fcc6fc2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff
00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400090000001c0663006300500485febc02b0fc05000000140220fcc6fc1c000000fb02b8ff000000000000bc020000000000000000
417269616c000f0300ed4e0338f70f037884c577000000000c000000701af87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a420312fd0600000052656d6f74653400280040002c001800280004000000020102001c000000fb02b8ff000000
000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a980326fd060000004f626a65637438002c00140028002800
180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000701af87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320aee0332
fd0500000050726f78796530001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005cfba7fc47fc12fd0e00000026060f001200ffffffff0000080000005cfba7fcc0fb12fd040000002d0102000500000009020000000205000000
0102ffffff0208000000fa0206000800000000000002040000002d01070004000000f001040007000000180412fdc0fba7fc5cfb05000000140220fcc6fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8fbdafc47fce2fc040000002d010200040000002d01010004
000000f001070004000000f0010500040000002d01030004000000f0010600030000001e0007000000160482fd47fc3afcb8fb08000000fa0206000800000000000002040000002d010400050000001402dafc31fb050000001302dafcc6fc040000002d010200040000002d01010004000000f0010400040000002701ffff
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b6fbbfffa1fc2a000e00000026060f001200ffffffff000008000000b6fbbfff1afc2a002d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018042a001afcbfffb6fb0500
00001402dafcc6fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000012fcf2ffa1fcfaff040000002d010200040000002d01010004000000f001050004000000f0010400030000001e000700000016049a00a1fc52ff12fc08000000fa0206000800000000000002040000
002d010400050000001402f2ff8bfb050000001302f2ff20fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b6fb6700a1fcd2000e00
000026060f001200ffffffff000008000000b6fb67001afcd2002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d010400050000
00090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804d2001afc6700b6fb050000001402f2ff20fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000012fc9a00a1fca200040000002d010200040000002d01
010004000000f001050004000000f0010400030000001e000700000016044201a1fcfaff12fc08000000fa0206000800000000000002040000002d0104000500000014029a008bfb0500000013029a0020fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffff
ff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cefbf502b9fc60030e00000026060f001200ffffffff000008000000cefbf50232fc60032d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000
00000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804600332fcf502cefb0500000014029a0020fd0a00000026
060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002afc2803b9fc3003040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604d003b9fc88022afc08000000fa0206000800000000000002040000002d0104000500000014022803
a3fb050000001302280338fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cefba303b9fc0e040e00000026060f001200ffffffff00
0008000000cefba30332fc0e042d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102
ffffff0208000000fa0206000800000000000002040000002d0105000700000018040e0432fca303cefb050000001402280338fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002afcd603b9fcde03040000002d010200040000002d01010004000000f0010500040000
00f0010400030000001e000700000016047e04b9fc36032afc08000000fa0206000800000000000002040000002d010400050000001402d603a3fb050000001302d60338fd040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a0000002606
0f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000026fca5fdd2ff5afe1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000701af87f040000002d010400040000002e011800050000000a0200000000050000
00090200000002040000000201010021000000320a18fe60fc11000000496e2d50726f6365737320536572766572001b003a002000400026003a0036003500350036001b0040003500250036003500250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800
0000f8fc890154fe3e021c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000006f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320afc0132
fd03000000434f4d5045004b00500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000aef91000d8fb0c03040000002d010200040000002d010100040000002d01030004000000f0010500030000001e00070000001604c802a5fb1000aef908000000
fa0206000800000000000002040000002d0104000500000014021cfd8cf7050000001302f805f2fd040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300d0fb0503a8fb920270fbba020a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000b2f59afa2600580508000000fa0206000800000000000002040000002d010500040000002d010100070000001b04580526009afab2f5070000001b0448051600aafac2f50a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff00000800000014f6d9fa30fac8fb1c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a78fb4ef60e
000000436c69656e742050726f636573736800200020005000500028002800600030005000480050004800480004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006000f3fea701a8ff1c000000fb02
a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a66ff9a00030000005250430145004000460004
000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000024004f046b0104051c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d01060004000000f0010700
040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320ac2045e0003000000525043ff45004000460004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80130fb900a08000e00000026060f001200ff
ffffff000008000000520632fc320aacff07000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c06de00de00bdff430a42fc6206050000001402f805f2fd2d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000
00000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c06dc00dc00acff320a32fc5206050000001402f805f2fd0a00000026060f000a
00ffffffff0100000000000e00000026060f001200ffffffff0000080000009406a7fc7e09bcfe07000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c0685008500cdfe8f09b7fca406050000001402f805f2fd2d000000420105000000280000000800000008000000
0100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c0683008300bcfe7e09a7
fc9406050000001402f805f2fd1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320a
90fd8707050000004c6f63616c003b003a00360035001b0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009
0200000002040000000201010010000000320a03fe6f07060000004f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b40525fd9f0690fd0e00000026060f001200ffffffff000008000000b40525fd1806
90fd040000002d01020005000000090200000002050000000102ffffff02040000002d01050007000000180490fd180625fdb405050000001402f805f2fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000100658fd9f0660fd040000002d010200040000002d01010004
000000f001050004000000f0010400040000002d01030004000000f0010600030000001e0007000000160400fe9f06b8fc100608000000fa0206000800000000000002040000002d01040005000000140258fd890505000000130258fd1e07040000002d010200040000002d01010004000000f0010400040000002701ffff
0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b405dffd9f064afe0e00000026060f001200ffffffff000008000000b405dffd18064afe2d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018044afe1806dffdb4050500
0000140258fd1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000100612fe9f061afe040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604bafe9f0672fd100608000000fa0206000800000000000002040000
002d01040005000000140212fe890505000000130212fe1e07040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001e07edfeda09a2ff1c00
0000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a60ff58070c0000004c6f63616c205365727665723b003a
00360035001b001a0040003600250036003500250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000030028efc900436ff07000000fc020000000000020000040000002d010500090000001c069800980047ffa1049efc400205000000140212fe1e07
2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208
000000fa0206000800000000000002040000002d010500090000001c069600960036ff90048efc300205000000140212fe1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b02eefc400482fe07000000fc020000000000020000040000002d01070004000000f001
0600040000002d010200090000001c066500650093fe5104fefc7b0205000000140212fe1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd0000
00040000002d01060004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010500090000001c066300630082fe4004eefc6b0205000000140212fe1e071c000000fb02b8ff000000000000bc020000000000000000417269616c00
0f0300ed4e0338f70f037884c577000000000c0000000006f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320acafd01030400000053747562300018002c002c0004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000ce028ffe2a0444ff1c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000
09020000000204000000020101000c000000320a02ff080303000000434f4d0045004b00500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003a045afdb40564fd040000002d010200040000002d01010004000000f001070004000000f001060004
0000002d01030004000000f0010400030000001e0007000000160404fe7005bafc3a0408000000fa0206000800000000000002040000002d01040005000000140258fdc8020500000013025efd1e07040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc0200000000000200000400
00002d0104000a00000024030300ac055cfd340538fd34057efd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c80130fb900a080008000000fa0206000800000000000002040000002d010500040000002d010100070000001b040800900a30fbc801070000001b04f8
ff800a40fbd8010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000640349fb390938fc1c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d010600040000002e011800
050000000a020000000005000000090200000002040000000201010025000000320ae8fb9e03140000004c6f63616c205365727665722050726f636573735000500048005000200028006000500030004800500030002800600030005000480051004800480004000000020102000a00000026060f000a00ffffffff010000
0000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080015801380bb0070e00000026060f001200ffffffff0000080000008a0636036a0ab00607000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c06de00de00
c1067b0a46039a060500000014025efd1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f0010700050000
00090200000002050000000102ffffff02040000002d010500090000001c06dc00dc00b0066a0a36038a060500000014025efd1e070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cc06ab03b609c00507000000fc020000000000020000040000002d01070004000000
f0010400040000002d010200090000001c0685008500d105c709bb03dc060500000014025efd1e072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd
000000040000002d01040004000000f001070005000000090200000002050000000102ffffff02040000002d010500090000001c0683008300c005b609ab03cc060500000014025efd1e071c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000
0006f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a94048d070600000052656d6f74654500360055003b002000350004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f
0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a0705a707060000004f626a6563744b003a001b0035003600200004000000020102000a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff000008000000ec052904d70694040e00000026060f001200ffffffff000008000000ec05290450069404040000002d01020005000000090200000002050000000102ffffff02040000002d010500070000001804940450062904ec050500000014025efd1e070a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000048065c04d7066404040000002d010200040000002d01010004000000f001050004000000f0010400040000002d01030004000000f0010600030000001e000700000016040405d706bc03480608000000fa02060008000000
00000002040000002d0104000500000014025c04c1050500000013025c045607040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ec05e3
04d7064e050e00000026060f001200ffffffff000008000000ec05e30450064e052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd00000004000000
2d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018044e055006e304ec050500000014025c0456070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000048061605d7061e05040000002d0102
00040000002d01010004000000f001050004000000f0010400030000001e00070000001604be05d7067604480608000000fa0206000800000000000002040000002d0104000500000014021605c10505000000130216055607040000002d010200040000002d01010004000000f0010400040000002701ffff0a0000002606
0f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000607f105280aa6061c000000fb02a0ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d01040004
0000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a640640070d00000052656d6f746520536572766572004500360055003b00200035001b0040003500260035003500260004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200
ffffffff0000080000007602b403d6045c0607000000fc020000000000020000040000002d010500090000001c06980098006d06e704c4038602050000001402160556072d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff
00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c06960096005c06d604b4037602050000001402160556070a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b10214048604a80507000000fc020000000000020000040000002d01070004000000f0010600040000002d010200090000001c0665006500b90597042404c102050000001402160556072d0000004201050000002800000008000000080000
000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01
070004000000f0010500090000001c0663006300a80586041404b102050000001402160556071c000000fb02b8ff000000000000bc020000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d01050004000000f0010400040000002e011800050000000a02000000
000500000009020000000204000000020101000d000000320af00447030400000053747562300018002c002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001403b50570046a061c000000fb02a0ff000000000000bc0200000000000000004172
69616c000f0300ed4e0338f70f037884c577000000000c000000b00bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a28064e0303000000434f4d0045004b00500004000000020102000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff0000080000008c04600400066a04040000002d010200040000002d01010004000000f001070004000000f0010600040000002d01030004000000f0010400030000001e000700000016040a05bc05c0038c0408000000fa0206000800000000000002040000002d010400
050000001402640420030500000013025e046407040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300f805600481053e04810584040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffff
ff00000800000000024802c80a200708000000fa0206000800000000000002040000002d010500040000002d010100070000001b042007c80a48020002070000001b041007b80a580210020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007c036902f10958031c000000
fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000000006f87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010027000000320a0803b6031500000052656d6f7465205365727665722050726f
636573730068005000780050002800500028006000500030004800500030002800600030005000480051004800480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000080015801380bb007070000001b04b007380b5801800108000000fa0206001000
000000000002040000002d01070004000000f0010500070000001b04a007280b6801900108000000fa0206000800000000000002040000002d01050004000000f0010700070000001b048807100b8001a8010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000c047101c9
0860021c000000fb0270ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000006004f87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a100246040e0000005265
6d6f7465204d616368696e656800500078005000280050002800780050004800500020005000510004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002cfed0fd980238000c000000250304002cfe30
009600c3fe490033ff30020afe040000002d010400040000002d0102000a000000240303009002cffd1802f0fd3c022cfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000056fe6003d802ee04040000002d010500040000002d0101000c0000002503040056fe6003cc00
4a047e0002046802be04040000002d010400040000002d0102000a00000024030300d002e7046e029a045402dc040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffff
ff010000000000040000002d010200040000002d01010004000000f001050004000000f0010400040000002d01030004000000f00107000300000000000000ef88010160e80000ef88010171e80000ef88010163e80000ef8800}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 3-3: A client always calls interface members in some in-process object. If\line the actual object is local or remote, the call is made to a proxy object which then\line 
makes a remote procedure call to the actual object.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
So what member function actually executes? The answer is that the interface member called is implemented by a proxy object that is always an in-process object that acts on behalf of the object being called. This proxy object knows that the actual object i
s running in a local or remote server and so it must somehow make a remote procedure call, through a standard RPC mechanism, to that object as shown in Figure 3-3.
\par \pard \qj\sa60\widctlpar\tx10170 The proxy object packages up the function parameters in some data packets and generates an RPC call to the local or remote object. That packet is picked up by a stub object in the server\rquote 
s process, on the local or a remote machine, which unpacks the parameters and makes the call to the real implementation of the member function. When that function returns, the stub packages up any out
-parameters and the return value, sends it back to the proxy, which unpacks them and returns them to the original client. For exact details on how the proxy-stub and RPC mechanisms work, see Chapter 7.
\par The bottom line is that client and server always talk to each other as if everything was in-process. All calls from the client and all calls to the server do at some point, in fact, happen in-process. But because the {\cs58\f5\fs16\lang1024 vtbl }
structure allows some agent, like COM, to intercept all function calls and all returns f
rom functions, that agent can redirect those calls to an RPC call as necessary. All of this is completely transparent to the client and server, hence Location Transparency.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1
\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Of course, if a client timed the call it might be able to discern a performance penalty if it had both in-process and out-of-process objects to compare.}}
\par {\*\bkmkstart _Toc324051572}{\*\bkmkstart _Toc324051757}{\*\bkmkstart _Toc324051999}{\*\bkmkstart _Toc339182939}{\pntext\pard\plain\b 3.2\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2
\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Globally Unique Identifiers{\*\bkmkend _Toc324051572}{\*\bkmkend _Toc324051757}{\*\bkmkend _Toc324051999}{\*\bkmkend _Toc339182939}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As mentioned earlier in this document, the GUID, from which are also obtained CLSID, IIDs, and any other needed unique identifier, is a 128-bit, or 16-byte, value. The term {\cs58\f5\fs16\lang1024 GUID }
as used in this specification is completely synonymous and interchangeable with the term \ldblquote {\cs58\f5\fs16\lang1024 UUID}\rdblquote 
 as used by the DCE RPC architecture; they are indeed one and the same notion. In binary terms, a GUID is a data structure defined as follows, where {\cs58\f5\fs16\lang1024 DWORD }is 32-bits, {\cs58\f5\fs16\lang1024 WORD }is 16-bits, and {
\cs58\f5\fs16\lang1024 BYTE }is 8-bits:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef struct GUID \tab \{
\par \tab DWORD\tab Data1;
\par \tab WORD \tab Data2;
\par \tab WORD \tab Data3;
\par \tab BYTE \tab Data4[8];
\par \tab \} {\b GUID}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 {\xe {
\b\f4\fs12 GUID}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 This structure provides applications with some way of addressing the parts of a GUID for debugging purposes, if necessary. This information is also needed when GUIDs are transmitted between machines of dif
ferent byte orders.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 For the most part, applications never manipulate GUIDs directly\emdash they are almost always manipulated either as a constant, such as with interface identifiers, or as a variable of which the absolute value is uni
mportant. For example, a client might enumerate all object classes registered on the system and display a list of those classes to an end user. That user selects a class from the list which the client then maps to an abso
lute CLSID value. The client does not care what that value is\emdash it simply knows that it uniquely identifies the object that the user selected.
\par The GUID design allows for coexistence of several different allocation technologies, but the one by far most commonly used incorporates a 48-bit machine unique ident
ifier together with the current UTC time and some persistent backing store to guard against retrograde clock motion. It is in theory capable of allocating GUIDs at a rate of 10,000,000 per second per machine for the next 3240 years, enough for most pur
poses.
\par For further information regarding GUID allocation technologies, see pp585-592 of [CAE RPC].{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
Though be aware that the use of the term GUID on page 587 is regrettably {\i not} the same as its usage in this specification. In this specification, the term GUID is used to refer to all identifiers that are \ldblquote interoperable\rdblquote 
 with UUIDs as defined on p586; p587 uses the term to refer to one specific central-authority allocation scheme. Apologies to those who may be confused by this state of affairs.}}
\par {\*\bkmkstart _Toc324051574}{\*\bkmkstart _Toc324051759}{\*\bkmkstart _Toc324052001}{\*\bkmkstart _Toc339182940}{\pntext\pard\plain\b 3.3\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2
\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The IUnknown Interface{\*\bkmkend _Toc324051574}{\*\bkmkend _Toc324051759}{\*\bkmkend _Toc324052001}{\*\bkmkend _Toc339182940}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This specification has already mentioned the {\cs58\f5\fs16\lang1024 IUnknown}{\i  }
interface many times. It is the fundamental interface in COM that contains basic operations of not only all objects, but all interfaces as well: reference counting and {\cs58\f5\fs16\lang1024 QueryInterface}. All interfaces in COM are polymorphic with {
\cs58\f5\fs16\lang1024 IUnknown}, that is, if you look at the first three functions in any interface you see {\cs58\f5\fs16\lang1024 QueryInterface}, {\cs58\f5\fs16\lang1024 AddRef}{\i ,} and {\cs58\f5\fs16\lang1024 Release}. In other words, {
\cs58\f5\fs16\lang1024 IUnknown }is base interface from which all other interfaces inherit.
\par Any single object usually only requires a single implementation of the {\cs58\f5\fs16\lang1024 IUnknown }member functions. This means that by virtue of implementing any interface on an object you completely implement the {\cs58\f5\fs16\lang1024 IUnknown }
functions. You do not generally need to explicitly inherit from nor implement {\cs58\f5\fs16\lang1024 IUnknown }as its own interface: when queried for it, simply typecast another interface pointer into an {\cs58\f5\fs16\lang1024 IUnknown* }
which is entirely legal with polymorphism.
\par In some specific situations, more notably in creating an object that supports aggregation, you may need to implement one set of {\cs58\f5\fs16\lang1024 IUnknown}{\i  }functions for all interfaces as well as a stand-alone {\cs58\f5\fs16\lang1024 IUnknown }
interface. The reasons and techniques for this are described in the \ldblquote Object Reusability\rdblquote  section of Chapter 6.
\par In any case, any object implementor will implement {\cs58\f5\fs16\lang1024 IUnknown }functions, and we are now in a position to look at them in their precise terms.
\par {\*\bkmkstart _Toc324051575}{\*\bkmkstart _Toc324051760}{\*\bkmkstart _Toc324052002}{\pntext\pard\plain\b\i\fs22 3.3.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
IUnknown Interface{\*\bkmkend _Toc324051575}{\*\bkmkend _Toc324051760}{\*\bkmkend _Toc324052002}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\v\f4\fs22 {\xe {\ldblquote IUnknownInterface
\ldblquote }}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IUnknown} supports the capability of getting to other interfaces on the same object through {\cs58\f5\fs16\lang1024 QueryInterface}
. In addition, it supports the management of the existence of the interface instance though {\cs58\f5\fs16\lang1024 AddRef}{\i  }{\cs58\f5\fs16\lang1024 and} {\cs58\f5\fs16\lang1024 Release}.  The following is the definition of {\cs58\f5\fs16\lang1024 
IUnknown}{\cs58\i\f5\fs16\lang1024  }using the IDL notation; for details on the syntax of IDL see Chapter 15.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
Throughout this document IDL notation is used to precisely describe interfaces and other types.  The actual IDL files contain addi
tional IDL specifies  that are used by the IDL compiler to optimize the generation of marshaling code, but have no bearing on the actual interface contract.}}
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 [
\par   object,
\par   uuid(00000000-0000-0000-C000-000000000046),
\par   pointer_default(unique)
\par ] 
\par interface {\b IUnknown 
\par }\{
\par \tab HRESULT\tab {\b QueryInterface}([in] REFIID iid, [out] void **ppv) ;
\par \tab ULONG\tab \tab {\b AddRef}(void) ;
\par \tab ULONG   \tab \tab {\b Release}(void);
\par \}
\par {\pntext\pard\plain\b\fs20\lang1024 3.3.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IUnknown::QueryInterface{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 IUnknown\:functions\:QueryInterface}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IUnknown::QueryInterface(iid, ppv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return a pointer within this object instance that implements the indicated interface. Answer {\cs58\f5\fs16\lang1024 NULL} if the receiver does not contain an implementation of the interface.
\par It is required that any query for the specific interface {\cs58\f5\fs16\lang1024 IUnknown}{\cs38\f5\fs16\lang1024\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab That is, a {
\cs58\f5\lang1024 QueryInterface }invocation where {\cs58\f5\lang1024 iid }is 00000000-0000-0000-C000-000000000046.}}{\cs58\f5\fs16\lang1024  }always returns the {\i same actual pointer value}, no matter through which interface derived from {
\cs58\f5\fs16\lang1024 IUnknown }it is called. This enables the following identity{\pard\plain \qj\sa60\widctlpar \b\v\f4\fs12 {\xe {\b\fs12 identity}}} test algorithm to determine whether two pointers in fact point to the same object: call {
\cs58\f5\fs16\lang1024 Query\-Interface(IID_IUnknown, ...) }on both and compare the results.
\par In contrast, queries for interfaces {\i other} than {\cs58\f5\fs16\lang1024 IUnknown }are {\i not} required to return the same actual pointer value each time a {\cs58\f5\fs16\lang1024 QueryInterface }
returning one of them is called. This, among other things, enables sophisticated object implementors to free individual interfaces on their objects when they are not being used, recre
ating them on demand (reference counting is a per-interface notion, as is explained further below).  This requirement is the basis for what is called {\i COM identity.}
\par It is required that the set of interfaces accessible on an object via {\cs58\f5\fs16\lang1024 QueryInterface }be static, not dynamic, in the following precise sense.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar 
\f4\fs16 {\cs38\super \chftn } \tab While this set of rules may seem surprising to some, they are needed in order that remote access to interface pointers can be provided with a 
reasonable degree of efficiency (without this, interface pointers could not be cached on a remote machine). Further, as {\cs58\f5\lang1024 QueryInterface }
forms the fundamental architectural basis by which clients reason about the capabilities of an object with which they have come in contact, stability is needed to make any sort of reasonable reasoning and capability discovery possible.}}
 Suppose we have a pointer to an interface
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
ISomeInterface * psome = (some function returning an ISomeInterface *);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 where {\cs58\f5\fs16\lang1024 ISomeInterface }derives from {\cs58\f5\fs16\lang1024 IUnknown}. Suppose further that the following operation is attempted:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 IOtherInterface * pother;
\par HRESULT   hr;
\par hr=psome->QueryInterface(IID_IOtherInterface, &pother);\tab \tab //line 4
\par \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 Then, the following must be true:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 If {\cs58\f5\fs16\lang1024 hr==S_OK}, then if the {\cs58\f5\fs16\lang1024 QueryInterface }in 
\ldblquote line 4\rdblquote  is attempted a second time from the same {\cs58\f5\fs16\lang1024 psome }pointer, then {\cs58\f5\fs16\lang1024 S_OK }must be answered again. This is independent of whether or not {\cs58\f5\fs16\lang1024 pother->Release }
was called in the interim. In short, if you can get to a pointer once, you can get to it again.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}If {\cs58\f5\fs16\lang1024 hr==E_NOINTERFACE}, then if the {\cs58\f5\fs16\lang1024 QueryInterface }in line 4 is attempted a second time from the same {\cs58\f5\fs16\lang1024 psome}{\i  }pointer, then {
\cs58\f5\fs16\lang1024 E_NOINTERFACE }must be answered again. In short, if you didn\rquote t get it the first time, then you won\rquote t get it later.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Furthermore, {\i QueryInterface }must be reflexive, symmetric, and transitive with respect to the set of interfaces that are accessible. That is, given the above definitions, then we have the following:
\par \trowd \trgaph108\trleft720\trkeep \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \cellx2070\clbrdrt\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7906 \pard \qj\sa60\widctlpar\intbl {\b Symmetric:}\cell {\cs58\f5\fs16\lang1024 
psome->QueryInterface(IID_ISomeInterface, ...) }must succeed\cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft720\trkeep \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \cellx2070\clbrdrt\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7906 \pard 
\qj\sa60\widctlpar\intbl {\b Reflexive:}\cell If in line 4, {\cs58\f5\fs16\lang1024 pother }was successfully obtained, then
\par \pard\plain \s57\li252\widctlpar\intbl\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
pother->QueryInterface(IID_ISomeInterface, ...)
\par \pard\plain \s44\qj\sb60\sa58\widctlpar\intbl \f4\fs20 must succeed.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft720\trkeep \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2070\clbrdrt\brdrs\brdrw15 
\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7906 \pard \qj\sa60\widctlpar\intbl {\b Transitive:}\cell If in line 4, {\cs58\f5\fs16\lang1024 pother }was successfully obtained, and we do
\par \pard\plain \s57\li252\widctlpar\intbl\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 IYetAnother * pyet;
\par pother->QueryInterface(IID_IYetAnother, &pyet);\tab   //Line 7
\par \pard\plain \s44\qj\sb60\sa58\widctlpar\intbl \f4\fs20 and {\cs58\f5\fs16\lang1024 pyet}{\i  }is successfully obtained in line 7, then
\par \pard\plain \s57\li252\ri72\widctlpar\intbl\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
pyet->QueryInterface(IID_ISomeInterface, ...)
\par \pard\plain \s44\qj\sb60\sa58\widctlpar\intbl \f4\fs20 must succeed.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Here, \ldblquote must succeed\rdblquote  means \ldblquote 
must succeed barring catastrophic failures.\rdblquote  As was mentioned above, it is specifically {\i not} the case that two {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }
calls on the same pointer asking for the same interface must succeed and return exactly the same {\i pointer value} (except in the {\cs58\f5\fs16\lang1024 IUnknown }case as described previously).
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 iid\tab REFIID}\tab The interface identifier desired.
\par {\cs58\f5\fs16\lang1024 ppv\tab void**}\tab Pointer to the object with the desired interface. In the case that the interface is not supported or another error occurred, {\cs58\f5\fs16\lang1024 *ppv }must be set to {\cs58\f5\fs16\lang1024 NULL.}
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The interface is supported\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 E_NOINTERFACE}{\cs58\f5\fs16\lang1024 \cell }The interface is not supported\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\fs20\lang1024 3.3.1.2\tab}
}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IUnknown::AddRef{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\b\v\f4\fs12\lang1024 {\xe {\fs12 }{\b0\fs12 IUnknown\:functions\:AddRef}{\fs12 }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 ULONG IUnknown::AddRef(void)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Increments the reference count in this interface instance.
\par Objects implementations are required to support a certain minimum size for the counter that is internally maintained by {\cs58\f5\fs16\lang1024 AddRef}
. In short, this counter must be at least 31 bits large. The precise rule is that the counter must be large enough to support 2{\fs12\up6 31}-1 outstanding pointer references to 
all the interfaces on a given object taken as a whole. Just make it a 32 bit unsigned integer, and you\rquote ll be fine.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 return value\tab {\cs58\f5\fs16\lang1024 ULONG}\tab 
The resulting value of the reference count. This value is returned solely for diagnostic/testing purposes; it absolutely holds no meaning for release code since in certain situations it is unstable
\par {\pntext\pard\plain\b\fs20\lang1024 3.3.1.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IUnknown::Release{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 }{\b0\fs12 IUnknown\:functions\:Release}{\fs12 }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 ULONG IUnknown::Release(void)
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Release a reference to this interface instance. 
\par \pard \qj\sa60\widctlpar If {\cs58\f5\fs16\lang1024 AddRef }has been called on this object (through any {\cs58\f5\fs16\lang1024 IUnknown }members of its interfaces) {\i n }times and this is the {\i n}th call to {\cs58\f5\fs16\lang1024 Release}
, then the interface instance will free itself.
\par {\cs58\f5\fs16\lang1024 Release }cannot indicate failure; if a client needs to know that resources have been freed etc., it must use a method in some interface on the object with higher level semantics before calling release.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 return value\tab {\cs58\f5\fs16\lang1024 ULONG}\tab The resulting value of the reference count. This value is returned solel
y for diagnostic/testing purposes; it only has meaning when the return is zero meaning that the object cannot be considered valid in any way by the caller. Non-zero values are meaningless to the caller.
\par {\*\bkmkstart _Toc324051576}{\*\bkmkstart _Toc324051761}{\*\bkmkstart _Toc324052003}{\pntext\pard\plain\b\i\fs22 3.3.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Reference Counting{\*\bkmkend _Toc324051576}{\*\bkmkend _Toc324051761}{\*\bkmkend _Toc324052003}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Objects accessed through interfaces use a reference counting mechanism to ensure that the lifetime of the object includes the lifetime of references to it. This mechanism is adopted so that independent components can obtain and release access to a single 
object, and not have to coor
dinate with each other over the lifetime management. In a sense, the object provides this management, so long as the client components conform to the rules. Within a single component that is completely under the control of a single development organiza
tion, clearly that organization can adopt whatever strategy it chooses. The following rules are about how to manage and communicate interface instances between components, and are a reasonable starting point for a policy within a component.
\par Note that the reference counting paradigm applies only to pointers to interfaces; pointers to data are not referenced counted.
\par It is important to be very clear on exactly when it is necessary to call {\cs58\f5\fs16\lang1024 AddRef }and {\cs58\f5\fs16\lang1024 Release }through an inter
face pointer. By its nature, pointer management is a cooperative effort between separate pieces of code, which must all therefore cooperate in order that the overall management of the pointer be correct. The fol
lowing discussion should hopefully clarify the rules as to when {\cs58\f5\fs16\lang1024 AddRef }and {\cs58\f5\fs16\lang1024 Release }need to be called in or
der that this may happen. Some special reference counting rules apply to objects which are aggregated; see the discussion of aggregation{\pard\plain \qj\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 \ldblquote aggregation\rdblquote }}} in Chapter 6.
\par The conceptual model is the following: interface pointers are thought of as living in pointer variables, which for the present discussion will include variables in memory locations and in internal processor registers, and will include both programmer- and
 compiler-generated variables. In short, it includes all internal computation state that holds an interface pointer. Assignment to or initialization of a pointer variable involves creating a {\i new copy }
of an already existing pointer: where there was one copy of the pointer in some variable (the value used in the assignment/initialization), there is now two. An assignment to a pointer variable {\i d}{\i e}{\i stroys }
the pointer copy presently in the variable, as does the destruction of the variable itself (that is, the scope in which the variable is found, such as the stack frame, is destroyed).
\par \pard \qj\fi-360\li1080\sa60\widctlpar {\b Rule 1}: {\cs58\f5\fs16\lang1024 AddRef }must be called for every new copy of an interface pointer, and {\cs58\f5\fs16\lang1024 Release }
called every destruction of an interface pointer except where subsequent rules explicitly permit otherwise.
\par \pard \qj\sa60\widctlpar This is the default case. In short, unless special knowledge permits otherwise, the worst case must be as
sumed. The exceptions to Rule 1 all involve knowledge of the relationships of the lifetimes of two or more copies of an interface pointer. In general, they fall into two categories.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab There are in fact m
ore general cases than illustrated here involving n-way rather than 2-way interactions of matched AddRef / Release pairs, but that will not be elaborated on here.}}
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw16483\pich4286\picwgoal9345\pichgoal2430 \picscalex50\picscaley50 
0100090000036405000006003100000000000e00000026060f001200ffffffff0000080000000af9b8f9a40784fd0a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02b8f90af9050000000c02cc039a0e31000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000008f9b8f9a80788fd0e00000026060f001200ffffffff00000800000008f9b8f9a80788fd2d00000042010500000028
00000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010008000000fa0205000000000000000000040000002d01020005000000090200000002050000000102
ffffff0208000000fa0206000800000000000002040000002d010300070000001b0488fda807b8f908f9050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003ff90bfb0afde7fb1c000000fb0280ff00000000000090010000000000000000417269
616c000f0300ed4e0328f70f037884c577000000000c0000007005f87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a9cfb79f90e000000506f696e74657220436f70792031550048001c004700240047002b0023005d004700470040002400
470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003ff92afc0afd06fd1c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0328f70f037884c577000000000c0000002015f87f040000002d01050004000000f0
010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320abbfc79f90e000000506f696e74657220436f70792032550048001c004700240047002b0023005d004700470040002400470004000000020102000a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff000008000000eefa1cfa86fcf8fa1c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0328f70f037884c577000000000c0000007005f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000
00020101000d000000320aadfa28fb0400000054696d654e001d006a00470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000acffbefbc5009afc1c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0328f70f03
7884c577000000000c0000002015f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000a000000320a4ffce6ff0200000041325500480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff000008000000b402befbd4039afc1c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0328f70f037884c577000000000c0000007005f87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000a00
0000320a4ffcee020200000052325c00480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000fefca3fa17fe7ffb1c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0328f70f037884c577000000000c00000020
15f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000a000000320a34fb38fd0200000041315500480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008004a3fa
a0057ffb1c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0328f70f037884c577000000000c0000007005f87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000a000000320a34fbba040200000052
315c00480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a0fc60faf80668fa040000002d01020007000000fc020100000000000000040000002d01050004000000f001030004000000f00101001c000000fb021000070000000000bc0200000000
0102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010400030000001e0007000000160408fbb406c0f9a0fc08000000fa0206000800000000000002040000002d01030005000000140260fa50f205000000130260fa4011040000002d010200040000
002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300f00660fa7f063cfa7f0683fa0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000090fd80fb180588fb040000002d010200040000002d010500
04000000f0010300030000001e0007000000160428fcd404e0fa90fd08000000fa0206000800000000000002040000002d01030005000000140280fb10f605000000130280fb900c040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a
00000024030300100580fb98045cfb9804a3fb0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003000a0fc3803a8fc040000002d010200040000002d01050004000000f0010300030000001e0007000000160448fdf40200fc300008000000fa0206000800000000000002
040000002d010300050000001402a0fc30fd050000001302a0fc3006040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303003003a0fcb8027cfcb802c3fc0a00000026060f000a00ffffffff0100000000000a00000026
060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f001030003000000000000000000000000000000000000000000000000000000000000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Category 1. Nested lifetimes
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw16483\pich4286\picwgoal9345\pichgoal2430 \picscalex50\picscaley50 
0100090000036405000006003100000000000e00000026060f001200ffffffff000008000000aaf8b8ff440784030a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02b8ffaaf8050000000c02cc039a0e31000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000a8f8b8ff480788030e00000026060f001200ffffffff000008000000a8f8b8ff480788032d00000042010500000028
00000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01010008000000fa0205000000000000000000040000002d01020005000000090200000002050000000102
ffffff0208000000fa0206000800000000000002040000002d010300070000001b0488034807b8ffa8f8050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000dff80b01aafce7011c000000fb0280ff00000000000090010000000000000000417269
616c000f0300ed4e0338f70f037884c577000000000c0000009004f87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a9c0119f90e000000506f696e74657220436f70792031550048001c004700240047002b0023005d004700470040002400
470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000dff82a02aafc06031c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c000000400bf87f040000002d01050004000000f0
010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320abb0219f90e000000506f696e74657220436f70792032550048001c004700240047002b0023005d004700470040002400470004000000020102000a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff0000080000008efa1c0026fcf8001c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000009004f87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000
00020101000d000000320aad00c8fa0400000054696d654e001d006a00470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004cffbe0165009a021c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f03
7884c577000000000c000000400bf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000a000000320a4f0286ff0200000041325500480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff0000080000006404be0184059a021c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000009004f87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000a00
0000320a4f029e040200000052325c00480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009efca300b7fd7f011c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c00000040
0bf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000a000000320a3401d8fc0200000041315500480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002001a300
40027f011c000000fb0280ff00000000000090010000000000000000417269616c000f0300ed4e0338f70f037884c577000000000c0000009004f87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000a000000320a34015a010200000052
315c00480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000040fc600098066800040000002d01020007000000fc020100000000000000040000002d01050004000000f001030004000000f00101001c000000fb021000070000000000bc0200000000
0102022253797374656d000300ed4e033002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010400030000001e0007000000160408015406c0ff40fc08000000fa0206000800000000000002040000002d0103000500000014026000f0f10500000013026000e010040000002d010200040000
002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300900660001f063c001f0683000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000030fd8001e8018801040000002d010200040000002d010500
04000000f0010300030000001e000700000016042802a401e00030fd08000000fa0206000800000000000002040000002d010300050000001402800180f805000000130280019006040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a
00000024030300e00180016b015c016b01a3010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000010ffa0021805a802040000002d010200040000002d01050004000000f0010300030000001e000700000016044803d404000210ff08000000fa0206000800000000000002
040000002d010300050000001402a00210f9050000001302a002100b040000002d010200040000002d01050004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303001005a00298047c029804c3020a00000026060f000a00ffffffff0100000000000a00000026
060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f001030003000000000000000000000000000000000000000000000000000000000000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Category 2. Staggered overlapping lifetimes
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 In Category 1 situations, the {\cs58\f5\fs16\lang1024 AddRef }A2 and the {\cs58\f5\fs16\lang1024 Release }R2 can be omitted, while in Category 2, A2 and R1 can be eliminated.
\par \pard\plain \qj\fi-360\li1080\sa60\widctlpar \f4\fs20 {\b Rule 2}: Special knowledge on the part of a piece of code of the relationships of the beginnings and the endings of the lifetimes of two or more copies of an interface pointer can allow {
\cs58\f5\fs16\lang1024 AddRef/Release }pairs to be omitted.
\par \pard \qj\sa60\keepn\widctlpar The following rules call out specific common cases of Rule 2. The first two of these rules are particularly important, as they are especially common.
\par \pard \qj\fi-360\li1080\sa60\widctlpar {\b Rule 2a}: {\i In-parameters to functions. }
The copy of an interface pointer which is passed as an actual parameter to a function has a lifetime which is nested in that of the pointer used to initialize the value. The actual parameter therefore need not be separately reference counted.
\par {\b Rule 2b}: {\i Out-parameters from functions, including return values. }
This is a Category 2 situation. In order to set the out parameter, the function itself by Rule 1 must have a stable copy of the interface pointer. On exit, the responsibility for releasing the pointer is transferred from the callee to the caller. The out-
parameter thus need not be separately reference counted.
\par {\b Rule 2c}: {\i Local variables. }A function implementation clearly has omniscient knowledge of the lifetimes of each of the pointer variables allocated on the stack frame. It can therefore use this knowledge to omit redundant {\cs58\f5\fs16\lang1024 
AddRef/Release} pairs.
\par {\b Rule 2d}: {\i Backpointers}. Some data structures are of the nature of containing two components, A and B, each with a pointer to the other. If the lifetime of one component (A) is known to con
tain the lifetime of the other (B), then the pointer from the second component back to the first (from B to A) need not be reference counted. Often, avoiding the cycle that would otherwise be created is important in maintaining 
the appropriate deallocation behavior. However, such non-reference counted pointers should be used {\i with extreme caution.}In particular, as the remoting infrastructure cannot know about the semantic relationship in use here, such back
pointers cannot be remote references. In almost all cases, an alternative design of having the backpointer refer a second \ldblquote friend\rdblquote  object of the first rather than the object itself (thus avoid
ing the circularity) is a superiour design. The following figure illustrates this concept.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
The connection point interfaces introduced in the OLE Controls specification are a real world example of this concept.}}
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {\pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {\object\objemb\objw7085\objh1504\objcropr136{\*\objclass }{\*\objdata 010500000200000011000000536861706577617265564953494f323000000000000000000000820000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff09000000feffffff0400000005000000060000000700000008000000fefffffffeffffff0b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a0000001b0000001c0000001d0000001e00
00001f000000200000002100000022000000230000002400000025000000260000002700000028000000290000002a0000002b0000002c0000002d0000002e0000002f000000300000003100000032000000330000003400000035000000360000003700000038000000390000003a0000003b0000003c0000003d000000
3e0000003f000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e007400720079000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16000500ffffffffffffffff02000000001a020000000000c00000000000004600000000ffffffffffffffff5066
ee0461a2ba0103000000000b0000ffffffff01004f006c0065000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a000201ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000
00000000000000000000000014000000ffffffff03005000490043000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0002010100000004000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000
00000000000000000000010000004c000000ffffffff03004d004500540041000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0c000201ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000
0000000000000000000000000300000054090000fffffffffeffffff02000000feffffff0400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a00
00001b0000001c0000001d0000001e0000001f000000200000002100000022000000230000002400000025000000260000002700000028000000feffffff2a000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0100000200000000000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff09000600000000000000000000004c0000000000000000000800d03000005d0a0000ac1b0000e00500000000
0000000000000000000000000000e8030000e8030000000000000000000088000000000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000800d0305d0a0000010009000003a604000007007800000000000500
00000b0200000000050000000c023901c405050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff00f630040000002d01000008000000fa0200000100000000000000040000002d0101000e0000002403050007003301c9013301c901070007000700
0700330108000000fa0200000000000000000000040000002d01020007000000fc020100000000000000040000002d01030004000000f001000004000000f00101000400000008010000050000000a02000000000400000002010100040000002e011800050000000902000000001c000000fb02dfff0f00000000009001
0000000000000020417269616c00f37708b2f377fffffffffce72208d7e9ec77000000000c000000040000002d0100000a000000210508004f626a65637420313500ab001c000000fb021000070000000000bc02000000000102022253797374656d00015232f877fce72208250000005002f77fa8fd170107e4ec770400
00002d010100050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff00f630040000002d01040008000000fa0200000100000000000000040000002d0105000e00000024030500d40335019605350196050900d4030900d4033501040000002d010200
040000002d01030004000000f001040004000000f00105000400000008010000050000000a02000000000400000002010100040000002e01180005000000090200000000040000002d0100000a000000210508004f626a656374203237007804040000002d010100050000000902ffffff00050000000102000000000400
00002d01030008000000fa0200000300000000000000040000002d0104000400000002010100080000002503020069012e004f032e00040000002d01020004000000f001040004000000020102000500000001020000000007000000fc020000000000002702040000002d01040008000000fa0205000100000000000000
040000002d01050078000000380502002900100073012e0073013000730131007201330071013400700135006f0136006e0137006c0138006b01380069013800670138006601380064013700630136006201350061013400600133005f0131005f0130005f012e005f012d005f012b0060012a0061012800620127006301
2600640125006601250067012400690124006b0124006c0125006e0125006f012600700127007101280072012a0073012b0073012d0073012e004803210063032e0048033c0049033a004a0338004a0336004b0334004b0331004b032f004b032d004b032b004b0329004a0327004a032500490323004803210004000000
2d010200040000002d01030004000000f0010400050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff000000040000002d010400040000002d0105000e000000240305003b00fe001e01fe001e0166003b0066003b00fe00040000002d0103000800
0000fa0201000100000000000000040000002d01060004000000020101000e000000250305003b00fe001e01fe001e0166003b0066003b00fe00040000002d010200040000002d01030004000000f001040004000000f0010600040000002d010000040000002d0101000400000008010000050000000a02000000000400
000002010100040000002e01180005000000090200000000040000002d0100000b00000021050900667269656e64206f6600a80072000a000000210508004f626a6563742031d0007000040000002d010100050000000902ffffff0005000000010200000000040000002d01030008000000fa0200000300000000000000
040000002d010400040000000201010024000000250310001d048e00f603a100ce03b300a403c2007903cf004d03da002003e200f202e800c402ec009602ee006802ed003a02e9000e02e300e201db00b701d100a101ca00040000002d01020004000000f001040004000000020102000500000001020000000007000000
fc020000000000002702040000002d010400040000002d01050078000000380502002900100014049300150494001604950017049600180497001a0498001b0498001d0498001f0498002004970022049700230496002404950025049400260492002604910027048f0027048e0027048c0026048b002604890025048800
240487002204860021048500200484001e0484001c0484001b048400190484001804850017048600150487001404880014048a0013048b0013048d0013048e00130490001304910014049300ac01c0008e01c400a401d900a401d700a401d500a401d300a401d100a401cf00a501cd00a501cb00a601c900a701c700a801
c500a901c300ab01c100ac01c000040000002d010200040000002d01030004000000f0010400050000000902ffffff0005000000010200000000040000002d01030008000000fa0200000300000000000000040000002d0104000400000002010100080000002503020089032e00d4032e00040000002d01020004000000
f0010400050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff00ac30040000002d01040008000000fa0200000100000000000000040000002d0106002200000024030f0063032e00650326006a03200072031c007a031c0082032000870326008903
2e008703360082033d007a034000720340006a033d006503360063032e00040000002d010200040000002d01030004000000f001040004000000f0010600050000000902ffffff0005000000010200000000040000002d01030008000000fa0200000300000000000000040000002d010400040000000201010008000000
250302006901c4001e01c400040000002d01020004000000f0010400050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff00ac30040000002d01040008000000fa0200000100000000000000040000002d0106002200000024030f008e01c4008d01
bc008701b6008001b2007801b2007001b6006b01bc006901c4006b01cc007001d3007801d6008001d6008701d3008d01cc008e01c400040000002d010200040000002d01030004000000f001040004000000f0010600030000000000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff09000600
000000000000000000000100feff030a0000ffffffff001a020000000000c0000000000000461a000000564953494f20457870726573732044726177696e6720322e30000e000000564953494f20466967757265730011000000536861706577617265564953494f323000f439b271000000000000000000000000d0cf11
e0a1b11ae10000000000000000000300d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff010043006f006d0070004f0062006a000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffff120002000300000005000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000002900000071000000ffffffff03004f0062006a0049006e0066006f000000ffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffff12000201ffffffff06000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000002b00000004000000ffffffff56006900730069006f0044006f00630075006d0065006e0074000000ffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffff1c000200ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000a000000d86a0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff566973696f2028544d292044726177696e670d0a0000000000000200d86a0000010000001400
500c1801570644690000940100000003180000000000ffffff00ff00000000ff00000000ff00ffff0000ff00ff0000ffff00800000000080000000008000808000008000800000808000c0c0c000e6e6e600cdcdcd00b3b3b3009a9a9a0080808000666666004d4d4d00333333001a1a1a00000000000000040000000000
0000040064000020417269616c006400001254696d6573204e657720526f6d616e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f001900440e480d5706a80000000a00000019006408800d570600000000000000001900640d980d570600000000
000000001900640ab80d570600000000000000001900640dd00d570600000000000000001900640be80d5706000000000000000019006408000e570600000000000000001900640b180e570600000000000000001900640e300e5706000000000000000019006409580e570600000000000000001900640a700e57060000
00000000000019006408900e570600000000000000001900440c600d5706b2000000140000001900640da80e570600000000000000001900640cc80e5706000000000000000019006409e80e570600000000000000001900640a000f5706000000000000000019006409180f570600000000000000001900640d380f5706
00000000000000001900640e580f570600000000000000001900640d700f570600000000000000001900640c880f5706000000000000000019006409a00f570600000000000000001900640ab80f570600000000000000001900640ce00f570600000000000000001900640bf80f570600000000000000001900640c1010
570600000000000000001900640c2810570600000000000000001900640f4010570600000000000000001900640d6010570600000000000000001900640f8010570600000000000000001900640ba0105706000000000000000019006409c010570600000000000000001900640de010570600000000000000001900640e
0011570600000000000000001900640e2011570600000000000000001900640c3811570600000000000000001900640a5811570600000000000000001900640d781157060000000000000000190064089811570600000000000000001900640cb011570600000000000000001900640ae011570600000000000000001900
640bf81157060000000000000000190064092012570600000000000000001900640b3812570600000000000000001900640a601257060000000000000000190064097812570600000000000000001900640998125706000000000000000019006408b8125706000000000000000019006408d01257060000000000000000
1900640df012570600000000000000001900640d181357060000000000000000190064093813570600000000000000001900640a5813570600000000000000001900640d8013570600000000000000001900640ea0135706000000000000000019006409c013570600000000000000001900640ad8135706000000000000
00001900640f0014570600000000000000001900640a301457060000000000000000190064085814570600000000000000001900640f7014570600000000000000001900640f8814570600000000000000001900640db0145706000000000000000019006408c814570600000000000000001900640ae014570600000000
000000001900640bf814570600000000000000001900640f10155706000000000000000019006409381557060000000000000000190064085815570600000000000000001900640c7015570600000000000000001900640d8815570600000000000000001900640ea015570600000000000000001900640dc01557060000
00000000000019006409d8155706000000000000000019006408f015570600000000000000001900640f1016570600000000000000001900640c2816570600000000000000001900640c401657060000000000000000190064085816570600000000000000001900640f7816570600000000000000001900640e90165706
00000000000000001900640eb016570600000000000000001900640cd016570600000000000000001900640ae81657060000000000000000190064080817570600000000000000001900640b281757060000000000000000190064084017570600000000000000001900640b6017570600000000000000001900640c7817
570600000000000000001900640c9817570600000000000000001900640bb017570600000000000000001900640bc8175706000000000000000000000000000000000000000000000000000000000000000000000000000000003f000000000000d03f3f000000000000d03f3f000000000000d03f3f000000000000d03f
00000000200000000000005940200000000000005940000001000100000000000000000000000000000000000000000000000000010101010008000200620100fe08000201620100fe08000202620100fe000000307b14ae47e17a843f00014000000000000000000200000001000e000200307b14ae47e17a843ffe0800
0201620000fe08000202620100fe0e000203400000000000000000fe08000204620200fe08000205620000fe08000206620000fe08000207620000fe0000010001000100010008000200620100fe08000201620000fe08000202620100fe08000203620000fe08000204620100fe08000205620000fe3f00000000000000
003f00000000000000003f00000000000000003f0000000000000000010001000e0002003f0000000000000000fe0e0002013f0000000000000000fe0e0002023f0000000000000000fe0e0002033f0000000000000000fe08000204620100fe08000205620000fe00000000000000000000000000000000000000000100
000008000200620000fe08000201620000fe08000202620000fe08000203620000fe08000204620000fe08000205620000fe08000206620000fe08000207620000fe08000208620000fe08000209620000fe0800020a620000fe0800020b620000fe0800020c620000fe0800020d620000fe0800020e620000fe0800020f
620000fe08000210620000fe08000211620000fe08000212620000fe08000213620000fe0000000000000000000000000000010000070002006100fe070002016100fe070002026100fe070002036100fe070002046100fe070002056100fe070002066100fe070002076100fe08000208620000fe000000000000000000
00000000000001002600fdfffdfffdfffdff000000000000000000000000010008000200600000fe08000201600000fe08000202600000fe08000203600000fefd01a3004e0284003d02a400ec01a00034018700c40086008a0085002100930004000800860200000000000000000000000010270030555555555555c53f
01000008000200620000fe08000201620000fe08000202620000fe08000203620000fe08000204620000fe0e00020521000000000000f03ffe08000206620000fe0e00020730555555555555c53ffe0094000400010067000000000000003f00000000000000003f00000000000000003f00000000000000003033333333
3333f3bf3000000000000000003000000000000000000101000e0002003f0000000000000000fe0e0002013f0000000000000000fe0e0002023f0000000000000000fe0f00020321333333333333f33f13fe0e000204300000000000000000fe0e000205300000000000000000fe08000206620100fe9500040001009c00
00000000000000010008000200620000fe00090088000400010011000000ffffffffffffffffffffffffffff000000000000000000000000000004006800440c901b57063a070000ac0200006900440870109705e6090000700000006a00000c00000000560a0000a40000006b00440c50285706fa0a00001c0000000000
0000010101010008000200620100fe08000201620100fe08000202620100fe000000307b14ae47e17a843f000040000000000000000002000000010008000202620000fe0000010000000100010008000202620000fe3f00000000000000003f00000000000000003f00000000000000003f000000000000000000000100
0e0002003f0000000000000000fe0e0002013f0000000000000000fe0e0002023f0000000000000000fe0e0002033f0000000000000000fe08000204620000fe08000205620000fe870058008600460085002100930004000400c8000000000000003f00000000000000003f00000000000000003f000000000000000030
333333333333f3bf30000000000000000030000000000000000000010008000206620000fe0095000400010047000000ffffffffffffffff030003000300000000000000000000000000000002006800440c70230f06760b0000dc0000006a00000800000000520c00005000000000000000010101010008000200620100
fe08000201620100fe08000202620100fe000000307b14ae47e17a843f000040000000000000000002000000010008000202620000fe0000010000000100010008000202620000fe321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f010001000e000200321cc7711cc771ac3ffe
0e000201321cc7711cc771ac3ffe0e000202321cc7711cc771ac3ffe0e000203321cc7711cc771ac3ffe870058008600460085002100930004000400b8000000ffffffffffffffff030003000300000000000000000000000000000001006800440c90240f06e20c0000cc00000000000000010101010008000200620100
fe08000201620100fe08000202620100fe001900321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f010001000e000200321cc7711cc771ac3ffe0e000201321cc7711cc771ac3ffe0e000202321cc7711cc771ac3ffe0e000203321cc7711cc771ac3ffe87002100930004000200
84000000ffffffffffffffff000000000000000000000000000000000000000001006800440868250f06de0d00009000000000000000000100010008000200620000fe08000201620100fe08000202620000fe000000000001000100010008000200620000fe8600210093000400020034000100ffffffffffffffff0300
03000300000000000000000000000000000001006800440838260f069e0e000040000000010004000200060003000700040008000500090006000a0007000b0008000c0009000d000a000e000b000f000c0010000d0011000e0012000f00130010001400110015001200160013001700140018001500190016001a001700
1b0018001c0019001d001a001e001b001f001c0020001d0021001e0022001f0023002000240021002500220026000000270000000000000100010008000200620000fe08000201620100fe08000202620000fe000000010001000100010008000200620100fe8600210093000400020034000100ffffffffffffffff0300
030003000000000000000000000000000000010068004408282657069a0f00004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe000000040001000100010008000200620400fe8600210093000400020034000100ffffffffffffffff03000300030000000000000000000000
00000000010068004408b8260f060a1000004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe000000020001000100010008000200620200fe8600210093000400020034000100ffffffffffffffff030003000300000000000000000000000000000001006800440838270f06
7a1000004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe000000030001000100010008000200620300fe8600210093000400020034000100ffffffffffffffff0300030003000000000000000000000000000000010068004408b8270f06ea10000040000000000000000001
00010008000200620000fe08000201620100fe08000202620000fe000000070001000100010008000200620700fe8600210093000400020034000100ffffffffffffffff030003000300000000000000000000000000000001006800440838280f065a1100004000000000000000000100010008000200620000fe080002
01620100fe08000202620000fe000000050001000100010008000200620500fe8600210093000400020034000100ffffffffffffffff0300030003000000000000000000000000000000010068004408b8280f06ca1100004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe00
0000060001000100010008000200620600fe8600210093000400020034000100ffffffffffffffff030003000300000000000000000000000000000001006800440838290f063a1200004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe0000000e0001000100010008000200
620e00fe8600210093000400020034000100ffffffffffffffff0300030003000000000000000000000000000000010068004408b8290f06aa1200004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe0000000f0001000100010008000200620f00fe86002100930004000200
34000100ffffffffffffffff0300030003000000000000000000000000000000010068004408382a0f061a1300004000000000000000010000010008000200620100fe08000201620000fe08000202620000fe000000307b14ae47e17a843f010140000000000000000001000000010008000201620100fe000085002100
93000400020046000100ffffffffffffffff030003000300000000000000000000000000000001006800440cb82a0f068a1300005400000000000000000100010008000200620000fe08000201620100fe08000202620000fe000000110001000100010008000200621100fe8600210093000400020034000100ffffffff
ffffffff0300030003000000000000000000000000000000010068004408502b0f060e1400004000000000000000010000010008000200620100fe08000201620000fe08000202620000fe000000307b14ae47e17a843f000240000000000000000001000000010008000202620200fe0000850021009300040002004600
0100ffffffffffffffff030003000300000000000000000000000000000001006800440cd02b0f067e1400005400000000000000000100010008000200620000fe08000201620100fe08000202620000fe0000000a0001000100010008000200620a00fe8600210093000400020034000100ffffffffffffffff03000300
03000000000000000000000000000000010068004408682c0f06021500004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe0000000d0001000100010008000200620d00fe8600210093000400020034000100ffffffffffffffff030003000300000000000000000000000000
0000010068004408e82c0f06721500004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe000000090001000100010008000200620900fe8600210093000400020034000100ffffffffffffffff0300030003000000000000000000000000000000010068004408682d0f06e215
00004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe0000000c0001000100010008000200620c00fe8600210093000400020034000100ffffffffffffffff0300030003000000000000000000000000000000010068004408e82d0f0652160000400000000000000000010001
0008000200620000fe08000201620100fe08000202620000fe000000080001000100010008000200620800fe8600210093000400020034000100ffffffffffffffff0300030003000000000000000000000000000000010068004408682e0f06c21600004000000000000000000100010008000200620000fe0800020162
0100fe08000202620000fe0000000b0001000100010008000200620b00fe8600210093000400020034000100ffffffffffffffff0300030003000000000000000000000000000000010068004408e82e0f06321700004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe000000
130001000100010008000200621300fe8600210093000400020034000100ffffffffffffffff0300030003000000000000000000000000000000010068004408682f0f06a21700004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe0000001500010001000100080002006215
00fe8600210093000400020034000100ffffffffffffffff030003000300000000000000000000000000000001006800440818009705121800004000000000000000000100010008000200620000fe08000201620100fe08000202620000fe000000170001000100010008000200621700fe860021009300040002003400
0100ffffffffffffffff030003000300000000000000000000000000000001006800440898009705821800004000000000000000010000010008000200620100fe08000201620000fe08000202620000fe000000304f1be8b4814e6b3f00014000000000000000000100000001000e000200304f1be8b4814e6b3ffe0800
0201620000fe8500210093000400020054000100ffffffffffffffff030003000300000000000000000000000000000001006800440818019705f21800006000000000000000010000010008000200620100fe08000201620000fe08000202620000fe000000307b14ae47e17a843f000140000000000000000001000000
01000e000200307b14ae47e17a843ffe08000201620000fe8500210093000400020054000100ffffffffffffffff0300030003000000000000000000000000000000010068004408b8019705821900006000000000000000010000010008000200620100fe08000201620000fe08000202620000fe00000030b81e85eb51
b89e3f00014000000000000000000100000001000e00020030b81e85eb51b89e3ffe08000201620000fe8500210093000400020054000100ffffffffffffffff030003000300000000000000000000000000000001006800440858029705121a00006000000000000000010000010008000200620100fe08000201620000
fe08000202620000fe000000304f1be8b4814e6b3f00014000000000000000000100000001000e000200304f1be8b4814e6b3ffe08000201620000fe8500210093000400020054000100ffffffffffffffff030003000300000000000000000000000000000001006800440888255706a21a000060000000000000000100
00010008000200620100fe08000201620000fe08000202620000fe000000304f1be8b4814e6b3f000340000000000000000001000000010008000202620300fe0e000200304f1be8b4814e6b3ffe08000201620000fe850021009300040002005c000100ffffffffffffffff030003000300000000000000000000000000
0000010068004408f8029705321b00006800000000000000000001010008000200620000fe08000201620000fe08000202620100fe000000321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0100010008000204620100fe87002100930004000200540000000000000000000000
000010270032721cc7711cc7c13f0100000e00020732721cc7711cc7c13ffe08000200620000fe00000094000400010031000000000000003f00000000000000003f00000000000000003f000000000000000030333333333333f3bf30000000000000000030000000000000000001010008000206620100fe0095000400
010047000300ffffffffffffffff0300030003000000000000000000000000000000030068004408c0039705ca1b0000600000006900440c081097052a1c00003c0000006a00000800000000661c00005000000000000000000001010008000200620000fe08000201620000fe08000202620100fe000000321cc7711cc7
71ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0000010008000204620000fe8700210093000400020054000000000000003f00000000000000003f00000000000000003f000000000000000030333333333333f3bf30000000000000000030000000000000000000010008000206620000fe00
950004000100470000000000000000000000000010270032721cc7711cc7c13f01000008000200620000fe0e00020732721cc7711cc7c13ffe00000094000400010031000300ffffffffffffffff030003000300000000000000000000000000000003006800440880049705061d0000600000006a00000800000000661d
0000500000006900440c90119705b61d00003c00000000000000000001010008000200620000fe08000201620000fe08000202620100fe000000321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0000010008000204620000fe8700210093000400020054000000000000000000
0000000010270032721cc7711cc7c13f01000008000200620000fe0e00020732721cc7711cc7c13ffe00000094000400010031000000000000003f00000000000000003f00000000000000003f000000000000000030333333333333f3bf30000000000000000030000000000000000001010008000206620100fe009500
0400010047000300ffffffffffffffff030003000300000000000000000000000000000003006800440840059705421e0000600000006900440cd8119705a21e00003c0000006a00000800000000de1e00005000000000000000000001010008000200620000fe08000201620000fe08000202620100fe000000321cc771
1cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0100010008000204620100fe8700210093000400020054000000000000000c000000000010270032721cc7711cc7c13f01000008000200620c00fe0e00020732721cc7711cc7c13ffe00000094000400010031000000000000003f000000
00000000003f00000000000000003f000000000000000030333333333333f3bf30000000000000000030000000000000000001010008000206620100fe0095000400010047000300ffffffffffffffff0300030003000000000000000000000000000000030068004408000697057e1f0000600000006900440c20129705
de1f00003c0000006a000008000000001a2000005000000000000000000001010008000200620000fe08000201620000fe08000202620100fe000000321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0000010008000204620000fe870021009300040002005400000000000000
0c000000000010270032721cc7711cc7c13f01000008000200620c00fe0e00020732721cc7711cc7c13ffe00000094000400010031000000000000003f00000000000000003f00000000000000003f000000000000000030333333333333f3bf30000000000000000030000000000000000001010008000206620100fe00
95000400010047000300ffffffffffffffff0300030003000000000000000000000000000000030068004408c0069705ba200000600000006900440c681297051a2100003c0000006a00000800000000562100005000000000000000000001010008000200620000fe08000201620000fe08000202620100fe000000321c
c7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0000010008000204620000fe8700210093000400020054000000000000003f00000000000000003f00000000000000003f000000000000000030333333333333f3bf3000000000000000003000000000000000000001000800020662
0000fe0095000400010047000000000000000c000000000010270032721cc7711cc7c13f01000008000200620c00fe0e00020732721cc7711cc7c13ffe00000094000400010031000300ffffffffffffffff030003000300000000000000000000000000000003006800440880079705f6210000600000006a0000080000
000056220000500000006900440cb0129705a62200003c00000000000000010101010008000200620100fe08000201620100fe08000202620100fe000000304f1be8b4814e6b3f000140000000000000000002000400010008000206620400fe0e000200304f1be8b4814e6b3ffe321cc7711cc771ac3f321cc7711cc771
ac3f321cc7711cc771ac3f321cc7711cc771ac3f0102010008000205620200fe87005400850021009300040003008400000000000000000000000000102700321cc7711cc771bc3f0100000e000207321cc7711cc771bc3ffe00000094000400010029000200ffffffffffffffff03000300030000000000000000000000
0000000002006800440c3008970532230000940000006900440c780b9705c62300003400000000000000000001010008000200620000fe08000201620000fe08000202620100fe000000321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0100010008000204620100fe87002100
9300040002005400000000000000000000000000102700321cc7711cc771bc3f0100000e000207321cc7711cc771bc3ffe08000200620000fe00000094000400010031000000000000003f00000000000000003f00000000000000003f000000000000000030333333333333f3bf30000000000000000030000000000000
000001010008000206620100fe0095000400010047000300ffffffffffffffff0300030003000000000000000000000000000000030068004408d0040f063a240000600000006900440c782757069a2400003c0000006a004408c0275706d6240000500000000000000000000000000000000000000000002c004a005408
281b5706160b0000600000004a00540828230f06a20c0000400000004a00540858240f06ae0d0000300000004a005408182857066e0e0000300000004a00540800260f06de0e0000300000003400400c90220f060e0f00008c0000004a005408f0255706da0f0000300000004a00540880260f064a100000300000004a00
540800270f06ba100000300000004a00540880270f062a110000300000004a00540800280f069a110000300000004a00540880280f060a120000300000004a00540800290f067a120000300000004a00540880290f06ea120000300000004a005408002a0f065a130000300000004a005408802a0f06de13000030000000
4a005408182b0f064e140000300000004a005408982b0f06d2140000300000004a005408302c0f0642150000300000004a005408b02c0f06b2150000300000004a005408302d0f0622160000300000004a005408b02d0f0692160000300000004a005408302e0f0602170000300000004a005408b02e0f06721700003000
00004a005408302f0f06e2170000300000004a005408b02f0f0652180000300000004a00540860009705c2180000300000004a005408e000970552190000300000004a00540880019705e2190000300000004a00540820029705721a0000300000004a00540850255706021b0000300000004a005408c00297059a1b0000
300000004a00540868039705b61c0000500000004a00540828049705f21d0000500000004a005408e80497052e1f0000500000004a005408a80597056a200000500000004a00540868069705a6210000500000004a00540828079705e2220000500000004a005408e8079705fa230000400000004a005408202757062625
000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f7572205072696e7465720069006e0074006500720000000000000000000000200301037c007000034a0100010001000000000000000100
0f000000020001000000020000004c65747465720000010000000000000001000f00000002000100000002000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000ffff000000000000
000000000000000000000000000000000000000000000000000000000000180000000000204e204e204e00001027000000000000000000000000a42a000094010000000003000000443a080011001d00010077696e73706f6f6c004f7572205072696e746572004c5054313a0065726520286e6f6e2d626f6c64295c3478
0d00000000000000000000001a1a1a00000000000000000000000000000000000000000000000000000000000000000041000000000000084041000000000000084041000000000000c03f41000000000000c0bf49000000000000f03f49000000000000f03f040008200000000000000000000000000000000000000000
000000000000000000000000000000000000000001000000000e000200410000000000000840fe0e000201410000000000000840fe0e00020241000000000000c03ffe0e00020341000000000000c0bffe08000206620400fe08000207620000fe08000208620800fe08000209622000fe0e00020449000000000000f03f
fe0e00020549000000000000f03ffe00920004000100df000000000005004800000000008300040001000a000200ffffffffffffffff0000000000000000000000000000000000000000020068004408f8129705aa290000e80000006500000c00000000922a0000140000000000200020000000d00000000000ff000100
90888fff82f88e7782f88e7782f88e7782f88e7782f801778c880487f8f8708c000487f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f870
8bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708bff05f087f8f8708c000377f8f88e7782f88e7782f88e7782f88e7782f88e8801f88fff01f847656e6572696320626f782077697468207465787420616e6420636f6e6e656374696f6e20706f696e74732e2043616e
2062652073747265746368656420746f20616e792064696d656e73696f6e732e00000000000000000000e8bf000000000000e03f000000000000e83f000000000000e0bf37d069039d36e8bf38d069039d36e03f38d069039d36e83f37d069039d36e0bf00000000000000c000000000000000c0000000000000f0bf0000
00000000f0bf0000000040000000000000f83f40000000000000f83f40000000000000f83f40000000000000f03f40000000000000e83f40000000000000e03f5000000000000000000000000100000e00020040000000000000f83ffe0e00020140000000000000f83ffe0e00020240000000000000f83ffe0e00020340
000000000000f03ffe1200020475026020000000000000e03f05fe1200020575036020000000000000e03f05fe0e000206500000000000000000fe08000207620000fe08000208620000fe08000209620000fe28000302050001000104050000000700050001000700050002000700050003000700050004000700280003
0305000100010505000000070105000100070105000200070105000300070105000400070100000000000000000000000000010008000202804c40fe0000fefffdfffefffeff00000000000000000000000001002100020160192843292053686170657761726520436f72706f726174696f6e00fe00a300320184001b01
9b00040003006b0100000000000100070002006100fe070002016100fe070002026100fe40000000000000000040000000000000000001001200020075026020000000000000000005fe1200020175036020000000000000000005fe0a000300050005000a000a000301050005000a0140000000000000f83f4000000000
0000000001001200020075026020000000000000f03f05fe1200020175036020000000000000000005fe40000000000000f83f40000000000000f03f01001200020075026020000000000000f03f05fe1200020175036020000000000000f03f05fe40000000000000000040000000000000f03f01001200020075026020
000000000000000005fe1200020175036020000000000000f03f05fe40000000000000000040000000000000000001000b0002007201000a0000fe0b0002017201000a0100fe00008b0010018b00d8008b00a0008b0068008a001c008900040006003a010000000040000000000000e83f40000000000000f03f01001200
020075026020000000000000e03f05fe1200020175036020000000000000f03f05fe40000000000000e83f40000000000000000001001200020075026020000000000000e03f05fe1200020175036020000000000000000005fe40000000000000000040000000000000e03f010012000200750260200000000000000000
05fe1200020175036020000000000000e03f05fe40000000000000e83f40000000000000e03f01001200020075026020000000000000e03f05fe1200020175036020000000000000e03f05fe40000000000000f83f40000000000000e03f01001200020075026020000000000000f03f05fe120002017503602000000000
0000e03f05fe9900e4009900ac009900740099003c009900040005001c0103000000ffffffffffff1e0006002700000000000000000000000000010003006800440cc8235706782c00007c0100006c00010800000000f42d0000580100007100000c000000004c2f000034010000010025002d00020000000000f8de0400
0000ffff000000000000000000000000010002000000000000000000000000000000000000000000060046005408b80b9705a62a0000400000002300400a000c9705e62a0000de0000000a00400fe80c9705c42b0000510000000a00400f780a9705152c0000010000002b00400e480d9705162c0000620000004800540e
68235706803000005200000025000000280002000000000041000000000000084041000000000000084041000000000000c03f41000000000000c0bf49000000000000f03f49000000000000f03f040008200000000000000000000000000000000000000000000000000000000000000000000000000000000001000000
000e000200410000000000000840fe0e000201410000000000000840fe0e00020241000000000000c03ffe0e00020341000000000000c0bffe08000206620400fe08000207620000fe08000208620800fe08000209622000fe0e00020449000000000000f03ffe0e00020549000000000000f03ffe00920004000100df00
0000000005004800000000008300040001000a000200ffffffffffffffff0000000000000000000000000000000000000000020068004408e813970572310000e80000006500000c000000005a320000140000000000200020000000230100000000ff00010090888fff82f88e7782f88e7782f88e7782f8857701788388
857782f885778300020888847782f8847707007fffff700887837782f88377017085ff02f088837782f88377010785ff0af708877777f8f877777087ff09f0887777f8f877770787ff09f7087777f8f877770f88ff08088777f8f877707f88ff07708777f8f8777089ff07f08777f8f8777089ff07f08777f8f8777089ff
07f08777f8f8777089ff07f08777f8f8777089ff08f08777f8f877707f88ff08707777f8f877770f88ff08077777f8f877770788ff08077777f8f877777087ff01f0837782f88377010786ff0107837782f88377017085ff0170847782f8847706007fffff7007847782f8857783000107857782f88e7782f88e7782f88e
7782f88e8801f88fff01f847656e6572696320636972636c65206f7220656c6c697073652077697468207465787420616e6420636f6e6e656374696f6e20706f696e74732e00000000000000000000e0bf000000000000e03f000000000000e03f000000000000e0bf37d069039d36e0bf38d069039d36e03f38d069039d
36e03f37d069039d36e0bf00000000000000c000000000000000c0000000000000f0bf000000000000f0bf0000000040000000000000f83f40000000000000f83f40000000000000f03f40000000000000f03f40000000000000e03f40000000000000e03f5000000000000000000000000100000e000200400000000000
00f83ffe0e00020140000000000000f83ffe0e00020240000000000000f03ffe0e00020340000000000000f03ffe1200020475026020000000000000e03f05fe1200020575036020000000000000e03f05fe0e000206500000000000000000fe08000207620000fe08000208620000fe08000209620000fe400003020500
01000104050000000700050001000700050002000700050003000700050004000700050002000a02050002000a05050003000a02050003000a0540000303050001000105050000000701050001000701050002000701050003000701050004000701050002000a03050002000a05050003000a03050003000a0500000000
000000000000000000010008000202804c40fe0000fefffdfffefffeff00000000000000000000000001002100020160192843292053686170657761726520436f72706f726174696f6e00fe00a300620184004b019b00040003009b0100000000000100070002006100fe070002016100fe070002026100fe4000000000
0000000040000000000000e03f01001200020075026020000000000000000005fe1200020175036020000000000000e03f05fe0a000300050003000a000a000301050003000a0140000000000000f03f40000000000000e03f40000000000000e03f40000000000000f03f50000000000000000020000000000000f03f01
001200020075026020000000000000f03f05fe1200020175036020000000000000e03f05fe1200020275026020000000000000e03f05fe1200020375036020000000000000f03f05fe0e000204200000000000000000fe160002057502607503600620000000000000f03f05fe40000000000000000040000000000000e0
3f40000000000000e03f40000000000000000050000000000000000020000000000000f03f01000b0002007201000a0000fe0b0002017201000a0100fe1200020275026020000000000000e03f05fe1200020375036020000000000000000005fe0e000204200000000000000000fe160002057502607503600620000000
000000f03f05fe000090000c01900068008a001c00890004000400a2010000000040000000000000e03f40000000000000f03f01001200020075026020000000000000e03f05fe1200020175036020000000000000f03f05fe40000000000000e03f40000000000000e03f01001200020075026020000000000000e03f05
fe1200020175036020000000000000e03f05fe40000000000000000040000000000000e03f01001200020075026020000000000000000005fe1200020175036020000000000000e03f05fe40000000000000e03f40000000000000000001001200020075026020000000000000e03f05fe12000201750360200000000000
00000005fe40000000000000f03f40000000000000e03f01001200020075026020000000000000f03f05fe1200020175036020000000000000e03f05fe9900e4009900ac009900740099003c009900040005001c0103000000ffffffffffff1e0006002700000000000000000000000000010004006800440c60120f067d
340000ac0100006c0001080000000029360000b8010000000000000000000000000000000000007100000c00000000e137000034010000010070002d00020000000000e4da04000300ffff000000000000000000000000010002000000000000000000000000000000000000000000060046005408800e97056e32000040
0000002300400fc80e9705ae320000310100000a00400d501f0f06df3300003b0000000a00400fb80997051a340000010000002b00400e981f0f061b340000620000004800540ef0110f06153900006200000000000000000000000000000000000000000000000000000000000000020007001e005108c8225706d23000
009800000034004008680a97056a310000080000001e00510850110f0677390000980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200030000000000000000000000000000000000000000
0000000400000000000000040000048d020000000000000000000000000000000002001d0008000000ffffffff05808e020200000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b5fff8ff0000000000000000000000
0000000000000000000000000000000000000000000000000000000000643a5c617070735c766973696f5c74656d706c6174655c626c6f636b2e76737300002a0014000100af0000000000490e74da40a78d13404934d069039d36f03f3f000000000000c03f3f000000000000c0bf41000000000000f03f490000000000
00f03f030008200000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000e000200490e74da40a78d1340fe0e0002014934d069039d36f03ffe0e0002023f000000000000c03ffe0e0002033f000000000000c0bffe08000206620300fe08000207620000fe0800
0208620800fe08000209622000fe0e00020441000000000000f03ffe0e00020549000000000000f03ffe00920004000100df000000000001004800000000000200480000000a0003004800000004000400480000000a0005004800000012000800470000002a0009004700000022008300320083002a008300220083001a
008300120083000a008300040007003a002500010026000200270004000200ffffffffffffffff0000000000000000000000000000000000000000030068004408d01f57067d3b0000e80000006500440cc0205706653c00005c0000003400400cc02f5706c13c00000c000000000000004037d069039d36e83f4038d069
039d36e03f40000000000000f83f40000000000000f03f40000000000000e83f40000000000000e03f5000000000000000000000000100000e0002004037d069039d36e83ffe0e0002014038d069039d36e03ffe280003020100000007000100010007000100020007000100030007000100040007000100050007002800
030301000000070101000100070101000200070101000300070101000400070101000500070100000000000000000000000000000001000400321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0000010008000204620000fe08000204620000fe08000204620000fe8700c60084
00b5009b0004000300f8000000000000010007400000000000000000400000000000000000010040000000000000f83f400000000000000000010040000000000000f83f40000000000000f03f010040000000000000000040000000000000f03f010040000000000000000040000000000000000001008b0058008b0044
008b0030008b001c008a0007008900040006006c00010000000000000000000000000000000000000000000000f83f000000000000f03fffffffffffffffffffff01000000000040000000000000e83f40000000000000f03f01001200020075026020000000000000e03f05fe1200020175036020000000000000f03f05
fe40000000000000e83f40000000000000000001001200020075026020000000000000e03f05fe1200020175036020000000000000000005fe40000000000000000040000000000000e03f01001200020075026020000000000000000005fe1200020175036020000000000000e03f05fe40000000000000e83f40000000
000000e03f01001200020075026020000000000000e03f05fe1200020175036020000000000000e03f05fe40000000000000f83f40000000000000e03f01001200020075026020000000000000f03f05fe1200020175036020000000000000e03f05fe40000000000000f03f40000000000000ec3f010012000200750260
20555555555555e53f05fe1200020175036020000000000000ec3f05fe040003010300040001010a00030103000400010103000400010103000400010199001c019900e4009900ac009900740099003c00990004000600540100000000000000004f626a65637420310004000000010000000500ffffffffffff00000000
00000000000000000100050068004408a82157061d3d0000180100006c00450890265706353e0000880000002800000a00000000bd3e00002e0000007100400878285706eb3e0000900100000e00400f702657067b4000001100000001000000000040000000000000104040000000000000e03f40000000000000f83f40
000000000000f03f40000000000000e83f40000000000000e03f5000000000000000000000000100000e000200400000000000001040fe0e00020140000000000000e03ffe2e0003020200000007000200010007000200020007000200030007000200040007000200050007000200060007002e00030302000000070102
00010007010200020007010200030007010200040007010200050007010200060007010000000000000000000000000000000100100003030500040001000500040001010500321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f321cc7711cc771ac3f0000010008000204620000fe620000fe08000204
620000fe8700e2008400c1009b000400030014010000000000010007400000000000000000400000000000000000010040000000000000f83f400000000000000000010040000000000000f83f40000000000000f03f010040000000000000000040000000000000f03f0100400000000000000000400000000000000000
01008b0058008b0044008b0030008b001c008a0007008900040006006c00020000000000000000000000000000000000000000000000f83f000000000000f03fffffffffffffffffffff02000000000040000000000000e83f40000000000000f03f01001200020075026020000000000000e03f05fe1200020175036020
000000000000f03f05fe40000000000000e83f40000000000000000001001200020075026020000000000000e03f05fe1200020175036020000000000000000005fe40000000000000000040000000000000e03f01001200020075026020000000000000000005fe1200020175036020000000000000e03f05fe40000000
000000e83f40000000000000e03f01001200020075026020000000000000e03f05fe1200020175036020000000000000e03f05fe40000000000000f83f40000000000000e03f01001200020075026020000000000000f03f05fe1200020175036020000000000000e03f05fe40000000000000000040000000000000ec3f
01001200020075026020000000000000000005fe1200020175036020000000000000ec3f05fe4040bf58f28b25cf3f40c92f96fc62c9e13f01001200020075026020807f90a1b2c3c43f05fe1200020175036020c92f96fc62c9e13f05fe1000030005000400010005000400010110000301050004000100050004000101
05000400010005000400010101000500040001010100050004000101040001019900540199001c019900e4009900ac009900740099003c00990004000700ac0100000000000000004f626a65637420320004000000020000000500ffffffffffff0000000000000000000000000100050068004408902a5706fe40000030
0100006c004508e82b57062e420000880000002800000a00000000b64200002e0000007100400c782c5706e4420000ec0100000e00400fc82b5706d04400001100000001000000000040010000000040004040010000000000ec3f40010000000000fb3f40efecacc7702e473c40010000000000eb3f40efecacc7702e37
3c506814b6559601a1bc00000001000021000202750c60750a6004e462020007750d60750b6004e46202000703801140fe0e00020340efecacc7702e473cfe16000206750d60750b6004750c60750a6004801240fe11000200750a60750c6003e462020006fe11000201750b60750d6003e462020006fe10000302030001
000104030002000a021200020475026020000000000000e03f05fe0a0003030300010001051200020575036020000000000000e03f05fe08000207620000fe08000208620000fe08000209620000fe000440010000000000f33f40020000000000ec3f40010000000000074040000000000000ec3f010016000302030001
0001020300010001060300010001001600030003000100010203000100010603000100010016000303030001000102030001000106030001000101160003010300010001020300010001060300010001010e00020040010000000000f33ffe0e00020140020000000000ec3ffe0e000202400100000000000740fe0e0002
0340020000000000ec3ffe0005307b14ae47e17a843f0001400000000000000000020a0500010008000206620500fe08000205620a00fe060100000000000000000000000000000400000000000000000000000400030303000400010300000a000303030004000103030004000103030003030300040001020300040001
03030004000101030004000103030004000101030004000101e5018400ea018500be019d0006019b0004000400fa0100000000010100070002006101fe070002016100fe070002026100fe40000000000000000040000000000000000001001200020075026020000000000000000005fe0e000201400000000000000000
fe40010000000000fb3f40000000000000000040010000000000eb3f40000000000000000050000000000000000020000000000000f03f01001200020075026020000000000000f03f05fe0e000201400000000000000000fe1200020275026020000000000000e03f05fe0e000203400000000000000000fe0e00020420
0000000000000080fe0e00020520000000000000f03ffe900050008a001c00890004000300e40002000000ffffffffffff000000000000000000000000000000000000010002006800440818000f0653450000600200006c00450cc02e5706b3470000f400000001000000000040e5174b7eb1e4e13f4089ca0e5397dbdb
3f4036d069039d36e83f407a35f1ac6824e03f4036d069039d36d83f407a35f1ac6824d03f5000000000000000000000000100000e00020040e5174b7eb1e4e13ffe0e0002014089ca0e5397dbdb3ffe0e0002024036d069039d36e83ffe0e000203407a35f1ac6824e03ffe2e0003020400000007000400010007000400
020007000400030007000400040007000400050007000400060007002e00030304000000070104000100070104000200070104000300070104000400070104000500070104000600070100000000000000000000000000000001000400304f1be8b4814e6b3f000240000000000000000001000000010008000202620200
fe65000202620200fe65000202620200fe65008500ee008400dd009b00040003001201000000000001000740000000000000000040000000000000000001004036d069039d36e83f40000000000000000001004036d069039d36e83f407a35f1ac6824e03f0100400000000000000000407a35f1ac6824e03f0100400000
00000000000040000000000000000001008b0058008b0044008b0030008b001c008a0007008900040006006c00040000000000000000000000000000000000000000000000f83f000000000000f03fffffffffffffffffffff0400000000004036d069039d36d83f407a35f1ac6824e03f01001200020075026020000000
000000e03f05fe1200020175036020000000000000f03f05fe4036d069039d36d83f40000000000000000001001200020075026020000000000000e03f05fe1200020175036020000000000000000005fe400000000000000000407a35f1ac6824d03f01001200020075026020000000000000000005fe12000201750360
20000000000000e03f05fe4036d069039d36d83f407a35f1ac6824d03f01001200020075026020000000000000e03f05fe1200020175036020000000000000e03f05fe4036d069039d36e83f407a35f1ac6824d03f01001200020075026020000000000000f03f05fe1200020175036020000000000000e03f05fe400100
00000000e83f40307eb1e4174bbe3f01001200020075026020ff60cee3d2b7ef3f05fe1200020175036020cda6a43ac406ce3f05fe40010000000000e43f4070fc62c92f96bc3f010012000200750260207ffb2b13856eea3f05fe1200020175036020aeec7a91b555cc3f05fe6020aeec7a91b555cc3f05fe7a91b555cc
3f05fe7a91b555cc3f05fecc3f05fe9900540199001c019900e4009900ac009900740099003c009900040007008c010000000000000000667269656e64206f66204f626a65637420310004000000040000000500ffffffffffff000000000000000000000000010005006800440c00030f06e9480000340100006c004508
40040f061d4a0000880000002800000a00000000a54a00002e0000007100400c38050f06d34a0000cc0100000e00440dd00897059f4c00001b00000001000000000040fac5925f2c39034040ca2f96fc62c9dd3f40082010c1ac81014040f42d0f102914cc3f40082010c1ac81f13f40f42d0f102914cc3f50fe0180ec8c
7808c000010001000021000202750c60750a6004e462020007750d60750b6004e46202000703801140fe0e00020340f42d0f102914cc3ffe16000206750d60750b6004750c60750a6004801240fe11000200750a60750c6003e462020006fe11000201750b60750d6003e462020006fe1c00030205000100010405000200
0a02050002000a05050002000a041200020475026020000000000000e03f05fe1c000303050001000105050002000a03050002000a05050002000a041200020575036020000000000000f03f05fe08000207620000fe08000208620100fe08000209620000fe40f48b25bf58f20b4040c92f96fc62c9e13f400100000000
00f53f40020000000000d83f01001b00020070020006000700007002000600070100800b407a3340fe1b00020170020006000700007002000600070100800b407a3340fe0e00020240010000000000f53ffe0e00020340020000000000d83ffe160003010500010001010500010001060500010001021600030305000100
01010500010001060500010001021600030005000100010005000100010605000100010216000302050001000100050001000106050001000102307b14ae47e17a843f0001400000000000000000020a0500010008000205620a00fe08000206620500fe2401000000000000000000000000000010000303050004000100
05000400010105000303050004000100050004000101050004000103050004000101050004000103050004000103050084001e028500f4019d0024019b00040004003e0200000000010100070002006101fe070002016100fe070002026100fe40000000000000000040f42d0f102914cc3f010012000200750260200000
00000000000005fe1200020175036020000000000000f03f05fe40082010c1ac81014040f42d0f102914cc3f40082010c1ac81f13f40000000000000000050000000000000000020c29b0915cf6ef73f01001200020075026020000000000000f03f05fe1200020175036020000000000000f03f05fe1200020275026020
000000000000e03f05fe1200020375036020000000000000000005fe320002042098c90f275861084020000000000000f03f20f591bd2e1f9e0a4020a46b1c2f2d43df3f750260750360803440fe380002052098c90f275861084020000000000000f03f20f591bd2e1f9e0a4020a46b1c2f2d43df3f7502607503607202
000a0400803540fe0a000304050002000a05900054008a001c00890004000300480102000000ffffffffffff000000000000000000000000000000000000010002006800440c60070f062c4d00007c0200006c004508e8090f06a84f00005801000001000000000040000000000000d03f40c0ffffffffffaf3f40000000
000000d03f40000000000000000040000000000000c03f40000000000000000050000000000000000000000001000021000202750c60750a6004e462020007750d60750b6004e46202000703801140fe0e000203400000000000000000fe16000206750d60750b6004750c60750a6004801240fe11000200750a60750c60
03e462020006fe11000201750b60750d6003e462020006fe0a0003020600010001041200020475026020000000000000e03f05fe0a0003030600010001051200020575036020000000000000e03f05fe08000207620000fe08000208620000fe08000209620000fe40000000000000c03f40c0ffffffffffaf3f40000000
000000d83f40c0ffffffffffaf3f01001600030206000100010206000100010606000100010016000300060001000102060001000106060001000100160003030600010001020600010001060600010001011600030106000100010206000100010606000100010114000200740260080020555555555555d53f05fe1400
0201740360080020e0ffffffffffdf3f05fe14000202740260080020000000000000f03f05fe14000203740360080020e0ffffffffffdf3f05fe04009d0000019b0004000200ce0100000000010100070002006101fe070002016100fe070002026100fe4000000000000000004000000000000000000100120002007502
6020000000000000000005fe0e000201400000000000000000fe40000000000000d03f40000000000000000001001200020075026020000000000000f03f05fe0e000201400000000000000000fe8b0050008a001c00890004000300840002000800ffffffffffff00000000000000000000000000000000000001000200
6800440c100d0f0642510000dc0100006c00450cf80e0f061e5300009400000001000000000040000000000000b03f40e0ffffffffffaf3f40e0ffffffffffbf3f40e0ffffffffffbf3f40e0ffffffffffaf3f40e0ffffffffffaf3f50000000000000000000000001000014000200740260080020555555555555c53f05
fe14000201740360080020000000000000e03f05fe3a000302070002000a02070003000a02070002000a05070003000a050700000007000700010007000700020007000700030007000700040007003a000303070002000a03070003000a03070002000a05070003000a0507000000070107000100070107000200070107
000300070107000400070114000202740260080020405555555555d53f05fe14000203740360080020000000000000f03f05fe08000207620000fe08000208620000fe0000000000000000000000000000000100080084001d019b00040002002e0100000000000100070002006100fe070002016100fe070002026100fe
40000000000000000040d0ffffffffffaf3f01001200020075026020000000000000000005fe1200020175036020f0ffffffffffdf3f05fe0a000300070003000a000a000301070003000a0140e0ffffffffffbf3f40d0ffffffffffaf3f40d0ffffffffffaf3f40e0ffffffffffbf3f5000000000000000002000000000
0000f03f01001200020075026020000000000000f03f05fe1200020175036020f0ffffffffffdf3f05fe1200020275026020e0ffffffffffdf3f05fe1200020375036020000000000000f03f05fe0e000204200000000000000000fe160002057502607503600620000000000000f03f05fe40000000000000000040d0ff
ffffffffaf3f40f0ffffffffffaf3f40000000000000000050000000000000000020000000000000f03f01001200020275026020100000000000e03f05fe1200020375036020000000000000000005fe0b0002007201000a0000fe0b0002017201000a0100fe0e000204200000000000000000fe16000205750260750360
0620000000000000f03f05fe000090000c01900068008a001c00890004000400a201070000000000000000000000000000000000000000000000f03f000000000000f03fffffffffffffffffffff07000000000040000000000000e03f40fdffffffffffe13f01001200020075026020100000000000104005fe12000201
750360200f0000000000124005fe40000000000000e03f40d0ffffffffffaf3f01001200020075026020100000000000104005fe1200020175036020f0ffffffffffdf3f05fe40000000000000000040d0ffffffffffaf3f01001200020075026020000000000000000005fe1200020175036020f0ffffffffffdf3f05fe
40000000000000e03f40060000000000dcbf01001200020075026020100000000000104005fe12000201750360202200000000000cc005fe40000000000000f03f40d0ffffffffffaf3f01001200020075026020100000000000204005fe1200020175036020f0ffffffffffdf3f05fe9900e4009900ac00990074009900
3c009900040005001c0104000800070002000500ffffffffffff000000000000000000000000010004006800440c08100f06f45300003c0100006c00450818140f0630550000b80100002800000a00000000e85600002e0000007100400c10200f0616570000340100000100000000004002000000008008404004000000
0000ec3f40000000000000d83f40e0ffffffffffbf3f40000000000000c83f40e0ffffffffffaf3f5000000000000000000000000100000e000200400200000000800840fe0e00020140040000000000ec3ffe0e00020240000000000000d83ffe0e00020340e0ffffffffffbf3ffe220003020800010001040600040001
000600040001020700010001020700010001001200020475026020000000000000e03f05fe220003030800010001050600040001010600040001030700010001030700010001011200020575036020000000000000e03f05fe0e000206500000000000000000fe08000207620000fe08000208620000fe08000209620000
fe009b00040001000f010000000006004800000000000700480000000a0083000a0083000400020012002800070002000000ffffffffffff0000000000000000000000000000000000000000030068004408a00b0f06ac5800001801000065004408d82f5706c4590000200000003400400ca00a9705e459000004000000
0000000040010000000000f23f40060000000000d83f40000000000000d83f40e0ffffffffffbf3f40000000000000c83f40e0ffffffffffaf3f5000000000000000000100000100000e00020040010000000000f23ffe0e00020140060000000000d83ffe0e00020240000000000000d83ffe0e00020340e0ffffffffff
bf3ffe1200020475026020000000000000e03f05fe1200020575036020000000000000e03f05fe0e000206500000000000000000fe08000207620100fe08000208620000fe08000209620000fe220003020900010001040a00040001000a00040001020b00010001000b0001000102220003030900010001050a00040001
010a00040001030b00010001010b0001000103009b00040001000f01000000000a004800000000000b0048000000000083000a00830004000200120028000b0002000000ffffffffffff000000000000000000000000000000000000000003006800440830160f06385a0000180100006500440850170f06505b00002000
00003400400cb00a9705705b0000040000000000000040000000000000d03f40c0ffffffffffaf3f40000000000000d03f40000000000000000040000000000000c03f40000000000000000050000000000000000000000001000021000202750c60750a6004e462020007750d60750b6004e46202000703801140fe0e00
0203400000000000000000fe16000206750d60750b6004750c60750a6004801240fe11000200750a60750c6003e462020006fe11000201750b60750d6003e462020006fe1200020475026020000000000000e03f05fe1200020575036020000000000000e03f05fe08000207620000fe08000208620000fe080002096200
00fe0a0003020a00010001040a0003030a000100010540000000000000c03f40c0ffffffffffaf3f40000000000000d83f40c0ffffffffffaf3f010014000200740260090020555555555555d53f05fe14000201740360090020e0ffffffffffdf3f05fe14000202740260090020000000000000f03f05fe140002037403
60090020e0ffffffffffdf3f05fe160003000a00010001000a00010001020a0001000106160003020a00010001000a00010001020a0001000106160003010a00010001010a00010001020a0001000106160003030a00010001010a00010001020a000100010600009d0000019b0004000200ce0100000000010100070002
006101fe070002016100fe070002026100fe40000000000000000040000000000000000001001200020075026020000000000000000005fe0e000201400000000000000000fe40000000000000d03f40000000000000000001001200020075026020000000000000f03f05fe0e000201400000000000000000fe8b005000
8a001c00890004000300840002000900ffffffffffff000000000000000000000000000000000000010002006800440cc8170f06c45b0000dc0100006c00450cb0190f06a05d00009400000001000000000040000000000000b03f40e0ffffffffffaf3f40e0ffffffffffbf3f40e0ffffffffffbf3f40e0ffffffffffaf
3f40e0ffffffffffaf3f50000000000000000000000001000014000200740260090020555555555555c53f05fe14000201740360090020000000000000e03f05fe14000202740260090020405555555555d53f05fe14000203740360090020000000000000f03f05fe08000207620000fe08000208620000fe3a0003020b
00000007000b00010007000b00020007000b00030007000b00040007000b0002000a020b0002000a050b0003000a020b0003000a053a0003030b00000007010b00010007010b00020007010b00030007010b00040007010b0002000a030b0002000a050b0003000a030b0003000a05000000000000000000000000000000
0100000084001d019b00040002002e0100000000000100070002006100fe070002016100fe070002026100fe40000000000000000040d0ffffffffffaf3f01001200020075026020000000000000000005fe1200020175036020f0ffffffffffdf3f05fe0a0003000b0003000a000a0003010b0003000a0140e0ffffffff
ffbf3f40d0ffffffffffaf3f40d0ffffffffffaf3f40e0ffffffffffbf3f50000000000000000020000000000000f03f01001200020075026020000000000000f03f05fe1200020175036020f0ffffffffffdf3f05fe1200020275026020e0ffffffffffdf3f05fe1200020375036020000000000000f03f05fe0e000204
200000000000000000fe160002057502607503600620000000000000f03f05fe40000000000000000040d0ffffffffffaf3f40f0ffffffffffaf3f40000000000000000050000000000000000020000000000000f03f01001200020275026020100000000000e03f05fe1200020375036020000000000000000005fe0b00
02007201000a0000fe0b0002017201000a0100fe0e000204200000000000000000fe160002057502607503600620000000000000f03f05fe000090000c01900068008a001c00890004000400a2010b0000000000000000000000000000000000000000000000f03f000000000000f03fffffffffffffffffffff0b000000
000040000000000000e03f40fdffffffffffe13f01001200020075026020100000000000104005fe12000201750360200f0000000000124005fe40000000000000e03f40d0ffffffffffaf3f01001200020075026020100000000000104005fe1200020175036020f0ffffffffffdf3f05fe40000000000000000040d0ff
ffffffffaf3f01001200020075026020000000000000000005fe1200020175036020f0ffffffffffdf3f05fe40000000000000e03f40060000000000dcbf01001200020075026020100000000000104005fe12000201750360202200000000000cc005fe40000000000000f03f40d0ffffffffffaf3f0100120002007502
6020100000000000204005fe1200020175036020f0ffffffffffdf3f05fe9900e4009900ac009900740099003c009900040005001c01040009000b0002000500ffffffffffff000000000000000000000000010004006800440cc01a0f06765e00003c0100006c004508081c0f06b25f0000b80100002800000a00000000
6a6100002e0000007100400c50210f069861000034010000010002000000000000000000000000000000000000000000f0bf3533333333930340343333333333e03f00000000000000000000000000000000000000000000000000000d0046005408681f5706cd3c0000500000004800540e282157068c40000072000000
4800540e102a5706e1440000720000004800540e702e5706a7480000420000004800540e80020f06ba4c0000720000004800540e10070f0600510000420000004800540ec00c0f06b2530000420000004800540e980f0f064a5800006200000047005408480b0f06e85900005000000047005408d8150f06745b00005000
00004800540e78170f06345e0000420000004800540e501a0f06cc6200006200000000000000000000000000000000000000230002002400000000000000490e74da40a78d13404934d069039d36f03f3f000000000000c03f3f000000000000c0bf41000000000000f03f49000000000000f03f03000820000000000000
0000000000000000000000000000000000000000000000000000000000000000000001000000000e000200490e74da40a78d1340fe0e0002014934d069039d36f03ffe0e0002023f000000000000c03ffe0e0002033f000000000000c0bffe08000206620300fe08000207620000fe08000208620800fe08000209622000
fe0e00020441000000000000f03ffe0e00020549000000000000f03ffe00920004000100df000100ffffffffffffffff0000000000000000000000000000000000000000010068004408601e0f064a640000e8000000ffff0000000000000000000000000000000000000000f0bfcecccccccc0c11400100000000001640
0000000000000000000000000000000000000000000000000000010046005408281e0f0632650000300000000000000000000000010004001500510c481e57062e6300001401000034004008c01f570642640000080000001500500cc81d0f06626500005400000000000000000000000000000000000000000029000000
0100417269616c20203870742063656e74657265640057680100426c61636b2066696c6c00001200010057686974652066696c6c000004000100426c75652066696c6c0001005265642066696c6c00000100477265656e2066696c6c00002d0001004379616e2066696c6c00010059656c6c6f772066696c6c0047000100
4d6167656e74612066696c6c00000100477261792066696c6c00010031302520477261792066696c6c0001005768697465206c696e6500008300010033302520477261792066696c6c0001004c6f6e6720646173686564206c696e6500000100426c7565206461726b2066696c6c0000a00001004379616e206461726b20
66696c6c0000ad000100477265656e206461726b2066696c6c00c00001004d6167656e7461206461726b2066696c6c000100526564206461726b2066696c6c00010059656c6c6f77206461726b2066696c6c0000010035302520477261792066696c6c00010037302520477261792066696c6c0001003930252047726179
2066696c6c0001003170786c206c696e650001003370786c206c696e650001003970786c206c696e65000100486169726c696e650001010053686f727420646173686564206c696e65000100417269616c2063656e7465726564000090010100417269616c20746f70206c65667400009c010100417269616c20746f7000
010054696d65732063656e74657265640000bc01010054696d657320746f7000010054696d657320746f70206c6566740000e1010100436f6e6e6563746f720001004261636b67726f756e64006f6e6e010044726177696e670030020200426f780056020100426f782e32000100426f782e34000200436972636c650000
680200004275696c742d696e20636f6e6e6563746f720000560233007902330070023300680233005e02330056023300490233003c0233002d0233001c0233000d023300fc013300ed013300d9013300c8013300b3013300a80133009c013300900133008401330074013300640133005301330040013300300133001a01
330005013300f1003300df003300cc003300b9003300ac0033009c0033008f0033007e0033007000330061003300530033004800330039003300290033001a00330004002a007e02000002000000010000000000010000000000000009006700000100010000000000000000000000000000000000000000000000000000
00000000000000000000002801dfbc5a4ff5e04028cce24ed04ff5e0402801dfbc5a4ff5e04028cce24ed04ff5e040604900000100000000000000000000000000000000000000000000000011001600500c600357063400000064000000170000080000000098000000080000001700000800000000a000000008000000
18005008d0035706c6000000200600002600000c00000000e6060000540000001a00500cf809570676250000d40200001b004000000027064a280000000100001c00400000003f064a290000600000001d00500eb80257060f3a00009a0000002400000c00000000a93a00000c0000002000000800000000b53a00000800
00002100000800000000bd3a00000800000029004008f8089705c53a0000b80000002700500ad80c5706b66500004e000000ff00700c300d5706000000000000000032004408e0175706046600004003000000000000000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003e000300
feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff0105000000000000}{\result {{\pict\wmetafile8\picw12496\pich2653\picwgoal7084\pichgoal1504 \piccropr136 
010009000003a60400000700780000000000050000000b0200000000050000000c023901c405050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff00f630040000002d01000008000000fa0200000100000000000000040000002d0101000e00000024
03050007003301c9013301c9010700070007000700330108000000fa0200000000000000000000040000002d01020007000000fc020100000000000000040000002d01030004000000f001000004000000f00101000400000008010000050000000a02000000000400000002010100040000002e0118000500000009020000
00001c000000fb02dfff0f000000000090010000000000000020417269616c00f37708b2f377fffffffffce72208d7e9ec77000000000c000000040000002d0100000a000000210508004f626a65637420313500ab001c000000fb021000070000000000bc02000000000102022253797374656d00015232f877fce7220825
0000005002f77fa8fd170107e4ec77040000002d010100050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff00f630040000002d01040008000000fa0200000100000000000000040000002d0105000e00000024030500d40335019605350196050900
d4030900d4033501040000002d010200040000002d01030004000000f001040004000000f00105000400000008010000050000000a02000000000400000002010100040000002e01180005000000090200000000040000002d0100000a000000210508004f626a656374203237007804040000002d010100050000000902ff
ffff0005000000010200000000040000002d01030008000000fa0200000300000000000000040000002d0104000400000002010100080000002503020069012e004f032e00040000002d01020004000000f001040004000000020102000500000001020000000007000000fc020000000000002702040000002d0104000800
0000fa0205000100000000000000040000002d01050078000000380502002900100073012e0073013000730131007201330071013400700135006f0136006e0137006c0138006b01380069013800670138006601380064013700630136006201350061013400600133005f0131005f0130005f012e005f012d005f012b0060
012a00610128006201270063012600640125006601250067012400690124006b0124006c0125006e0125006f012600700127007101280072012a0073012b0073012d0073012e004803210063032e0048033c0049033a004a0338004a0336004b0334004b0331004b032f004b032d004b032b004b0329004a0327004a032500
4903230048032100040000002d010200040000002d01030004000000f0010400050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff000000040000002d010400040000002d0105000e000000240305003b00fe001e01fe001e0166003b0066003b00fe
00040000002d01030008000000fa0201000100000000000000040000002d01060004000000020101000e000000250305003b00fe001e01fe001e0166003b0066003b00fe00040000002d010200040000002d01030004000000f001040004000000f0010600040000002d010000040000002d01010004000000080100000500
00000a02000000000400000002010100040000002e01180005000000090200000000040000002d0100000b00000021050900667269656e64206f6600a80072000a000000210508004f626a6563742031d0007000040000002d010100050000000902ffffff0005000000010200000000040000002d01030008000000fa0200
000300000000000000040000002d010400040000000201010024000000250310001d048e00f603a100ce03b300a403c2007903cf004d03da002003e200f202e800c402ec009602ee006802ed003a02e9000e02e300e201db00b701d100a101ca00040000002d01020004000000f00104000400000002010200050000000102
0000000007000000fc020000000000002702040000002d010400040000002d01050078000000380502002900100014049300150494001604950017049600180497001a0498001b0498001d0498001f0498002004970022049700230496002404950025049400260492002604910027048f0027048e0027048c0026048b0026
04890025048800240487002204860021048500200484001e0484001c0484001b048400190484001804850017048600150487001404880014048a0013048b0013048d0013048e00130490001304910014049300ac01c0008e01c400a401d900a401d700a401d500a401d300a401d100a401cf00a501cd00a501cb00a601c900
a701c700a801c500a901c300ab01c100ac01c000040000002d010200040000002d01030004000000f0010400050000000902ffffff0005000000010200000000040000002d01030008000000fa0200000300000000000000040000002d0104000400000002010100080000002503020089032e00d4032e00040000002d0102
0004000000f0010400050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff00ac30040000002d01040008000000fa0200000100000000000000040000002d0106002200000024030f0063032e00650326006a03200072031c007a031c00820320008703
260089032e008703360082033d007a034000720340006a033d006503360063032e00040000002d010200040000002d01030004000000f001040004000000f0010600050000000902ffffff0005000000010200000000040000002d01030008000000fa0200000300000000000000040000002d010400040000000201010008
000000250302006901c4001e01c400040000002d01020004000000f0010400050000000902ffffff000500000001020000000004000000020102000500000001020000000007000000fc020000ffffff00ac30040000002d01040008000000fa0200000100000000000000040000002d0106002200000024030f008e01c400
8d01bc008701b6008001b2007801b2007001b6006b01bc006901c4006b01cc007001d3007801d6008001d6008701d3008d01cc008e01c400040000002d010200040000002d01030004000000f001040004000000f001060003000000000000}}}}}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The following rules call out common non-exceptions to Rule 1.
\par \pard\plain \qj\fi-360\li1080\sa60\widctlpar \f4\fs20 {\b Rule 1a}: {\i In-Out-parameters to functions. }The caller must {\cs58\f5\fs16\lang1024 AddRef} the actual parameter, since it will be {\cs58\f5\fs16\lang1024 Released}
 by the callee when the out-value is stored on top of it.
\par {\b Rule 1b}: {\i Fetching a global variable. }The local copy of the interface pointer fetched from an ex
isting copy of the pointer in a global variable must be independently reference counted since called functions might destroy the copy in the global while the local copy is still alive.
\par {\b Rule 1c}: {\i New pointers synthesized out of \ldblquote thin air.\rdblquote } A function which synthesizes an interface pointer using special internal knowledge rather than obtaining it from some other source must do an initial {
\cs58\f5\fs16\lang1024 AddRef} on the newly synthesized pointer. Important examples of such routines include instance creation routines, implementations of {\cs58\f5\fs16\lang1024 IUnknown::QueryInterface}, etc.
\par {\b Rule 1d}: {\i Returning a copy of an internally stored pointer. }Once the pointer has been returned, the callee has no idea how its lifetime relates to that of the internally stored copy of the pointer. Thus, the callee must call {
\cs58\f5\fs16\lang1024 AddRef} on the pointer copy before returning it.
\par \pard \qj\sb240\sa60\widctlpar Finally, when implementing or using reference counted objects, a technique sometimes termed \ldblquote artificial reference counts{\pard\plain \qj\sb240\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 \ldblquote 
artificialreferencecounts\rdblquote }}}\rdblquote  sometimes proves useful. Suppose you\rquote re writing the code in method {\cs58\f5\fs16\lang1024 Foo }in some interface {\cs58\f5\fs16\lang1024 IInterface}. If in the implementation of {
\cs58\f5\fs16\lang1024 Foo }you invoke functions which have even the remotest chance of decrementing your reference count, then such function may cause you to release before it returns to {\cs58\f5\fs16\lang1024 Foo}. The subsequent code in {
\cs58\f5\fs16\lang1024 Foo }will crash.
\par \pard \qj\sa60\widctlpar A robust way to protect yourself from this is to insert an {\cs58\f5\fs16\lang1024 AddRef }at the beginning of {\cs58\f5\fs16\lang1024 Foo }which is paired with a {\cs58\f5\fs16\lang1024 Release }just before {
\cs58\f5\fs16\lang1024 Foo }returns:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 void IInterface::Foo(void) \{
\par \tab this{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab \ldblquote This\rdblquote  is the appropriate thing to {\cs58\f5\lang1024 AddRef }
in an object implementation using the approach of multiply inheriting from the suite of interfaces supported by the object; more complex implementation strategies will need to modify this appropriately.}}->AddRef();
\par \tab /* 
\par \tab  * Body of Foo, as before, except short-circuit returns
\par \tab  * need to be changed.
\par \tab  */
\par \tab this->Release();
\par \tab return;
\par \tab \}
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 These \ldblquote artificial\rdblquote  reference counts guarantee object stability while processing is done.
\par {\*\bkmkstart _Toc324051577}{\*\bkmkstart _Toc324051762}{\*\bkmkstart _Toc324052004}{\*\bkmkstart _Toc339182941}{\pntext\pard\plain\b 3.4\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2
\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Error Codes and Error Handling{\*\bkmkend _Toc324051577}{\*\bkmkend _Toc324051762}{\*\bkmkend _Toc324052004}{\*\bkmkend _Toc339182941}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
COM interface member functions and COM Library API functions use a specific convention for error codes in order to pass back to the caller both a useful return value and along with an indication of status or error information. For example, it is highly us
eful for a function to be capable of returning a Boolean result (true or false) as well as indicate failure or success\emdash returning true and false means that the function executed successfully, and true or false is the answer wherea
s an error code indicates the function failed completely.
\par But before we get into error handling in COM, we\rquote ll first take a small digression. Many readers might here be wondering about exceptions. How do exceptions{\pard\plain \qj\sa60\widctlpar \b\v\f4\fs12 {\xe {\b\fs12 exceptions}}}
 relate to interfaces? In short, {\i it is strictly illegal to throw an exception across an interface invocation}; all such cross-interface exceptions which are thrown are in fact {\ul bugs}
 in the offending interface implementation. Why have such a policy? The first, straightforward, pragmatic reason is the technical reality that there simply isn\rquote 
t an ubiquitous exception model or semantic that is broadly supported across languages and operating systems that one could choose to permit; recall that location transparency and language independence are important design goals of COM. Further, sim
plicity is also an important design goal. It is well-understood that, quite apart from COM {\i per se}, the exceptions that may be legally thrown from a function implementation in the public interface of an enca
psulated module must necessarily from part of the contract of that function implementation. Thus, a thrown excep
tion across such a boundary is merely an alternative mechanism by which values may be returned from the function. In COM, we instead make use of the simpler, ubiquitous, already-existing return-value mechanism for returning information from a function as 
our error reporting mechanism: simply returning {\cs58\f5\fs16\lang1024 HRESULTs}, which are the topic of this section.
\par This all being said, it would be absolutely perfec
tly reasonable for the implementor of a tool for using or implementing COM interfaces to within the body of code managed by his tool turn errors returned from invoked COM interfaces into local exceptions and, conversely, to turn internally generated excep
tions into error-returns across an interface boundary. This is yet another example of the clear architectural difference that needs to be made between the rules and design of the underlying COM system architecture and the ca
pabilities and design freedom afforded to tools that support that architecture.
\par {\*\bkmkstart _Toc298215796}{\*\bkmkstart _Toc298216166}{\*\bkmkstart _Toc324051578}{\*\bkmkstart _Toc324051763}{\*\bkmkstart _Toc324052005}{\pntext\pard\plain\b\i\fs22 3.4.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 HRESUL{\*\bkmkend _Toc298215796}{\*\bkmkend _Toc298216166}T{\*\bkmkend _Toc324051578}{\*\bkmkend _Toc324051763}{\*\bkmkend _Toc324052005}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The key type involved in COM error reporting is {\cs58\f5\fs16\lang1024 HRESULT}.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab The name 
\ldblquote HRESULT\rdblquote  is retained for historical reasons.   Readers familiar with programming COM on the Windows platform will note that HRESULT is analogous to SCODE.}}
 In addition, the COM Library provides a few functions and macros to help applications of any kind deal with error information. An {\cs58\f5\fs16\lang1024 HRESULT }is a simple 32-bit value:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef LONG {\b HRESULT}
{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 \ldblquote HRESULT
\rdblquote }}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 An {\cs58\f5\fs16\lang1024 HRESULT} is divided up into an internal structure that has four fields with the following format (numbers indicate bit positions):
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {\pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {\object\objemb\objw10096\objh2265\objcropb1560\objcropr3329{\*\objclass Excel.Sheet.5}{\*\objdata 01050000020000000e000000457863656c2e53686565742e3500
0000000000000000001e0000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff08000000feffffff0400000005000000060000000700000009000000feffffff0a0000000b0000000c0000000d000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e007400720079000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16000500ffffffffffffffff020000001008020000000000c00000000000004600000000fffffffffffffffff08b
140561a2ba0103000000c0130000ffffffff01004f006c0065000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a000201ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000
00000000000000000000000014000000ffffffff03005000490043000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0002010100000004000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000
00000000000000000000010000004c000000ffffffff42006f006f006b000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a000201ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000
000000000000000000000000030000009f080000fffffffffeffffff02000000feffffff0400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a00
00001b0000001c0000001d0000001e0000001f000000200000002100000022000000230000002400000025000000feffffff2700000028000000290000002a0000002b0000002c0000002d0000002e0000002f00000030000000310000003200000033000000340000003500000036000000370000003800000039000000
3a0000003b0000003c0000003d0000003e0000003f000000400000004100000042000000430000004400000045000000460000004700000048000000490000004a0000004b000000feffffff4d000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0100000200000000000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff09000600000000000000000000004c00000000000000000008008e4500009b0f00006f270000d90800000000
0000000000000000000000000000e8030000e80300000000000000000000010d0000180600000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000908080000050500f90cca0742000200e4049c0002000e00de000800
506b0000090000231900020000001200020000001300020000003d001200780078007a3a591f380000000000010058024000020000008d00020000002200020000000e0002000100da000200000031001400a0000000ff7f900100000000000005417269616c31001400a0000100ff7fbc0200000000000005417269616c
31001400a0000200ff7f900100000000000005417269616c31001400a0000300ff7fbc0200000000000005417269616c31001400a0000000ff7f900100000000000005417269616c1e041a00050017222422232c2323305f293b5c28222422232c2323305c291e041f0006001c222422232c2323305f293b5b5265645d5c
28222422232c2323305c291e04200007001d222422232c2323302e30305f293b5c28222422232c2323302e30305c291e042500080022222422232c2323302e30305f293b5b5265645d5c28222422232c2323302e30305c291e0435002a00325f282224222a20232c2323305f293b5f282224222a205c28232c2323305c29
3b5f282224222a20222d225f293b5f28405f291e042c002900295f282a20232c2323305f293b5f282a205c28232c2323305c293b5f282a20222d225f293b5f28405f291e043d002c003a5f282224222a20232c2323302e30305f293b5f282224222a205c28232c2323302e30305c293b5f282224222a20222d223f3f5f29
3b5f28405f291e0434002b00315f282a20232c2323302e30305f293b5f282a205c28232c2323302e30305c293b5f282a20222d223f3f5f293b5f28405f29e000100000000000f5ff2000c020000000000000e000100001000000f5ff20f4c020000000000000e000100001000000f5ff20f4c020000000000000e0001000
02000000f5ff20f4c020000000000000e000100002000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff
20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e000100000000000f5ff20f4c020000000000000e00010000000000001002000c0200000
00000000e000100005002b00f5ff20f8c020000000000000e000100005002900f5ff20f8c020000000000000e000100005002c00f5ff20f8c020000000000000e000100005002a00f5ff20f8c020000000000000e000100005000900f5ff20f8c020000000000000e00010000000000001002230c020408049804020e000
10000000000001002210c020000000000000e00010000000000001002630c020408009804000e00010000000000001002630c020408001800000e00010000000000001002630c02040804180002093020400108003ff93020400118006ff93020400128004ff93020400138007ff93020400008000ff93020400148005ff
85000d009f0400000000065368656574310a0000000908080000051000f90cca070d00020001000c00020064000f000200000011000200000010000800fca9f1d24d62503f5f00020001002a00020000002b0002000000820002000000800008000000000000000000250204000000e1008c0004000100010081000200c1
04140003000226411500080007506167652026508300020000008400020000004d00ee0000004f7572205072696e74657200696e736f6e73140005417269616c1c0001382000200301037c007000034a01000100010000000000000001000f000000020001000000020000004c657474657200f1b13f0d02000058f1b13f
0d01000000000000ffffff0044384e0000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000ffff0000000000000000000000000000000000000000000000000000000000000000000000001800
00000000204e204e204e000010270000000000000000a100220001006400010001000100020000000000000000000000e03f000000000000e03f00005500020008007d000c0000001f0055020f000000020000020a000000030000002000000008021000000000002000e100000000008001160008021000010000002000
e10000007c3f8001160008021000020000002000e1000000703f80011600bd001e00000000001600000008401600000008401600000000401600000000400300be001c0000000400160016001600160016001600160016001600160016000e00bd00120000000f0016000000f03f16000000f03f1000be00240000001100
1600160016001600160016001600160016001600160016001600160016001f00bd001e000100000016000000f03f1600000000001600000022401600000020400300be001c0001000400160016001600160016001600160016001600160016000e00bd00120001000f001600000018401600000014401000be0022000100
1100160016001600160016001600160016001600160016001600160016001e007e020a0001001f00160000000000040209000200000015000100530402090002000100180001005201020600020002001900040210000200030018000800466163696c697479be001e000200040018001800180018001800180018001800
18001800180019000f0004020c000200100017000400436f6465be002400020011001800180018001800180018001800180018001800180018001800180019001f00d7000a00da010000280080008c003e020a00b4060000000000000000a00004006f0064001d000f000300000000000001000000010000ffab00220020
0000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a000000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff09000608008e459b0f0000010009000003ad040000090005020000000005000000090200000000050000000102ffffff000400000004010d000400
000002010200050000000c029700a102030000001e0005020000f7000003000100000000800000000080000080800000000080008000800000808000c0c0c000c0dcc000a6caf00003004d004500540041000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffff0c0002000300000005000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000002600000062090000ffffffff010043006f006d0070004f0062006a000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff12000201ffffffff06000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000004c0000006a000000ffffffff03004f0062006a0049006e0066006f000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffff12000200ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000004e00000004000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000040080000480800004000080048000800400808004808080048080ff0480206004ffffc004a0e0e0046000
8004ff8080040080c004c0c0ff0400cfff0469ffff04e0ffe004dd9cb304b38fee042a6ff9043fb8cd0448843604958c41048e5e4204a0627a04624fac041d2fbe042866760400450004453e01046a28130485396a044a32850404040404080808040c0c0c0411111104161616041c1c1c04222222042929290430303004
5f5f5f04555555044d4d4d044242420439393904000700040d000004b79981048499b404bdbd90047f7f600460607f04000e00041b0000042800000408092b04001d00043900000400009b04002500044900000411113b04002f00045d00000417174504003a0004491111041c1c53040016ff042b00ff0421216c045914
140400510004471a6a0419326704006100040031ff046100ff0453207b04164367042e2ee2042659160451460404682e490407528f046a18b804902315040053ff04a300ff046a4a120475336c044a419a0437650b04a42c1504831fb1044e2cff042051b604086492046f560b045943ad0436721204b033170400a10004
775f1f0489477104b0431c04b72d7d04008695047a6e2304269f000473a90104000000040000000400000004000000040000000400000004000000040000000400ca0004ac5b0104201dc2049452700424aa4c040a948904366e7b0444759004ff00a8040071ff04df00ff0456914a043448f804cc328204e441700468ca
010436bc4204009aff049622b704857d330425b78c04365aed045cff0004ff480004229ba20442cf4d04c258520420d39504a524e0047356b504a9a90004d06f3c04679f580489cf0b04ffac0004a72efe04e2597f044cdc6704ff18ff043a7dff04b1d01804c7ff0004ffe20004df9a3d0456819f04c643ba04af718b04
38a2c904d153ce04ff9a650446cadb04ff4dff04c8e96a044cdee004ff98ff04dfc08204e9eca504f5f6cd04ffd0ff04b1ac5a046391ae04224c65048d4e3f0450707004d0ffff04ffe7ff04696969047777770486868604969696049d9d9d04a4a4a404b2b2b204cbcbcb04d7d7d704dddddd04e3e3e304eaeaea04f1f1
f104f8f8f804b2c1660480bf7804c6f0f004b2a4ff04ffb3ff04d18ea304c3dc3704a09e540476ae7004789ec1048364bf04a483d304d13f3204ff7d000444782304245f60040e0e2c04be000004ff1f000431390004d9853e0402778504b0d8810456211d040000300488c8b304a0790004c0c0c004ea70810451f16904
ffff80049174cd04ff7cff04a2ffff04fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff000400000034020000030000003500040000002701ffff050000000b0200000000030000001e00050000000102ffffff0005000000090200000000040000002701ffff03000000
1e00050000000102ffffff00050000000902000000000700000016049700a1020000000007000000fc020000000000000100040000002d0101000400000004010d00040000000201020008000000fa0200000000000000000000040000002d0102000500000014021e0000000500000013022e00000008000000fa020000
0000000000000000040000002d010300090000001d062100f000100001001e000000040000002d0102000500000014021f000e000500000013022e000e00040000002d010300090000001d062100f0000f0001001f000e00040000002d0102000500000014021f002a000500000013022e002a00040000002d0103000900
00001d062100f0000f0001001f002a00040000002d0102000500000014021f00e0000500000013022e00e000040000002d010300090000001d062100f0000f0001001f00e000040000002d0102000500000014021f00c0010500000013022e00c001040000002d010300090000001d062100f0000f0001001f00c0010400
00002d0102000500000014021e0001000500000013021e00c101040000002d010300090000001d062100f0000100c0011e000100040000002d0102000500000014022d0001000500000013022d00c101040000002d010300090000001d062100f0000100c0012d00010007000000fc020000ffffff000000040000002d01
0400040000002701ffff030000001e00040000002d010100050000000102ffffff00050000000902000000000700000016049700a102000000001c000000fb02f5ff000000000000bc020000000000000000417269616c00f37708b2f377ffffffff30f61200d7e9ec77000000000c000000040000002d01050004000000
2d0104001c000000fb021000070000000000bc02000000000102022253797374656d00000200000020f61200230000003002f77f88c6140007e4ec77040000002d010600040000002701ffff030000001e00040000002d010500040000002d010100050000000102ffffff00050000000902000000000700000016049700
a102010001001c000000fb02f5ff00000000000090010000000000000000417269616c00f37708b2f377ffffffff58f41200d7e9ec77000000000c000000040000002d0107000400000004010d00040000000201010009000000320a01000500010000003300060009000000320a01001300010000003300060009000000
320a01002100010000003200060009000000320a01002f00010000003200060009000000320a0100d700010000003100060009000000320a0100e500010000003100060009000000320a10000500010000003100060009000000320a10001300010000003000060009000000320a10002100010000003900060009000000
320a10002f00010000003800060009000000320a1000d700010000003600060009000000320a1000e500010000003500060009000000320a1000b701010000003000060009000000320a1f000400010000005300070009000000320a1f001900010000005200070013000000320a1f00750008000000466163696c697479
060006000600020002000200030006000d000000320a1f00440104000000436f6465070006000600060007000000fc020000000000000000040000002d01080004000000f0010100040000002701ffff030000000000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0100feff030a0000ffff
ffff1008020000000000c0000000000000461e0000004d6963726f736f667420457863656c20352e3020576f726b736865657400060000004269666635000e000000457863656c2e53686565742e3500f439b271000000000000000000000000d0cf11e0a1b11ae1000000000000000000000000000000000300d0cf11e0
a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01050000
00000000}{\result {{\pict\wmetafile8\picw17806\pich3995\picwgoal10095\pichgoal2265 \piccropr3329\piccropb1560 
010009000003ad040000090005020000000005000000090200000000050000000102ffffff000400000004010d000400000002010200050000000c029700a102030000001e0005020000f7000003000100000000800000000080000080800000000080008000800000808000c0c0c000c0dcc000a6caf00080000004008000
0480800004000080048000800400808004808080048080ff0480206004ffffc004a0e0e00460008004ff8080040080c004c0c0ff0400cfff0469ffff04e0ffe004dd9cb304b38fee042a6ff9043fb8cd0448843604958c41048e5e4204a0627a04624fac041d2fbe042866760400450004453e01046a28130485396a044a32
850404040404080808040c0c0c0411111104161616041c1c1c042222220429292904303030045f5f5f04555555044d4d4d044242420439393904000700040d000004b79981048499b404bdbd90047f7f600460607f04000e00041b0000042800000408092b04001d00043900000400009b04002500044900000411113b0400
2f00045d00000417174504003a0004491111041c1c53040016ff042b00ff0421216c045914140400510004471a6a0419326704006100040031ff046100ff0453207b04164367042e2ee2042659160451460404682e490407528f046a18b804902315040053ff04a300ff046a4a120475336c044a419a0437650b04a42c1504
831fb1044e2cff042051b604086492046f560b045943ad0436721204b033170400a10004775f1f0489477104b0431c04b72d7d04008695047a6e2304269f000473a90104000000040000000400000004000000040000000400000004000000040000000400ca0004ac5b0104201dc2049452700424aa4c040a948904366e7b
0444759004ff00a8040071ff04df00ff0456914a043448f804cc328204e441700468ca010436bc4204009aff049622b704857d330425b78c04365aed045cff0004ff480004229ba20442cf4d04c258520420d39504a524e0047356b504a9a90004d06f3c04679f580489cf0b04ffac0004a72efe04e2597f044cdc6704ff18
ff043a7dff04b1d01804c7ff0004ffe20004df9a3d0456819f04c643ba04af718b0438a2c904d153ce04ff9a650446cadb04ff4dff04c8e96a044cdee004ff98ff04dfc08204e9eca504f5f6cd04ffd0ff04b1ac5a046391ae04224c65048d4e3f0450707004d0ffff04ffe7ff04696969047777770486868604969696049d
9d9d04a4a4a404b2b2b204cbcbcb04d7d7d704dddddd04e3e3e304eaeaea04f1f1f104f8f8f804b2c1660480bf7804c6f0f004b2a4ff04ffb3ff04d18ea304c3dc3704a09e540476ae7004789ec1048364bf04a483d304d13f3204ff7d000444782304245f60040e0e2c04be000004ff1f000431390004d9853e0402778504
b0d8810456211d040000300488c8b304a0790004c0c0c004ea70810451f16904ffff80049174cd04ff7cff04a2ffff04fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff000400000034020000030000003500040000002701ffff050000000b0200000000030000001e0005
0000000102ffffff0005000000090200000000040000002701ffff030000001e00050000000102ffffff00050000000902000000000700000016049700a1020000000007000000fc020000000000000100040000002d0101000400000004010d00040000000201020008000000fa0200000000000000000000040000002d01
02000500000014021e0000000500000013022e00000008000000fa0200000000000000000000040000002d010300090000001d062100f000100001001e000000040000002d0102000500000014021f000e000500000013022e000e00040000002d010300090000001d062100f0000f0001001f000e00040000002d01020005
00000014021f002a000500000013022e002a00040000002d010300090000001d062100f0000f0001001f002a00040000002d0102000500000014021f00e0000500000013022e00e000040000002d010300090000001d062100f0000f0001001f00e000040000002d0102000500000014021f00c0010500000013022e00c001
040000002d010300090000001d062100f0000f0001001f00c001040000002d0102000500000014021e0001000500000013021e00c101040000002d010300090000001d062100f0000100c0011e000100040000002d0102000500000014022d0001000500000013022d00c101040000002d010300090000001d062100f00001
00c0012d00010007000000fc020000ffffff000000040000002d010400040000002701ffff030000001e00040000002d010100050000000102ffffff00050000000902000000000700000016049700a102000000001c000000fb02f5ff000000000000bc020000000000000000417269616c00f37708b2f377ffffffff30f6
1200d7e9ec77000000000c000000040000002d010500040000002d0104001c000000fb021000070000000000bc02000000000102022253797374656d00000200000020f61200230000003002f77f88c6140007e4ec77040000002d010600040000002701ffff030000001e00040000002d010500040000002d010100050000
000102ffffff00050000000902000000000700000016049700a102010001001c000000fb02f5ff00000000000090010000000000000000417269616c00f37708b2f377ffffffff58f41200d7e9ec77000000000c000000040000002d0107000400000004010d00040000000201010009000000320a01000500010000003300
060009000000320a01001300010000003300060009000000320a01002100010000003200060009000000320a01002f00010000003200060009000000320a0100d700010000003100060009000000320a0100e500010000003100060009000000320a10000500010000003100060009000000320a1000130001000000300006
0009000000320a10002100010000003900060009000000320a10002f00010000003800060009000000320a1000d700010000003600060009000000320a1000e500010000003500060009000000320a1000b701010000003000060009000000320a1f000400010000005300070009000000320a1f0019000100000052000700
13000000320a1f00750008000000466163696c697479060006000600020002000200030006000d000000320a1f00440104000000436f6465070006000600060007000000fc020000000000000000040000002d01080004000000f0010100040000002701ffff03000000000000}}}}}
\par \pard \s40\keep\keepn\widctlpar {\f11\fs16 
\par }\pard\plain \qj\fi-900\li1620\sa60\keepn\widctlpar \f4\fs20 {\b S}: \tab (1 bit) Severity field:
\par \pard \qj\fi-547\li2160\sa60\widctlpar\tx1260 0\tab {\i Success}. The function was successful; it behaved according to its proscribed semantics.
\par 1\tab {\i Error}. The function failed due to an error condition.
\par \pard \qj\fi-900\li1620\sa60\widctlpar {\b R}:\tab (2 bits) Reserved for future use; must be set to zero by present programs generating {\cs58\f5\fs16\lang1024 HRESULTs}
; present code should not take action that relies on any particular bits being set or cleared this field.
\par {\b Facility}:\tab (13 bits) Indicates which group of status codes this belongs to. New facilities must be allocated by a central coordinating body since they need to be universally unique.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab As of this writing, said body is Microsoft Corporation.}} However, the need for new facility codes is very small. Most cases can and should use {\f5\fs16 FACILITY_ITF}
. See the section \ldblquote Use of {\cs58\f5\fs16\lang1024 FACILITY_ITF}\rdblquote  below.
\par {\b Code}: \tab (16 bits) Describes what actually took place, error or otherwise.
\par \pard \qj\sb240\sa60\keepn\widctlpar COM presently defines the following facility codes{\pard\plain \qj\sb240\sa60\keepn\widctlpar \b\v\f4\fs12 {\xe {\b\fs12 facility codes}}}:
\par \trowd \trgaph108\trleft-108 \cellx1890\cellx2880\cellx8748 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Facility Name\cell \pard \s54\qc\keepn\widctlpar\intbl Facility Value\cell \pard \s54\keepn\widctlpar\intbl Description\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1890\cellx2880\cellx8748 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 FACILITY_NULL}{\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \b\i\v\f5\fs12 {\xe {\b\i\f5\fs12 \ldblquote FACILITY_NULL\rdblquote }}}\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 0\cell \pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
Used for broadly applicable common status codes that have no specific grouping. {\cs58\f5\fs16\lang1024 S_OK }belongs to this facility, for example.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 FACILITY_ITF}{\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \b\i\v\f5\fs12 {\xe {\b\i\f5\fs12 \ldblquote FACILITY_ITF\rdblquote }}}{\f5\fs16 \cell }\pard \s53\qc\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 4\cell \pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 Used for by far the majority of result codes that are returned from an interface member function. Use of this facility in
dicates that the meaning of the error code is defined solely by the definition of the particular interface in question; an HRESULT with exactly the same 32-bit value returned from another interface might have a different meaning\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 FACILITY_RPC}{\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \b\i\v\f5\fs12 {\xe {\b\i\f5\fs12 
\ldblquote FACILITY_RPC\rdblquote }}}{\f5\fs16 \cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 1\cell \pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
Used for errors that result from an underlying remote procedure call implementation. In general, this specification does not explicitly document the RPC errors that can be returned from functions, though they nevertheless can be returned in situa
tions where the interface being used is in fact remoted\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 FACILITY_DISPATCH}{\pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \b\i\v\f5\fs12 {\xe {\b\i\f5\fs12 \ldblquote FACILITY_DISPATCH\rdblquote }}}{\f5\fs16 \cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 2\cell \pard \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 Used for {\cs58\f5\fs16\lang1024 IDispatch}-interface-related status codes.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\f5\fs16 FACILITY_STORAGE}{\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \b\i\v\f5\fs12 {\xe {\b\i\f5\fs12 \ldblquote FACILITY_STORAGE\rdblquote }}}{\f5\fs16 \cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 3\cell \pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
Used for persistent-storage-related status codes. Status codes whose code (lower 16 bits) value is in the range of DOS error codes (less than 256) have the same meaning as the corresponding DOS error.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 FACILITY_WIN32}{\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \b\i\v\f5\fs12 {\xe {\b\i\f5\fs12 \ldblquote FACILITY_WIN32
\rdblquote }}}{\f5\fs16 \cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 7\cell \pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 Used to provide a means of mapping an error code from a function in the
 Win32 API into an {\cs58\f5\fs16\lang1024 HRESULT.} The semantically significant part of a Win32 error is 16 bits large.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 
{\f5\fs16 FACILITY_WINDOWS}{\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \b\i\v\f5\fs12 {\xe {\b\i\f5\fs12 \ldblquote FACILITY_WINDOWS\rdblquote }}}{\f5\fs16 \cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 8\cell \pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 Used for additional error codes from Microsoft-defined interfaces.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 FACILITY_CONTROL}{\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \b\i\v\f5\fs12 {\xe {\b\i\f5\fs12 \ldblquote FACILITY_CONTROL\rdblquote }}}{\f5\fs16 \cell }\pard 
\s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 10\cell \pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 Used for OLE Controls-related error values.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd 
\trgaph108\trleft-108 \cellx1890\cellx2880\cellx8748 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 \cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \cell \pard 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard \qj\sa60\widctlpar A particular {\cs58\f5\fs16\lang1024 HRESULT }value by convention uses the following naming structure:
\par \pard \qj\sa60\keepn\widctlpar \tab <{\b Facility}>_<{\b Sev}>_<{\b Reason}>
\par \pard \qj\sa60\widctlpar where <{\b Facility}> is either the facility name or some other distinguishing identifier, <{\b Sev}> is a single letter, one of the set \{ S, E \} indicating the severity (success or error), and <{\b Reason}
> is a short identifier that describes the meaning of the code. Status codes from {\f5\fs16 FACILITY_NULL} omit the <{\b Facility}>_ prefix. For example, the status code {\f5\fs16 E_NOMEMORY }is the general out-of memory error. All codes have either {
\cs58\f5\fs16\lang1024 S_ }or {\cs58\f5\fs16\lang1024 E_} in them allowing quick visual determination if the code means success or failure.
\par The general \ldblquote success\rdblquote  {\cs58\f5\fs16\lang1024 HRESULT }is named {\cs58\f5\fs16\lang1024 S_OK}, meaning \ldblquote everything worked\rdblquote  as per the function specification. The value of this {\cs58\f5\fs16\lang1024 HRESULT }
is zero. In addition, as it is useful to have functions that can succeed but return Boolean results, the code {\cs58\f5\fs16\lang1024 S_FALSE }is defined are success codes intended to mean \ldblquote function worked and the result is false.\rdblquote 

\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 #define\tab {\b S_OK}{\pard\plain 
\s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 {\xe {\b\f4\fs12 S_OK}}}\tab \tab 0
\par #define\tab {\b S_FALSE}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 {\xe {
\b\f4\fs12 S_FALSE}}}\tab \tab 1
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 A list of presently-defined standard error codes and their semantics can be found in Appendix A.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 From a general interface design perspective, \ldblquote success\rdblquote  status codes should be used for circumstances where the consequence of \ldblquote what happened\rdblquote 
 in a method invocation is most naturally understood and dealt with by client code by looking at the out-values returned from the interface function: {\cs58\f5\fs16\lang1024 NULL }pointers, etc. \ldblquote Error\rdblquote 
 status codes should in contrast be used in situations where the function has performed in a manner that would naturally require \ldblquote out of band\rdblquote  processing in the client code, logic that is written to deal with situa
tions in which the interface implementation truly did not behave in a manner under which no
rmal client code can make normal forward progress. The distinction is an imprecise and subtle one, and indeed many existing interface definitions do not for historical reasons abide by this reasoning. However, with this ap
proach, it becomes feasible to implement automated COM development tools that appropriately turn the error codes into exceptions as was mentioned above.
\par Interface functions in general take the form:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
HRESULT ISomeInteface::SomeFunction(ARG1_T arg1, ... , ARGN_T argn, RET_T * pret);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Stylisti
cally, what would otherwise be the return value is passed as an out-value through the last argument of the function. COM development tools which map error returns into exceptions might also consider map
ping the last argument of such a function containing only one out-parameter into what the programmer sees as the \ldblquote return value\rdblquote  of the method invocation.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The COM remoting infrastructure only supports reporting of RPC-induced errors (such as communication failures) through interface member functions that return {\cs58\f5\fs16\lang1024 HRESULTs}
. For interface member functions of other return types (e.g.: void), such errors are silently discarded. To do otherwise would, to say the least, significantly complicate local / remote transparency.
\par {\*\bkmkstart _Toc298215797}{\*\bkmkstart _Toc298216167}{\pntext\pard\plain\b\fs20\lang1024 3.4.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Use of FACILITY_ITF
{\*\bkmkend _Toc298215797}{\*\bkmkend _Toc298216167}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote FACILITY_ITF\rdblquote }}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The use of {\f5\fs16 FACILITY_ITF} deserves some special discussion with respect to interfaces defined in COM and interfaces that will be defined in the future. Where as status codes with other facilities ({
\f5\fs16 FACILITY_NULL}, {\f5\fs16 FACILITY_RPC}, etc.) have universal meaning, status codes in {\f5\fs16 FACILITY_ITF} have their meaning completely determined by the interface member function (or API function) from which they are returned; {\i 
the same 32-bit value in }{\i\f5\fs16 FACILITY_ITF}{\i  returned from two different interface functions may have completely different meanings}.
\par The reasoning behind this distinction is as follows. For reasons of efficiency, it is unreasonable to have the primary error code data type ({\cs58\f5\fs16\lang1024 HRESULT}) be larger than 32 bits in size. 32 bits is not large enough, unfortu
nately, to enable COM to develop an allocation policy for error codes that will universally avoid conflict between codes allocated by different non-communicating programmers at different times in different places (contrast, for instance, with what is done
 with IIDs and CLSIDs). Therefore, COM structures the use of the 32 bit SCODE in such a way so as to allow the a central coordinating body{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super 
\chftn }\tab As of this writing, said body is Microsoft Corporation.}} to define {\i some} universally defined error cod
es while at the same time allowing other programmers to define new error codes without fear of conflict by limiting the places in which those field-defined error codes can be used. Thus:
\par \pard \qj\fi-360\li1080\sa60\widctlpar 1.\tab Status codes in facilities other than {\f5\fs16 FACILITY_ITF} can only be defined by the central coordinating body.
\par 2.\tab Status codes in facility {\f5\fs16 FACILITY_ITF} are defined solely by the {\i definer of the interface} or API by which said status code is returned. That is, in order to avoid conflicting error codes, a human being needs to coor
dinate the assignment of codes in this facility, and we state that he who defines the interface gets to do the coordination.
\par \pard \qj\sa60\widctlpar COM itself defines a number of interfaces and APIs, and so COM defines many status codes in {\f5\fs16 FACILITY_ITF}. By design, none of the COM-defined status codes in fact have the same value, even if re
turned by different interfaces, though it would have been legal for COM to do otherwise. 
\par Likewise, it is possible (though not required) for designers of COM interface suites to coordinate the e
rror codes across the interfaces in that suite so as to avoid duplication. The designers of the OLE 2 interface suite, for example, ensured such lack of duplication.
\par Thus, with regard to which errors can be returned by which interface functions, it is the case that, in the extreme,
\par \pard \qj\fi-360\li1080\sa60\widctlpar {\field\flddirty{\*\fldinst SYMBOL 183 \\f "Symbol" \\s 10 \\h}{\fldrslt }}\tab It is legal that any COM-defined {\i error} code may in fact be returned by any COM-defined in
terface member function or API function. This includes errors presently defined in {\cs58\f5\fs16\lang1024 FACILITY_ITF}. Further, COM may in the future define new failure codes (but not {\i success} codes) that may also be so ubiquitously returned.

\par \tab Designers of interface suites may if they wish choose to provide similar rules across the interfaces in their suites.
\par {\field\flddirty{\*\fldinst SYMBOL 183 \\f "Symbol" \\s 10 \\h}{\fldrslt }}\tab Further, any {\i error }in {\f5\fs16 FACILITY_RPC} or other facility, even those errors not presently defined, may be returned.
\par \pard \qj\sa60\widctlpar Clients must treat error codes that are unknown to them as synonymous with {\f5\fs16 E_UNEXPECTED}, which in general should be and is presently 
a legal error return value from each and every interface member function in all interfaces; interface designers and implementors {\i are responsible to insure}
 that any newly defined error codes they should choose to invent or return will be such that that existing clients with code treating generic cases as synonymous with {\cs58\f5\fs16\lang1024 E_UNEXPECTED }this will have reasonable behavior.
\par In short, if you know the function you invoked, you know as a client how to unambiguously take action on any error code you receive. The interface implementor is responsible for maintaining your ability to do same.
\par Normally, of course, only a small subset of the COM-defined status codes will be usefully returned by a given interface function or API, but the immediately preceding statements are in fact the actual interoper
ability rules for the COM-defined interfaces. This specification endeavors to point out which error codes are particularly useful for each function, but code must be written to correctly handle the general rule. 
\par The present document is, however, precise as to which {\i success }codes may legally be returned.
\par Conversely, it is {\i only}
 legal to return a status code from the implementation of an interface member function which has been sanctioned by the designer of that interface as being legally returnable; otherwise, there is the possibility of conflict between these returned code val
ues and the codes in-fact sanctioned by the interface designer. Pay particular attention to this when propagating errors from internally called functions. Nev
ertheless, as noted above, callers of interfaces must to guard themselves from imprecise interface implementations by treating any otherwise unknown returned error code (in contrast with success code) as synonymous with {\f5\fs16 E_UNEXPECTED}
: experience shows that programmers are notoriously lax in dealing with error handling. Further, given the third bullet point above, this coding practice is {\i required }
by clients of the COM-defined interfaces and APIs. Pragmatically speaking, however, this is little burden to programmers: normal practice is to handle a few special error codes specially, but treat the rest generically.
\par All the COM-defined {\f5\fs16 FACILITY_ITF} codes will, in fact, have a {\i code }value which lies in the region {\f5\fs16 0x0000 \emdash  0x01FF}. Thus, while it is indeed legal for the definer of a new function or interface to make use of any codes in {
\f5\fs16 FACILITY_ITF} that he chooses in any way he sees fit, it is highly recommended that only {\i code }values in the range {\f5\fs16 0x0200 \emdash  0xFFFF} be used, as this will reduce the possibility of accidenta
l confusion with any COM-defined errors. It is also highly recommended that designers of new functions and interfaces consider de
fining as legal that most if not all of their functions can return the appropriate status codes defined by COM in facilities other than {\f5\fs16 FACILITY_ITF}. {\f5\fs16 E_UNEXPECTED}
 is a specific error code that most if not all interface definers will wish to make universally legal.
\par {\*\bkmkstart _Toc298215798}{\*\bkmkstart _Toc298216168}{\*\bkmkstart _Toc324051579}{\*\bkmkstart _Toc324051764}{\*\bkmkstart _Toc324052006}{\pntext\pard\plain\b\i\fs22 3.4.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 COM Library Error-Related Macros and Functions{\*\bkmkend _Toc298215798}{\*\bkmkend _Toc298216168}{\*\bkmkend _Toc324051579}{\*\bkmkend _Toc324051764}{\*\bkmkend _Toc324052006}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The following macros and functions are defined in the COM Library include files to manipulate status code values.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
\par #define {\b SEVERITY_SUCCESS}\tab \tab 0
\par #define {\b SEVERITY_ERROR}\tab \tab \tab 1
\par 
\par #define {\b SUCCEEDED}(Status)\tab \tab \tab ((HRESULT)(Status) >= 0)
\par #define {\b FAILED}(Status)\tab \tab \tab \tab ((HRESULT)(Status)<0)
\par 
\par #define {\b HRESULT_CODE}(hr)    \tab \tab ((hr) & 0xFFFF)
\par #define {\b HRESULT_FACILITY}(hr)  \tab \tab (((hr) >> 16) & 0x1fff)
\par #define {\b HRESULT_SEVERITY}(hr)  \tab \tab (((hr) >> 31) & 0x1)
\par 
\par #define {\b MAKE_HRESULT}(sev,fac,code) \\
\par \tab ((HRESULT) (((unsigned long)(sev)<<31) | ((unsigned long)(fac)<<16) | ((unsigned long)(code))) )
\par {\pntext\pard\plain\b\fs20\lang1024 3.4.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 SUCCEEDED{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote SUCCEEDED\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 SUCCEEDED(HRESULT Status)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The SUCCEEDED macro returns TRUE if the severity of the status code is either success or information; otherwise, FALSE is returned.
\par {\pntext\pard\plain\b\fs20\lang1024 3.4.2.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 FAILED{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote FAILED\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 FAILED(HRESULT Status)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\f5 The FAILED} macro returns {\f5 TRUE} if the severity of the status code is either a warning or error; otherwise, {\f5 FALSE} is returned.
\par {\pntext\pard\plain\b\fs20\lang1024 3.4.2.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 HRESULT_CODE{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote HRESULT_CODE\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT{\lang1033 _CODE(}HRESULT hr{\lang1033 )
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 HRESULT_CODE returns the error code part from a specified status code.
\par {\pntext\pard\plain\b\fs20 3.4.2.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 HRESULT_{\lang1033 FACILITY}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote HRESULT_FACILITY\rdblquote }}}{\lang1033 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT_FACILITY(HRESULT hr{\lang1033 )}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 HRESULT_FACILITY extracts the facility from a specified status code.
\par {\pntext\pard\plain\b\fs20 3.4.2.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 HRESULT_{\lang1033 SEVERITY}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote HRESULT_SEVERITY\rdblquote }}}{\lang1033 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT_SEVERITY(HRESULT hr)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 HRESULT_SEVERITY extracts the severity field from the specified status code.
\par {\pntext\pard\plain\b\fs20 3.4.2.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 {\lang1033 MAKE_HRESULT}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote MAKE_HRESULT\rdblquote }}}{\lang1033 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 {\lang1033 MAKE_HRESULT(}SEVERITY {\lang1033 sev,} FACILITY {\lang1033 fac,} HRESULT hr)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 MAKE_HRESULT makes a new status code given a severity, a facility, and a status code.
\par {\*\bkmkstart _Toc324051580}{\*\bkmkstart _Toc324051765}{\*\bkmkstart _Toc324052007}{\*\bkmkstart _Toc339182942}{\pntext\pard\plain\b 3.5\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2
\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Enumerators and Enumerator Interfaces{\*\bkmkend _Toc324051580}{\*\bkmkend _Toc324051765}{\*\bkmkend _Toc324052007}{\*\bkmkend _Toc339182942}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\pard\plain \qj\sa60\widctlpar \v\f4\fs20 {\xe {Enumerators}}}
A frequent programming task is that of iterating through a sequence of items. The COM interfaces are no exception: there are places in several interfaces described in this specification where a client of some object needs to iterate through a sequence of 
items controlled by the object. COM supports such enumeration through the use of \ldblquote enumerator objects.\rdblquote  Enumerators cleanly separate the caller\rquote s desire to loop over a set of objects from the callee\rquote 
s knowledge of how to accomplish that function.
\par Enumerators are just a concept; there is no actual interface called {\cs58\f5\fs16\lang1024 IEnumerator }or {\cs58\f5\fs16\lang1024 IEnum }
or the like. This is due to the fact that the function signatures in an enumerator interface must include the type of the things that the enumerator enumerates. As a consequence, separate interfaces exist for each kind of thing that can be enumerated. How
ever, the difference in the type being enumerated is the {\i only} difference between each of these interfaces; they are all used in fundamentally the same way. In other words, they are \ldblquote generic\rdblquote 
 over the element type. This document describes the semantics of enumerators using a generic interface {\cs58\f5\fs16\lang1024 IEnum} and the C++ parameterized type syntax where ELT_T, which stands for \ldblquote {\b EL}emen{\b T} {\b T}ype\rdblquote {
\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab \ldblquote elt\rdblquote  by itself in the function prototypes is just \ldblquote element\rdblquote }}
 is representative of the type involved in the enumeration:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 \tab 
\par [
\par     object,
\par     uuid(<IID_IEnum <ELT_T>>),  // IID_IEnum<ELT_T>
\par     pointer_default(unique)
\par ]
\par interface IEnum<ELT_T> : IUnknown
\par \{
\par     HRESULT Next( [in] ULONG celt, [out] IUnknown **rgelt, [out] ULONG *pceltFetched );
\par     HRESULT Skip( [in] ULONG celt );
\par     HRESULT Reset( void );
\par     HRESULT Clone( [out] IEnum<ELT_T>**ppenum );
\par \}
\par 
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 A typical use of an enumerator is the following.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 //Somewhere there\rquote 
s a type called \ldblquote String\rdblquote 
\par typedef char * String;
\par 
\par //Interface defined using template syntax
\par typedef IEnum<char *>\tab IEnumString;
\par ...
\par interface IStringManager \{ 
\par \tab virtual IEnumString* EnumStrings(void) = 0;
\par \tab \};
\par ...
\par void SomeFunc(IStringManager * pStringMan) \tab \{
\par \tab char *        psz;
\par \tab IEnumString * penum;
\par \tab penum=pStringMan->EnumStrings();
\par \tab while (S_OK==penum->Next(1, &psz, NULL))
\par \tab \tab \{
\par \tab \tab //Do something with the string in psz and free it
\par \tab \tab \}
\par \tab penum->Release();
\par \tab return;
\par \tab \}
\par {\pntext\pard\plain\b\i\fs20\lang1024 3.5.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IEnum::Next{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote IEnum\:functions\:Next\rdblquote }}}{\i 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnum::Next(celt, rgelt, pceltFetched)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Attempt to get the next {\cs58\f5\fs16\lang1024 celt }items in the enumeration sequence, and return them through the array pointed to by {\cs58\f5\fs16\lang1024 rgelt}
. If fewer than the requested number of elements remain in the sequence, then just return the remaining ones; the actual number of elements returned is passed through {\cs58\f5\fs16\lang1024 *pceltFetched }(unless it is NULL). If the requested {
\cs58\f5\fs16\lang1024 celt} elements are in fact returned, then return {\cs58\f5\fs16\lang1024 S_OK}; otherwise return {\cs58\f5\fs16\lang1024 S_FALSE}. An error condition other than simply \ldblquote not that many elements left\rdblquote 
 will return an {\cs58\f5\fs16\lang1024 SCODE }which is a failure code rather than one of these two success values.
\par To clarify:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 If {\cs58\f5\fs16\lang1024 S_OK }is returned, then on exit the all {\cs58\f5\fs16\lang1024 celt }
elements requested are valid and returned in {\cs58\f5\fs16\lang1024 rgelt}.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}If {\cs58\f5\fs16\lang1024 S_FALSE} is returned, then on exit only the first {\cs58\f5\fs16\lang1024 *pceltFetched }entries of {\cs58\f5\fs16\lang1024 rgelt }are valid. The contents of the remaining entries in the {
\cs58\f5\fs16\lang1024 rgelt }array are indeterminate.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}If an error value is returned, then on exit no entries in the {\cs58\f5\fs16\lang1024 rgelt} array are valid; they are {\cs58\f5\fs16\lang1024 all }in an indeterminate state.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 celt\tab ULONG}\tab The number of elements that are to be returned.
\par {\cs58\f5\fs16\lang1024 rgelt\chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Think of \ldblquote rgelt\rdblquote  as short for \ldblquote range of elt\rdblquote , signifying an array.}\tab 
ELT_T*}\tab An array of size at least {\cs58\f5\fs16\lang1024 celt}{\i  }in which the next elements are to be returned.
\par {\cs58\f5\fs16\lang1024 pceltFetched\tab ULONG*}\tab May be {\cs58\f5\fs16\lang1024 NULL} if {\cs58\f5\fs16\lang1024 celt}{\i  }is one. If non-{\cs58\f5\fs16\lang1024 NULL}, then this is set with the number of elements actually returned in {
\cs58\f5\fs16\lang1024 rgelt}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The requested number of elements were returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 S_FALSE\cell }Success. Fewer than the requested number of elements were returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain
\b\fs20\lang1024 3.5.1.2\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IEnum::Skip{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {\ldblquote IEnum\:functions\:Skip\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnum::Skip(celt)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Attempt to skip over the next {\cs58\f5\fs16\lang1024 celt}{\i  }elements in the enumeration sequence. Return {\cs58\f5\fs16\lang1024 S_OK} if this was accom
plished, or S_FALSE if the end of the sequence was reached first.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 celt\tab ULONG}\tab The number of elements that are to be skipped.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The requested number of elements were skipped.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 S_FALSE\cell }Success. Some skipping was done, but the end of the sequence was hit before the requested number of elements could be skipped.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\fs20\lang1024 3.5.1.3\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IEnum::Reset{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote IEnum\:functions\:Reset\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnum::Reset(void)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Reset the enumeration sequence back to the beginning.
\par Note that there is no intrinsic guarantee that {\i exactly}
 the same set of objects will be enumerated the second time as was enumerated the first. Though clearly very desirable, whether this is the case or not is dependent on the collection being enumerated; some collections will simply find it too expensive to 
maintain this condition. Consider enumerating the files in a directory, for example, while concurrent users may be making changes.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The enumeration was reset to its beginning.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain
\b\fs20\lang1024 3.5.1.4\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IEnum::Clone{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote IEnum\:functions\:Clone\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnum::Clone(ppenum)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return another enumerator which contains exactly the same enumeration state as this one. Using this func
tion, a client can remember a particular point in the enumeration sequence, then return to it at a later time. Notice that the enumerator returned is of the same actual interface as the one which is being cloned.
\par Caveats similar to the ones found in {\cs58\f5\fs16\lang1024 IEnum::Reset }regarding enumerating the same sequence twice apply here as well.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppenum\tab IEnum<ELT_T>**\tab }The place in which to return the clone enumerator.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The enumeration was reset to its beginning.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
{\*\bkmkstart _Toc324051581}{\*\bkmkstart _Toc324051766}{\*\bkmkstart _Toc324052008}{\*\bkmkstart _Toc339182943}{\pntext\pard\plain\b 3.6\tab}}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2
\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Designing and Implementing Objects{\*\bkmkend _Toc324051581}{\*\bkmkend _Toc324051766}{\*\bkmkend _Toc324052008}{\*\bkmkend _Toc339182943}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Objects can come in all shapes and sizes and applications will implement objects for various purposes with or without assigning the class a {\cs58\f5\fs16\lang1024 CLSID}
. COM servers implement objects for the sake of serving them to clients. In some cases, such as data change notification, a client itself will implement a classless object to essentially provide callback functions for the server object.
\par In all cases there is only one requirement for all objects: implement at least the {\cs58\f5\fs16\lang1024 IUnknown }interface. An object is not a COM object unless it implements at least one interface which at minimum is {\cs58\f5\fs16\lang1024 IUnknown}
. Not all objects even need a unique identifier, that is, a {\cs58\f5\fs16\lang1024 CLSID}. In fact, {\i only }those objects that wish to allow COM to locate and launch their implementations really need a {\cs58\f5\fs16\lang1024 CLSID}
. All other objects do not.
\par {\cs58\f5\fs16\lang1024 IUnknown }implemented by itself can be useful for objects that simply represent the existence of some resource and control that resource\rquote s lifetime witho
ut providing any other means of manipulating that resource. By and large, however, most interesting objects will want to provide more services, that is, additional inter
faces through which to manipulate the object. This all depends on the purpose of the object and the context in which clients (or whatever other agents) use it. The object may wish to provide some data exchange capabilities by implementing {
\cs58\f5\fs16\lang1024 IDataObject}, or may wish to indicate the contract through which it can serialize it\rquote s information by implementing one of the {\cs58\f5\fs16\lang1024 IPersist }
flavors of interfaces. If the object is a moniker, it will implement an interface called {\cs58\f5\fs16\lang1024 IMoniker }that we\rquote ll see in Chapter 9. Objects that are used specifically for han
dling remote procedure calls implement a number of specialized interfaces themselves as we\rquote ll see in Chapter 7.
\par The bottom line is that you decide what functionality th
e object should have and implement the interface that represents that functionality. In some cases there are no standard interfaces that contain the desired functionality in which case you will want to design a custom interface. You may need to provide fo
r remoting that interface as described in Chapter 7.{\b\i 
\par }The following chapters that discuss COM clients and servers use as an example an object class designed to render ASCII text information from text stored in files. This object class is called \ldblquote {\cs58\f5\fs16\lang1024 TextRender}\rdblquote  
and it has a {\cs58\f5\fs16\lang1024 CLSID }of {\cs58\f5\fs16\lang1024 \{12345678-ABCD-1234-5678-9ABCDEF00000\}}{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
Do not use this CLSID for your own purposes\endash it is simply an example. See the section "Identifying and Registering the Object" below.}} defined as the symbol {\cs58\f5\fs16\lang1024 CLSID_TextRender }in some in
clude file. Note again that an object class does not have to have an associated {\cs58\f5\fs16\lang1024 CLSID}. This example has one so we can use it to demonstrate COM clients and servers in Chapters 5 and 6.
\par The {\cs58\f5\fs16\lang1024 TextRender} object can read and write text to and from a file, and so implements the {\cs58\f5\fs16\lang1024 IPersistFile }interface to support those operations. An object can be initialized (see Chapter 5, \ldblquote 
Initializing the Object\rdblquote ) with the contents of a file through {\cs58\f5\fs16\lang1024 IPersistFile::Load}
. The object class also supports rendering the text data into straight text as well as graphically as metafiles and bitmaps. Rendering capabilities are handled through the {\cs58\f5\fs16\lang1024 IDataObject }interface, and {\cs58\f5\fs16\lang1024 
IDataObject::SetData }when given text forms a second initializing function.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab In other words, the client may initialize the obje
ct by telling it to read text from a file or by handing text to it {\f5\fs12 through IDataO}{\f5\fs12 b}{\f5\fs12 ject::SetData}. Either way, the object now has some text to render graphically or to save to a file.}} The operation of {
\cs58\f5\fs16\lang1024 TextRender} objects is illustrated in Figure 3-4:
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw10636\pich3122\picwgoal6030\pichgoal1770 \picscalex50\picscaley50 
0100090000038004000006003100000000000e00000026060f001200ffffffff000008000000a8fa32fe1404f6000a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b0232fea8fa050000000c02c4026c0931000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000a6fa35fefe03e0000e00000026060f001200ffffffff0000080000003c0035fefe03e00007000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06aa00aa00f90017044dfe5400050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06a800a800e000fe0335fe3c00050000001402000000001c000000fb0270ff0000000000
00bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01bf87f040000002d010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ab2ff3901060000004f626a6563747000580028005000500030000400000002010200
0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f9fdbeff9afe560007000000fc020000000000020000040000002d01050004000000f0010300040000002d0102000700000018046f00b3fed6ff11fe050000001402000000002d00000042010500000028000000080000
00080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa02060008000000000000020400
00002d01050004000000f001010007000000180456009afebefff9fd050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009bfe060038000e00040000002d01020007000000fc020100000000000000040000002d01010004000000f0010500040000
00f00103001c000000fb021000070000000000bc02000000000102022253797374656d0003d0bb55033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010400030000001e00070000001604ae00380066ff9bfe08000000fa0206000800000000000002040000002d010400050000001402
060006fd0500000013020600c501040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f9fd9efe9afe36ff07000000fc020000000000020000040000002d0104000700000018044fffb3feb6
fe11fe0500000014020600c5012d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f00104000500000009020000
0002050000000102ffffff0208000000fa0206000800000000000002040000002d01040007000000180436ff9afe9efef9fd0500000014020600c5010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009bfee6fe3800eefe040000002d010200040000002d010100040000
00f001040004000000f0010500030000001e000700000016048eff380046fe9bfe08000000fa0206000800000000000002040000002d010400050000001402e6fe06fd050000001302e6fec501040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff01000000
00000e00000026060f001200ffffffff000008000000a6fa7ffee9fd5bff1c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000a01af87f040000002d010400040000002e011800050000000a0200000000050000000902000000020400000002
01010018000000320a10ffe0fa0b00000049446174614f626a6563740024005c0047002b00470064004e002300480047002a0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b4fa9fffdbfd7b001c000000fb0280ff000000000000bc02ff000000
00000022417269616c000f03d0bb550338f70f037884c577000000000c000000d01bf87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a3000eefa0c000000495065727369737446696c6524005500470032004700240047
002b004e0023002400470004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01010004000000
2d01030004000000f001050003000000000000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 3-4: An object with {\i IDataObject }and {\i IPersistFile }Interfaces.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The \ldblquote Object Reusability\rdblquote  section of Chapter 6 will show how we might implement this object when another object that provides some the desired functionality is available for reuse. But for now, w
e want to see how to implement this object on its own.
\par {\*\bkmkstart _Toc324051582}{\*\bkmkstart _Toc324051767}{\*\bkmkstart _Toc324052009}{\pntext\pard\plain\b\i\fs22 3.6.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Implementing Interfaces: Multiple Inheritance{\*\bkmkend _Toc324051582}{\*\bkmkend _Toc324051767}{\*\bkmkend _Toc324052009}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 There are two different strategies for implementing interfaces on an object: multiple inheritance and inter
face containment. Which method works best for you depends first of all on your language of choice (languages that don\rquote 
t have an inheritance notion cannot support multiple inheritance, obviously) but if you are implementing an object in C++, which is a common occurrence, your choice depends on the object design itself.
\par Multiple inheritance works best for most objects. Declaring an object in this manner might appear as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 class {\b CTextRender }
: public IDataObject, public IPersistFile \{
\par \tab private:
\par \tab \tab ULONG\tab \tab m_cRef;\tab \tab \tab //Reference Count
\par \tab \tab char *\tab \tab m_pszText;\tab \tab //Pointer to allocated text
\par \tab \tab ULONG\tab \tab m_cchText;\tab \tab //Number of characters in m_pszText
\par 
\par \tab \tab //Other internal member functions here
\par 
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab public:
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \tab [Constructor, Destructor]
\par 
\par \tab \tab /*
\par \tab \tab  * We must override all interface member functions we
\par \tab \tab  * inherit to create an instantiatable class.
\par \tab \tab  */
\par 
\par \tab \tab //IUnknown members shared between IDataObject and IPersistFile
\par \tab \tab HRESULT QueryInterface(REFIID iid, void ** ppv);
\par \tab \tab ULONG AddRef(void);
\par \tab \tab ULONG Release(void);
\par 
\par \tab \tab //IDataObject Members overrides
\par \tab \tab HRESULT GetData(FORAMTETC *pFE, STGMEDIUM *pSTM);
\par \tab \tab [Other members]
\par \tab \tab ...
\par 
\par \tab \tab //IPersistFile Member overrides
\par \tab \tab HRESULT Load(char * pszFile, DWORD grfMode);
\par \tab \tab [Other members]
\par \tab \tab ...
\par \tab \};
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This object class inherits from the interfaces it wishes to implement, declares whatever variables are neces
sary for maintaining the object state, and overrides all the member functions of all inherited interfaces, remembering to include the {\cs58\f5\fs16\lang1024 IUnknown}{\i  }
members that are present in all other interfaces. The implementation of the single {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }function of this object would use typecasts to return pointers to different vtbl pointers:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 HRESULT {\b 
CTextRender::QueryInterface}(REFIID iid, void ** ppv) {\*\bkmkstart trqi}{\*\bkmkend trqi}\{
\par \tab *ppv=NULL;
\par 
\par \tab //This code assumes an overloaded == operator for GUIDs exists
\par \tab if (IID_IUnknown==iid)
\par \tab \tab *ppv=(void *)(IUnknown *)this;
\par 
\par \tab if (IID_IPersitFile==iid)
\par \tab \tab *ppv=(void *)(IPersistFile *)this;
\par 
\par \tab if (IID_IDataObject==iid)
\par \tab \tab *ppv=(void *)(IDataObject *)this;
\par \tab 
\par \tab if (NULL==*ppv)
\par \tab \tab return E_NOINTERFACE;\tab \tab //iid not supported.
\par \tab 
\par \tab // Any call to anyone\rquote s AddRef is our own, so we can just call that directly
\par \tab AddRef();
\par \tab return NOERROR;
\par \tab \}
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This technique has the advantage that all the implementation of all interfaces is gathered together in the same object and all functions have quick and direct access to all the other members of this object. In addi
tion, there only needs to be one implementation of the {\cs58\f5\fs16\lang1024 IUnknown} members. However, when we deal with aggregation in Chapter 6 we will see how an object might need a {\i separate} implementation of {\cs58\f5\fs16\lang1024 IUnknown}
 by itself.
\par {\*\bkmkstart _Toc324051583}{\*\bkmkstart _Toc324051768}{\*\bkmkstart _Toc324052010}{\pntext\pard\plain\b\i\fs22 3.6.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Implementing Interfaces: Interface Containment{\*\bkmkend _Toc324051583}{\*\bkmkend _Toc324051768}{\*\bkmkend _Toc324052010}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 There are at times reasons why yo
u may not want to use multiple inheritance for an object implementation. First, you may not be using C++. That aside, you may want to individually track reference counts on each interface separate from the overall object for debugging or for resource mana
gement purposes\emdash reference counting is from a client perspective an interface-specific operation. This can uncover problems in a client you might also be developing, exposing situations where the client is calling {\cs58\f5\fs16\lang1024 AddRef }
through one interface but matching it with a {\cs58\f5\fs16\lang1024 Release }call through a different interface. The third reason that you would use a dif
ferent method of implementation is when you have two interfaces with the same member function names with possibly identical function signatures or when you want to avoid function overloading. For example, if you wanted to implement {
\cs58\f5\fs16\lang1024 IPersistFile}{\i , }{\cs58\f5\fs16\lang1024 IPersistStorage}{\i , }and {\cs58\f5\fs16\lang1024 IPersistStream }on an object, you would have to write overloaded functions for the {\cs58\f5\fs16\lang1024 Load }and {
\cs58\f5\fs16\lang1024 Save }members of each which might get confusing. Worse, if two interface designers should happen to define interfaces that have like-named methods with like parameter lists but incompatible semantics, such overloading isn\rquote 
t even possible: two separate functions need to be implemented, but C++ unifies the two method definitions. Note that as in general interfaces may be defined by independent parties that do not communicate with each other, such situations are inevitable.

\par The other implementation method is to use \ldblquote interface implementations\rdblquote  which are separate C++ objects that each inherit from and implement one interface. The real object itself singly inherits from {\cs58\f5\fs16\lang1024 IUnknown }
and maintains (or contains) pointers to each interface implementation that it creates on initialization. This keeps all the interfaces separate and distinct. An example of code that uses the containment policy follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 class {\b CImpIPersistFile }
: public IPersistFile \{
\par \tab private:
\par \tab \tab ULONG\tab \tab m_cRef;\tab \tab \tab //Interface reference count for debugging
\par 
\par \tab \tab //"Backpointer" to the actual object.
\par \tab \tab class CTextRender * m_pObj;
\par 
\par \tab public:
\par \tab \tab [Constructor, Destructor]
\par 
\par \tab \tab //IUnknown members for IPersistFile
\par \tab \tab HRESULT QueryInterface(REFIID iid, void ** ppv);
\par \tab \tab ULONG AddRef(void);
\par \tab \tab ULONG Release(void);
\par 
\par \tab \tab //IPersistFile Member overrides
\par \tab \tab HRESULT Load(char * pszFile, DWORD grfMode);
\par \tab \tab [Other members]
\par \tab \tab ...
\par \tab \}
\par 
\par class {\b CImpIDataObject }: public IDataObject
\par \tab private:
\par \tab \tab ULONG\tab \tab m_cRef;\tab \tab \tab //Interface reference count for debugging
\par 
\par \tab \tab //"Backpointer" to the actual object.
\par \tab \tab class CTextRender * m_pObj;
\par 
\par \tab public:
\par \tab \tab [Constructor, Destructor]
\par 
\par \tab \tab //IUnknown members for IDataObject
\par \tab \tab HRESULT QueryInterface(REFIID iid, void ** ppv);
\par \tab \tab ULONG AddRef(void);
\par \tab \tab ULONG Release(void);
\par 
\par \tab \tab //IPersistFile Member overrides
\par \tab \tab HRESULT GetData(FORMATETC *pFE,STGMEDIUM *pSTM);
\par \tab \tab [Other members]
\par \tab \tab ...
\par \tab \}
\par 
\par 
\par class {\b CTextRender}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 {\xe {
\b\f4\fs12 CTextRender}}}{\b  }: public IUnknown
\par \tab \{
\par \tab friend class CImpIDataObject;
\par \tab friend class CImpIPersistFile;
\par 
\par \tab private:
\par \tab \tab ULONG\tab \tab m_cRef;\tab \tab \tab //Reference Count
\par \tab \tab char *\tab \tab m_pszText;\tab \tab //Pointer to allocated text
\par \tab \tab ULONG\tab \tab m_cchText;\tab \tab //Number of characters in m_pszText
\par 
\par \tab \tab //Contained interface implementations
\par \tab \tab CImpIPersistFile * m_pImpIPersistFile;
\par \tab \tab CImpIDataObject *  m_pImpIDataObject;
\par 
\par \tab \tab //Other internal member functions here
\par 
\par \tab public:
\par \tab \tab [Constructor, Destructor]
\par 
\par \tab \tab HRESULT QueryInterface(REFIID iid, void ** ppv);
\par \tab \tab ULONG AddRef(void);
\par \tab \tab ULONG Release(void);
\par \tab \};
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In this technique, each interface implementation must maintain a backpointer to the real object in order to access that object\rquote s variables (normally this is passed in the i
nterface implementation constructor). This may require a {\i friend} relationship (in C++) between the object classes; alternatively, these friend classes can be implemented as nested classes in {\cs58\f5\fs16\lang1024 CTextRender}.
\par Notice that the {\cs58\f5\fs16\lang1024 IUnknown }member functions of each interface implementation do not need to do anything more than delegate directly to the {\cs58\f5\fs16\lang1024 IUnknown }functions implemented on the {\cs58\f5\fs16\lang1024 
CTextRender }object. The implementation of {\cs58\f5\fs16\lang1024 QueryInterface }on the main object would appear as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 HRESULT {\b 
CTextRender::QueryInterface}(REFIID iid, void ** ppv)
\par \tab \{
\par \tab *ppv=NULL;
\par 
\par \tab //This code assumes an overloaded == operator for GUIDs exists
\par \tab if (IID_IUnknown==iid)
\par \tab \tab *ppv=(void *)(IUnknown *)this;
\par 
\par \tab if (IID_IPersitFile==iid)
\par \tab \tab *ppv=(void *)(IPersistFile *)m_pImpIPersistFile;
\par 
\par \tab if (IID_IDataObject==iid)
\par \tab \tab *ppv=(void *)(IDataObject *)m_pImpIDataObject;
\par \tab 
\par \tab if (NULL==*ppv)
\par \tab \tab return E_NOINTERFACE;\tab \tab //iid not supported.
\par \tab 
\par \tab //Call AddRef through the returned interface
\par \tab ((IUnknown *)ppv)->AddRef();
\par \tab return NOERROR;
\par \tab \}
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This sort of delegation structure makes it very easy to redirect each interface\rquote s {\cs58\f5\fs16\lang1024 IUnknown }members to some other {\cs58\f5\fs16\lang1024 IUnknown}
, which is necessary in supporting aggregation as explained in Chapter 6. But overall the implementation is not much different than multiple inheritance and both methods work equally well. Contain
ment of interface implementation is more easily translatable into C where classes simply become equivalent structures, if for any reason such readability is desirable (such as making the source code more comprehen
sible to C programmers who do not know C++ and do not understand multiple inheritance). In the end it really all depends upon your preferences and has no significant impact on performance nor development.
\par 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par 
\par {\*\bkmkstart _Toc335028820}{\*\bkmkstart _Toc337870030}{\*\bkmkstart _Toc338915448}{\*\bkmkstart _Toc339182944}{\pntext\pard\plain\b\fs28 4.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1
\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 COM Applications{\*\bkmkend _Toc335028820}{\*\bkmkend _Toc337870030}{\*\bkmkend _Toc338915448}{\*\bkmkend _Toc339182944}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 All applications, that is, running programs that define a task or a process be they client or servers, have spe
cific responsibilities. This chapter examines the roles and responsibilities of all COM applications and the necessary COM library support functions for those responsibilities.
\par In short, any application that makes use of COM, client or server, has three specific responsibilities to insure proper operation with other components:
\par {\pntext\pard\plain\fs20 1.\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}
On application startup, verify that the COM Library version is new enough to support the functionality expected by the application. In general, an application can use an updated version of the library but not an older one or one that has undergone a major
 version change.
\par {\pntext\pard\plain\fs20 2.\tab}On application startup, initialize the COM Library.
\par {\pntext\pard\plain\fs20 3.\tab}On application shutdown, uninitialize the COM Library to allow it to free resources and perform any cleanup operations as necessary.
\par \pard \qj\sa60\widctlpar Each of these responsibilities requires support from the COM Library itself as detailed in the following sec
tions. For convenience, initialization and uninitialization are described together. Additional COM Library functions related to initialization and memory management are also given in this chapter.
\par {\*\bkmkstart _Toc324051585}{\*\bkmkstart _Toc324051770}{\*\bkmkstart _Toc324052012}{\*\bkmkstart _Toc335028821}{\*\bkmkstart _Toc337870031}{\*\bkmkstart _Toc338915449}{\*\bkmkstart _Toc339182945}{\pntext\pard\plain\b 4.1\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Verifying the COM Library Version{\*\bkmkend _Toc324051585}{\*\bkmkend _Toc324051770}{\*\bkmkend _Toc324052012}{\*\bkmkend _Toc335028821}
{\*\bkmkend _Toc337870031}{\*\bkmkend _Toc338915449}{\*\bkmkend _Toc339182945}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The COM Library defines a major version number and a minor version number and provide these in a header file that is compiled with the COM application. Any application must then compare these compiled numbers with the version of the available library and 
if the available library is incompatible the application cannot use COM. Similarly, a DLL should check the library version in its initialization code and fail loading if the library is incompatible or otherwise disable its COM functionality. The current m
ajor and minor version numbers are retrieved from COM Library with the function {\cs58\f5\fs16\lang1024 CoBuildVersion.}
\par {\pntext\pard\plain\b\fs20\lang1024 4.1.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoBuildVersion
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 DWORD CoBuildVersion(void) {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \b\v\f5\fs12\lang1024 {\xe {\b\f5\fs12 \ldblquote CoBuildVersion\rdblquote }}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the major and the minor version number of the Component Object Model library.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 return value\tab {\cs58\f5\fs16\lang1024 DWORD}\tab A 32 bit value whose high-order 16 bits are the major version number ({\cs58\f5\fs16\lang1024 rmm}
) and whose low-order 16 bits are the minor version number ({\cs58\f5\fs16\lang1024 rup}).
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An application or DLL can run against only one major version of the COM Li
brary but can run against any minor version (possibly disabling specific minor features that are not available in a builds before a given minor number). Therefore during startup (initialization for DLLs), all COM applications must include code similar to 
the following:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 DWORD    dwBuildVersion;
\par dwBuildVersion=CoBuildVersion();
\par if (HIWORD(dwBuildVersion)!=rmm)
\par     //Error:  Can\rquote t run against wrong major version
\par if (LOWORD(dwBuildVersion) < rup)
\par     //Disable features dependent on the rup version of COM (or simply fail)
\par //Continue initialization
\par {\*\bkmkstart _Toc324051586}{\*\bkmkstart _Toc324051771}{\*\bkmkstart _Toc324052013}{\*\bkmkstart _Toc335028822}{\*\bkmkstart _Toc337870032}{\*\bkmkstart _Toc338915450}{\*\bkmkstart _Toc339182946}{\pntext\pard\plain\b 4.2\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Library Initialization / Uninitialization{\*\bkmkend _Toc324051586}{\*\bkmkend _Toc324051771}{\*\bkmkend _Toc324052013}
{\*\bkmkend _Toc335028822}{\*\bkmkend _Toc337870032}{\*\bkmkend _Toc338915450}{\*\bkmkend _Toc339182946}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Once the application has determined that it can run against the currently available version of the COM Library, it must initialize the library through a function called {\cs58\f5\fs16\lang1024 CoInitialize}
. Calls made to {\cs58\f5\fs16\lang1024 CoInitialize }must be matched with calls to {\cs58\f5\fs16\lang1024 CoUninitialize }to allow the COM Library to perform any final cleanup.
\par {\pntext\pard\plain\b\fs20\lang1024 4.2.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoInitialize{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoInitialize\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoInitialize(pReserved)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Initialize the Common Object Model library so that it can be used. With the exception of {\cs58\f5\fs16\lang1024 CoBuildVersion}
, this function must be called by applications before any other function in the library. Calls to {\cs58\f5\fs16\lang1024 CoInitialize }must be balanced by corresponding calls to {\cs58\f5\fs16\lang1024 CoUninitialize}. Typically, {\cs58\f5\fs16\lang1024 
CoInitialize }is called only once by the process that wants to use the COM library, although multiple calls can be made. Subsequent calls to {\cs58\f5\fs16\lang1024 CoInitialize }return S_FALSE.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pReserved\tab void*}\tab Reserved for future use. Presently, must be {\cs58\f5\fs16\lang1024 NULL}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\lang1024 Return Value}{\cs58\f5\fs16\lang1024 \cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790
\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. Initialization has succeeded. This was the first initialization call in this process.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_FALSE\cell }
Success. Initialization has succeeded, but this was not the first initialization call in this process.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\fs20\lang1024 4.2.1.2\tab}}\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoUninitialize{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoUninitialize\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void CoUninitialize(void)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Shuts down the Component Object Model library, thus freeing any resources that it maintains. Since {\cs58\f5\fs16\lang1024 CoInitialize }and {\cs58\f5\fs16\lang1024 CoUninitialize }calls must be balanced, only the {
\cs58\f5\fs16\lang1024 CoUninitialize }call that corresponds to the {\cs58\f5\fs16\lang1024 CoInitialize }call that actually did the initialization will uninitialize the library.
\par {\*\bkmkstart _Toc324051587}{\*\bkmkstart _Toc324051772}{\*\bkmkstart _Toc324052014}{\*\bkmkstart _Toc335028823}{\*\bkmkstart _Toc337870033}{\*\bkmkstart _Toc338915451}{\*\bkmkstart _Toc339182947}{\pntext\pard\plain\b 4.3\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Memory Management{\*\bkmkend _Toc324051587}{\*\bkmkend _Toc324051772}{\*\bkmkend _Toc324052014}{\*\bkmkend _Toc335028823}
{\*\bkmkend _Toc337870033}{\*\bkmkend _Toc338915451}{\*\bkmkend _Toc339182947}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As was articulated earlier in this specification, when ownership of allocated memory is passed through an interface, COM requires{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1
\widctlpar \f4\fs16 {\cs38\super \chftn } \tab In general, though, precisely, one can invent interfaces which choose to violate this rule. However, such interfaces are, for exam
ple, unlikely to have their remoting proxies and stubs generated with common tools.}} that the memory be allocated with a specific \ldblquote task allocator.\rdblquote  Most general purpose access to the task allocator is provided through the {
\cs58\f5\fs16\lang1024 IMalloc }interface instance returned from {\cs58\f5\fs16\lang1024 CoGetMalloc}. Simple shortcut allocation and freeing APIs are also provided in the form of {\cs58\f5\fs16\lang1024 CoTaskMemAlloc }and {\cs58\f5\fs16\lang1024 
CoTaskMemFree}.
\par {\*\bkmkstart _Toc324051588}{\*\bkmkstart _Toc324051773}{\*\bkmkstart _Toc324052015}{\*\bkmkstart _Toc335028824}{\pntext\pard\plain\b\i\fs22 4.3.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 IMalloc Interface{\*\bkmkend _Toc324051588}{\*\bkmkend _Toc324051773}{\*\bkmkend _Toc324052015}{\*\bkmkend _Toc335028824}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\b\v\f4\fs12 {\xe {\i0\fs12 IMalloc Interface}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\i IMalloc }interface is an abstraction of familiar memory-allocation primitives that fit into the COM interface model. Like all other interface, it is derived from {\cs58\f5\fs16\lang1024 IUnknown}
 and correspondingly includes the {\cs58\f5\fs16\lang1024 AddRef, Release}{\i , }and {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }member functions. The first three {\cs58\f5\fs16\lang1024 IMalloc}{\i -}specific{\i  }
functions in this interface are merely simple abstractions of the familiar C-library functions {\cs58\f5\fs16\lang1024 malloc}, {\cs58\f5\fs16\lang1024 realloc}, and {\cs58\f5\fs16\lang1024 free}.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 [
\par     local,
\par     object,
\par     uuid(00000002-0000-0000-C000-000000000046)
\par ]
\par interface {\b IMalloc} : IUnknown \{
\par \tab void * \tab {\b Alloc}([in] ULONG cb);
\par \tab void *\tab {\b Realloc}([in] void * pv, [in] ULONG cb);
\par \tab void\tab \tab {\b Free}([in] void* pv);
\par \tab ULONG\tab {\b GetSize}([in] void * pv);
\par \tab int\tab \tab {\b DidAlloc}([in] void * pv);
\par \tab void\tab \tab {\b HeapMinimize}(void);
\par \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMalloc::Alloc{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 \ldblquote IMalloc\:functions\:Alloc\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void * IMalloc::Alloc(cb)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Allocate a memory block of at least {\cs58\f5\fs16\lang1024 cb }bytes. The initial contents of the returned memory block are unde
fined. Specifically, it is not guaranteed that the block is zeroed. The block actually allocated may be larger than {\cs58\f5\fs16\lang1024 cb }bytes because of space required for alignment and for maintenance information. If {\cs58\f5\fs16\lang1024 cb }
is 0, {\cs58\f5\fs16\lang1024 Alloc }allocates a zero-length item and returns a valid pointer to that item. This function returns NULL if there is insufficient memory available.
\par Callers must always check the return from the this function, even if the amount of memory requested is small.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 cb\tab ULONG\tab The number of bytes to allocate.
\par return value\tab void *\tab The allocated memory block, or NULL if insufficient memory exists.
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMalloc::Free{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 \ldblquote IMalloc\:functions\:Free\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void IMalloc::Free(pv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Deallocate a memory block. The {\cs58\f5\fs16\lang1024 pv }argument points to a memory block previously allocated through a call to {\cs58\f5\fs16\lang1024 IMalloc::Alloc }or {\cs58\f5\fs16\lang1024 IMalloc::Realloc
}. The number of bytes freed is the number of bytes with which the block was originally allocated (or reallocated, in the case of {\cs58\f5\fs16\lang1024 Realloc}). After the call, the {\cs58\f5\fs16\lang1024 pv }
parameter is invalid, and can no longer be used. {\cs58\f5\fs16\lang1024 pv }may be NULL, in which case this function is a no-op.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 pv\tab void *\tab Pointer to the block to free. May be NULL.
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.1.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMalloc::Realloc{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 \ldblquote IMalloc\:functions\:Realloc\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void * IMalloc::Realloc(pv, cb)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Change the size of a previously allocated memory block. The {\cs58\f5\fs16\lang1024 pv }argument points to the beginning of the memory block. If {\cs58\f5\fs16\lang1024 pv }is NULL, {\cs58\f5\fs16\lang1024 Realloc }
functions in the same way as {\cs58\f5\fs16\lang1024 IMalloc::Alloc }and allocates a new block of cb bytes. If {\cs58\f5\fs16\lang1024 pv }is not NULL, it should be a pointer returned by a prior call to {\cs58\f5\fs16\lang1024 IMalloc::Alloc}.
\par The {\cs58\f5\fs16\lang1024 cb }argument gives the new size of the block in bytes. The cont
ents of the block are unchanged up to the shorter of the new and old sizes, although the new block may be in a different location. Because the new block can be in a new memory location, the pointer returned by {\cs58\f5\fs16\lang1024 Realloc }
is not guaranteed to be the pointer passed through the {\cs58\f5\fs16\lang1024 pv }argument. If {\cs58\f5\fs16\lang1024 pv }is not NULL and {\i cb} is 0, then the memory pointed to by {\cs58\f5\fs16\lang1024 pv }is freed.
\par {\cs58\f5\fs16\lang1024 Realloc }returns a void pointer to the reallocated (and possibly moved) memory block. The return value is NULL if the size is zero and the buffer argumen
t is not NULL, or if there is not enough available memory to expand the block to the given size. In the first case, the original block is freed. In the second, the original block is unchanged.
\par The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than void, use a type cast on the return value.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 pv\tab void *\tab Pointer to the block to reallocate. May be NULL.
\par cb\tab ULONG\tab The new size in bytes to allocate. May be zero.
\par \pard \s49\fi-2880\li2880\sa58\widctlpar\tx1440 return value\tab void *\tab The reallocated memory block, or NULL.
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.1.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMalloc::GetSize{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 \ldblquote IMalloc\:functions\:GetSize\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 ULONG IMalloc::GetSize(pv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the size, in bytes, of the memory block allocated by a previous call to {\cs58\f5\fs16\lang1024 IMalloc::Alloc} or {\cs58\f5\fs16\lang1024 IMalloc::Realloc}{\i  }on this memory manager.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pv\tab void *}\tab The pointer to be tested. May be {\cs58\f5\fs16\lang1024 NULL}, in which case {\cs58\f5\fs16\lang1024 -1} is returned.
\par return value\tab {\cs58\f5\fs16\lang1024 ULONG}\tab The size of the allocated memory block
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.1.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMalloc::DidAlloc{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs20\lang1024 {\xe {\b0 \ldblquote IMalloc\:functions\:DidAlloc\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 int IMalloc::DidAlloc(pv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This function answers as whether or not the indicated memory pointer {\cs58\f5\fs16\lang1024 pv }was allocated by the given alloca
tor, if the allocator is able to determine that fact (many memory allocators will not be able to do so).
\par The values 1 (one) and 0 (zero) are returned as \ldblquote did alloc\rdblquote  and \ldblquote did not alloc\rdblquote  answers respectively; {\cs58\f5\fs16\lang1024 -1} (minus one) is returned if the {\cs58\f5\fs16\lang1024 IMalloc }
implementation is unable to determine whether it allocated the pointer or not.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pv\tab void *}\tab The pointer to be tested. May be {\cs58\f5\fs16\lang1024 NULL}, in which case {\cs58\f5\fs16\lang1024 -1} is returned.
\par return value\tab {\cs58\f5\fs16\lang1024 int}\tab {\cs58\f5\fs16\lang1024 -1, 0, 1
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.1.6\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMalloc::HeapMinimize{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs20\lang1024 {\xe {\b0 \ldblquote IMalloc\:functions\:HeapMinimize\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void IMalloc::HeapMinimize()
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Minimize the heap as much as possible for this allocator by, for example, releasing unused memory in the heap to the operating system. This is useful in cases when a lot of allocations have been freed (using {
\cs58\f5\fs16\lang1024 IMalloc::Free}) and the application wants to release the freed memory back to the operating system so that it is available for other purposes.
\par {\*\bkmkstart _Toc324051589}{\*\bkmkstart _Toc324051774}{\*\bkmkstart _Toc324052016}{\*\bkmkstart _Toc335028825}{\pntext\pard\plain\b\i\fs22 4.3.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 COM Library Memory Management Functions{\*\bkmkend _Toc324051589}{\*\bkmkend _Toc324051774}{\*\bkmkend _Toc324052016}{\*\bkmkend _Toc335028825}
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoGetMalloc{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 \ldblquote CoGetMalloc\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoGetMalloc(dwMemContext, ppMalloc)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This function retrieves from the COM library either the task memory allocator an optionally-provided shared memory allocator. The particular allocator of interest is indicated by the {\cs58\f5\fs16\lang1024 
dwMemContext}{\i  }parameter. Legal values for this parameter are taken from the enumeration {\cs58\f5\fs16\lang1024 MEMCTX}:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef enum tagMEMCTX \{
\par         MEMCTX_TASK = 1,            // task (private) memory
\par         MEMCTX_SHARED = 2,          // shared memory (between processes)
\par         MEMCTX_MACSYSTEM = 3,       // on the mac, the system heap
\par         // these are mostly for internal use...
\par         MEMCTX_UNKNOWN = -1,        // unknown context (when asked about it)
\par         MEMCTX_SAME = -2,           // same context (as some other pointer)
\par     \} MEMCTX;
\par 
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 MEMCTX_TASK }returns the task allocator. If {\cs58\f5\fs16\lang1024 CoInitialize }has not yet been called, {\cs58\f5\fs16\lang1024 NULL} we be stored in {\cs58\f5\fs16\lang1024 
ppMalloc }and {\cs58\f5\fs16\lang1024 CO_E_NOTINITIALIZED }returned from the function.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\f5\fs16 MEMCTX_SHARED} returns an optionally-provided shared allocator; if the shared allocator is not supported, {\cs58\f5\fs16\lang1024 E_INVALIDARG }
is returned. When supported, the shared allocator returned by this function is an COM-provided implementation of {\cs58\f5\fs16\lang1024 IMalloc }interface, one which allocates memory in such a way that it can be ac
cessed by other process on the current machine simply by conveying the pointer to said applications.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
That is, the memory resides at the same address in all processes.}} Further, memory allocated by this shared allocator in one application may be freed by the shared allocator in another. Except when a {\cs58\f5\fs16\lang1024 NULL }
pointer is passed, the shared memory allocator never answers -1 to {\cs58\f5\fs16\lang1024 IMalloc::DidAlloc}; it always indicates that either did or did not allocate the passed pointer.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 dwMemContext\tab DWORD}\tab A value from the enumeration {\cs58\f5\fs16\lang1024 MEMCTX}.
\par {\cs58\f5\fs16\lang1024 ppMalloc}\tab {\cs58\f5\fs16\lang1024 IMalloc **}\tab The place in which the memory allocator should be returned.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\lang1024 Return Value}{\cs58\f5\fs16\lang1024 \cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790
\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The requested allocator was returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CO_E_NOTINITIALIZED\cell }The COM library has not been initialized.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_INVALIDARG\cell }An invalid argument was passed.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\fs20\lang1024 4.3.2.2\tab}
}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoGetCurrentProcess{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoGetCurrentProcess\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 DWORD CoGetCurrentProcess(void)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return a value unique to the current process. More precisely, return a value unique to the current process to the degree that it will not be reused until 2{\fs12\up6 32}
 further processes have been created on the current workstation.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 return value\tab {\cs58\f5\fs16\lang1024 DWORD}\tab A value unique to the current process.
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.2.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoTaskMemAlloc{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoTaskMemAlloc}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 LPVOID CoTaskMemAlloc(cb)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Semantically identical to retrieving the current task allocator with {\cs58\f5\fs16\lang1024 CoGetMalloc}, invoking {\cs58\f5\fs16\lang1024 IMalloc::Alloc }
on that pointer with the same parameters, then releasing the {\cs58\f5\fs16\lang1024 IMalloc }pointer.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 cb\tab ULONG}\tab The number of bytes to allocate.
\par return value\tab {\cs58\f5\fs16\lang1024 void *}\tab The allocated memory block, or {\cs58\f5\fs16\lang1024 NULL} if insufficient memory exists.
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.2.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoTaskMemFree{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoTaskMemFree}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void CoTaskMemFree(pv)
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Semantically identical to retrieving the current task allocator with {\cs58\f5\fs16\lang1024 CoGetMalloc}, invoking {\cs58\f5\fs16\lang1024 IMalloc::Free }
on that pointer with the same parameters, then releasing the {\cs58\f5\fs16\lang1024 IMalloc }pointer.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pv\tab void *}\tab Pointer to the block to free. May be {\cs58\f5\fs16\lang1024 NULL}.
\par {\pntext\pard\plain\b\fs20\lang1024 4.3.2.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoTaskMemRealloc{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoTaskMemRealloc}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void CoTaskMemRealloc(pv, cb)
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Semantically identical to retrieving the current task allocator with {\cs58\f5\fs16\lang1024 CoGetMalloc}, invoking {\cs58\f5\fs16\lang1024 IMalloc::Realloc }
on that pointer with the same parameters, then releasing the {\cs58\f5\fs16\lang1024 IMalloc }pointer.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pv\tab void *}\tab Pointer to the block to reallocate. May be {\cs58\f5\fs16\lang1024 NULL}.
\par {\cs58\f5\fs16\lang1024 cb\tab ULONG}\tab The new size in bytes to allocate. May be zero.
\par {\cs58\f5\fs16\lang1024 return value\tab void *}\tab The reallocated memory block, or {\cs58\f5\fs16\lang1024 NULL}.
\par {\*\bkmkstart _Toc324051590}{\*\bkmkstart _Toc324051775}{\*\bkmkstart _Toc324052017}{\*\bkmkstart _Toc335028826}{\*\bkmkstart _Toc337870034}{\*\bkmkstart _Toc338915452}{\*\bkmkstart _Toc339182948}{\pntext\pard\plain\b 4.4\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Memory Allocation Example{\*\bkmkend _Toc324051590}{\*\bkmkend _Toc324051775}{\*\bkmkend _Toc324052017}{\*\bkmkend _Toc335028826}
{\*\bkmkend _Toc337870034}{\*\bkmkend _Toc338915452}{\*\bkmkend _Toc339182948}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An object may need to pass memory between it and the client at some point in the object\rquote s lifetime\emdash 
this applies to in-process as well as out-of-process servers. When such a situation arises the object must use the task allocator as described in Chapter 2. That is, the object must allocate memory whose ownership is trans
ferred from one party to another through an interface function by using the local task allocator.
\par {\cs58\f5\fs16\lang1024 CoGetMalloc }provides a convenient way for objects to allocate working memory as well. For example, when the {\cs58\f5\fs16\lang1024 TextRender} object (see Chapter 3, \ldblquote Designing and Implementing Objects\rdblquote 
) under consideration in this document loads text from a file in the function {\cs58\f5\fs16\lang1024 IPersistFile::Load }(that is, {\cs58\f5\fs16\lang1024 CTextRender::Load}
) it will want to make a memory copy of that text. It would use the task allocator for this purpose as illustrated in the following code (unnecessary details of opening files and reading data are omitted for simplicity):
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
//Implementation of IPersistFile::Load
\par HRESULT {\b CTextRender::Load}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 
{\xe {\b\f4\fs12 CTextRender\:functions\:Load}}}(char *pszFile, DWORD grfMode) \{
\par \tab int       hFile;
\par \tab DWORD     cch;
\par \tab IMalloc * pIMalloc;
\par \tab HRESULT   hr;
\par 
\par \tab /*
\par \tab  * Open the file and seek to the end to set the
\par \tab  * cch variable to the length of the file.
\par \tab  */
\par 
\par \tab hr=CoGetMalloc(MEMCTX_TASK, &pIMalloc);
\par 
\par \tab if (FAILED(hr))
\par \tab \tab //Close file and return failure
\par 
\par \tab psz=pIMalloc->Alloc(cch);
\par \tab pIMalloc->Release();
\par 
\par \tab if (NULL==psz)
\par \tab \tab //Close file and return failure
\par 
\par \tab //Read text into psz buffer and close file
\par \tab 
\par \tab //Save memory pointer and return success
\par \tab m_pszText=psz;
\par \tab return NOERROR;
\par \tab \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 If an object will make many allocations throughout it\rquote s lifetime, it makes sense to call {\cs58\f5\fs16\lang1024 CoGetMalloc }once when the object is created, store the {\cs58\f5\fs16\lang1024 
IMalloc }pointer in the object ({\cs58\f5\fs16\lang1024 m_pIMalloc }or such), and call {\cs58\f5\fs16\lang1024 IMalloc::Release }when the object is destroyed. Alternatively, the APIs {\cs58\f5\fs16\lang1024 CoTaskMemAlloc }and its friends may be used.

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par {\*\bkmkstart _Toc335041393}{\*\bkmkstart _Toc337439324}{\*\bkmkstart _Toc337870035}{\*\bkmkstart _Toc339182949}{\pntext\pard\plain\b\fs28 5.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1
\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 COM Clients{\*\bkmkend _Toc335041393}{\*\bkmkend _Toc337439324}{\*\bkmkend _Toc337870035}{\*\bkmkend _Toc339182949}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As described in earlier chapters, a COM Client is simply any piece of code that makes use of another object through that object\rquote 
s interfaces. In this sense, a COM Client may itself be a COM Server acting in the capacity of a client by virtue of using (or reusing) some other object.
\par If the client is an application, that is, an executable program as opposed to a DLL, then it must follow all the requirements for a COM Application as detailed in Chapter 4. That aside, clients have a number of ways to actually get at an object to use as 
discussed in a previous chapter. The client may call a specific function to create an object, it might ask an existing object to create another, or it might itself implement an object to which some other code hands yet another object\rquote 
s interface pointer. Not all of these objects must have CLSID.
\par This chapter, however, is concerned with those clients that want to create an object based on a {\cs58\f5\fs16\lang1024 CLSID}, because at some point or another, many operations that don\rquote t directly involve a {\cs58\f5\fs16\lang1024 CLSID}
 do eventually resolve to this process. For example, moniker binding internally uses a {\cs58\f5\fs16\lang1024 CLSID} but shields clients from that fact. In any case, whatever client code uses a {\cs58\f5\fs16\lang1024 CLSID}
 will generally perform the following operations in order to make use of an object:
\par {\pntext\pard\plain\fs20 1.\tab}\pard\plain \s73\fi-360\li1080\ri360\sa120\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f4\fs20 Identify the class of ob{\*\bkmkstart clientlist}{\*\bkmkend clientlist}ject to use.
\par {\pntext\pard\plain\fs20 2.\tab}Obtain the \ldblquote class factory\rdblquote  for the object class and ask it to create an uninitialized instance of the object class, returning an interface pointer to it.
\par {\pntext\pard\plain\fs20 3.\tab}Initialize the newly created object by calling an initialization member function of the \ldblquote initialization interface,\rdblquote  that is, one of a generally small set of interfaces that have such functions.
\par {\pntext\pard\plain\fs20 4.\tab}Make use of the object which generally includes calling {\cs58\f5\fs16\lang1024 QueryInterface }to obtain additional working interface pointers on the object. The client must be prepared for the potential ab
sence of a desired interface.
\par {\pntext\pard\plain\fs20 5.\tab}Release the object when it is no longer needed.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The following sections cover the functions and interfaces involved in each of these steps. In addition, the client may want to more closely manage the loading and unloading of server modules (DLLs or EXEs) for optimization purposes, 
so this chapter includes a section of such management.
\par As far as the client is concerned, the COM Library exists to provide fundamental implementation locator and object creation services and to handle remote procedure calls to local or remote objects (in addition to memory management services, of course). Ho
w a server facilitates these functions is the topic of Chapter 6.
\par Before examining the details of object creating and manipulation, realize that after the object is created and the client has its first interface pointer to that object, the {\i 
client cannot distinguish an in-process object from a local object from a remote object}
 by virtue of examining the interface pointer or any other interfaces on that object. That is, all objects appear identically to the client such that after creation, all requests made to the object\rquote 
s services are made by calling interface member functions. Period. There are not special exceptions that a client must make at run-time based on the distance of the object in question. The 
COM Library provides any underlying glue to insure that a call made to a local or remote object is, in fact, marshaled properly to the other process or the other machine, respectively. {\i This operation is transparent to the client}
, who always sees any call to an object as a function call to the objects interfaces as if that object were in-process. This consistency is a key benefit for COM clients as it can treat all objects identically regardless of their actual execution context.
 If you are interested in understanding how this transparency is achieved, please see Chapter 7, \ldblquote Communicating via Interfaces: Remoting\rdblquote 
 for more details. There you will find that all clients do, in fact, always call an in-process object first, but in local and remote cases that in-process object is just a proxy that takes care of generating a remote procedure call.
\par {\*\bkmkstart _Toc324051592}{\*\bkmkstart _Toc324051777}{\*\bkmkstart _Toc324052019}{\*\bkmkstart _Toc335041394}{\*\bkmkstart _Toc337439325}{\*\bkmkstart _Toc337870036}{\*\bkmkstart _Toc339182950}{\pntext\pard\plain\b 5.1\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Identifying the Object Class{\*\bkmkend _Toc324051592}{\*\bkmkend _Toc324051777}{\*\bkmkend _Toc324052019}{\*\bkmkend _Toc335041394}
{\*\bkmkend _Toc337439325}{\*\bkmkend _Toc337870036}{\*\bkmkend _Toc339182950}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A central feature of COM is that a client can opaquely locate and dynamically load the specific piece code that knows how to manipulate a 
specific class of object. This is accomplished through the COM-supplied implementation locator services through which COM associates a class identifier, that is, {\cs58\f5\fs16\lang1024 CLSID}
, with the server module for that object class. Therefore the COM Library is responsible for defining how this association occurs which usually involves a system-wide persistent registry of {\cs58\f5\fs16\lang1024 CLSIDs}
 and their corresponding servers. For example, under Microsoft Windows the COM Library stores the pathnames of in-process server DLLs and local server EXEs in the system registry under the text string of the object\rquote s {\cs58\f5\fs16\lang1024 CLSID}.

\par The practical upshot of all this for client applications is that the client need not know nor care how this in
formation is maintained or how the COM Library performs the association from CLSID to server. In the same manner the client need not perform any additional work to establish communication with a local or remote object as such steps are also handled in COM
 transparently.
\par This does leave the question of how the client determines what {\cs58\f5\fs16\lang1024 CLSID}
 to hand to COM in the first place. There is no single answer, for it varies from situation to situation. In some cases the object to use has a well-known and fixed {\cs58\f5\fs16\lang1024 CLSID}
 that is compiled into the client application. In other cases the client may have a constant text string (compiled, that is) that represents a {\cs58\f5\fs16\lang1024 CLSID} and uses some means to associate that name with a {\cs58\f5\fs16\lang1024 CLSID}
. Another example may be that the client has some previously saved information that directly or indirectly translates to a {\cs58\f5\fs16\lang1024 CLSID}, such as a piece of storage (where the {\cs58\f5\fs16\lang1024 CLSID}
 is serialized into a stream) or a moniker (where the {\cs58\f5\fs16\lang1024 CLSID}
 is implied by the data which the moniker references). Finally, there may be some means through which the client displays a list of available objects to the end-user where each item in the list corresponds to a specific {\cs58\f5\fs16\lang1024 CLSID}
. In such cases the list is generated by browsing the registry for all existing object classes. Other examples are clearly possible, particularly in network situations.
\par {\*\bkmkstart _Toc324051593}{\*\bkmkstart _Toc324051778}{\*\bkmkstart _Toc324052020}{\*\bkmkstart _Toc335041395}{\*\bkmkstart _Toc337439326}{\*\bkmkstart _Toc337870037}{\*\bkmkstart _Toc339182951}{\pntext\pard\plain\b 5.2\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Creating the Object{\*\bkmkend _Toc324051593}{\*\bkmkend _Toc324051778}{\*\bkmkend _Toc324052020}{\*\bkmkend _Toc335041395}
{\*\bkmkend _Toc337439326}{\*\bkmkend _Toc337870037}{\*\bkmkend _Toc339182951}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Given a CLSID the client must now create an object of that class in order to make use of its services. It does so using two steps:
\par {\pntext\pard\plain\fs20 1.\tab}\pard\plain \s73\fi-360\li1080\ri360\sa120\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f4\fs20 Obtain the \ldblquote class factory\rdblquote  for the {\cs58\f5\fs16\lang1024 CLSID}.
\par {\pntext\pard\plain\fs20 2.\tab}Ask the class factory to instantiate an object of the class, returning an interface pointer to the client.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 After these steps, illustrated in Figure 5-1, the client is free to do whatever it wishes with the object through whatever interfaces the object supports. In fact, {\i everything }
done with the object is accomplished through calls to interface member functions\emdash APIs that seems to affect objects through other means are merely wrappers to common sequences of interface calls.
\par Before examining each of these steps, let\rquote s take a look at what a class factory is in the first place.
\par {\*\bkmkstart _Toc324051594}{\*\bkmkstart _Toc324051779}{\*\bkmkstart _Toc324052021}{\*\bkmkstart _Toc335041396}{\pntext\pard\plain\b\i\fs22 5.2.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 The Class Factory Object: IClassFactory Interface{\*\bkmkend _Toc324051594}{\*\bkmkend _Toc324051779}{\*\bkmkend _Toc324052021}{\*\bkmkend _Toc335041396}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The class factory is another object itself that exists to {\i manufacture} objects (hence the name \ldblquote factory\rdblquote ) of a specific class (hence the qualifier \ldblquote class\rdblquote ).{\cs38\super 
\chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } Note that {\f5\fs12 IClassFactory }would be more appropriately be named {\fs12 IObjectFactoy} since using it one creates objects, not classes. But {
\f5\fs12 IClas}{\f5\fs12 s}{\f5\fs12 Factory}{\i  }remains for historical reasons.}} A class factory object is implemented by a server module, either a DLL or EXE, and supports the {\cs58\f5\fs16\lang1024 IClassFactory}
 interface described below. For the purposes of COM Clients, the {\cs58\f5\fs16\lang1024 IClassFactory} interface is and interface on an object used by a client. For information on implementation, see Chapter 6, \ldblquote COM Servers.\rdblquote 
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw23944\pich10080\picwgoal13575\pichgoal5715 \picscalex50\picscaley50 
010009000003910b000008003300000000000e00000026060f001200ffffffff000008000000cef5e8f9040bd6020a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02e8f9cef5050000000c02ee08361533000000f700000317000000000080808000ffffff0000000000800000000080000080800000000080008000800000808000c0c0
c000c0dcc000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000cef5e7f9040bc8020e00000026060f001200ffffffff0000080000009effe7f94207c8020e00000026060f
001200ffffffff000008000000e00018fa4207c80207000000fc020000000000020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0698019801d902530728faf000050000001402000000002d00000042010500000028000000080000000800000001000100000000002000
00000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06960196
01c802420718fae000050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e50139fb0a06d0fd07000000fc020000000000020000040000002d01040004000000f0010300040000002d0102001000000024030600f50149fbf5018dfd4802e0fd1a06
e0fd1a069cfbc70549fb050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005
000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01040004000000f00101001000000024030600e9013dfbe9017afd3b02ccfd0606ccfd06068ffbb4053dfb0500000014020000000008000000fa0206000800000000000002040000002d01010004000000f00104000700
0000fc020100000000000000040000002d01040008000000250302003b028ffb06068ffb08000000250302003b028ffbe9013dfb08000000250302003b028ffb3b02ccfd050000001402000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c
000000d01bf87f040000002d010500040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320acffc77020d000000436c61737320466163746f7279005c00240047004700480023004e00480047002a004f003100480004000000020102000a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff0000080000009eff33fc4e00e3fc07000000fc020000808080020000040000002d01060004000000f0010300040000002d010200070000001804f4fc5f0043fcaeff050000001402000000002d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010100
070000001804e3fc4e0033fc9eff050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000460093fc16029bfc040000002d010200040000002d01040004000000f001060004000000f00103001c000000fb021000070000000000bc0200000000010202
2253797374656d0003d0bb55033002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010500030000001e000700000016043bfd1602f3fb460008000000fa0206000800000000000002040000002d01030005000000140293fcd60305000000130293fc7efe040000002d010200040000002d01
040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ec0186feaa06a60107000000fc020000000000020000040000002d0103001000000024030600fc0196fefc0152016002b601ba06b601ba06fafe560696fe05000000140293
fc7efe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001030005000000090200000002050000000102ffff
ff0208000000fa0206000800000000000002040000002d0103001000000024030600f0018afef0013f015302a201a606a201a606edfe43068afe05000000140293fc7efe08000000fa0206000800000000000002040000002d01060004000000f0010300040000002d01040008000000250302005302edfea606edfe080000
00250302005302edfef0018afe08000000250302005302edfe5302a20105000000140293fc7efe1c000000fb0260ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01bf87f040000002d010300040000002e011800050000000a0200000000050000000902
00000002040000000201010010000000320a73009103060000004f626a6563747c0059002400590050002c0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8ff3b005800eb0007000000fc020000808080020000040000002d01070004000000f0
010500040000002d010200070000001804fc0069004b00b8ff05000000140293fc7efe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd0000000400
00002d01050004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010600070000001804eb0058003b00a8ff05000000140293fc7efe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
000000a8ff33ff5800e3ff07000000fc020000808080020000040000002d01060004000000f0010500040000002d010200070000001804f4ff690043ffb8ff05000000140293fc7efe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000
ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001060005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010700070000001804e3ff580033ffa8ff05000000140293fc7e
fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000500080ff20028bff040000002d010200040000002d01040004000000f001060004000000f0010500040000002d01010004000000f0010300030000001e000700000016042b002002e0fe500008000000fa0206000800
000000000002040000002d0103000500000014027dffe00305000000130286ff88fe040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000050009b002002a300040000002d010200040000002d
010400030000001e0007000000160443012002fbff500008000000fa0206000800000000000002040000002d0103000500000014029b00e0030500000013029b0088fe040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff000008000000bb02e7f957050ffb1c000000fb0240ff000000000000bc02000000000000001254696d6573204e657720526f6d616e007884c577000000000c000000d01bf87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ab1
faf502060000005365727665726b005500550060005500560004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cef587fa50fc68fe07000000fc020000000000020000040000002d01050009000000
1c06f800f80081fe69fc9ffae6f50500000014029b0088fe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f0
01050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500090000001c06f600f60068fe50fc87facef50500000014029b0088fe1c000000fb0240ff000000000000bc02000000000000001254696d6573204e657720526f6d616e007884c577000000000c000000
d01af87f040000002d01070004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010010000000320aadfc10f806000000436c69656e748b003500350056006a00400004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff00000800000060fc68fcb0ff70fc040000002d010200040000002d01040004000000f001050004000000f0010600040000002d01010004000000f0010700030000001e0007000000160410fd6cffc8fb60fc08000000fa0206000800000000000002040000002d01030005000000140268fc18f905000000130268fc
f002040000002d010200040000002d01040004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300a8ff68fc32ff44fc32ff8bfc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009efc36fb57ff84fc1c0000
00fb0290ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d017f87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320ab8fbd8fc0b00000028312920934372656174650025003f00
25001f00380051002b003f003e0025003f0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000002004f87f040000002d01060004000000f0010500040000002e011800050000000a02000000000500000009020000000204
0000000201010016000000320a3efcdbfc0a000000616e204f626a656374943e0045001f00570044001f003f003e002500380004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000460756fd040ba4fe1c000000fb0290ff000000000000bc0200000000
00000000417269616c000f03d0bb550338f70f037884c577000000000c000000d017f87f040000002d01050004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320ad8fd80070f000000283229204d616e75666163747572650025003f0025001f005d
003f004400440026003e003e00260044002c003e0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000002004f87f040000002d01060004000000f0010500040000002e011800050000000a02000000000500000009020000
0002040000000201010010000000320a5efe7208060000004f626a656374570045001f003e003e00260004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d80530fd8807cafe08000000fa0206000800000000000002040000002d010500040000002d
0104000b000000170830fddc05b3fece06d8fe880730fd3004040000002d010300040000002d0102000a000000240303007306c6fef006c8fede0684fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000020fba0fca8ff90ff040000002d010500040000002d0104000b00
000017088eff17ffa0fca4ff90fffe03a0fc20fb040000002d010300040000002d0102000a000000240303008fff8cff18ff67ff16ffadff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000040fc36fd2a000aff1c000000fb0290ff000000000000bc0200000000000000
00417269616c000f03d0bb550338f70f037884c577000000000c000000d01bf87f040000002d01070004000000f0010600040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320ab8fd9cfc0f000000283329202052657475726e206e65770025003f0025001f001f005100
3e00260044002c0044001f0045003e00570004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000002004f87f040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204
0000000201010021000000320a3efe7afc11000000696e7465726661636520706f696e746572001f00450025003e002c0025003e003f003e001f00440045001f00440026003e002c0004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c5770000
00000c000000d01bf87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010015000000320ac4fe5afd09000000746f20636c69656e7400250045001f003e001f001f003f004400250004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff00000800000038fb80fd88fbd0fd040000002d010500070000001804d0fd88fb80fd38fb05000000140268fcf0020a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e50500400080000000000
0000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01040004000000f001050004000000f0010300040000002d01010004000000f0010700030000000000ffff19fd90fe35fd96fe4ffda1fe67fdb1fe7dfdc3fe8ffdd9fe9ffdf4fe00}}
\par \pard\plain \s76\qc\li360\sb120\sa240\widctlpar \b\f4\fs20 Figure 5-{\field{\*\fldinst  SEQ Figure \\* ARABIC }{\fldrslt {\lang1024 1}}} A client asks a class factory in the server to create an object.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\pard\plain \qj\sa60\widctlpar \b\v\f5\fs12 {\xe {\b\f5\fs12 \ldblquote IClassFactoryInterface\ldblquote }}}The {\cs58\f5\fs16\lang1024 IClassFactory }interface is implemented by COM servers on a \ldblquote 
class factory\rdblquote  object for the purpose of creating new objects of a particular class. The interface also provides for a COM client to keep the server in memory even when it is not servicing any object. A class 
factory has a one-to-one correspondence with a {\cs58\f5\fs16\lang1024 CLSID} (although actual implementations can be made generic to service multiple classes if the COM server so chooses).
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 [
\par     object,
\par     uuid(00000001-0000-0000-C000-000000000046), // IID_IClassFactory
\par     pointer_default(unique)
\par ]
\par interface{\b  IClassFactory }: IUnknown 
\par \{
\par \tab HRESULT {\b CreateInstance}([in] IUnknown * pUnkOuter, [in] REFIID iid, [out] void * ppv);
\par \tab HRESULT {\b LockServer}([in]BOOL fLock);
\par \}
\par {\*\bkmkstart ckindel}{\*\bkmkend ckindel}{\pntext\pard\plain\b\fs20\lang1024 5.2.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IClassFactory::CreateInstance
{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote IClassFactory\:functions\:CreateInstance\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IClassFactory::CreateInstance(pUnkOuter, iid, ppvObject)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Create an uninitialized instance, that is, object, of the class associated with the class factory, returning an interface pointer of type {\cs58\f5\fs16\lang1024 iid}
 on the object to the caller in the out-parameter {\cs58\f5\fs16\lang1024 ppvObject.}
\par If the object is being created as part of an aggregate\emdash that is, the client of the object in this case is also an object server itself\emdash then {\cs58\f5\fs16\lang1024 pUnkOuter} contains the {\cs58\f5\fs16\lang1024 IUnknown} pointer to the 
\ldblquote outer unknown.\rdblquote  See \ldblquote Object Reusability\rdblquote  in Chapter 6 for more information. Class implementations need to be consciously designed to be aggregatable and accordingly not all classes are so designed.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pUnkOuter\tab IUnknown *}\tab The controlling unknown of the aggregate object if this object is being created as part of an aggregate. If {
\cs58\f5\fs16\lang1024 NULL}, then the object is not being aggregated, which is the case when the object is being created from a pure client. If non-{\cs58\f5\fs16\lang1024 NULL} and the class does not support aggregation, then the function returns {
\f5\fs16 CLASS_E_NOAGGREGATION.}
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID}\tab The identifier of the first interface desired by the caller through which it will communicate with the object; usually the \ldblquote initialization interface.\rdblquote 
\par {\cs58\f5\fs16\lang1024 ppv\tab void **}\tab The place in which the first interface pointer is to be returned.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\lang1024 Return Value}{\cs58\f5\fs16\lang1024 \cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790
\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. A new instance was created.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_NOAGGREGATION\cell }Use of aggregation was requested, but this class does not support it.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }Memory could not be allocated to service the request.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730
 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18  {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\fs20\lang1024 5.2.1.2
\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IClassFactory::LockServer{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\i\v\f5\fs12\lang1024 {\xe {\b0\i\f5\fs12 \ldblquote IClassFactory\:functions\:LockServer\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IClassFactory::LockServer(fLock)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
This function can be called by a client to keep a server in memory even when it is servicing no objects. Normally a server will unload itself (an EXE server) or allow the COM library to unload it (a DLL server) when the server has no objects left to serve
. If the client so desires, it can lock the server in memory to prevent it from being loaded and unloaded multiple times, which can improve performance of object instantiations. Most clients have no need t
o call this function. It is present primarily for the benefit of sophisticated clients with special performance needs from certain classes.
\par It is an error to call {\cs58\f5\fs16\lang1024 LockServer(TRUE) }and then call {\cs58\f5\fs16\lang1024 Release }without first releasing the lock with {\cs58\f5\fs16\lang1024 Lock\-Ser\-ver(FALSE)}
. Whoever locks the server is responsible for unlocking it, and once the class factory is released, there is no mechanism by which the caller can be guaranteed to later connect to the same class factory. All calls to {\cs58\f5\fs16\lang1024 
IClassFactory::LockServer }must be counted, not only the last one. Calls will be balanced; that is, for every {\cs58\f5\fs16\lang1024 LockServer(TRUE) }call, there will be a {\cs58\f5\fs16\lang1024 LockServer(FALSE) }
call. If the lock count and the class object reference count are both zero, the class object can be freed.
\par For more information on the use of {\cs58\f5\fs16\lang1024 LockServer}, see the \ldblquote Server Management\rdblquote  section below. For more information on implementing this function, see Chapter 6 under \ldblquote 
The Class Factory: Implementation and Exposure.\rdblquote 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 fLock\tab BOOL}\tab True if a lock is being added to the class factory; false if one is being removed.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\lang1024 Return Value}{\cs58\f5\fs16\lang1024 \cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790
\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\*\bkmkstart _Toc324051595}{\*\bkmkstart _Toc324051780}
{\*\bkmkstart _Toc324052022}{\*\bkmkstart _Toc335041397}{\*\bkmkstart _Toc337439327}{\*\bkmkstart _Toc337870038}{\*\bkmkstart _Toc339182952}{\pntext\pard\plain\b 5.3\tab}}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 
{\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Obtaining the Class Factory Object for a CLSID{\*\bkmkend _Toc324051595}{\*\bkmkend _Toc324051780}{\*\bkmkend _Toc324052022}{\*\bkmkend _Toc335041397}{\*\bkmkend _Toc337439327}{\*\bkmkend _Toc337870038}
{\*\bkmkend _Toc339182952}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Now that we understand what a class factory is and what functions it performs through the {\cs58\f5\fs16\lang1024 IClassFactory} in
terface we can examine how a client obtains the class factory. This depends only slightly on whether the object in question is in-process, local, or remo
te. For the most part, all cases are handled through the same implementation locator service in the COM library and the same API functions. The implications are greater for servers as shown in Chapter 6.
\par For all objects on the same machine as the client, including object handlers, the client generates a call to the COM Library function {\cs58\f5\fs16\lang1024 CoGetClassObject. }This function, described below, does whatever is necessary to ob
tain a class factory object for the given CLSID and return one of that class factory\rquote s interface pointers to the client. After that the client may calls {\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance }to instantiate objects of the class.

\par We say here that the client must {\i generate} a call to {\cs58\f5\fs16\lang1024 CoGetClassObject }
because it is not always necessary to call this function directly. When a client only wants to create a single object of a given class there is no need to go through the process of calling {\cs58\f5\fs16\lang1024 
CoGetClassObject, IClassFactory::CreateInstance}, and {\cs58\f5\fs16\lang1024 IClassFactory::Release}. Instead it can use API function {\cs58\f5\fs16\lang1024 CoCreateInstance }
described below which conveniently wraps these three more fundamental steps into one function.
\par {\pntext\pard\plain\b\fs20\lang1024 5.3.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoGetClassObject{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoGetClassObject\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoGetClassObject(clsid, grfContext, pServerInfo, iid, ppv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Locate and connect to the class factory object associated with the class identifier {\cs58\f5\fs16\lang1024 clsid}
. If necessary, the COM Library dynamically loads executable code in order to accomplish this. The interface by which the caller wishes to talk to the class factory object is indicated by {\cs58\f5\fs16\lang1024 iid}; this is usually {
\cs58\f5\fs16\lang1024 IID_IClassFactory }but can, of course, be any other object-creation interface.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
For example, the remoting architechture described in Chapter 7 uses a different type of \ldblquote factory\rdblquote  interface.}} The class factory\rquote s interface is returned in {\cs58\f5\fs16\lang1024 ppv }with one ref
erence count on it on behalf of the caller, that is, the caller is responsible for calling {\cs58\f5\fs16\lang1024 Release }after it has finished using the class factory object.
\par Different pieces of code can be associated with one CLSID for use in different execution contexts such as in-process, local, or object handler{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 handler}}}
. The context in which the caller is interested is indicated by the {\cs58\f5\fs16\lang1024 grfContext }parameter, a group of flags taken from the enumeration {\cs58\f5\fs16\lang1024 CLSCTX}:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
\par typedef enum tagCLSCTX \{
\par \tab CLSCTX_INPROC_SERVER\tab \tab = 1,
\par \tab CLSCTX_INPROC_HANDLER\tab = 2,
\par \tab CLSCTX_LOCAL_SERVER\tab \tab = 4,
\par \tab CLSCTX_REMOTE_SERVER\tab \tab = 16.
\par \tab \} {\b CLSCTX}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 
\ldblquote CLSCTX\rdblquote }}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The several contexts are tried in the sequence in which they are listed here. Multiple values may be combined (using bitwise OR) indicating that multiple contexts are acceptable to the caller:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 #define {\b CLSCTX_INPROC }\tab 
(CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER)
\par #define {\b CLSCTX_SERVER} \tab (CLSCTX_INPROC_SERVER | CLSCTX_LOCAL_SERVER | CLSCTX_REMOTE_SERVER)
\par #define {\b CLSCTX_ALL}\tab \tab (CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER | CLSCTX_LOCAL_SERVER | CLSCTX_REMOTE_SERVER)
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 These context values have the following meanings which apply to all remote servers as well:
\par \pard\plain \s79\fi-2880\li2880\ri360\widctlpar\tx7920 \f4\fs20 {\b\ul Value\tab Action Taken by the COM Library\tab 
\par }\pard \s79\fi-2880\li2880\ri720\sa120\widctlpar {\cs58\f5\fs16\lang1024 CLSCTX_INPROC_SERVER\tab }Load the in-process code (DLL) which creates and com
pletely manages the objects of this class. If the DLL is on a remote machine, invoke a surrogate server as well to load the DLL.
\par {\cs58\f5\fs16\lang1024 CLSCTX_INPROC_HANDLER\tab }Load the in-process code (DLL) which implements client-side structures of this class when instances of it are accessed remotely. An object handler generally implements object func
tionality which can only be implemented from an in-process module, relying on a local server for the remainder of the implementation.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }
\tab For example, in OLE 2, built on top of COM, there is an interface called{\f5\fs12  IViewObject} through which a client can ask an object to draw its graphical presentation directly to a Windows device context ({\f5\fs12 HDC}) through {\f5\fs12 
IViewObject::Draw}. However, an {\f5\fs12 HDC}
 cannot be shared between processes, so this interface can only be implemented inside as part of an in-process object. When an object server wishes to provide optimized graphical output but does not wish to completely implement the object in-process, it c
an use a lightweight object handler to implement just the drawing functionality where it must reside, relying on the local server for the full object implementation.}}
\par {\cs58\f5\fs16\lang1024 CLSCTX_LOCAL_SERVER\tab }Launch the separate-process code (EXE) which creates and manages the objects of this class.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super 
\chftn }\tab 
In some cases the object server may already be running and may allow its class factory to be used multiple times in which case the COM Library simply establishes another connection to the existing class factory in that server, eliminating the need to lau
nch another instance of the server applications entirely. While this can improve performance significantly, it is the option of the server to decide if its class factory is single- or multiple-use. See the function {\f5\fs12 CoRegisterClassObject }
in Chapter 6 for more information.}}
\par {\cs58\f5\fs16\lang1024 CLSCTX_REMOTE_SERVER\tab }Launch the separate-process code (EXE) on another machine which creates and manages objects of this class.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The COM Library should attempt to load in-process servers first, then in-process handlers, then local servers, then remote servers. This order he
lps to minimize the frequency with which the library has to launch separate server applications which is generally a much more time-consuming operation than loading a DLL, especially across the network.
\par When specifying {\cs58\f5\fs16\lang1024 CLSCTX_REMOTE_SERVER}, the caller may pass a {\cs58\f5\fs16\lang1024 COMSERVERINFO} structure to indicate the machine on which to run the server module, which is defined as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef struct tagCOMSERVERINFO \{

\par \tab OLECHAR\tab *szRemoteSCMBindingHandle;
\par \tab \} {\b COMSERVERINFO}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 {\xe 
{\b\f4\fs12 COMSERVERINFO}}};{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab This abstraction is still under design.}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The COM Library implementation of this {\cs58\f5\fs16\lang1024 CoGetClassObject }
relies on the system registry to map the CLSID to the server module to load or launch, but this process is opaque to the client application. If, however, COM cannot make any association then the function fails with the code {\cs58\f5\fs16\lang1024 
REGDB_E_CLASSNOTREG}. If this function launches a server application it must wait until that server registers its class factory or until a time-out occurs (duration determined by COM, something on the order of a minute of processing time). See the {
\cs58\f5\fs16\lang1024 CoRegisterClassObject }function in Chapter 6 under \ldblquote Exposing the Class Factory from Local Servers.\rdblquote 
\par The arguments to this function are as follows:
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li3060\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 clsid\tab REFCLSID\tab }The class of the class factory to obtain.
\par {\cs58\f5\fs16\lang1024 grfContext\tab DWORD\tab }The context in which the executable code is to run.
\par 
\par {\cs58\f5\fs16\lang1024 pServerInfo}\tab {\cs58\f5\fs16\lang1024 COMSERVERINFO*}\tab Identifies the machine on which to activate the executable code. Must be {\cs58\f5\fs16\lang1024 NULL} when {\cs58\f5\fs16\lang1024 grfContext} does not contain {
\cs58\f5\fs16\lang1024 CLSCTX_REMOTE_SERVER}. When {\cs58\f5\fs16\lang1024 NULL} and {\cs58\f5\fs16\lang1024 grfContext} contains {\cs58\f5\fs16\lang1024 CLSCTX_REMOTE_SERVER}, COM uses the default machine location for this class.
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }The interface on the class factory object desired by the caller.
\par {\cs58\f5\fs16\lang1024 ppv\tab void **\tab }The place in which to put the requested interface.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\lang1024 Return Value}{\cs58\f5\fs16\lang1024 \cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790
\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 REGDB_E_CLASSNOTREG\cell }An implementation of the requested class could not be located.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }Memory could not be allocated to service the request.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 
The following code fragment demonstrates how a client would call {\cs58\f5\fs16\lang1024 CoGetClassObject }and create an in-process instance of the {\cs58\f5\fs16\lang1024 TextRender} object with {\cs58\f5\fs16\lang1024 CLSID_TextRender }
using the class factory to request an {\cs58\f5\fs16\lang1024 IUnknown }pointer for the object. In this example the client is explicitly limiting COM to use only in-process servers:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 IClassFactory *\tab pCF;
\par IUnknown *      \tab pUnkObj;
\par HRESULT        \tab hr;
\par 
\par hr=CoGetClassObject(CLSID_TextRender, CLSCTX_INPROC_SERVER, NULL, IID_IClassFactory, (void *)pCF);
\par if (FAILED(hr))
\par \tab //Could not obtain class factory, creation fails completely.
\par 
\par /*
\par  * Create the object. If this call succeeds the pUnkObj will 
\par  * be valid and have a reference count on it on behalf of the caller
\par  * which the caller must Release.
\par  */
\par hr=pCF->CreateInstance(NULL, IID_IUnknown, (void *)pUnkObj);
\par 
\par //Caller must call Release regardless of CreateInstance result
\par pCF->Release();
\par 
\par if (FAILED(hr))
\par \tab //Object creation failed: interface may not be supported
\par 
\par /*
\par  * Now use the object in whatever capacity the caller desires.
\par  * The first step will be initialization.
\par  */
\par 
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 //Release the object when finished with it.
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 pUnkObj->Release();
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Since the process of calling {\cs58\f5\fs16\lang1024 CoGetClassObject}{\i , }{\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance}{\i , }and {\cs58\f5\fs16\lang1024 IClassFactory::Release }
is so common in practice, the COM Library provides a wrapper API function for this sequence called {\cs58\f5\fs16\lang1024 CoCreateInstance}. This allows the client to avoid the whole issue of class factory objects entirely. However, {
\cs58\f5\fs16\lang1024 CoCreateInstance }only creates one object at a time; if the client wants to create multiple objects of the same class at once, it is more efficient to obtain the class factory directly and call {\cs58\f5\fs16\lang1024 
IClassFactory::CreateInstance }multiple times, avoiding excess calls to {\cs58\f5\fs16\lang1024 CoGetClassObject }and {\cs58\f5\fs16\lang1024 IClassFactory::Release.}
\par {\pntext\pard\plain\b\fs20\lang1024 5.3.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoCreateInstance{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoCreateInstance\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoCreateInstance(clsid, pUnkOuter, grfContext, iid, ppvObj)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Create an uninitialized instance of the class {\cs58\f5\fs16\lang1024 clsid}, asking for interface {\cs58\f5\fs16\lang1024 iid }using the execution contexts given in {\cs58\f5\fs16\lang1024 grfContext. }
If the object is being used as part of an aggregation then {\cs58\f5\fs16\lang1024 pUnkOuter }contains a pointer to the controlling unknown. These parameters behave as those of the same name in {\cs58\f5\fs16\lang1024 CoGetClassObject }({
\cs58\f5\fs16\lang1024 clsid}) and {\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance (pUnkOuter, grfContext, iid, ppv)},
\par {\cs58\f5\fs16\lang1024 CoCreateInstance }is simply a wrapper function for {\cs58\f5\fs16\lang1024 CoGetClassObject }and {\cs58\f5\fs16\lang1024 IClassFactory }that is implemented (conceptually) as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
HRESULT CoCreateInstance(REFCLSID clsid, IUnknown * pUnkOuter,
\par \tab DWORD grfContext, REFIID iid, void * ppvObj)
\par \tab \{
\par \tab IClassFactory * pCF;
\par \tab HRESULT         hr;
\par 
\par \tab hr=CoGetClassObject(clsid, grfContext, NULL, IID_IClassFactory, (void *)pCF);
\par 
\par \tab if (FAILED(hr))
\par \tab \tab return hr;
\par 
\par \tab hr=pCF->CreateInstance(pUnkOuter, iid, (void *)ppv);
\par \tab pCF->Release();
\par 
\par \tab /*
\par \tab  * If CreateInstance fails, ppv will be set to NULL. Otherwise
\par \tab  * ppv has the interface pointer and hr contains NOERROR.
\par \tab  */
\par \tab return hr;
\par \tab \}
\par \pard\plain \s48\fi-2880\li2880\sb240\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 clsid\tab REFCLSID\tab }The class of which an instance is desired
\par {\cs58\f5\fs16\lang1024 pUnkOuter\tab IUnknown*\tab }The controlling unknown, if any.
\par {\cs58\f5\fs16\lang1024 grfContext\tab DWORD\tab }The CLSCTX to be used.
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }The initialization interface desired
\par {\cs58\f5\fs16\lang1024 ppv\tab void**\tab }The place at which to return the desired interface.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\lang1024 Return Value}{\cs58\f5\fs16\lang1024 \cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790
\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Any error that can be returned from CoGetClassObject or IClassFactory::CreateInstance\cell }Semantics as in those functions.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd 
\trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
{\*\bkmkstart _Toc324051596}{\*\bkmkstart _Toc324051781}{\*\bkmkstart _Toc324052023}{\*\bkmkstart _Toc335041398}{\*\bkmkstart _Toc337439328}{\*\bkmkstart _Toc337870039}{\pntext\pard\plain\b\fs20\lang1024 5.3.1.3\tab}}\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoCreateInstanceEx{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoCreateInstanceEx\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoCreateInstanceEx(clsid, pUnkOuter, grfContext, pServerInfo, dwCount, rgMultiQI)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Create an uninitialized instance of the class {\cs58\f5\fs16\lang1024 clsid} on a specific machine, asking for a set of interface {\cs58\f5\fs16\lang1024 iids} in {\cs58\f5\fs16\lang1024 pResult }
using the execution contexts given in {\cs58\f5\fs16\lang1024 grfContext. }If the object is being used as part of an aggregation then {\cs58\f5\fs16\lang1024 pUnkOuter }contains a pointer to the controlling unknown.
\par To help optimize round-trips to a remote machine during instantiation, this API allow the client to specify a set of interfaces to return on the object via the {\cs58\f5\fs16\lang1024 rgMultiQI} array of {\cs58\f5\fs16\lang1024 MULTI_QI}
 structures, defined as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef struct tagMULTI_QI \{
\par \tab REFIID\tab \tab riid;\tab \tab // interface to return
\par \tab void*\tab \tab \tab pvObj;\tab // location to return interface pointer
\par \tab HRESULT\tab hr;\tab \tab // location to return result of QueryInterface for riid
\par \tab \} {\b MULTI_QI}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 {\xe {
\b\f4\fs12 MULTI_QI}}};
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The semantics of using this API and passing a {\cs58\f5\fs16\lang1024 MULTI_QI} array are identical to the following sequence of operations, but incur less overhead for the client, the server, and the network:

\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 IClassFactory\tab *pCF;
\par IUnknown\tab \tab *punk;
\par COMSERVERINFO csi;
\par 
\par CoGetClassObject(clsid, CLSCTX_SERVER, &csi, IID_IClassFactory, (void**)&pCF);
\par pCF->CreateInstance(NULL, IID_IUnknown, (void**)&punk);
\par for (DWORD i=0; i<dwCount; i++)
\par \tab rgMultiQI[I].hr = punk->QueryInterface(rgMultiQI[i].riid, &rgMultiQI[i].pvObj);
\par punk->Release();
\par \pard\plain \s48\fi-3060\li3060\sb240\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3060\li3060\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 clsid\tab REFCLSID\tab }The class of which an instance is desired
\par {\cs58\f5\fs16\lang1024 pUnkOuter\tab IUnknown*\tab }The controlling unknown, if any.
\par {\cs58\f5\fs16\lang1024 grfContext\tab DWORD\tab }The CLSCTX to be used.
\par {\cs58\f5\fs16\lang1024 pServerInfo}\tab {\cs58\f5\fs16\lang1024 COMSERVERINFO*}\tab Identifies the machine on which to activate the executable code. Must be {\cs58\f5\fs16\lang1024 NULL} when {\cs58\f5\fs16\lang1024 grfContext} does not contain {
\cs58\f5\fs16\lang1024 CLSCTX_REMOTE_SERVER}. When {\cs58\f5\fs16\lang1024 NULL} and {\cs58\f5\fs16\lang1024 grfContext} contains {\cs58\f5\fs16\lang1024 CLSCTX_REMOTE_SERVER}, COM uses the default machine location for this class.
\par {\cs58\f5\fs16\lang1024 dwCount}\tab {\cs58\f5\fs16\lang1024 DWORD}\tab The number of {\cs58\f5\fs16\lang1024 MULTI_QI} structures in the {\cs58\f5\fs16\lang1024 rgMultiQI }array.
\par {\cs58\f5\fs16\lang1024 rgMultiQI}\tab {\cs58\f5\fs16\lang1024 MULTI_QI*}\tab An array of {\cs58\f5\fs16\lang1024 MULTI_QI} structures. On input, each element should be cleared and the {\cs58\f5\fs16\lang1024 riid} member set to an {
\cs58\f5\fs16\lang1024 IID} being requested. On output, one or more of the interfaces may be retrieved, and individual {\cs58\f5\fs16\lang1024 pvObj} members will be non-{\cs58\f5\fs16\lang1024 NULL}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\lang1024 Return Value}{\cs58\f5\fs16\lang1024 \cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790
\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CO_S_NOTALLINTERFACES\cell }Not all of {\cs58\f5\fs16\lang1024 dwCount }interfaces requested in the {\cs58\f5\fs16\lang1024 MULTI_QI} array were successfully retrieved. Examine individual {
\cs58\f5\fs16\lang1024 pvObj} members of {\cs58\f5\fs16\lang1024 MULTI_QI} to determine exactly which interfaces were returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Any error that can be returned from CoGetClassObject or IClassFactory::CreateInstance\cell }Semantics as in those functions.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd 
\trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
{\*\bkmkstart _Toc339182953}{\pntext\pard\plain\b 5.4\tab}}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Initializing the Object{\*\bkmkend _Toc324051596}
{\*\bkmkend _Toc324051781}{\*\bkmkend _Toc324052023}{\*\bkmkend _Toc335041398}{\*\bkmkend _Toc337439328}{\*\bkmkend _Toc337870039}{\*\bkmkend _Toc339182953}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 After the client has successfully created an object of a given class it must initialize that object. By definition, any new object created using {\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance }
(or variant or wrapper thereof) is uninitialized. Initialization generally happens through a single call to a member function of the \ldblquote initialization interface.\rdblquote 
 This interface is usually the one requested by the client in its call to create the object, but this is not required. Be
fore an object is initialized, the only calls that are guaranteed to work on the object (besides the initializing functions themselves) are the {\cs58\f5\fs16\lang1024 IUnknown}
 functions (of any interface) unless otherwise explicitly specified in the definition of an interface. In addition, {\cs58\f5\fs16\lang1024 QueryInterface} is only guaranteed to work for {\cs58\f5\fs16\lang1024 IUnknown}
 and any initialization interface, but not guaranteed for a non-initialization interface.
\par Some objects will not require initialization before they are function through all of their interface
s. Those that do require initialization will define, either explicitly through documentation of the object or implicitly through the scenarios in which the object is used, which member of which interface can be used for initialization.
\par For example, objects that can serialize their persistent data to a file will implement the {\cs58\f5\fs16\lang1024 IPersistFile} interface (see \ldblquote Persistent Storage Interfaces for Objects\rdblquote  in Chapter 8). The function {
\cs58\f5\fs16\lang1024 IPersistFile::Load}, which instructs the object to load its data from a file, is the initialization function and {\cs58\f5\fs16\lang1024 IPersistFile} is the initialization inter
face. Other examples are objects that can serialize to storages or streams, where the objects implement the initialization interfaces {\cs58\f5\fs16\lang1024 IPersistStorage} or {\cs58\f5\fs16\lang1024 IPersistStream}
, respectively (again, see Chapter8). The {\cs58\f5\fs16\lang1024 Load} functions in these interfaces are initialization functions as is {\cs58\f5\fs16\lang1024 IPersistStorage::InitNew, }
which initializes a new object with storage instead of loading a previously saved version.
\par {\*\bkmkstart _Toc324051597}{\*\bkmkstart _Toc324051782}{\*\bkmkstart _Toc324052024}{\*\bkmkstart _Toc335041399}{\*\bkmkstart _Toc337439329}{\*\bkmkstart _Toc337870040}{\*\bkmkstart _Toc339182954}{\pntext\pard\plain\b 5.5\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Managing the Object{\*\bkmkend _Toc324051597}{\*\bkmkend _Toc324051782}{\*\bkmkend _Toc324052024}{\*\bkmkend _Toc335041399}
{\*\bkmkend _Toc337439329}{\*\bkmkend _Toc337870040}{\*\bkmkend _Toc339182954}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Once an object is initialized, it is entirely up to the client to determine what it intends to do with that object. It is often the case that the initializing interface is not the \ldblquote working\rdblquote 
 interface through which the client will primarily use the object. The creation sequence only nets the client a single interface pointer that has a lim
ited scope of functionality. If the client wishes to perform an operation outside that scope, it must call the known interface\rquote s {\cs58\f5\fs16\lang1024 QueryInterface} function to ask for another interface on the same object.
\par For example, say a client has created and initialized an object but now wishes to obtain a graphical presentation, say a bitmap, from that object by calling {\cs58\f5\fs16\lang1024 IDataObject::GetData }(see Chapter 10 for details on this func
tion). The client must call {\cs58\f5\fs16\lang1024 QueryInterface} to obtain an {\cs58\f5\fs16\lang1024 IDataObject} pointer before calling the function.
\par It is important to note that {\i all operations on that object will occur through calls to the member functions of the object\rquote s various interfaces}. Any additional API functions that the cl
ient might call to affect the object itself are usually wrapper functions of common sequences of interface function calls. There simply is no other way to affect the object other than through it\rquote s interfaces.
\par Because a client must ask for an interface before it can possibly ask the object to perform the actions defined in the interface, the client cannot ask the object to perform an action the object does not support. This is a primary strength of the {
\cs58\f5\fs16\lang1024 QueryInterface} function as described in the early chapters of this document. Calling {\cs58\f5\fs16\lang1024 QueryInterface }for access to an object\rquote 
s functionality is not problematic nor inconvenient because the client usually makes the call specifically at the point where the client wants to perform some action on the object. That is, clients generally do not call {\cs58\f5\fs16\lang1024 
QueryInterface} for all possible interfaces after the object is created so as to have all the pointers on hand\emdash instead, the client calls {\cs58\f5\fs16\lang1024 QueryInterface} before attempting to perform some action with the object.
\par In practice this means that the client must be prepared for the failure of a call to {\cs58\f5\fs16\lang1024 QueryInterface}
. Instead of being a complete pain to implementation, such preparation defines a mechanism through which the client can make dynamic choices based on the functionality of the object itself on an object-by-object basis.
\par For example, consider a client application that has created a number of objects and it now wants to save the application\rquote s state, which includes saving the state of each object. Let\rquote s say the cl
ient is using structured storage for its native file representation, so its first choice will be to assign an individual storage element in that file for each object. Each object can then store structured information itself and it indicates its ability to
 do by implementing the {\cs58\f5\fs16\lang1024 IPersistStorage} interface. However, some object may not know how to write to a storage but know how to write to a stream and indicate the capability by implementing {\cs58\f5\fs16\lang1024 IPersistStream}
. Yet others may only know how to write information to a file themselves and thus implement {\cs58\f5\fs16\lang1024 IPersistFile}
. Finally, some objects may not know how to serialize themselves at all, but can provide a binary memory copy of the their native data through {\cs58\f5\fs16\lang1024 IDataObject}.
\par In this case the client\rquote s strategy will be as follows: if an object supports {\cs58\f5\fs16\lang1024 IPersistStorage}, then give it an {\cs58\f5\fs16\lang1024 IStorage} instance and ask it to save its data into it by calling {
\cs58\f5\fs16\lang1024 IPersistStorage::Save}. If that object does not provide such support, check if it supports {\cs58\f5\fs16\lang1024 IPersistStream}, and if so, create a clien
t-controlled stream for it (in perhaps a separate client-controlled storage element) and pass that {\cs58\f5\fs16\lang1024 IStream} pointer to the object through {\cs58\f5\fs16\lang1024 IPersistStream::Save}
. If the object does not support streams, then check for {\cs58\f5\fs16\lang1024 IPersistFile}. If the object supports serialization to a file, then have the object write its data into a temporary file by calling {\cs58\f5\fs16\lang1024 IPersistFile::Save
}, then make a binary copy of that file in a client-controlled stream element within a client-controlled storage element. If all else fails, attempt to retrieve the object\rquote s binary data from {\cs58\f5\fs16\lang1024 IDataObject::GetData}
 using the first format the object supports, and write that binary data into a client-controlled stream in a client-controlled storage.
\par Code for such a strategy would be structured something like the following pseudo-code for a \ldblquote save object\rdblquote  function in the client:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
\par BOOL SaveObject(IUnknown * pUnkObj)
\par \tab \{
\par \tab pUnkObj->QueryInterface(IID_IPersistStorage)
\par 
\par \tab if (success)
\par \tab \tab \{
\par \tab \tab create a storage element for the object
\par \tab \tab call IPersistStorage::Save
\par \tab \tab call IPersistStorage::Release
\par \tab \tab return TRUE
\par \tab \tab \}
\par 
\par \tab //All other cases use a client-controlled stream
\par \tab create a stream element for the object in some storage
\par 
\par \tab //IPersistStorage not supported, try IPersistStream
\par \tab pUnkObj->QueryInterface(IID_IPersistStream)
\par \tab 
\par \tab if (success)
\par \tab \tab \{
\par \tab \tab call IPersistStream::Save
\par \tab \tab call IPersistStream::Release
\par \tab \tab return TRUE
\par \tab \tab \}
\par 
\par \tab //IPersistStream not supported, try IPersistFile
\par \tab pUnkObj->QueryInterface(IID_IPersistFile)
\par \tab 
\par \tab if (success)
\par \tab \tab \{
\par \tab \tab //Save to a temp file
\par \tab \tab call IPersistFile::Save("objdata.tmp");
\par \tab \tab call IPersistFile::Release
\par \tab \tab read data from temp file
\par \tab \tab write data to the stream
\par \tab \tab return TRUE
\par \tab \tab \}
\par 
\par \tab //All else failed, try IDataObject
\par \tab pUnkObj->QueryInterface(IID_IDataObject)
\par 
\par \tab if (success)
\par \tab \tab \{
\par \tab \tab call IDataObject::EnumFormatEtc
\par \tab \tab call IEnumFORMATETC to get the first format (assume it's native)
\par \tab \tab call IEnumFORMATETC::Release
\par 
\par \tab \tab call IDataObject::GetData for the format, asking for global memory
\par \tab \tab call IDataObject::Release
\par 
\par \tab \tab Lock global memory and write to stream
\par \tab \tab Free global memory
\par \tab \tab return TRUE
\par \tab \tab \}
\par 
\par \tab //Everything failed, so give up
\par \tab destroy stream we created:  not using it.
\par \tab return FALSE
\par \tab \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 In this example the client is prepared for many different types of objects and how they might provide persistent information (and using {\cs58\f5\fs16\lang1024 IDataObject::GetData }
here is stretching the concept somewhat, but shows that the client has many choices). Based on the results of {\cs58\f5\fs16\lang1024 QueryInterface }the client decides at run-time how to save each individual object.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Reloading these objects would be a similar pr
ocedure, but the client would know, from the structure of its storage and other information it saved about the objects itself, which method to use to reload the object from the storage. The client wants to insure that it uses the same method to load the o
bject that it did for saving it originally, that is, use the same interface instead of querying for the best one. The reason is that while the data was passively stored on disk, the object that wrote that data might have been updated such that where it on
ce only supported {\cs58\f5\fs16\lang1024 IPersistStream}, for example, it now supports {\cs58\f5\fs16\lang1024 IPersistStorage}. In that case the client should ask it to load the data using {\cs58\f5\fs16\lang1024 IPersistStream::Load}.
\par However, when the client goes to save the object again, it will now successfully find that the object supports {\cs58\f5\fs16\lang1024 IPersistStorage}
 and can now have the object save into a storage element instead. (The container would also insure that the old client-controlled stream was deleted as it is no longer in use for that object.) This demonstrates how an object 
can be updated and new interfaces supported without {\i any} recompilation on the part of existing clients while at the same time {\i suddenly working with clients on a higher level of integration than before}
. In order to remain compatible the object must insure that it supports the older interfaces (such as {\cs58\f5\fs16\lang1024 IPersistStream}) but is free to add new contracts\emdash new interfaces such as {\cs58\f5\fs16\lang1024 IPersistStorage}\emdash 
as it wants to provide new functionality.
\par The point of this example, which is also true for clients that use any other interfaces an object might support in other scenarios, is that the client is empowered to make dynamic decisions on a per-object basis through the {\cs58\f5\fs16\lang1024 
QueryInterface} function. Containers programmed to be dynamic as such allow object to improve independently while insuring that the container will work as good\emdash and generally better\emdash 
as it always has with any given object. All of this is due to the powerful and important {\cs58\f5\fs16\lang1024 QueryInterface} mechanism that for all intents and purposes is the single most important aspect of true system component software.
\par {\*\bkmkstart _Toc324051598}{\*\bkmkstart _Toc324051783}{\*\bkmkstart _Toc324052025}{\*\bkmkstart _Toc335041400}{\*\bkmkstart _Toc337439330}{\*\bkmkstart _Toc337870041}{\*\bkmkstart _Toc339182955}{\pntext\pard\plain\b 5.6\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Releasing the Object{\*\bkmkend _Toc324051598}{\*\bkmkend _Toc324051783}{\*\bkmkend _Toc324052025}{\*\bkmkend _Toc335041400}
{\*\bkmkend _Toc337439330}{\*\bkmkend _Toc337870041}{\*\bkmkend _Toc339182955}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The final operation required in a COM client when dealing with an object from some other server is to free that object when the client no longer needs it. This is achieved by calling the {\cs58\f5\fs16\lang1024 
Release} member function of all interfaces obtained during the course of using the object.
\par Recall that a function that creates or synthesizes a new interface pointer is responsible for calling {\cs58\f5\fs16\lang1024 AddRef} through that pointer before returning it to the caller of the function. This applies to the {\cs58\f5\fs16\lang1024 
IClassFactory::CreateInstance} function as well as {\cs58\f5\fs16\lang1024 CoCreateInstance} (and for that matter, {\cs58\f5\fs16\lang1024 CoGetClassObject}, too, which is why you must call {\cs58\f5\fs16\lang1024 IClassFactory::Release}
 after creating the object). Therefore, as far as the client is concerned, the object will have a reference count of one after creation. The object may, in fact, have a higher reference count if it is also being used from other clients as well, but each c
lient is only responsible and cognizant of the reference counts added on its behalf.
\par The other primary function that creates new interface pointers is {\cs58\f5\fs16\lang1024 QueryInterface}. Every call the client makes to {\cs58\f5\fs16\lang1024 QueryInterface} to obtain another interface pointer will internally generate another call to 
{\cs58\f5\fs16\lang1024 AddRef} in that object, incrementing the reference count. Therefore, in addition to calling {\cs58\f5\fs16\lang1024 Release} through the interface pointer obtained in the creation sequence, the client must also call {
\cs58\f5\fs16\lang1024 Release} through any interface pointer obtained from {\cs58\f5\fs16\lang1024 QueryInterface} (this is illustrated in the pseudo-code of the previous section).
\par The bottom line is that the client is responsible for matching any operation that generates a call to {\cs58\f5\fs16\lang1024 AddRef} through a given interface pointer with a call to {\cs58\f5\fs16\lang1024 Release}
 through that same interface pointer. It is not necessary to call {\cs58\f5\fs16\lang1024 Release} in the opposite order of calls to {\cs58\f5\fs16\lang1024 AddRef}
; it is just necessary to match the pairs. Failure to do so will cause memory leaks as objects are not freed and servers are not allowed to shut down properly. This is no different that forgetting to free memory obtained through {\cs58\f5\fs16\lang1024 
malloc}.
\par Finally, although the client matches its calls to {\cs58\f5\fs16\lang1024 AddRef} and {\cs58\f5\fs16\lang1024 Release}
, the actual object may still continue to run and the server may continue to execute as well without any objects in service. The object will continue if other clients are using that same object and thus have reference counts on it. Only when all clients h
ave released their references will that object free itself. The server will, of course,
 continue to execute as long as there is an object to serve, but the client does have some power over keeping a server running even without objects. That is the purpose of Server Management functions in COM.
\par {\*\bkmkstart _Toc324051599}{\*\bkmkstart _Toc324051784}{\*\bkmkstart _Toc324052026}{\*\bkmkstart _Toc335041401}{\*\bkmkstart _Toc337439331}{\*\bkmkstart _Toc337870042}{\*\bkmkstart _Toc339182956}{\pntext\pard\plain\b 5.7\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Server Management{\*\bkmkend _Toc324051599}{\*\bkmkend _Toc324051784}{\*\bkmkend _Toc324052026}{\*\bkmkend _Toc335041401}
{\*\bkmkend _Toc337439331}{\*\bkmkend _Toc337870042}{\*\bkmkend _Toc339182956}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As mentioned in previous sections, a client has the ability to manage servers on the server level to keep them running even when they are not serving any objects. The client\rquote 
s primary mechanism for this is the {\cs58\f5\fs16\lang1024 IClassFactory::LockServer} function described above. By calling this function with the TRUE parameter, the client places a \lquote lock\rquote 
 on the server. As long as the server either has objects created {\i or}
 has one or more locks on it, the server will continue to execute. When the server detects a zero object and zero lock condition, it can unload itself (which differs between DLL and EXE servers, as described in Chapter 7).
\par A client can place more than one lock on a server by calling {\cs58\f5\fs16\lang1024 IClassFactory::LockServer(TRUE)} more than once. Each call to {\cs58\f5\fs16\lang1024 LockServer(TRUE)} must be matched with a call to {\cs58\f5\fs16\lang1024 
LockServer(FALSE)}\emdash the server maintains a lock count for the server as it maintains a reference count for its served objects. But while {\cs58\f5\fs16\lang1024 AddRef }and {\cs58\f5\fs16\lang1024 Release }affect objects, {\cs58\f5\fs16\lang1024 
LockServer} affects the server itself.
\par {\cs58\f5\fs16\lang1024 LockServer} affects all servers\emdash in-process, local, and remote\emdash identically. The client does have some additional control over in-process objects as it normally would for other DLLs through the functions {
\cs58\f5\fs16\lang1024 CoLoadLibrary}{\i , }{\cs58\f5\fs16\lang1024 CoFreeUnusedLibraries}{\i , }and {\cs58\f5\fs16\lang1024 CoFreeAllLibraries}{\i , }as described below. Normally only {\cs58\f5\fs16\lang1024 CoFreeUnusedLibraries}
 is called from a client whereas the others are generally used inside the COM Library to implement other API functions. In addition, the COM Library supplies one additional function that has meaning in this context, {\cs58\f5\fs16\lang1024 
CoIsHandlerConnected}{\i , }that tells the container if an object handler is currently working in association with a local server as described in its entry below.
\par {\pntext\pard\plain\b\fs20\lang1024 5.7.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoFreeUnusedLibraries{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 \ldblquote CoFreeUnusedLibraries\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void CoFreeUnusedLibraries(void)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This function and unloads any DLLs that have been loaded as a result of COM object creation calls but which are no longer in use. Client applications can call this function periodically to free up resources.
\par {\pntext\pard\plain\b\fs20\lang1024 5.7.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoIsHandlerConnected{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 CoIsHandlerConnected}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 BOOL CoIsHandlerConnected(pUnk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Determines if the specified handler{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 handler}}}
 is connected to its corresponding object in a running local server. The result of this function might be used in a client application to determine if certain oper
ations might result in launching a server application allowing the client to make performance decisions.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pUnk\tab IUnknown *\tab }Specifies the object in question.
\par {\cs58\f5\fs16\lang1024 return value\tab BOOL\tab }True if a handler is connected to a running server with the full object implementation, {\cs58\f5\fs16\lang1024 FALSE} if the handler is not connected.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par 
\par {\*\bkmkstart _Toc335190097}{\*\bkmkstart _Toc337870043}{\*\bkmkstart _Toc339182957}{\pntext\pard\plain\b\fs28 6.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}
\b\f4\fs28 COM Servers{\*\bkmkend _Toc335190097}{\*\bkmkend _Toc337870043}{\*\bkmkend _Toc339182957}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As described in earlier chapters, a COM Server is some module of code, a DLL or an EXE, that implements one or more object classes (each with their own {\cs58\f5\fs16\lang1024 CLSID}). A COM se
rver structures the object implementations such that COM clients can create an use objects from the server using the CLSID to identify the object through the processes described in Chapter 5.
\par In addition, COM servers themselves may be clients of other objects, usually when the server is using those other objects to help implement part of its own objects. This chapter will cover the various methods of using an object as part of another through 
the mechanisms of containment and aggregation.
\par Another feature that servers might support is the ability to emulate a different server of a different {\cs58\f5\fs16\lang1024 CLSID}. The COM Library provides a few API functions to support this capability that are covered at the end of this chapter.

\par If the server is an application, that is, an executable program, then it must follow all the requirements for a COM Application as detailed in Chapter 4. If the server is a DLL, that is, an in-process server or an object handler, it must at least verify t
he library version and may, if desired, insure that the COM Library is initialized. That aside, all servers generally perform the following operations in order to expose their object implementations:
\par {\pntext\pard\plain\fs20 1.\tab}\pard\plain \s73\fi-360\li1080\ri360\sa120\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f4\fs20 Allocate a class identifier\emdash a {\cs58\f5\fs16\lang1024 CLSID}\emdash 
for each supported class and provide the system with a mapping between the {\cs58\f5\fs16\lang1024 CLSID} and the server module.
\par {\pntext\pard\plain\fs20 2.\tab}Implement a class factory object with the {\cs58\f5\fs16\lang1024 IClassFactory}{\i  }interface for each supported {\cs58\f5\fs16\lang1024 CLSID}.
\par {\pntext\pard\plain\fs20 3.\tab}Expose the class factory such that the COM Library can locate it after loading (DLL) or launching (EXE) the server.
\par {\pntext\pard\plain\fs20 4.\tab}Provide for unloading the server when there are no objects being served and no locks on the server ({\cs58\f5\fs16\lang1024 IClassFactory::LockServer}).
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Of course, there must be some object to serve, so the first section of this chapter discusses the basic structure of an object and some considerations for design. The sections that follow then cover the functions in
volved in each of these steps for the different styles of servers\emdash DLL and EXE\emdash which apply regardless of whether the server is running on a remote machine. Also included
 is a discussion of object handlers (special-case in-process objects) before the discussion of aggregation. Note that no new interfaces are introduced in this chapter as the fundamental ones, {\cs58\f5\fs16\lang1024 IUnknown}{\i  }and {
\cs58\f5\fs16\lang1024 IClassFactory}, have already been covered.
\par As far as the server is concerned, the COM Library exists to drive the server\rquote s class factory to create objects and to handle remote method calls from clients in other processes or on other machines and to marshal the object\rquote 
s return values back to the client. Whereas client applications are unaware of the object\rquote s execution context once the object is created, the server is, of course, always aware of that context. An in-process object is always loaded into the client
\rquote s process space. A local or remote object always runs in a process other than the client, or on a different machine. However, the actual object itself can be written such that it does not need to care about the execut
ion context, leaving the specifics to the structure of the server module instead. This chapter will cover one such strategy.
\par Finally, recall from the beginning of Chapter 5 that a client always makes a call into some in-process object whenever it calls any interface member function. If the actual object in the server is local or remote, that object is merely a proxy that genera
tes the appropriate remote method call to the true object. This does not mean a server has to understand RPC, however, as the server always sees these calls as direct calls from a piece of code in the server process. Th
e mechanism that achieves this, described in Chapter 7, \ldblquote Communicating via Interfaces: Remoting,\rdblquote  is that the RPC call is picked up in the server process by an \ldblquote stub\rdblquote 
 object which translate the RPC information into the direct call to the server\rquote s object. From the server\rquote s point of view, the client called it directly.
\par {\*\bkmkstart _Toc324051601}{\*\bkmkstart _Toc324051786}{\*\bkmkstart _Toc324052028}{\*\bkmkstart _Toc335190098}{\*\bkmkstart _Toc337870044}{\*\bkmkstart _Toc339182958}{\pntext\pard\plain\b 6.1\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Identifying and Registering an Object Class{\*\bkmkend _Toc324051601}{\*\bkmkend _Toc324051786}{\*\bkmkend _Toc324052028}{\*\bkmkend _Toc335190098}{\*\bkmkend _Toc337870044}
{\*\bkmkend _Toc339182958}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A major strength of COM is the use of globally unique identifiers to essentially name each object class that exists, not only on the local machin
e but universally across all machines and all platforms. The algorithm that guarantees this is encompassed in the COM Library function {\cs58\f5\fs16\lang1024 CoCreateGuid} as described in Chapter 3. An object implementor must obtain a {
\cs58\f5\fs16\lang1024 GUID} to assign to the object server as its {\cs58\f5\fs16\lang1024 CLSID} for each implemented class.
\par {\*\bkmkstart _Toc324051602}{\*\bkmkstart _Toc324051787}{\*\bkmkstart _Toc324052029}{\pntext\pard\plain\b\i\fs22 6.1.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
System Registry of Classes for the Local Machine{\*\bkmkend _Toc324051602}{\*\bkmkend _Toc324051787}{\*\bkmkend _Toc324052029}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A {\cs58\f5\fs16\lang1024 CLSID} to identify an object implementation is not very useful unless clients have a way of finding the {\cs58\f5\fs16\lang1024 CLSID}. Fro
m Chapter 5 we know that there are a number of ways a client may come to know a {\cs58\f5\fs16\lang1024 CLSID}. First of all, that client may be compiled to specifically depend on a specific {\cs58\f5\fs16\lang1024 CLSID}
, in which case it obtained the server\rquote s header files with the {\cs58\f5\fs16\lang1024 DEFINE_GUID} macros present. But for the most part, clients will want to obtain {\cs58\f5\fs16\lang1024 CLSIDs}
 at run-time, especially when that client displays a list of available objects to and end-user and creates an object of the selected type at the user\rquote s request. So there must be a way to dynamically locate and load CLSIDs for accessible objects.

\par Furthermore, there has to be some system-wide method for the COM Library to associate a given {\cs58\f5\fs16\lang1024 CLSID}
, regardless of how the client obtained it, to the server code that implements that class. In other words, the COM Library requires some persistent store of {\cs58\f5\fs16\lang1024 CLSID}-to-server mappings that it uses to implement its loca
tor services. It is up to the COM Library implementor, not the implementor of clients or servers, to define the store and how server applications would register their {\cs58\f5\fs16\lang1024 CLSIDs} and server module names in that store.
\par The store must distinguish between in-process, local, and remote objects as well as object handlers in addi
tion to any environment-specific differences. The COM implementation on Microsoft Windows uses the Windows system registry (also called the registration database, or RegDB for short) as a store for such in
formation. In that registry there is a root key called {\cs58\f5\fs16\lang1024 \ldblquote CLSID\rdblquote } (spelled out in those letters) under which servers are responsible t
o create entries that point to their modules. Usually these entries are created at installation time by the application\rquote s setup code, but can be done at run-time if desired.
\par When a server is installed under Windows, the installation program will create a subkey under {\cs58\f5\fs16\lang1024 \ldblquote CLSID\rdblquote } for each class the server supports, using the standard string representation of the {\cs58\f5\fs16\lang1024 
CLSID} as the key name (including the curly braces).{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
Under Microsoft Windows, this key is created using the standard Windows API for registry manipulation. Other COM implementations may include their own functions as necessary, as long as it\rquote 
s consistent on a given platform. Such functions are not part of this specification}} So the first key that the {\cs58\f5\fs16\lang1024 TextRender} object would create appears as follows ({\cs58\f5\fs16\lang1024 CLSID}
 is the root key the indentation of the object class implies a sub-key relationship with the one above it):
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 CLSID
\par \tab \{12345678-ABCD-1234-5678-9ABCDEF00000\} = TextRender Example
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Depending on the type of same-machine server that handles this CLSID there will be one or more subkeys created underneath the ASCII CLSID string:
\par \pard\plain \qj\li720\sa60\widctlpar\tx2160\tx3960\tx7560 \f4\fs20 {\b\ul Server Flavor\tab Subkey Name\tab Value\tab 
\par }In-Process\tab {\cs58\f5\fs16\lang1024 InprocServer32}\tab Pathname of the server DLL
\par Local\tab {\cs58\f5\fs16\lang1024 LocalServer32}\tab Pathname of the server EXE
\par Object Handler\tab {\cs58\f5\fs16\lang1024 InprocHandler32}\tab Pathname to the object handler DLL.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 So, for example, if the {\cs58\f5\fs16\lang1024 TextRender} object was implemented in a {\cs58\f5\fs16\lang1024 TEXTREND.DLL}, its entries would appear as:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 CLSID
\par \tab \{12345678-ABCD-1234-5678-9ABCDEF00000\} = TextRender Example
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \tab InprocServer32 = c:\\objects\\textrend.dll
\par \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 If it were implemented in an application, {\cs58\f5\fs16\lang1024 TEXTREND.EXE}, and worked with an object handler{\pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \v\f4\fs12 {\xe {\fs12 handler}}} in {
\cs58\f5\fs16\lang1024 TEXTHAND.DLL}, the entries would appear as:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 CLSID
\par \tab \{12345678-ABCD-1234-5678-9ABCDEF00000\} = TextRender Example
\par \tab \tab InprocHandler32 = c:\\handlers\\texthand.dll
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \tab LocalServer32 = c:\\objects\\textrend.exe
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Over time, the registry will become populated with many {\cs58\f5\fs16\lang1024 CLSIDs} and many such entries.
\par {\*\bkmkstart _Toc324051603}{\*\bkmkstart _Toc324051788}{\*\bkmkstart _Toc324052030}{\pntext\pard\plain\b\i\fs22 6.1.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Remote Objects: AtBits Key{\*\bkmkend _Toc324051603}{\*\bkmkend _Toc324051788}{\*\bkmkend _Toc324052030}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As described in the last section, a pr
erequisite to server implementation is generating a CLSID for that server. This CLSID is registered in the system registry and referenced in the server code. The full path name of the server DLL or EXE is registered in association with the CLSID. 
\par The remote server can actually run either on the machine where the server code is stored or on the same machine as its connected client (assuming the class is registered on the remote machine and there is a com
patible binary image available). Servers that use the default security provided with the system must run where its client is running. To indicate the mode of operation, the Microsoft Windows implementation of COM includes the subkey {
\cs58\f5\fs16\lang1024 \ldblquote AtBits\rdblquote  }that is registered along with the server\rquote s {\cs58\f5\fs16\lang1024 CLSID}. To register a server to run where the persistent state of the object is stored, set {\cs58\f5\fs16\lang1024 AtBits} to {
\cs58\f5\fs16\lang1024 \ldblquote Y.\rdblquote } To register the server to run where the client is running, either set it to \ldblquote N\rdblquote  or leave the attribute out altogether. The default is to run the server where the client is run
ning. The registration example below shows how the {\cs58\f5\fs16\lang1024 TextRender} object would allow itself to be activated remotely.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 CLSID
\par \tab \{12345678-ABCD-1234-5678-9ABCDEF00000\} = TextRender Example
\par \tab \tab LocalServer = c:\\objects\\textrend.exe
\par \tab \tab AtBits = Y
\par {\pntext\pard\plain\b\i\fs22 6.1.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Self-Registering Servers
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
COM servers which are installed as part of an application setup program are usually registered by the setup program.  However, to facilitate the registration of smaller grained servers, the notion of a self-registering server is introduced.  
\par {\pntext\pard\plain\b\fs20\lang1024 6.1.3.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Self-Registering DLL's
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In-process COM servers (DLL\rquote s on the Windows and Macintosh platforms) support self-registration through several DLL entry points with well-known names. The DLL entry points for registering and unreg
istering a server are defined as follows:
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT DllRegisterServer(void);
\par HRESULT DllUnregisterServer(void);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Both of these entry points are required for a DLL to be self-registering. The implementation of the {\cs58\f5\fs16\lang1024 DllRegisterServer} entry point adds or updates registry information for all 
the classes implemented by the DLL. The {\cs58\f5\fs16\lang1024 DllUnregisterServer} entry point removes its information from the registry.
\par {\pntext\pard\plain\b\fs20\lang1024 6.1.3.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Self-Registering EXE's
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 There isn't an easy way for EXE's to publish entry points with well-known names, so a direct translation of {\cs58\f5\fs16\lang1024 DllRegisterServer} isn't possible. Instead, EXE\rquote 
s support self-registration using special command line flags. EXE's that support self-registration must mark their resource fork in the same way as DLL's, so that the EXE\rquote s support for the command line flags is
 detectable. Launching an EXE marked as self-registering with the {\cs58\f5\fs16\lang1024 /REGSERVER} command line argument should cause it to do whatever OLE installation is necessary and then exit. The {\cs58\f5\fs16\lang1024 /UNREGSERVER}
 argument is the equivalent to {\cs58\f5\fs16\lang1024 DllUnregisterServer}.  The {\cs58\f5\fs16\lang1024 /REGSERVER} and {\cs58\f5\fs16\lang1024 /UNREGSERVER }strings should be treated case-insensitively, and that the character {\cs58\f5\fs16\lang1024 
\lquote -\lquote } can be substituted for {\cs58\f5\fs16\lang1024 \lquote /\rquote }.
\par Other than guaranteeing that it has the correct entry point or implements the correct command line argu
ment, an application that indicates it is self-registering must build its registration logic so that it may be called any number of times on a given system even if it is already installed. Telling it to register itself more than once should not have any n
egative side effects. The same is true for unregistering. 
\par On normal startup (without the {\cs58\f5\fs16\lang1024 /REGSERVER} command line option) EXE's should call the registration code to make sure their registry information 
is current. EXE's will indicate the failure or success of the self-registration process through their return code by returning zero for success and non-zero for failure.
\par {\pntext\pard\plain\b\fs20\lang1024 6.1.3.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Identifying Self-Registering Servers
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Applications need to check to see if a given server module is self-registering without actually loading the DLL or EXE for performance reasons and to avoid possible negative side-affects of code within the module being executed without the module first be
ing registered.  To accomplish this, the DLL or EXE must be tagged with a version resource that can be read without actually causing any code in the module to be exe
cuted.  On Windows platforms, this involves using the version resource to hold a self-registration keyword. Since the VERSIONINFO section is fixed and cannot be easily extended, the following string is added to the {\cs58\f5\fs16\lang1024 
"StringFileInfo",} with an empty key value:
\par {\cs58\f5\fs16\lang1024 VALUE "OLESelfRegister", ""
\par }For example:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 {\cs58 
VS_VERSION_INFO     VERSIONINFO
\par   FILEVERSION       1,0,0,1
\par   PRODUCTVERSION    1,0,0,1
\par   FILEFLAGSMASK     VS_FFI_FILEFLAGSMASK
\par #ifdef _DEBUG
\par   FILEFLAGS         VS_FF_DEBUG|VS_FF_PRIVATEBUILD|VS_FF_PRERELEASE
\par #else
\par   FILEFLAGS         0 // final version
\par #endif
\par   FILEOS            VOS_DOS_WINDOWS16
\par   FILETYPE          VFT_APP
\par   FILESUBTYPE       0   // not used
\par BEGIN
\par   BLOCK "StringFileInfo"
\par   BEGIN
\par     BLOCK "040904E4" // Lang=US English, CharSet=Windows Multilingual
\par     BEGIN
\par     VALUE "CompanyName",     "\\0"
\par     VALUE "FileDescription", "BUTTON OLE Control DLL\\0"
\par     VALUE "FileVersion",     "1.0.001\\0"
\par     VALUE "InternalName",    "BUTTON\\0"
\par     VALUE "LegalCopyright",  "\\0"
\par     VALUE "LegalTrademarks", "\\0"
\par     VALUE "OriginalFilename","BUTTON.DLL\\0"
\par     VALUE "ProductName",     "BUTTON\\0"
\par     VALUE "ProductVersion",  "1.0.001\\0"
\par     }{\cs58\b VALUE "OLESelfRegister", "" // New keyword
\par }{\cs58     END
\par   END
\par   BLOCK "VarFileInfo"
\par   BEGIN
\par     VALUE "Translation", 0x409, 1252
\par   END
\par END
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 To support self-registering servers, an application can add a "Browse" button to its object selection user interface, which po
ps up a standard File Open dialog. After the user chooses a DLL or EXE the application can check to see if it is marked for self-registration and, if so, call its {\cs58\f5\fs16\lang1024 DllRegisterServer} entry point (or execute the EXE with the {
\cs58\f5\fs16\lang1024 /REGSERVER} command line switch). The DLL or EXE should register itself at this point. 
\par {\*\bkmkstart _Toc324051604}{\*\bkmkstart _Toc324051789}{\*\bkmkstart _Toc324052031}{\*\bkmkstart _Toc335190099}{\*\bkmkstart _Toc337870045}{\*\bkmkstart _Toc339182959}{\pntext\pard\plain\b 6.2\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Implementing the Class Factory{\*\bkmkend _Toc324051604}{\*\bkmkend _Toc324051789}{\*\bkmkend _Toc324052031}{\*\bkmkend _Toc335190099}{\*\bkmkend _Toc337870045}
{\*\bkmkend _Toc339182959}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The existence of a CLSID available to clients implies that there is a class factory that is capable of manufacturing objects of that class. The server, DLL or EXE, asso
ciated with the class in the registry is responsible to provide that class factory and expose it to the COM Library to make COM\rquote 
s creation mechanisms work for client. The specific mechanisms to expose the class factory is covered shortly, but first, let\rquote s examine how a class factory may be implemented{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Note that the example code given below illustrates one of many ways a class factory object can be implemented.}}.
\par {\*\bkmkstart _Toc324051605}{\*\bkmkstart _Toc324051790}{\*\bkmkstart _Toc324052032}{\pntext\pard\plain\b\i\fs22 6.2.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Defining the Class Factory Object{\*\bkmkend _Toc324051605}{\*\bkmkend _Toc324051790}{\*\bkmkend _Toc324052032}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 First of all, you need to define an object that implements the {\cs58\f5\fs16\lang1024 IClassFactory}
 interface (or other factory-type interface if applicable). As you would define any other object, you can define a class factory. The following is an example class factory for our {\cs58\f5\fs16\lang1024 TextRender} objects in C++:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
class CTextRenderFactory : public IClassFactory
\par \tab \{
\par \tab protected:
\par \tab \tab ULONG           m_cRef;
\par 
\par \tab public:
\par \tab \tab CTextRenderFactory(void);
\par \tab \tab ~CTextRenderFactory(void);
\par 
\par \tab \tab //IUnknown members
\par \tab \tab HRESULT QueryInterface(REFIID, pLPVOID);
\par \tab \tab ULONG AddRef(void);
\par \tab \tab ULONG Release(void);
\par 
\par \tab \tab //IClassFactory members
\par \tab \tab HRESULT CreateInstance(IUnknown *, REFIID iid, void **ppv
\par \tab \tab HRESULT LockServer(BOOL);
\par \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Implementing the member functions of this object are fairly straightforward. {\cs58\f5\fs16\lang1024 AddRef}{\i  }and {\i Release }do their usual business, with {\cs58\f5\fs16\lang1024 Release} calling {\i 
delete this} when the count is decremented to zero. Note that the zero-count event in {\i Release} has no effect other than to destroy the object\emdash it does not cause the server to unload as that is the prerogative of {\cs58\f5\fs16\lang1024 
LockServer}. In any case, the {\cs58\f5\fs16\lang1024 QueryInterface} implementation here will return pointers for {\cs58\f5\fs16\lang1024 IUnknown}{\i  }and {\cs58\f5\fs16\lang1024 IClassFactory}{\i .
\par {\pntext\pard\plain\b\fs20\lang1024 6.2.1.1\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IClassFactory::CreateInstance
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The class factory-specific functions are really all that are interesting. {\cs58\f5\fs16\lang1024 CreateInstance} in this example will create an instance of the {\cs58\f5\fs16\lang1024 CTextRender}{\i  }
object and return an interface pointer to it as shown below. Note that if {\cs58\f5\fs16\lang1024 pUnkOuter} is non-NULL, that is, another object is attempting to aggregate, this code will fail with {\cs58\f5\fs16\lang1024 CLASS_E_NOAGGREGATION }
(this limitation will be revisited when later when aggregation is discussed).
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
//A global variable that counts objects being served
\par ULONG    g_cObj=0;
\par 
\par HRESULT {\b CTextRenderFactory::CreateInstance}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 
\b\v\f4\fs12\lang1024 {\xe {\b\f4\fs12 CTextRenderFactory\:functions\:CreateInstance}}}(IUnknown * pUnkOuter, REFIID iid, void ** ppv) \{
\par \tab CTextRender *       pObj;
\par \tab HRESULT             hr;
\par 
\par \tab *ppv=NULL;
\par \tab hr=E_OUTOFMEMORY;
\par \tab if (NULL!=pUnkOuter)
\par \tab \tab return CLASS_E_NOAGGREGATION;
\par 
\par \tab //Create the object passing function to notify on destruction.
\par \tab pObj=new CTextRender(pUnkOuter, ObjectDestroyed);
\par \tab if (NULL==pObj)
\par \tab \tab return hr;
\par 
\par \tab [Usually some other object initialization done here]
\par 
\par \tab //Obtain the first interface pointer (which does an AddRef)
\par \tab hr=pObj->QueryInterface(iid, ppv);
\par 
\par \tab //Kill the object if initial creation or FInit failed.
\par \tab if (FAILED(hr))
\par \tab \tab delete pObj;
\par \tab else
\par \tab \tab g_cObj++;
\par 
\par \tab return hr;
\par \tab \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 There are two interesting points to this code, which is fairly standard for server implementations. First of all, note the call to the object\rquote s {\cs58\f5\fs16\lang1024 QueryInterface}
 after creation. This accomplishes two things: first, since objects are generally constructed with a reference count of zero (common practice) then this {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }call, if successful, has the effect of calling {
\cs58\f5\fs16\lang1024 AddRef} as well, making the object have a reference count of one. Second, it lets the object determine if it supports the interface requested in {\cs58\f5\fs16\lang1024 iid} and if it does, it fills in {\cs58\f5\fs16\lang1024 ppv}
 for us.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The second key point is that COM defines no standard mechanism for counting instantiated objects (there is no need for such a generic service), so this implementation example maintains a count of the objects in service using the global variable {
\cs58\f5\fs16\lang1024 g_cObj}. This count generally needs to be global so that other global functions can access it (see \ldblquote Providing for Server Unloading\rdblquote  below). When {\cs58\f5\fs16\lang1024 CreateInstance}
 successfully creates a new object it increments this count. When an object (not the class factory but the one the class factory creates) destroys itself in it\rquote s implementation of {\cs58\f5\fs16\lang1024 CTextRender::Release,}
 it should decrement this count to match the increment in {\cs58\f5\fs16\lang1024 CreateInstance}{\i .}
\par It is not necessary, however, for the object to have direct access to this variable, and there are techniques to avoid such access.. The example above passes a pointer to a function called {\cs58\f5\fs16\lang1024 ObjectDestroyed}{\i  }to the {
\cs58\f5\fs16\lang1024 CTextRender}{\i  }constructor such that when the object destroys itself in it\rquote s {\cs58\f5\fs16\lang1024 Release} it will call {\cs58\f5\fs16\lang1024 ObjectDestroyed} to affect the server\rquote s object count:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 void ObjectDestroyed(void) \{
\par \tab g_cObj--;
\par \tab [Initiate unloading if g_cObj is zero and there are no locks]
\par \tab return;
\par \tab \}
\par 
\par CTextRender::CTextRender(void (* pfnDestroy)(void)) \{
\par \tab m_cRef=0;
\par \tab m_pfnDestroy=pfnDestroy;
\par \tab [Other initialization]
\par \tab return;
\par \tab \}
\par 
\par ULONG CTextRender::Release(void) \{
\par \tab ULONG       cRefT;
\par \tab cRefT=--m_cRef;
\par \tab if (0L==m_cRef) \{
\par \tab \tab if (NULL!=m_pfnDestroy)
\par \tab \tab \tab (*m_pfnDestroy)();
\par \tab \tab delete this;
\par \tab \tab \}
\par \tab return cRefT;
\par \tab \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The object might also be given a pointer to the class factory object itself (which the object will call {\cs58\f5\fs16\lang1024 AddRef}{\i  }
through, of course) that accomplishes the same thing. Regardless of the design, the point is that the object can be designed so as to be unaware of the exact object counting mechanism, having instead some mecha
nism to notify the server as a whole about the destroy event. A standard mechanism for this is not part of COM.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 You might have noticed that the {\cs58\f5\fs16\lang1024 ObjectDestroyed}{\i  }function above contained a note that if there are no objects and no locks on the server, then the server can 
initiate unloading. What really happens here depends on the type of server, DLL or EXE, and will be covered under \ldblquote Providing for Server Unloading.\rdblquote 
\par {\pntext\pard\plain\b\fs20\lang1024 6.2.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IClassFactory::LockServer
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The other interesting member function of a class factory is {\cs58\f5\fs16\lang1024 LockServer}. Here the server increments of decrements a lock count depending on the {\cs58\f5\fs16\lang1024 fLock}
 parameter. If the last lock is removed and there are no objects in server, the server initiates unloading which again, is specific to the type of server and a topic for a later sec
tion. In any case, COM does not define a standard method for tracking the lock count. Since other code outside of the class factory may need access to the lock count, a global variable works well:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 //Global server lock count.
\par ULONG       g_cLock=0;
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The implementation of {\cs58\f5\fs16\lang1024 LockServer}{\i  }is correspondingly simple:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
HRESULT CTextRenderFactory::LockServer(BOOL fLock)
\par \tab \{
\par \tab if (fLock)
\par \tab \tab g_cLock++;
\par \tab else
\par \tab \tab \{
\par \tab \tab g_cLock--;
\par \tab \tab [Initiate unloading if there are no objects and no locks]
\par \tab \tab \}
\par 
\par \tab return NOERROR;
\par \tab \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 It is perfectly reasonable to double the use of {\cs58\f5\fs16\lang1024 g_cObj} for counting locks as well as objects. You might want to keep them separate for debugging purposes.
\par {\*\bkmkstart _Toc324051606}{\*\bkmkstart _Toc324051791}{\*\bkmkstart _Toc324052033}{\*\bkmkstart _Toc335190100}{\*\bkmkstart _Toc337870046}{\*\bkmkstart _Toc339182960}{\pntext\pard\plain\b 6.3\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Exposing the Class Factory{\*\bkmkend _Toc324051606}{\*\bkmkend _Toc324051791}{\*\bkmkend _Toc324052033}{\*\bkmkend _Toc335190100}{\*\bkmkend _Toc337870046}
{\*\bkmkend _Toc339182960}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 With a class factory implementation the server must now expose it such that the COM Library can locate the class factory from within {\cs58\f5\fs16\lang1024 CoGetClassObject}{\i  }after it has loaded the DLL{
\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Again, the term DLL is used generically to describe any shared library as supported by a given COM platform.}}
 server or launched the EXE server. 
The exact method of exposing the class factory differs for each server type. The following sections cover each type in detail which apply to DLLs and EXEs running on the local or remote machine in relation to the client. There are also some considerations
 for DLL servers running remotely under a surrogate server that are covered in this section.
\par {\*\bkmkstart _Toc324051607}{\*\bkmkstart _Toc324051792}{\*\bkmkstart _Toc324052034}{\pntext\pard\plain\b\i\fs22 6.3.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Exposing the Class Factory from DLL Servers{\*\bkmkend _Toc324051607}{\*\bkmkend _Toc324051792}{\*\bkmkend _Toc324052034}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 To expose its class factory, an in-process server only needs to export{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
Under Microsoft Windows this means listing the function in the {\f5\fs12 EXPORTS} section of a module definitions file or using the {\f5\fs12 __declspec(dllexport)}{\i  }
keyword at compile-time. Other platforms may differ as to requirements here, but in any case the function must be visible to other modules within the same process, but not across processes.}} a function explicitly named {\cs58\f5\fs16\lang1024 
DllGetClassObject}{\i . }The COM Library will attempt to locate this function in the DLL\rquote s exports{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } Under Windows, {\f5\fs12 
CoGetClassObjec}{\i t}, after loading the DLL with {\f5\fs12 CoLoadLibrary}, call the Windows API {\f5\fs12 GetProcAddress(\ldblquote DllGetClassObject\rdblquote )}{\i  }to obtain the pointer to the actual function in the DLL.}} and call it from within {
\cs58\f5\fs16\lang1024 CoGetClassObject}{\i  }when the client has specified {\cs58\f5\fs16\lang1024 CLSCTX_INPROC_SERVER}. Note that a DLL server can in addition expose a class factory at a later time using the function {\cs58\f5\fs16\lang1024 
CoRegisterClassObject} discussed for EXE servers below. This would only be used after the DLL was already loaded for some other reason.
\par {\pntext\pard\plain\b\fs20\lang1024 6.3.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 DllGetClassObject{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote DllGetClassObject\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT DllGetClassObject(clsid, iid, ppv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This is not a function in the COM Library itself; rather, it is a function that is exported from DLL servers.
\par In the case that a call to the COM API function {\cs58\f5\fs16\lang1024 CoGetClassObject} results in the class object having to be loaded from a DLL, {\cs58\f5\fs16\lang1024 CoGetClassObject} uses the {\cs58\f5\fs16\lang1024 DllGetClassObject}
 that must be exported from the DLL in order to actually retrieve the class.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 clsid\tab REFCLSID}\tab The class of the class factory being requested.
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID}\tab The interface with which the caller wants to talk to the class factory. Most often this is {\cs58\f5\fs16\lang1024 IID_IClassFactory}{\i  }but is not restricted to it.
\par {\cs58\f5\fs16\lang1024 ppv\tab void **}\tab The place in which to put the interface pointer.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\f4\fs18 {\cs58\f5\fs16\lang1024 E_NOINTERFACE\cell }The requested interface was not supported on the class object.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }Memory could not be allocated to service the request.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Note that since {
\cs58\f5\fs16\lang1024 DllGetClassObject}{\i  }is passed the {\cs58\f5\fs16\lang1024 CLSID}, a single implementation of this f
unction can handle any number of classes. That also means that a single in-process server can implement any number of classes. The implementation of {\cs58\f5\fs16\lang1024 DllGetClassObject}
 only need create the proper class factory for the requested CLSID.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Most implementation of this function for a single class look very much like the implementation of {\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance} as illustrated in the code below: 
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
HRESULT DllGetClassObject(REFCLSID clsid, REFIID iid, void **ppv) \{
\par \tab CTextRenderFactory * pCF;
\par \tab HRESULT              hr=E_OUTOFMEMORY;
\par 
\par \tab if (!CLSID_TextRender!=clsid)
\par \tab \tab return E_FAIL;
\par \tab pCF=new CTextRenderFactory();
\par \tab if (NULL==pCF)
\par \tab \tab return E_OUTOFMEMORY;
\par 
\par \tab //This validates the requested interface and calls AddRef
\par \tab hr=pCF->QueryInterface(iid, ppv);
\par \tab if (FAILED(hr))
\par \tab \tab delete pCF;
\par \tab else
\par \tab \tab ppv=pCF;
\par  \tab return hr;
\par     \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 As is conventional with object implementations, including class factories, construction of the object sets the reference count to zero such that the initial {\cs58\f5\fs16\lang1024 QueryInterface}
 creates the first actual reference count. Upon successful return from this function, the class factory will have a reference count of one which must be released by the caller (COM or the client, whoever gets the interface pointer).
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The structure of a DLL server with its object and class factory is illustrated in Figure 6-1 below. This figure also illustrates the sequence of calls and events that happen when the client executes the standard object creation sequence of {
\cs58\f5\fs16\lang1024 CoGetClassObject}{\i  }and{\i  }{\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance}.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw22330\pich15372\picwgoal12660\pichgoal8715 \picscalex50\picscaley50 
010009000003d219000008003100000000000e00000026060f001200ffffffff000008000000e6f50cfaae09aa070a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b020cfae6f5050000000c029e0dc81331000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000052f60bfaaa0977070e00000026060f001200ffffffff0000080000003503dbfa9809e50607000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0698019801fe06b109f3fa4d03050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c0696019601e5069809dbfa3503050000001402000000000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000a2f7eefab3fdc4fd07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06b500b500ddfdccfd06fbbaf7050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400040000
00f0010100090000001c06b300b300c4fdb3fdeefaa2f7050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000042f764fff4fd770707000000fc020000000000020000040000002d01010004000000f0010300040000002d010200070000001b049007
0dfe7cff5af7050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f00101000500000009
0200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400070000001b047707f4fd64ff42f7050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009ef97ffe6afb6eff1c000000fb0270ff
000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a1effd8f903000000434f4d0068007000780004000000020102000a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000065f7aafffefd24071c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e0118000500
00000a02000000000500000009020000000204000000020101001f000000320a3b009ff710000000436f476574436c6173734f626a6563745c004f00630047002b005c00240047004700480063004e002400470047002b0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f
03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f00105001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02
000000000500000009020000000204000000020101002e000000320ad5009ff71a000000202020204c6f6f6b20757020636c61737320696e20726567444224002300240023004e004f004e00470024004e004e00240047002300470048004700230024004e002400320047004e005c005d0004000000020102001c000000fb
0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e011800050000000a02000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884
c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101002b000000320a09029ff718000000202020204c6f6f6b20757020444c4c20696e20726567444224002300240023004e004f004e00470024004e004e0024
005c004e004e00240023004f002300320047004e005d005c0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e011800050000000a02000000001c000000
fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a3d039ff704000000202020202400230024
00230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f00105000500000009020000000204000000020101001b000000320a3d032df80d000000436f4c6f61644c6962726172
794c5c004f004e004e0047004e004f0023004e00320047003200470004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f001040005000000090200000002040000000201010012
000000320a3d03bbfb07000000206f6e20444c4c6924004e004e0024005c004e004e0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e01180005000000
0a02000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a71049ff7040000
0020202020240023002400230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f00105000500000009020000000204000000020101001c000000320a71042df80e0000004765
7450726f6341646472657373640047002a00560032004e0047005c004f004e00320047004700470004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f001040005000000090200
00000204000000020101000c000000320a71041ffc03000000206f6e5024004e004e0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e01180005000000
0a020000000005000000090200000002040000000201010013000000320a0b059ff70800000020202020202020202400230024002300240023002400240004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f04
0000002d01050004000000f001040005000000090200000002040000000201010021000000320a0b05bcf811000000446c6c476574436c6173734f626a656374005c0024002400630047002b005c00240047004700480063004e002400470047002b0004000000020102001c000000fb0280ff000000000000bc0200000000
00000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f00105001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000
002e011800050000000a02000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101002b000000
320a3f069ff7180000002020202052657475726e20636c61737320666163746f727924002300240023005d0047002b004e0032004e0023004700240047004700480023002b00470047002b004e003200470004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338
f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101002a000000320ad9069ff7170000002020202020202020706f696e74657220746f207573657279240023002400230024002300240024004e00
4e0023004f002a004700320024002a004f0023004e0048004700320004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cff929fadbfb18fb1c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c5
77000000000c000000d01af87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ac8fa09fa06000000436c69656e7468002800280050005800300004000000020102000a00000026060f000a00ffffffff0100000000000e00
000026060f001200ffffffff000008000000cc050bfa6007fafa1c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204
000000020101000c000000320aaafa060603000000444c4c0068005800580004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c6f766fbb4fd76fd1c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f03
7884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320af7fb00f80500000043616c6c20005c00480023002400230004000000020102001c000000fb0280ff000000000000bc02ff00000000
000022417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f00104000500000009020000000204000000020101001f000000320af7fb0ef910000000436f476574436c6173734f626a6563745c004f00630047002b005c00240047004700480063004e0024004700
47002b0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f00105001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c5
77000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320a91fc00f80500000043616c6c20435c00480023002400230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022
417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f00105000500000009020000000204000000020101001c000000320a91fc0ef90e000000437265617465496e7374616e63655c003200470048002a00470024004e0047002b0047004e00480047000400000002
0102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f00104001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000
d01af87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a2bfd00f80a000000557365206f626a6563745c004800470023004f004e002300480047002a0004000000020102000a00000026060f000a00ffffffff0100000000
000e00000026060f001200ffffffff00000800000098035704aa0967061c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000
0002040000000201010021000000320ae804d20311000000446c6c476574436c6173734f626a656374005c0024002400630047002b005c00240047004700480063004e002400470047002b0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c5
77000000000c000000d01af87f040000002d01040004000000f00105001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000
000204000000020101002b000000320a8205d203180000002020202043726561746520636c61737320666163746f727924002300240023005d003200470047002b00470023004700240047004700480023002b00470047002b004e003200470004000000020102001c000000fb0280ff000000000000bc0200000000000000
00417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a1c06d2030b0000002020202052657475726e206324002300240023005d0047002b004e00
32004e00230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01050004000000f00104000500000009020000000204000000020101001b000000320a1c0620060d00000049436c617373466163
746f72790024005c0024004700470047004e00480047002a004f003100480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008af63efb56f72dfc1c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f03
7884c577000000000c000000d01af87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010009000000320addfbc4f6010000003101500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffff
ff00000800000065f6bffbd1f7080008000000fa0206000800000000000002040000002d01050004000000f001010007000000fc020100000000000000040000002d0101000b0000001708e1ff3bf7bffbcdf7110035f9bffb65f607000000fc020000000000020000040000002d01060004000000f0010300040000002d01
02000a000000240303008ef7040034f7acff14f7eaff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005cfee9002002c5011c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c0000002017f87f04
0000002d01030004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a7a0196fe0d00000049436c617373466163746f72790124005c0024004700470047004e00480047002a004f003100480004000000020102000a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff0000080000005b04040080089b0207000000fc020000000000020000040000002d01040004000000f0010600100000002403060073041c0073046002c604b3029808b30298086f0045081c00050000001402000000002d0000004201050000002800000008000000080000
000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff02040000002d01050010000000240306005f0408005f04
4502b10497027c0897027c085a002a08080005000000140200000000040000002d0101000800000025030200b1045a007c085a000800000025030200b1045a005f0408000800000025030200b1045a00b1049702050000001402000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0
bb550338f70f037884c577000000000c000000d01af87f040000002d01040004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a4d01d9040e000000436c61737320466163746f72793a5c00240047004700480023004e00480047002a004f003100
48002a0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000002017f87f040000002d01030004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320ae7
01d9040e00000063726561746573204f626a65637447003200470047002b0047004700240064004e002300470048002a0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001402fe00c402ae0107000000fc020000000000020000040000002d010400
04000000f0010600040000002d010200070000001804c701dd0216012c02050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd
000000040000002d01060004000000f001040005000000090200000002050000000102ffffff02040000002d010500070000001804ae01c402fe001402050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000bc025e018c046601040000002d010200
040000002d01010004000000f001050004000000f00106001c000000fb021000070000000000bc02000000000102022253797374656d0003d0bb55033002f87f4603000000000000957fc5773002f87f040000002d01040004000000f0010300030000001e0007000000160406028c04be00bc0208000000fa020600080000
0000000002040000002d0103000500000014025e014c060500000013025e01f400040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000003a04e9fbf80809ff07000000fc020000000000020000
040000002d0103001000000024030600520401fc5204bdfeb60421ff100921ff100965fcac0801fc0500000014025e01f4002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff0000
0077000000ff000000dd000000040000002d01050004000000f001030005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01030010000000240306003e04edfb3e04a2fea10405fff40805fff40850fc9108edfb0500000014025e01f40008000000fa02060008000000
00000002040000002d01060004000000f0010300040000002d0101000800000025030200a10450fcf40850fc0800000025030200a10450fc3e04edfb0800000025030200a10450fca10405ff0500000014025e01f4001c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f0378
84c577000000000c0000002017f87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ad1fde605060000004f626a65637470005800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff000008000000f5019efda5024efe07000000fc020000000000020000040000002d01070004000000f0010500040000002d01020007000000180467febe02b6fd0d020500000014025e01f4002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000
000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001070005000000090200000002050000000102ffffff02040000002d0106000700000018044efea5029efdf5010500000014025e01f4000a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff000008000000f50196fca50246fd07000000fc020000000000020000040000002d01070004000000f0010500040000002d0102000700000018045ffdbe02aefc0d020500000014025e01f4002d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001070005000000090200000002050000000102ffffff02040000002d01060007000000180446fda50296fcf5010500000014025e01f400
0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009d02e6fc6a04f3fc040000002d010200040000002d01010004000000f001060004000000f0010500040000002d01040004000000f0010300030000001e0007000000160493fd6a0446fc9d0208000000fa020600080000
0000000002040000002d010300050000001402f0fc2706050000001302e1fcd800040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009d02fefd6d0406fe040000002d010200040000002d01
0100030000001e00070000001604a6fe6d045efd9d0208000000fa0206000800000000000002040000002d010300050000001402fefd2d06050000001302fefdd500040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f0012
00ffffffff0000080000000e00a3fae70219fc1c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000002017f87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a34fb
af00060000004f626a65637464004e002300480047002a0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000101bf87f040000002d01050004000000f0010300040000002e011800050000000a02000000000500000009
0200000002040000000201010016000000320acefb48000a000000496e746572666163657324004e002a00480031002b00470047004800470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007dfdfc023d030403040000002d010200040000002d01
0100040000002d01040004000000f0010500030000001e00070000001604a403f9025c027dfd08000000fa0206000800000000000002040000002d010300050000001402fc02c5f7050000001302fc02ed08040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc0200000000000200
00040000002d0103000a000000240303003503fc02c302d802c3021f030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f2079a022909e10408000000fa0206000800000000000002040000002d010500040000002d0101000b0000001708c0029a08e0049a0812052909
8e02c406040000002d010300040000002d0102000a0000002403030048089e02a008f602c208b8020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000006003702d20026031c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f
037884c577000000000c000000c01cf87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010009000000320ad6024000010000003200500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
1500e003e100cf041c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a7f044f0001
0000003301500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000069086103350950041c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d010600
04000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a0004a308010000003401500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000070f667fcc9f73206040000002d01050004
0000002d0101000b00000017083206a0f78afc75f739061af967fc70f6040000002d010300040000002d0102000a00000024030300c5f76bfc4cf78afc70f7c6fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b003b0537012a061c000000fb0270ff000000000000
bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000d01af87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010009000000320ada05a500010000003501500004000000020102000a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000052f6c2001ef7b1011c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c01cf87f040000002d01060004000000f0010700040000002e011800050000000a02
0000000005000000090200000002040000000201010009000000320a61018cf6010000003601500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d9079efe1009e500040000002d010500040000002d0101000b0000001708c4fe8108e400810816
01100992feab06040000002d010300040000002d0102000a000000240303002f08a2fe8708fafea908bcfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000059ffc0fd2500affe1c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb5503
38f70f037884c577000000000c000000d01af87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a5ffe93ff010000003701500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f0012
00ffffffff000008000000e1faf7fcdc01fffc040000002d010200040000002d01010004000000f001050004000000f0010300040000002d01040004000000f0010700030000001e000700000016049ffd980157fce1fa08000000fa0206000800000000000002040000002d010300050000001402f7fceef3050000001302
f7fcc708040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300d401f7fc5e01d3fc5e011afd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000065fc6cfc3f022d0708
000000fa0206000800000000000002040000002d010500040000002d0101000b00000017086cfc18fda1001702f3118c035ffc46f5040000002d010300040000002d0102000a000000240303003b02f40026027900e80197000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800
000013fd1a0630042306040000002d010200040000002d01010004000000f001050004000000f0010300030000001e00070000001604c30630047a054ffd08000000fa0206000800000000000002040000002d0103000500000014021c063d0b0500000013021906fef5040000002d010200040000002d01010004000000f0
010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030014fd1a068cfd3d068cfdf6050a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005bfdaf04b203b704040000002d010200040000002d01010004000000f00103000300
00001e0007000000160457056e030f045bfd08000000fa0206000800000000000002040000002d010300050000001402af040cf7050000001302af04f909040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300aa03af
0432038b043203d2040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005a083dff26092c001c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000101bf87f040000002d010500040000002e01
1800050000000a020000000005000000090200000002040000000201010009000000320adcff9408010000003801500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fa0cfdea012101040000002d010200040000002d01010004000000f00103
00040000002d01040004000000f0010500030000001e000700000016042101ea012dfde4fa08000000fa0206000800000000000002040000002d01030005000000140226051c09050000001302fff86ef3040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000
040000002d0103000a00000024030300a9fa0bfdfdfa62fd1ffb26fd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004ffe74fe1bff63ff1c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000
00d01af87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a13ff89fe010000003901500004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b7ff16fcd30005fd1c000000
fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000002017f87f040000002d01060004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000a000000320ab5fcf1ff02000000313050005000040000
00020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01010004000000f0010300040000002d0104000400
0000f00106000300000000000c000000901bf87f040000002d01040004000000f00105001c00000000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 6-1: Creation sequence of an object from a DLL server.\line Function calls not in COM are from the Windows API.
\par {\*\bkmkstart _Toc324051608}{\*\bkmkstart _Toc324051793}{\*\bkmkstart _Toc324052035}{\pntext\pard\plain\b\i\fs22 6.3.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Exposing the Class Factory from EXE Servers{\*\bkmkend _Toc324051608}{\*\bkmkend _Toc324051793}{\*\bkmkend _Toc324052035}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
To expose a class factory from a server application is a different matter than for a DLL server for the reason that the application executes in a different process from the client. Thus, the COM Library cannot just ob
tain a pointer to an exported function and call that function to retrieve the class factory.
\par When COM launches an application from within {\cs58\f5\fs16\lang1024 CoGetClassObject} it must wait for that application to register a class factory for the desired CLSID through the function {\cs58\f5\fs16\lang1024 CoRegisterClassObject}.{\cs38\super 
\chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab This function is called in the COM Library loaded in the server\rquote 
s process space so it actually establishes the remote proxy and stub necessary to perform remote procedure calls.}} Once that class factory appears to COM it can return an interface pointer (actually a pointer to the proxy) to the client. {
\cs58\f5\fs16\lang1024 CoGetClassObject}{\i  }may time out if the server application takes too long.
\par The server can differentiate between times it is launched stand-alone and when it is launched from within COM. When COM launches the application it includes a switch {\cs58\f5\fs16\lang1024 \ldblquote /Embedding\rdblquote \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Case-insensitive. This name originated in OLE 1.0 and has been maintained for such historical reasons and compatibility.}} on the server\rquote 
s command line. If the flag is present, the server must register its class factory with {\cs58\f5\fs16\lang1024 CoRegisterClassObject}. If the flag is absent, the server may or may not choose to register depending on the object class.
\par Note that a server application can support any number of object classes by calling {\cs58\f5\fs16\lang1024 CoRegisterClassObject} on startup. In fact, a server must register {\i all }supported class factories because the application is not told which {
\cs58\f5\fs16\lang1024 CLSID} was requested in the client.
\par Where {\cs58\f5\fs16\lang1024 CoRegisterClassObject}{\i  }registers a servers factories with COM on startup, the function {\cs58\f5\fs16\lang1024 CoRevokeClassObject} unregisters those same factories on application shutdown so they are no longer avail
able, meaning COM must launch the server again for those class factories. Each call to {\cs58\f5\fs16\lang1024 CoRegisterClassObject} must be matched with a call to {\cs58\f5\fs16\lang1024 CoRevokeClassObject}{\i .
\par {\pntext\pard\plain\b\fs20\lang1024 6.3.2.1\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoRegisterClassObject{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoRegisterClassObject\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoRegisterClassObject(clsid, pUnk, grfContext, grfFlags, pdwRegister)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Registers the specified server class factory identified with {\i pUnk }with COM in order that it may be con
nected to by COM Clients. When a server application starts, it creates each class factory it supports and passes them to this function. When a server application exits, it revokes all its registered class objects with {\cs58\f5\fs16\lang1024 
CoRevokeClassObject}.
\par Note that an in-process object could call this function to expose a class factory only when the DLL is already loaded in another process and did not want to expose a class factory until it was loaded for some other reason.
\par The {\cs58\f5\fs16\lang1024 grfContext}{\i  }flag identifies the execution context of the server and is usually {\f5\fs16 CLSCTX_LOCAL_SERVER}. The {\cs58\f5\fs16\lang1024 grfFlags}{\i  }
is used to control how connections are made to the class object. Values for this parameter are the following:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef enum tagREGCLS
\par \tab \{
\par \tab REGCLS_SINGLEUSE = 0,
\par \tab REGCLS_MULTIPLEUSE = 1,
\par \tab REGCLS_MULTI_SEPARATE = 2
\par \tab \} {\b REGCLS}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 {\xe {
\b\f4\fs12 REGCLS}}};
\par \trowd \trgaph108\trleft-108 \cellx2610\cellx8748 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Value\cell Description\cell \pard\plain \widctlpar\intbl \f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx2610\cellx8748 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 REGCLS_SINGLEUSE\cell }Once one client has connected to the class object with {\cs58\f5\fs16\lang1024 CoGetClassObject}
, then the class object should be removed from public view so that no other clients can similarly connect to it; new clients will use a new instance of the class factory, running a new copy of the server application if necessary. Specifying this flag does
 not affect the responsibility of the server to call {\cs58\f5\fs16\lang1024 CoRevokeClassObject}{\i  }on shutdown.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\b \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 REGCLS_MULTIPLEUSE\cell }Many {\cs58\f5\fs16\lang1024 CoGetClassObject} calls can connect to the same class factory.
\par \pard\plain \s69\widctlpar\intbl \f4\fs18 When a class factory is registered from a local server ({\cs58\f5\fs16\lang1024 grfContext}{\i  }is {\f5\fs16 CLSCTX_LOCAL_SERVER}) and {\cs58\f5\fs16\lang1024 grfFlags}{\i  }includes R{\f5\fs16 EGCLS_MULTIPLE\-
USE}, then it is the case that the same class factory will be {\i auto\-matically also registered} as the in-process server ({\f5\fs16 CLSCTX_IN-PROC_SERVER}) for its own process\cell \pard\plain \widctlpar\intbl \f4\fs20 {\b \row }\trowd 
\trgaph108\trleft-108 \cellx2610\cellx8748 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 REGCLS_MULTI_SEPARATE\cell }The same as {\f5\fs16 REGCLS_MULTIPLEUSE}
, except that registration as a local server does {\i not} automatically also register as an in-process server in that same process (or any other, for that matter).\cell \pard\plain \widctlpar\intbl \f4\fs20 {\b \row }\pard\plain 
\s44\qj\sb60\sa58\widctlpar \f4\fs20 Thus, registering as
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
CLSCTX_LOCAL_SERVER, REGCLS_MULTIPLEUSE
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 is the equivalent to registering as
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
(CLSCTX_INPROC_SERVER | CLSCTX_LOCAL_SERVER), REGCLS_MULTI_SEPARATE
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 but is different than registering as
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
CLSCTX_LOCAL_SERVER, REGCLS_MULTI_SEPARATE.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 By using {\f5\fs16 REGCLS_MULTI_SEPARATE}
, an object implementation can cause different class factories to be used according to whether or not it is being created from within the same process as it is implemented.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The following table summarizes the allowable flag combinations and the registrations that are effected by the various combinations:
\par \trowd \trgaph108\trleft720\trkeep \cellx2070\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx3420\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx5220\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cellx7200\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8190 \pard \qj\sa60\widctlpar\intbl {\fs15 \cell }\pard \qc\sa60\widctlpar\intbl {\fs15 REGCLS_-
\par SINGLEUSE \cell }\pard \qc\li6\sa60\widctlpar\intbl {\fs15 REGCLS_-
\par MULTIPLEUSE\cell }\pard \qc\sa60\widctlpar\intbl {\fs15 REGCLS_-MULTI_SEPARATE \cell }{\fs16 Other\cell }\pard \widctlpar\intbl {\fs15 \row }\trowd \trgaph108\trleft720\trkeep \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2070\cellx3420\cellx5220
\cellx7200\cellx8190 \pard \qj\sa60\widctlpar\intbl {\fs15 CLSCTX_IN-PROC_SERVER \cell }\pard \qc\sa60\widctlpar\intbl {\i error}\cell \pard \qc\li6\sa60\widctlpar\intbl In-Process \cell \pard \qc\sa60\widctlpar\intbl In-Process\cell {\i error\cell 
}\pard \widctlpar\intbl \row \trowd \trgaph108\trleft720\trkeep \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2070\cellx3420\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \cellx5220\clbrdrt\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cellx7200\cellx8190 \pard \qj\sa60\widctlpar\intbl {\fs15 CLSCTX_LO-CAL_SERVER\cell }\pard \qc\sa60\widctlpar\intbl Local\cell \pard \qc\li6\sa60\widctlpar\intbl In-Process/Local\cell \pard \qc\sa60\widctlpar\intbl {\b Just Local}\cell {\i error\cell 
}\pard \widctlpar\intbl \row \trowd \trgaph108\trleft720\trkeep \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2070\cellx3420\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx5220\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cellx7200\cellx8190 \pard \qj\sa60\widctlpar\intbl {\fs15 Both of the above\cell }\pard \qc\sa60\widctlpar\intbl {\i error\cell }\pard \qc\li6\sa60\widctlpar\intbl In-Process/Local\cell \pard \qc\sa60\widctlpar\intbl In-Process/Local\cell {\i error\cell 
}\pard \widctlpar\intbl \row \trowd \trgaph108\trleft720\trkeep \clbrdrt\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2070\cellx3420\cellx5220\cellx7200\cellx8190 \pard \qj\sa60\widctlpar\intbl {\fs15 Other\cell }\pard \qc\sa60\widctlpar\intbl {\i error
\cell }\pard \qc\li6\sa60\widctlpar\intbl {\i error\cell }\pard \qc\sa60\widctlpar\intbl {\i error\cell error\cell }\pard \widctlpar\intbl \row \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 
The key difference is in the middle columns and the middle rows. In the {\f5\fs16 REGCLS_MULTIPLEUSE}{\fs15  }column, they are the same (registers multiple use for both InProc and local); in the {\f5\fs16 REGCLS_MULTI_SEPARATE}{\fs15  }col
umn, the local server case is local only.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The arguments to this function are as follows:
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 rclsid\tab REFCLSID}\tab The {\cs58\f5\fs16\lang1024 CLSID} of the class factory being registered.
\par {\cs58\f5\fs16\lang1024 pUnk\tab IUnknown }*\tab The class factory whose availability is being published.
\par {\cs58\f5\fs16\lang1024 grfContext\tab DWORD}\tab As in {\cs58\f5\fs16\lang1024 CoGetClassObject}.
\par {\cs58\f5\fs16\lang1024 grfFlags\tab DWORD}\tab {\cs58\f5\fs16\lang1024 REGCLS} values that control the use of the class factory.
\par {\cs58\f5\fs16\lang1024 pdwRegister\tab DWORD *}\tab A place at which a token is passed back with which this registration can be revoked in {\cs58\f5\fs16\lang1024 CoRevokeClassObject}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\f4\fs18 {\cs58\f5\fs16\lang1024 CO_E_OBJISREG\cell }Error. The indicated class is already registered.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }Memory could not be allocated to service the request.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\fs20\lang1024 6.3.2.2\tab}}\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoRevokeClassObject{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoRevokeClassObject\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoRevokeClassObject(dwRegister)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Informs the COM Library that a class factory previously registered with {\cs58\f5\fs16\lang1024 CoRegisterClassObject}
 is no longer available for use. Server applications call this function on shutdown after having detected the necessary unloading conditions.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 There are no instances of the class in existence, that is, the object count is zero.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The class factory has a zero number of locks from {\cs58\f5\fs16\lang1024 IClassFactory::LockServer}{\i .}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The application servicing the class object is not showing itself to the user (that is, not under user control)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 When, subsequently, the reference count on the class object reaches zero, the class object can be destroyed, allowing the application to exit.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 dwRegister\tab DWORD}\tab A token previously returned from {\cs58\f5\fs16\lang1024 CoRegisterclassObject}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s44\qj\sb240\sa58\widctlpar \f4\fs20 
The structure of a server application with its object and class factory is illustrated in Figure 6-2. This figure also illustrates the sequence of calls and events that happen when the client executes the standard object creation sequence of {
\cs58\f5\fs16\lang1024 CoGetClassObject}{\i  }and{\i  }{\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance}.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw22807\pich15451\picwgoal12930\pichgoal8760 \picscalex50\picscaley50 
0100090000036419000008003100000000000e00000026060f001200ffffffff000008000000e6f5faf91a0aaa070a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02faf9e6f5050000000c02b00d341431000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff00000800000065f6fdf9120a77070e00000026060f001200ffffffff0000080000003503dbfa040ae50607000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06b301b301fe061d0af3fa4d03050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06b101b101e506040adbfa3503050000001402000000000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000a2f7eefabcfdc4fd07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06b500b500ddfdd5fd06fbbaf7050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400040000
00f0010100090000001c06b300b300c4fdbcfdeefaa2f7050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000042f764fff4fd770707000000fc020000000000020000040000002d01010004000000f0010300040000002d010200070000001b049007
0dfe7cff5af7050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f00101000500000009
0200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f0010400070000001b047707f4fd64ff42f7050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a7f97ffe73fb6eff1c000000fb0270ff
000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a1effe1f903000000434f4d0068007000780004000000020102000a0000
0026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000071f7a4ff16fe2a071c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e0118000500
00000a02000000000500000009020000000204000000020101001f000000320a3b00abf710000000436f476574436c6173734f626a6563745c004f00630047002b005c00240047004700480063004e002400470047002b0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f
03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f00105001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a02
000000000500000009020000000204000000020101002e000000320ad500abf71a000000202020204c6f6f6b20757020636c61737320696e20726567444224002300240023004e004f004e00470024004e004e00240047002300470048004700230024004e002400320047004e005c005d0004000000020102001c000000fb
0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884
c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101002b000000320a0902abf718000000202020204c6f6f6b2075702045584520696e20726567444224002300240023004e004f004e00470024004e004e0024
00550055005600230024004e002400310048004e005c005d0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000001c000000
fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a3d03abf704000000202020202400230024
00230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f001050005000000090200000002040000000201010012000000320a3d0339f80700000057696e457865630179002300
4f00550047004700480004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f001040005000000090200000002040000000201010012000000320a3d034ffa07000000206f6e2045
58450024004e004e00240055005500560004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000001c000000fb0280ff00000000
0000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a7104abf7040000002020202024002300240023000400000002
0102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb
550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a02000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f00105
00040000002e011800050000000a02000000000500000009020000000204000000020101002b000000320a3f06abf7180000002020202052657475726e20636c61737320666163746f727924002300240023005d0047002b004e0032004e0023004700240047004700480023002b00470047002b004e003200470004000000
020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101002a000000320ad906abf71700000020
20202020202020706f696e74657220746f207573657279240023002400230024002300240024004e004e0023004f002a004700320024002a004f0023004e0048004700320004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006ff929fa7bfb18fb1c00
0000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ac8faa9f906000000436c69656e7468
002800280050005800300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cc05fdf98807fffa1c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f04000000
2d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320aaafa060603000000455845ff6b006a006b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c6f766fbb4fd76
fd1c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320af7fb00f80500000043616c6c
20005c00480023002400230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f00104000500000009020000000204000000020101001f000000320af7fb0ef910000000436f47
6574436c6173734f626a6563745c004f00630047002b005c00240047004700480063004e002400470047002b0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f00105001c00
0000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320a91fc00f80500000043616c6c20435c
00480023002400230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f00105000500000009020000000204000000020101001c000000320a91fc0ef90e000000437265617465
496e7374616e63655c003200470048002a00470024004e0047002b0047004e004800470004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f00104001c000000fb0280ff000000
000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a2bfd00f80a000000557365206f626a6563745c0048004700
23004f004e002300480047002a0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002a03fb02120ad9061c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f04
0000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010012000000320a8c0364030700000057696e4d61696e00790023004f006a00470024004e0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03
d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a260464030400000020202020240023002400230004000000020102001c000000fb0280ff000000000000bc02ff
00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f001040005000000090200000002040000000201010019000000320a2604f2030c000000436f496e697469616c697a655c004f0023004e0024002b0023004700240023004000480004000000
020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f00105001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000
00c007f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101002b000000320ac0046403180000002020202043726561746520636c61737320666163746f727924002300240023005d003200470047002b004700230047002400470047004800
23002b00470047002b004e003200470004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000
00020101000d000000320a5a0564030400000020202020240023002400230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f001040005000000090200000002040000000201
010027000000320a5a05f20315000000436f5265676973746572436c6173734f626a656374005c004f005c0047004e00240047002b00470032005c00240047004700470064004e002400470047002b0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f
037884c577000000000c000000901bf87f040000002d01040004000000f00105001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000
09020000000204000000020101001f000000320af405640310000000202020202020202070617373696e6720240023002400230024002300240024004e0047004700470024004e004e00240004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c5
77000000000c000000901bf87f040000002d01040004000000f00105000500000009020000000204000000020101001b000000320af40588060d00000049436c617373466163746f72796124005c0024004700470047004e00480047002a004f003100480004000000020102001c000000fb0280ff000000000000bc020000
000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f00104001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01040004000000f001050004
0000002e011800050000000a020000000005000000090200000002040000000201010015000000320a8e06640309000000202020205969656c6400240023002400230056002300470024004e0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008af6
30fb5ff732fc1c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010009000000320addfbc4f6010000
003100590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000065f6bffbd1f7080008000000fa0206000800000000000002040000002d01040004000000f001010007000000fc020100000000000000040000002d0101000b0000001708e1ff3bf7bffb
cdf7110035f9bffb65f607000000fc020000000000020000040000002d01060004000000f0010300040000002d0102000a000000240303008ef7040034f7acff14f7eaff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005cfefb002002d7011c000000fb0280ff000000
000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000a018f87f040000002d01030004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a8c0196fe0d00000049436c617373466163746f7279612400
5c0024004700470047004e00480047002a004f003100480004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005b0404009b089b0207000000fc020000000000020000040000002d01050004000000f0010600100000002403060073041c0073046002c6
04b302b308b302b3086f0060081c00050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000
f001050005000000090200000002050000000102ffffff02040000002d01040010000000240306005f0408005f044502b10497029708970297085a004508080005000000140200000000040000002d0101000800000025030200b1045a0097085a000800000025030200b1045a005f0408000800000025030200b1045a00b1
049702050000001402000000001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01050004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a
4d01e6040e000000436c61737320466163746f72793a5c00240047004700480023004e00480047002a004f00310048002a0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a018f87f040000002d01030004000000f0
010500040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320ae701e6040e00000063726561746573204f626a65637447003200470047002b0047004700240064004e002300470048002a0004000000020102000a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff0000080000001402fe00c402ae0107000000fc020000000000020000040000002d01050004000000f0010600040000002d010200070000001804c701dd0216012c02050000001402000000002d00000042010500000028000000080000000800000001000100000000002000000000000000000000
00000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff02040000002d010400070000001804ae01c402fe001402050000001402000000000a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff000008000000bc025e018c046601040000002d010200040000002d01010004000000f001040004000000f00106001c000000fb021000070000000000bc02000000000102022253797374656d0003d0bb55033002f87f4603000000000000957fc5773002f87f04
0000002d01040004000000f0010300030000001e0007000000160406028c04be00bc0208000000fa0206000800000000000002040000002d0103000500000014025e014c060500000013025e01f400040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff0000080000003a04e9fbf80809ff07000000fc020000000000020000040000002d0103001000000024030600520401fc5204bdfeb60421ff100921ff100965fcac0801fc0500000014025e01f4002d000000420105000000280000000800000008000000010001000000000020
0000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001030005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0103001000000024030600
3e04edfb3e04a2fea10405fff40805fff40850fc9108edfb0500000014025e01f40008000000fa0206000800000000000002040000002d01060004000000f0010300040000002d0101000800000025030200a10450fcf40850fc0800000025030200a10450fc3e04edfb0800000025030200a10450fca10405ff0500000014
025e01f4001c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a018f87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010010000000320ad1fde605060000004f626a6563747000
5800280050005000300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f5019efda5024efe07000000fc020000000000020000040000002d01070004000000f0010500040000002d01020007000000180467febe02b6fd0d020500000014025e01f4
002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001070005000000090200000002050000000102ffffff02
040000002d0106000700000018044efea5029efdf5010500000014025e01f4000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f50196fca50246fd07000000fc020000000000020000040000002d01070004000000f0010500040000002d0102000700000018045ffdbe
02aefc0d020500000014025e01f4002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f0010700050000000902
00000002050000000102ffffff02040000002d01060007000000180446fda50296fcf5010500000014025e01f4000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000009d02e6fc6a04f3fc040000002d010200040000002d01010004000000f001060004000000f001050004
0000002d01040004000000f0010300030000001e0007000000160493fd6a0446fc9d0208000000fa0206000800000000000002040000002d010300050000001402f0fc2706050000001302e1fcd800040000002d010200040000002d01010004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff0000080000009d02fefd6d0406fe040000002d010200040000002d010100030000001e00070000001604a6fe6d045efd9d0208000000fa0206000800000000000002040000002d010300050000001402fefd2d06050000001302fefdd500040000002d010200040000002d0101
0004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b1fe4efb3c032afc1c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a018f87f040000002d01
0300040000002e011800050000000a020000000005000000090200000002040000000201010021000000320adffbebfe110000004f626a65637420496e74657266616365730064004e002300480047002a00240023004f002a00470032002b00470047004700480004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff0000080000006bfc110352037603040000002d010200040000002d010100040000002d01040004000000f0010300030000001e0007000000160416040e0371026bfc08000000fa0206000800000000000002040000002d010300050000001402b4028cf5050000001302cb03
290a040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a000000240303004a036e03d0024403cc028a030a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000160861024d09a804080000
00fa0206000800000000000002040000002d010500040000002d0101000b00000017088702be08a704be08d9044d095502e806040000002d010300040000002d0102000a000000240303006c086502c408bd02e6087f020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
06007202db0074031c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a1f034000010000003200590004
000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007d082d0352092f041c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01070004000000f0010600
040000002e011800050000000a020000000005000000090200000002040000000201010009000000320ada03b708010000003300590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cc006d06a1016f071c000000fb0260ff000000000000bc0200
00000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a1a070601010000003400590004000000020102000a00000026060f000a00
ffffffff0100000000000e00000026060f001200ffffffff00000800000070f667fcc9f73206040000002d010500040000002d0101000b00000017083206a0f78afc75f739061af967fc70f6040000002d010300040000002d0102000a00000024030300c5f76bfc4cf78afc70f7c6fc0a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff00000800000067f6b2003cf7b4011c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000
090200000002040000000201010009000000320a5f01a1f6010000003500590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c6ff07fe9b0009ff1c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f
037884c577000000000c000000901bf87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010009000000320ab4fe0000010000003600590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff000008000000d9079efe1009e500040000002d010500040000002d0101000b0000001708c4fe8108e40081081601100992feab06040000002d010300040000002d0102000a000000240303002f08a2fe8708fafea908bcfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
0000004a0856ff1f0958001c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a0300
8408010000003700590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e1faf7fcdc01fffc040000002d010200040000002d01010004000000f001050004000000f0010300040000002d01040004000000f0010700030000001e000700000016049f
fd980157fce1fa08000000fa0206000800000000000002040000002d010300050000001402f7fceef3050000001302f7fcc708040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300d401f7fc5e01d3fc5e011afd0a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000065fc6efc3f022d0708000000fa0206000800000000000002040000002d010500040000002d0101000b00000017086ffc2afda1001702f3118c035ffc46f5040000002d010300040000002d0102000a000000240303003b02f4
0026027900e80197000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000013fd1a06b8035c06040000002d010200040000002d01010004000000f001050004000000f0010300030000001e00070000001604fc06b8037a054ffd08000000fa02060008000000000000020400
00002d0103000500000014028e064d0a050000001302e00576f6040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a0000002403030014fd1a068afd41068cfdfb050a00000026060f000a00ffffffff0100000000000e00000026060f
001200ffffffff000008000000bbfe81fe90ff83ff1c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a018f87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010009000000320a
2efff5fe010000003800590004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fa0cfdea012101040000002d010200040000002d01010004000000f0010300040000002d01040004000000f0010500030000001e000700000016042101ea012dfde4
fa08000000fa0206000800000000000002040000002d01030005000000140226051c09050000001302fff86ef3040000002d010200040000002d01010004000000f0010300040000002701ffff07000000fc020000000000020000040000002d0103000a00000024030300a9fa0bfdfdfa62fd1ffb26fd0a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001b0019fcf0001bfd1c000000fb0260ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d010500040000002e011800050000000a02000000000500000009
0200000002040000000201010009000000320ac6fc5500010000003900590004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000
040000002d010200040000002d01010004000000f0010300040000002d01040004000000f0010500030000000000f3fa9afdf1faa0fdedfaa6fde9faabfde3faaefddcfab1fd00}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 6-2: Creation sequence of an object from a server application.\line Function calls not in COM are from the Windows API.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Compare this figure with DLL server Figure 6-1 in the previous section. You\rquote ll notice that the structure of the server is generally the same, that is, both have their object and class factory. You\rquote 
ll also notice that the creation sequence from the client\rquote s point of view is identical. Again, once the client determines the {\cs58\f5\fs16\lang1024 CLSID} of the desired object that client leaves the specifics up to {\cs58\f5\fs16\lang1024 
CoGetClassObject}. The only differences between the two figures occur inside the COM Library and the specific means of exposing the class factory from the server (along with the unloading mechanism).{\i 
\par }Finally, {\cs58\f5\fs16\lang1024 CoRegisterClassObject}{\i  }and {\cs58\f5\fs16\lang1024 CoRevokeClassObject} along with when a server calls them demonstrate why a reference count on the class factory is insufficient to keep a server in memory and why {
\cs58\f5\fs16\lang1024 IClassFactory::LockServer} exists. {\cs58\f5\fs16\lang1024 CoRegisterClassObject} must, in order to be implemented properly, hold on to the {\cs58\f5\fs16\lang1024 IUnknown}
 pointer passed to it (that is, the class factory). The reference counting rules state that {\cs58\f5\fs16\lang1024 CoRegisterClassObject} must call {\cs58\f5\fs16\lang1024 AddRef} on that pointer accordingly. This reference count can only be re
moved inside {\cs58\f5\fs16\lang1024 CoRevokeClassObject}.
\par However, {\cs58\f5\fs16\lang1024 CoRevokeClassObject} is only called on application shutdown and not at any other time. How does the server know when to start its shutdown sequence? Since it has to {\i be}
 in the process of shutting down to have the final reference counts on the class factory released through {\cs58\f5\fs16\lang1024 CoRevokeClassObject}
, it cannot use the reference count to determine when to start the shutdown process in the first place. Therefore there has to be another mechanism through which shutdown is controlled which is {\cs58\f5\fs16\lang1024 IClassFactory::LockServer}.
\par {\*\bkmkstart _Toc324051609}{\*\bkmkstart _Toc324051794}{\*\bkmkstart _Toc324052036}{\*\bkmkstart _Toc335190101}{\*\bkmkstart _Toc337870047}{\*\bkmkstart _Toc339182961}{\pntext\pard\plain\b 6.4\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Providing for Server Unloading{\*\bkmkend _Toc324051609}{\*\bkmkend _Toc324051794}{\*\bkmkend _Toc324052036}{\*\bkmkend _Toc335190101}{\*\bkmkend _Toc337870047}
{\*\bkmkend _Toc339182961}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 When a server has no objects to serve, has no locks, and is not being controlled by an end user (which ap
plies generally to server applications with user interface), then the server has no reason to stay loaded in memory and should provide for unloading it
self. This unloading provision differs between server types (DLL and EXE, but no difference for remote servers) as much as class factory registration because whereas a server application can simply terminate itself, an in-process DLL must wait for someone
 else to explicitly unload it. Therefore the mechanisms for unloading are different and are covered separately in the following sections.
\par {\*\bkmkstart _Toc324051610}{\*\bkmkstart _Toc324051795}{\*\bkmkstart _Toc324052037}{\pntext\pard\plain\b\i\fs22 6.4.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Unloading In-Process Servers{\*\bkmkend _Toc324051610}{\*\bkmkend _Toc324051795}{\*\bkmkend _Toc324052037}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As mentioned above, a DLL must wait for someone else to explicitly unload it. The s
erver must, however, have a mechanism through which it indicates whether or not it should be unloaded. That mechanism is a function with the name {\cs58\f5\fs16\lang1024 DllCanUnloadNow} that is exported in the same manner as {\cs58\f5\fs16\lang1024 
DllGet\-ClassObject}{\i .}
\par {\pntext\pard\plain\b\fs20\lang1024 6.4.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 DllCanUloadNow{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 }{\b0\fs12 DllCanUloadNow}{\fs12 }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT DllCanUnloadNow(void)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 DllCanUnloadNow }is not provided by COM. Rather, it is a function implemented by and exported from DLLs supporting the Component Object Model. {\cs58\f5\fs16\lang1024 DllCanUnloadNow }
should be exported from DLLs designed to be dynamically loaded in {\cs58\f5\fs16\lang1024 CoGetClassObject }or {\cs58\f5\fs16\lang1024 CoLoadLibrary }
calls. A DLL is no longer in use when there are no existing instances of classes it manages; at this point, the DLL can be safely freed by calling {\cs58\f5\fs16\lang1024 CoFreeUnusedLibraries}. If the DLL loaded by {\cs58\f5\fs16\lang1024 
CoGetClassObject }fails to export {\cs58\f5\fs16\lang1024 DllCanUnloadNow}, the DLL will only be unloaded when {\cs58\f5\fs16\lang1024 CoUninitialize }is called to release the COM libraries.
\par If this function returns {\cs58\f5\fs16\lang1024 S_OK}, the duration within which it is in fact safe to unload the DLL depends on whether the DLL is single or mult
i-thread aware. For single thread DLLs, it is safe to unload the DLL up until such time as the thread on which {\cs58\f5\fs16\lang1024 DllCanUnloadNow }was invoked causes it to be otherwise (objects created, for example). 
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The DLL may be unloaded now.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_FALSE\cell }The DLL should not be unloaded at the present time.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
{\*\bkmkstart _Toc324051611}{\*\bkmkstart _Toc324051796}{\*\bkmkstart _Toc324052038}{\pntext\pard\plain\b\i\fs22 6.4.2\tab}}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Unloading EXE Servers{\*\bkmkend _Toc324051611}{\*\bkmkend _Toc324051796}{\*\bkmkend _Toc324052038}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A server application is responsible for unloading itself, simply by terminating and exiting its main entry function{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {
\cs38\super \chftn }\tab Under Microsoft Windows, the application usually starts shutdown by posting a {\f5\fs12 WM_CLOSE} message to its main window, simulat
ing what happens when a user closes an application. This eventually causes the application to exit the {\f5\fs12 WinMain }function.}}, when the shutdown conditions are met, including whether or not the user has control. In the on
going example of this chapter, this would involve detecting the proper shutdown conditions whenever an object is destroyed (in the suggested {\cs58\f5\fs16\lang1024 ObjectDestroyed}{\i  }function) or whenever the last lock is removed (in {
\cs58\f5\fs16\lang1024 IClassFactory::LockServer}){\i .
\par }\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 //User control flag
\par BOOL        g_fUser=FALSE;
\par 
\par void ObjectDestroyed(void) \{
\par \tab g_cObj--;
\par \tab if (0L==g_cObj && 0L==g_cLock && !g_fUser)
\par \tab \tab //Begin shutdown
\par \tab return;
\par \tab \}
\par 
\par HRESULT CTextRenderFactory::LockServer(BOOL fLock) \{
\par \tab if (fLock)
\par \tab \tab g_cLock++;\tab \tab // for single threaded app only, of course
\par \tab else \tab \{
\par \tab \tab g_cLock--;
\par \tab \tab if (0L==g_cObj && 0L==g_cLock && !g_fUser)
\par \tab \tab \tab //Begin shutdown
\par \tab \tab \}
\par \tab return NOERROR;
\par \tab \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 If desired, you can of course centralize the shutdown conditions by artificially incrementing the object count in {\cs58\f5\fs16\lang1024 IClassFactory::LockServer} and directly calling {
\cs58\f5\fs16\lang1024 ObjectDestroyed}. That way you do not need redundant code in both functions.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 During shutdown, the server is responsible for calling {\cs58\f5\fs16\lang1024 CoRevokeClassObject} on all previously registered class factories and for calling {\cs58\f5\fs16\lang1024 CoUninitialize}{\i  }
like any COM application.
\par A server application only needs a \ldblquote user-control\rdblquote  flag if it becomes visible in some way and also a
llows the user to perform some action which would necessitate the application stays running regardless of any other conditions. For example, the server might be running to service an object for a client and the user opens another file in that same applica
tion. Since the user is the only agent who can close the file, the user control flag is set to TRUE meaning that the user must explicitly close the application: no automatic shutdown is possible.
\par If a server is visible and under user control, there is the possibility that clients have connections to objects within that server when the user explicitly closes the application. In that situation the server can take one of two actions:
\par {\pntext\pard\plain\fs20 1.\tab}\pard\plain \s73\fi-360\li1080\ri360\sa120\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f4\fs20 
Simply hide the application and reset the user control flag to FALSE such that the server will automatically shut down when all objects and locks are released.
\par {\pntext\pard\plain\fs20 2.\tab}Terminate the application but call {\cs58\f5\fs16\lang1024 CoDisconnectObject} for each object in service to forcibly disconnect all clients.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The second option, though more brutal, is necessary in some situations. The {\cs58\f5\fs16\lang1024 CoDisconnectObject} function exists to insure that all external reference counts to the server\rquote 
s objects are released such that the server can release its own references and destroy all objects.
\par {\pntext\pard\plain\b\fs20\lang1024 6.4.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoDisconnectObject{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 }{\b0\fs12 CoDisconnectObject}{\fs12 }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoDisconnectObject(pUnk, dwReserved)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
This function serves any extant remote connections that are being maintained on behalf of all the interface pointers on this object. This is a very rude and privileged operation which should generally only be invoked by the process in which the object act
ually is managed by the object implementation itself.
\par The primary purpose of this operation is to give an application process certain and definite control over connections to other processes that may have been made from objects managed by the process. If the appli
cation process wishes to exit, then we do not want it to be the case that the extant reference counts from clients of the application\rquote 
s objects in fact keeps the process alive. The process can call this function for each of the objects that it manages without waiting for any confirmation from clients. Having thus released re
sources maintained by the remoting connections, the application process can exit safely and cleanly. In effect, {\cs58\f5\fs16\lang1024 CoDisconnectObject} causes a controlled crash of the remoting connections to the object.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pUnk\tab IUnknown *}\tab The object that we wish to disconnect. May be any interface on the object which is polymorphic with {\cs58\f5\fs16\lang1024 IUnknown}
, not necessarily the exact interface returned by {\cs58\f5\fs16\lang1024 QueryInterface(IID_IUnknown...).}
\par {\cs58\f5\fs16\lang1024 dwReserved\tab DWORD}\tab Reserved for future use; must be zero.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unspecified error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\*\bkmkstart _Toc324051612}
{\*\bkmkstart _Toc324051797}{\*\bkmkstart _Toc324052039}{\*\bkmkstart _Toc335190102}{\*\bkmkstart _Toc337870048}{\*\bkmkstart _Toc339182962}{\pntext\pard\plain\b 6.5\tab}}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 
{\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Object Handlers{\*\bkmkstart _Toc335190103}{\*\bkmkstart _Toc337870049}{\*\bkmkend _Toc324051612}{\*\bkmkend _Toc324051797}{\*\bkmkend _Toc324052039}{\*\bkmkend _Toc335190102}{\*\bkmkend _Toc337870048}
{\*\bkmkend _Toc335190103}{\*\bkmkend _Toc337870049}{\*\bkmkend _Toc339182962}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Object Handlers}}}As mentioned earlier this specification, object handler{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 handler}}}s from on
e perspective are special cases of in-process servers that talk to their local or remote servers as well as a client. From a second perspective, an object handler is really just a fancy proxy for a local or remote server that does a little more than just 
forward calls through RPC. The latter view is more precise architecturally: a \ldblquote handler{\pard\plain \qj\sa60\widctlpar \b\v\f4\fs12 {\xe {\b\fs12 handler}}}\rdblquote  is simply the piece of code that runs in the client\rquote 
s space on behalf of a remote object; it can be used synonymously with the term \ldblquote proxy object.\rdblquote  The han
dler may be a trivial one, one that simply forwards all of its calls on to the remote object, or it may implement some amount of non-trivial client side processing. (In practice, the term \ldblquote proxy object\rdblquote 
 is most often reserved for use with trivial handlers, leaving \ldblquote handler\rdblquote  for the more general situation.)
\par The structure of an object handler is exactly the same as a full-in process server: an object handler implements an object, a class factory, and the two functions {\cs58\f5\fs16\lang1024 DllGetClassObject} and {\cs58\f5\fs16\lang1024 DllCanUnloadNow} exa
ctly as described above.
\par The key difference between handlers and full DLL servers (and simple proxy objects, for that matter) is the extent to which they implement their respective objects. Whereas the full DLL server implements the com
plete object (using other objects internally, if desired), the handler only implements a partial object de
pending on a local or remote server to complete the implementation. Again, the reasons for this is that sometimes a certain interface can only be useful when implemented 
on an in-process object, such as when member functions of that interface contain parameters that cannot be shared between processes. Thus the object in the handler would implement the restricted in-process interface but leave all others for implemen
tation in the local or remote server.
\par {\*\bkmkstart _Toc324051613}{\*\bkmkstart _Toc324051798}{\*\bkmkstart _Toc324052040}{\*\bkmkstart _Toc335190104}{\*\bkmkstart _Toc337870050}{\*\bkmkstart _Toc339182963}{\pntext\pard\plain\b 6.6\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Object Reusability{\*\bkmkend _Toc324051613}{\*\bkmkend _Toc324051798}{\*\bkmkend _Toc324052040}{\*\bkmkend _Toc335190104}{\*\bkmkend _Toc337870050}{\*\bkmkend _Toc339182963}

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 With object-oriented programming it is often true that there already exists some object that implements some of what you want to implement, and instead of rewriting all that code yourself you would like
 to reuse that other object for your own implementation. Hence we have the desire for object reusability and a number means to achieve it such as implementation inheritance, which is exploited in C++ and other languages. However, as discussed in the 
\ldblquote Object Reusability\rdblquote  section of Chapter 2, implementation inheritance has some significant drawbacks and problems that do not make it a good object reusability mechanism for a system object model.
\par For that reason COM supports two notions of object reuse, containment and aggregation, that were also described in Chapter 2. In that chapter we saw that containment, the most common and simplest for of object reuse, is where the \ldblquote outer object
\rdblquote  simply uses other \ldblquote inner objects\rdblquote  for their services. The outer object is nothing more than a client of the inner objects. We also saw in Chapter 2 the notion of aggregation, where the outer object exposes interface
s from inner objects as if the outer object implemented those interfaces itself. We brought up the catch that there has to be some mechanism through which the {\cs58\f5\fs16\lang1024 IUnknown}
 behavior of inner object interfaces exposed in this manner is appropriate to the outer object. We are now in a position to see exactly how the solution manifests itself.
\par The following sections treat Containment and Aggregation in more detail using the {\cs58\f5\fs16\lang1024 TextRender} object as an example. To refresh our memory of this object\rquote s purpose, the following list reiterates the specific features of the {
\cs58\f5\fs16\lang1024 TextRender} object that implements the {\cs58\f5\fs16\lang1024 IPersistFile} and {\cs58\f5\fs16\lang1024 IDataObject} interfaces:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 Read text from a file through {\cs58\f5\fs16\lang1024 IPersistFile::Load}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Write text to a file through {\cs58\f5\fs16\lang1024 IPersistFile::Save}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Accept a memory copy of the text through {\cs58\f5\fs16\lang1024 IDataObject::SetData}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Render a memory copy of the text through {\cs58\f5\fs16\lang1024 IDataObject::GetData}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Render metafile and bitmap images of the text also through {\cs58\f5\fs16\lang1024 IDataObject::GetData}
\par {\*\bkmkstart _Toc324051614}{\*\bkmkstart _Toc324051799}{\*\bkmkstart _Toc324052041}{\pntext\pard\plain\b\i\fs22 6.6.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Reusability Through Containment{\*\bkmkend _Toc324051614}{\*\bkmkend _Toc324051799}{\*\bkmkend _Toc324052041}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Let\rquote s say that when we decide to implement the {\cs58\f5\fs16\lang1024 TextRender} object we find that another object exists with {\cs58\f5\fs16\lang1024 CLSID_TextImage}
 that is capable of accepting text through {\cs58\f5\fs16\lang1024 IDataObject::SetData} but can do nothing more than render a metafile or bitmap for that text through {\cs58\f5\fs16\lang1024 IDataObject::GetData}. This \ldblquote {\cs58\f5\fs16\lang1024 
TextImage}\rdblquote  object cannot render memory copies of the text and has no concept of reading or writing text to a file. But it does such a good job implementing the graphical rendering that we wish to use it to help implement our {
\cs58\f5\fs16\lang1024 TextRender} object.
\par In this case the {\cs58\f5\fs16\lang1024 TextRender} object, when asked for a metafile or bitmap of its current text in {\cs58\f5\fs16\lang1024 IDataObject::GetData}, would delegate the rendering to the {\cs58\f5\fs16\lang1024 TextImage} object. {
\cs58\f5\fs16\lang1024 TextRender} would first call {\cs58\f5\fs16\lang1024 TextImage\rquote s} {\cs58\f5\fs16\lang1024 IDataObject::SetData} to give it the most recent text (if it has changed since the last call) and then call {\cs58\f5\fs16\lang1024 
TextImage\rquote s} {\cs58\f5\fs16\lang1024 IDataObject::GetData} asking for the metafile or bitmap format. This delegation is illustrated in Figure 6-3.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw19288\pich9048\picwgoal10935\pichgoal5130 \picscalex50\picscaley50 
010009000003bc0a000008003100000000000e00000026060f001200ffffffff000008000000eef65cfe040860060a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b025cfeeef6050000000c020408161131000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000f0f65cfef00748060e00000026060f001200ffffffff000008000000e1fb5cfef007480607000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06fb01fb016106090874fef9fb050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06f901f9014806f0075cfee1fb050000001402000000000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff0000080000000902a80114074b0507000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06e800e80064052d07c0012102050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400040000
00f0010100090000001c06e600e6004b051407a8010902050000001402000000001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000c007f87f040000002d010100040000002e011800050000000a0200000000050000000902000000020400
00000201010015000000320a510361030900000054657874496d61676500490043004300280021006b0043004900430004000000020102001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000701cf87f040000002d01050004000000f00101
00040000002e011800050000000a020000000005000000090200000002040000000201010018000000320ae1033d030b00000028436f6e7461696e6564290028005700490049002800430021004a0042004a00280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff
000008000000daf9c6ff7bfa660007000000fc020000000000020000040000002d01010004000000f0010300040000002d0102000700000018047f0094fadefff2f9050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000
000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f001040007000000180466007bfac6ffdaf9050000001402
000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000071fa100090fc1a00040000002d01020007000000fc020100000000000000040000002d01040004000000f001010004000000f00103001c000000fb021000070000000000bc0200000000010202225379737465
6d0003d0bb55033002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010500030000001e00070000001604ba0090fc70ff71fa08000000fa0206000800000000000002040000002d01030005000000140214005af80500000013020e009ffe040000002d010200040000002d01040004000000
f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000cf7baffb7f97c001c000000fb0288ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000701cf87f040000002d010300040000
002e011800050000000a020000000005000000090200000002040000000201010019000000320a3b0035f70c000000495065727369737446696c6521005000430028003c001b003c00210049001b001b00420004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000
08000000f0f6d203c4f994041c000000fb0288ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c0000006004f87f040000002d01050004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010018000000320a53
0419f70b00000049446174614f626a65637465210057004300210043005d0043001b0042003c00220004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006efc99fee6ff7aff1c000000fb0270ff000000000000bc020000000000000000417269616c00
0f03d0bb550338f70f037884c577000000000c000000701cf87f040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a31ff9afc0a0000005465787452656e64657258005000500030006800500058005800500038000400000002
0102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e6f9cc0387fa6c0407000000fc020000000000020000040000002d0105000700000018048504a0fae403fef90500000014020e009ffe2d0000004201050000002800000008000000080000000100010000000000
200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018046c
0487facc03e6f90500000014020e009ffe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007dfa1604b4fc2104040000002d010200040000002d01040004000000f001050004000000f0010600040000002d01010004000000f0010300030000001e00070000001604c104
b4fc76037dfa08000000fa0206000800000000000002040000002d0103000500000014021c044ef80500000013021304dbfe040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000082fcec03d2
fc480407000000fc020000000000020000040000002d01030008000000fa0206000800000000000002040000002d0105000700000018044804d2fcec0382fc0500000014021304dbfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007afcecffcafc4800040000002d01
020008000000fa0206000800000000000002040000002d01060004000000f00105000700000018044800cafcecff7afc0500000014021304dbfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ca006e026b010e0307000000fc020000000000020000040000002d0105
0004000000f0010300040000002d010200070000001804270384018602e2000500000014021304dbfe2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000
dd000000040000002d01030004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050004000000f00106000700000018040e036b016e02ca000500000014021304dbfe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ff
ffffff0000080000006101b8022002c202040000002d010200040000002d01040004000000f001050004000000f0010300030000001e00070000001604620320021802610108000000fa0206000800000000000002040000002d010300050000001402bc02aa00050000001302b602cf02040000002d010200040000002d01
040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000b8fd72028c0034031c000000fb0288ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000701cf87f040000002d
010300040000002e011800050000000a020000000005000000090200000002040000000201010018000000320af302e1fd0b00000049446174614f626a65637400210057004300210043005d0043001b0042003c00220004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff000008000000c0fc1800f800880208000000fa0206000800000000000002040000002d0105000b00000017081800c4fc2a02ed00f004f800180090f807000000fc020000000000020000040000002d010600040000002d0102000a00000024030300f400840202010802be0014020a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000d0fcf80208011804040000002d010500040000002d0104000b00000017084703e2001804d4fc18040801e001a0f8040000002d010600040000002d0102000a000000240303000401fc02a3004a03dd0072030a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff0000080000006bffaaff290410011c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000e00af87f040000002d01070004000000f0010300040000002e011800050000000a0200000000050000000902000000
0204000000020101000d000000320a330094ff04000000557365205c0048004700230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000701cf87f040000002d01030004000000f0010700050000000902000000020400
00000201010012000000320a3300a200070000005365744461746100550048002a005d0047002a00480004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000e00af87f040000002d01070004000000f00103000500000009
0200000002040000000201010013000000320a33007f020800000020746f2074656c6c24002a004e0024002b0047002300240004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000701cf87f040000002d01030004000000
f0010700040000002e011800050000000a020000000005000000090200000002040000000201010022000000320acd00a6ff1200000054657874496d616765206f6620746578742e4e00470048002a002400720047004e00470024004e002b0023002b00470047002b00230004000000020102000a00000026060f000a00ff
ffffff0100000000000e00000026060f001200ffffffff00000800000049fc3a042b02a0051c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000e00af87f040000002d01070004000000f0010300040000002e011800050000000a0200000000
0500000009020000000204000000020101000d000000320ac30472fc04000000557365205c0048004700230004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000701cf87f040000002d01030004000000f0010700050000
00090200000002040000000201010012000000320ac30480fd07000000476574446174616c640047002a005d0047002b00470004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000e00af87f040000002d01070004000000
f001030005000000090200000002040000000201010019000000320ac3046bff0c00000020746f20726574726965766524002a004e002400320047002b003100240047004700480004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000
000c000000701cf87f040000002d01030004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010027000000320a5d05abfc1500000067726170686963616c2072656e646572696e67732e004e00320047004e004f0023004700480023002400310048004e004e004700
320024004e004e004700240004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d010400040000
00f001050004000000f0010600040000002d01010004000000f00103000300000000000000f0010300040000}}
\par \pard\plain \s76\qc\li360\sb120\sa240\widctlpar \b\f4\fs20 Figure 6-3: An outer object that uses inner objects through\line containment is a client of the inner objects.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 To create this configuration, the {\cs58\f5\fs16\lang1024 TextRender} object would, during its own creation, instantiate the {\cs58\f5\fs16\lang1024 TextImage} object with the following code, storing the {
\cs58\f5\fs16\lang1024 TextImage\rquote s} {\cs58\f5\fs16\lang1024 IDataObject} pointer in a {\cs58\f5\fs16\lang1024 TextImage} field {\cs58\f5\fs16\lang1024 m_pIDataObjImage}:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 //TextRender initialization

\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 HRESULT     hr;
\par hr=CoCreateInstance(CLSID_TextImage, CLSCTX_SERVER, NULL, IID_IDataObject, (void *)&m_pIDataObjImage);
\par if (FAILED(hr))
\par \tab //TextImage not available, either fail or disable graphic rendering
\par //Success:  can now make use of TextImage object.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 This code is included here to show the {\cs58\f5\fs16\lang1024 NULL} parameter in the middle of the call to {\cs58\f5\fs16\lang1024 CoCreateInstance}{\i . }This is the \ldblquote outer unknown\rdblquote 
 and is only applicable to aggregation. Containment does not make use of the outer unknown concept and so this parameter should always be {\cs58\f5\fs16\lang1024 NULL}.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Now that the {\cs58\f5\fs16\lang1024 TextRender} object has {\cs58\f5\fs16\lang1024 TextImage\rquote s} {\cs58\f5\fs16\lang1024 IDataObject} it can delegate functionality to {\cs58\f5\fs16\lang1024 TextImage}
 as needed. The following pseudo-code illustrates how {\cs58\f5\fs16\lang1024 TextRender\rquote s} {\cs58\f5\fs16\lang1024 IDataObject::GetData} function might be implemented:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
HRESULT CTextRender::GetData(FORMATETC *pFE, STGMEDIUM *pSTM)
\par \tab \{
\par \tab switch ([format in FORMATETC])
\par \tab \tab \{
\par \tab \tab case <text>:
\par \tab \tab \tab //Make copy of text and return
\par \tab \tab case <metafile>:
\par \tab \tab case <bitmap>:
\par \tab \tab \tab //Insure TextImage has current text
\par \tab \tab \tab m_pIDataObjImage->SetData(<copy of our current text>);
\par \tab \tab \tab return m_pIDataObjImage->GetData(pFE, pSTM);
\par \tab \tab \}
\par \tab return <error>;
\par \tab \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Note that if the {\cs58\f5\fs16\lang1024 TextImage} object was modified at some later date to implement additional interfaces (such as {\cs58\f5\fs16\lang1024 IPersistFile}
) or was updated to also support rendering copies of text in memory just like {\cs58\f5\fs16\lang1024 TextRender}, {\b the code above would still function perfectly. }This is the {\i key} power of COM\rquote s reusability mechanisms over tradi
tional language-style implementation inheritance: the reused object can freely revise itself so long as it continues to provide the exact behavior it has provided in the past. Since the {\cs58\f5\fs16\lang1024 TextRender}
 object never bothers to query for any other interface on {\cs58\f5\fs16\lang1024 TextImage}, and because it never call\rquote s {\cs58\f5\fs16\lang1024 TextImage\rquote s} {\cs58\f5\fs16\lang1024 GetData}
 for any format other than metafile or bitmap, TextImage can implement any number of new interfaces and support any number of new formats in {\cs58\f5\fs16\lang1024 GetData}. All TextImage has to insure is that the behavior of {\cs58\f5\fs16\lang1024 
SetData} for text and the behavior of {\cs58\f5\fs16\lang1024 GetData} for metafiles and bitmaps remains the same.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Of course, this is just a simple example of containment. Real components will generally be much more complex and will generally make use of many inner objects and many more interfaces in this manner. But again, since the outer object only depends on the {
\i behavior} of the inner object and does not care how it goes about performing its operations, the inner object can be modified without requiring any recompilation or any other changes to the outer object. That is reusability at its finest.
\par {\*\bkmkstart _Toc324051615}{\*\bkmkstart _Toc324051800}{\*\bkmkstart _Toc324052042}{\pntext\pard\plain\b\i\fs22 6.6.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 
Reusability Through Aggregation{\*\bkmkend _Toc324051615}{\*\bkmkend _Toc324051800}{\*\bkmkend _Toc324052042}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Let\rquote s now say that we are planning to revise our TextRender object at a later time than out initial contain
ment implementation in the previous section. At that time we find that the implementor of the TextImage object at the time the implementor of the TextRender object sat down to work (or perhaps is making a revision o
f his object) that the vendor of the TextImage object has improved TextImage such that it implements everything that TextRender would like to do through its {\cs58\f5\fs16\lang1024 IDataObject} interface. That is, TextImage still accepts text through {
\cs58\f5\fs16\lang1024 SetData} but has recently added the ability to make copies of its text and provide those copies through {\cs58\f5\fs16\lang1024 GetData} in addition to metafiles and bitmaps.
\par In this case, the implementor of TextRender now sees that TextImage\rquote s implementation of {\cs58\f5\fs16\lang1024 IDataObject}{\i  }is exactly the implementation that Te
xtRender requires. What we, as the implementors of TextRender, would like to do now is simply expose TextImage\rquote s {\cs58\f5\fs16\lang1024 IDataObject} as our own as shown in Figure 6-4.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw19341\pich9048\picwgoal10965\pichgoal5130 \picscalex50\picscaley50 
0100090000034308000008003100000000000e00000026060f001200ffffffff000008000000e2f65cfe040860060a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b025cfee2f6050000000c020408221131000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000e0f65cfef00748060e00000026060f001200ffffffff000008000000e1fb5cfef007480607000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06fb01fb016106090874fef9fb050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06f901f9014806f0075cfee1fb050000001402000000000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff0000080000000902a80114074b0507000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06e800e80064052d07c0012102050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400040000
00f0010100090000001c06e600e6004b051407a8010902050000001402000000001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000000006f87f040000002d010100040000002e011800050000000a0200000000050000000902000000020400
00000201010015000000320a510361030900000054657874496d61676500490043004300280021006b0043004900430004000000020102001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000001019f87f040000002d01050004000000f00101
00040000002e011800050000000a020000000005000000090200000002040000000201010018000000320ae1033d030b00000028436f6e7461696e6564290028005700490049002800430021004a0042004a00280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff
000008000000daf9c6ff7bfa660007000000fc020000000000020000040000002d01010004000000f0010300040000002d0102000700000018047f0094fadefff2f9050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000
000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f001040007000000180466007bfac6ffdaf9050000001402
000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000071fa100090fc1a00040000002d01020007000000fc020100000000000000040000002d01040004000000f001010004000000f00103001c000000fb021000070000000000bc0200000000010202225379737465
6d0003d0bb55033002f87f4603000000000000957fc5773002f87f040000002d01010004000000f0010500030000001e00070000001604ba0090fc70ff71fa08000000fa0206000800000000000002040000002d01030005000000140214005af80500000013020e009ffe040000002d010200040000002d01040004000000
f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000cf7baffb7f97c001c000000fb0288ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c0000001019f87f040000002d010300040000
002e011800050000000a020000000005000000090200000002040000000201010019000000320a3b0035f70c000000495065727369737446696c6521005000430028003c001b003c00210049001b001b00420004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000
08000000e0f63a03b4f9fc031c000000fb0288ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c0000000019f87f040000002d01050004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010018000000320abb
0309f70b00000049446174614f626a65637465210057004300210043005d0043001b0042003c00220004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006efc99fee6ff7aff1c000000fb0270ff000000000000bc020000000000000000417269616c00
0f03d0bb550338f70f037884c577000000000c0000001019f87f040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a31ff9afc0a0000005465787452656e64657258005000500030006800500058005800500038000400000002
0102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d6f9340377fad40307000000fc020000000000020000040000002d010500070000001804ed0390fa4c03eef90500000014020e009ffe2d0000004201050000002800000008000000080000000100010000000000
200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804d4
0377fa3403d6f90500000014020e009ffe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006dfa800300028903040000002d010200040000002d01040004000000f001050004000000f0010600040000002d01010004000000f0010300030000001e000700000016042904
0002e0026dfa08000000fa0206000800000000000002040000002d0103000500000014028203e2f20500000013027f038309040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007afcecffca
fc480007000000fc020000000000020000040000002d01030008000000fa0206000800000000000002040000002d0105000700000018044800cafcecff7afc0500000014027f0383090a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000040fa2000a0fc400308000000fa02
06000800000000000002040000002d01060004000000f0010500040000002d0104000b0000001708e10244fa20009cfc5806f8fe200040fa040000002d010300040000002d0102000a0000002403030044fa3c036efac60228fac2020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
000800000053fc62001101c8011c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000000006f87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010024000000320aeb007cfc13000000
557365205365744461746120746f2074656c6c005c00480047002300560047002b005c0047002b00470024002a004e0024002b0047002300240004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a01af87f040000002d
01070004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010022000000320a85018efc1200000054657874496d616765206f6620746578742e4e00470048002a002400720047004e00470024004e002b0023002b00470047002b00230004000000020102000a000000
26060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000065fcd2038e0138051c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000000006f87f040000002d01050004000000f0010700040000002e011800050000
000a020000000005000000090200000002040000000201010022000000320a5b048efc120000004578706f73652054657874496d6167659273550048004e004e004700470024004e00470047002b002400710048004e0047002400470004000000020102001c000000fb0280ff000000000000bc02ff000000000000224172
69616c000f03d0bb550338f70f037884c577000000000c000000a01af87f040000002d01070004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320af5049cfc0b00000049446174614f626a6563744924005c0047002b00470064004e002300480047
002a0004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000000006f87f040000002d01050004000000f001070005000000090200000002040000000201010015000000320af50463ff09000000206469726563746c79632400
4e0023003200470048002a002400470004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d0104
0004000000f001060004000000f0010300040000002d01010004000000f00105000300000000002d01030004000000f0010100040000002701ffff0a000000260600}}
\par \pard\plain \s76\qc\li360\sb120\sa240\widctlpar \b\f4\fs20 Figure 6-4: When an inner object does a complete job implementing an\line interface, outer objects may want to expose the interface directly.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The only catch is that we must implement the proper behavior of the {\cs58\f5\fs16\lang1024 IUnknown} members in the inner object\rquote s (TextImage) {\cs58\f5\fs16\lang1024 IDataObject} interface: {
\cs58\f5\fs16\lang1024 AddRef}{\i  }and {\cs58\f5\fs16\lang1024 Release} have to affect the reference count on the outer object (TextRender) and not the reference count of the inner object. Furthermore, {\cs58\f5\fs16\lang1024 QueryInterface}
 has to be able to return the TextRender object\rquote s {\cs58\f5\fs16\lang1024 IPersistFile} interface. The solution is to inform the inner object that it is being used in an aggregation such that when it sees {\cs58\f5\fs16\lang1024 IUnknown}
 calls to its interfaces it can delegate those calls to the outer object.
\par One other catch remains: the outer object must have a means to control the lifetime of the inner object through {\cs58\f5\fs16\lang1024 AddRef}{\i  }and {\cs58\f5\fs16\lang1024 Release}
 as well as have a means to query for the interfaces that only exist on the inner object. For that reason, the inner object {\i must implement an isolated version of }{\cs58\i\f5\fs16\lang1024 IUnknown}{\i 
 that controls the inner object exclusively and never delegates to the outer object.}{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab An interface with such an {\f5\fs12 IUnknown}
 is sometimes called an \ldblquote inner\rdblquote  interface on the aggregated object. There may, in general, be several inner interfaces on an object.{\f5\fs12  IRpcProxyBuffer}{\pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \v\f5\fs12 {\xe {
\f5\fs12 IRpcProxyBuffer}}}, for example, is one. This is a property of the interface itself, not the implementation.}}{\i  }This requires that the inner object separates the {\cs58\f5\fs16\lang1024 IUnknown}
 members of its functional interfaces from an implementation of {\cs58\f5\fs16\lang1024 IUnknown} that strictly controls the inner object itself. In other words, the inner object, to support aggregation, must implement two sets of {\cs58\f5\fs16\lang1024 
IUnknown}{\i  }functions: delegating and non-delegating.
\par This, then, is the mechanism for making aggregation work:
\par {\pntext\pard\plain\fs20 1.\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}When creating the inner object, the outer object must pass its own {\cs58\f5\fs16\lang1024 IUnknown}
 to the inner object through the {\cs58\f5\fs16\lang1024 pUnkOuter} parameter of {\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance}{\i . }{\cs58\f5\fs16\lang1024 pUnkOuter} in this case is called the \ldblquote controlling unknown.\rdblquote 
\par {\pntext\pard\plain\fs20 2.\tab}The inner object must check {\cs58\f5\fs16\lang1024 pUnkOuter} in its implementation of {\cs58\f5\fs16\lang1024 CreateInstance}{\i . }If this parameter is non-{\cs58\f5\fs16\lang1024 NULL}
, then the inner object knows it is being created as part of an aggregate. If the inner object does not support aggregation, then it must fail with {\cs58\f5\fs16\lang1024 CLASS_E_NOAGGREGATION}. If aggregation is supported, the inner object saves {
\cs58\f5\fs16\lang1024 pUnkOuter} for later use, but does not call {\cs58\f5\fs16\lang1024 AddRef} on it. The reason is that the inner object\rquote s lifetime is entirely contained within the outer object\rquote 
s lifetime, so there is no need for the call and to do so would create a circular reference.
\par {\pntext\pard\plain\fs20 3.\tab}If the inner object detects a non-{\cs58\f5\fs16\lang1024 NULL} {\cs58\f5\fs16\lang1024 pUnkOuter} in {\cs58\f5\fs16\lang1024 CreateInstance}{\i ,} and the call requests the interface {\cs58\f5\fs16\lang1024 IUnknown }
itself (as is almost always the case), the inner object must be sure to return its non-delegating {\cs58\f5\fs16\lang1024 IUnknown}.
\par {\pntext\pard\plain\fs20 4.\tab}If the inner object itself aggregates other objects (which is unknown to the outer object) it must pass the same {\cs58\f5\fs16\lang1024 pUnkOuter} pointer it receives down to the next inner object.
\par {\pntext\pard\plain\fs20 5.\tab}When the outer object is queried for an interface it exposes from the inner object, the outer object calls {\cs58\f5\fs16\lang1024 QueryInterface} in the non-delegating {\cs58\f5\fs16\lang1024 IUnknown}
 to obtain the pointer to return to the client.
\par {\pntext\pard\plain\fs20 6.\tab}The inner object must delegate to the controlling unknown, that is, {\cs58\f5\fs16\lang1024 pUnkOuter}, all {\cs58\f5\fs16\lang1024 IUnknown}{\i  }calls occur
ring in any interface it implements other than the non-delegating {\cs58\f5\fs16\lang1024 IUnknown}.
\par \pard \qj\sa60\widctlpar Through these steps, the inner object is made aware of the outer object, obtains an {\cs58\f5\fs16\lang1024 IUnknown} to which it can delegate calls to insure proper behavior of reference counting and {\cs58\f5\fs16\lang1024 
QueryInterface}, and provides a way for the outer object to control the inner object\rquote s lifetime separately. The mechanism is illustrated in Figure 6-5.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw19341\pich9048\picwgoal10965\pichgoal5130 \picscalex50\picscaley50 
010009000003810e000008003100000000000e00000026060f001200ffffffff000008000000e2f65cfe040860060a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b025cfee2f6050000000c020408221131000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000e0f65cfef00748060e00000026060f001200ffffffff000008000000e1fb5cfef007480607000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c06fb01fb016106090874fef9fb050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c06f901f9014806f0075cfee1fb050000001402000000000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff0000080000000902a80114074b0507000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06e800e80064052d07c0012102050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400040000
00f0010100090000001c06e600e6004b051407a8010902050000001402000000001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000f00bf87f040000002d010100040000002e011800050000000a02000000001c000000fb0288ff00000000
0000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a01cf87f040000002d01050004000000f0010100040000002e011800050000000a02000000001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c
000000f00bf87f040000002d01010004000000f0010500040000002e011800050000000a02000000001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a01cf87f040000002d01050004000000f0010100040000002e011800050000000a02
000000001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000f00bf87f040000002d01010004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a720461030900000054
657874496d61676500490043004300280021006b0043004900430004000000020102001c000000fb0288ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a01cf87f040000002d01050004000000f0010100040000002e011800050000000a02000000000500
0000090200000002040000000201010019000000320a020515030c00000028416767726567617465642928005700490049002f00430049004300280042004a00280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000daf9c6ff7bfa660007000000fc
020000000000020000040000002d01010004000000f0010300040000002d0102000700000018047f0094fadefff2f9050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000
dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01010004000000f001040007000000180466007bfac6ffdaf9050000001402000000000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff00000800000071fa100090fc1a00040000002d01020007000000fc020100000000000000040000002d01040004000000f001010004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d0003d0bb55033002f87f4603000000000000
957fc5773002f87f040000002d01010004000000f0010500030000001e00070000001604ba0090fc70ff71fa08000000fa0206000800000000000002040000002d01030005000000140214005af80500000013020e009ffe040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f
000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000cf7baffb7f97c001c000000fb0288ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000a01cf87f040000002d010300040000002e011800050000000a020000000005000000
090200000002040000000201010019000000320a3b0035f70c000000495065727369737446696c6521005000430028003c001b003c00210049001b001b00420004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e0f63a03b4f9fc031c000000fb0288
ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01050004000000f0010300040000002e011800050000000a020000000005000000090200000002040000000201010018000000320abb0309f70b00000049446174614f626a65637465
210057004300210043005d0043001b0042003c00220004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006efc99fee6ff7aff1c000000fb0270ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c
000000a01cf87f040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a31ff9afc0a0000005465787452656e646572580050005000300068005000580058005000380004000000020102000a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff000008000000d6f9340377fad40307000000fc020000000000020000040000002d010500070000001804ed0390fa4c03eef90500000014020e009ffe2d000000420105000000280000000800000008000000010001000000000020000000000000000000000000000000000000
0000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804d40377fa3403d6f90500000014020e009ffe0a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006dfa800398028903040000002d010200040000002d01040004000000f001050004000000f0010600040000002d01010004000000f0010300030000001e0007000000160429049802e0026dfa08000000fa0206000800000000
000002040000002d01030005000000140282034af20500000013027f03b30a040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007afcecffcafc480007000000fc0200000000000200000400
00002d01030008000000fa0206000800000000000002040000002d0105000700000018044800cafcecff7afc0500000014027f03b30a0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000040fa2000a0fc400308000000fa0206000800000000000002040000002d01060004
000000f0010500040000002d0104000b0000001708e10244fa20009cfc5806f8fe200040fa040000002d010300040000002d0102000a0000002403030044fa3c036efac60228fac2020a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000053fc62001101c8011c000000fb02
80ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000f00bf87f040000002d010500040000002e011800050000000a020000000005000000090200000002040000000201010024000000320aeb007cfc13000000557365205365744461746120746f2074656c6c
015c00480047002300560047002b005c0047002b00470024002a004e0024002b0047002300240004000000020102001c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c0000000006f87f040000002d01070004000000f0010500040000002e011800
050000000a020000000005000000090200000002040000000201010022000000320a85018efc1200000054657874496d616765206f6620746578742e4e00470048002a002400720047004e00470024004e002b0023002b00470047002b00230004000000020102000a00000026060f000a00ffffffff0100000000000e0000
0026060f001200ffffffff00000800000065fcd2038e0138051c000000fb0280ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000f00bf87f040000002d01050004000000f0010700040000002e011800050000000a0200000000050000000902000000020400
00000201010022000000320a5b048efc120000004578706f73652054657874496d6167659273550048004e004e004700470024004e00470047002b002400710048004e0047002400470004000000020102001c000000fb0280ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c57700
0000000c0000000006f87f040000002d01070004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010018000000320af5049cfc0b00000049446174614f626a6563740024005c0047002b00470064004e002300480047002a0004000000020102001c000000fb0280ff
000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000f00bf87f040000002d01050004000000f001070005000000090200000002040000000201010015000000320af50463ff09000000206469726563746c790024004e0023003200470048002a0024004700040000
00020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ba05beff5b065e0007000000fc020000000000020000040000002d01070004000000f001030007000000180477007406d6ffd2050500000014027f03b30a2d00000042010500000028000000080000000800
00000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001070005000000090200000002050000000102ffffff02040000002d0106000700000018045e005b06beffba
050500000014027f03b30a0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000080658001006a801040000002d010200040000002d01040004000000f001060004000000f0010300040000002d01010004000000f0010500030000001e00070000001604a801b00658006805
08000000fa0206000800000000000002040000002d01030005000000140210ff0806050000001302e8020806040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d10492fe6207e4ff1c0000
00fb0288ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000f00bf87f040000002d010300040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a13ff5705080000004578706c6963697450003c0043001a00
1b003c001b00210004000000020102001c000000fb0288ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000a01cf87f040000002d01050004000000f00103001c000000fb0288ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f
037884c577000000000c000000f00bf87f040000002d01030004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010015000000320aa3fffa040900000049556e6b6e6f776e20002100570043003c004200430057004300210004000000020102000a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a0fc100070011800040000002d010200040000002d010400040000002d01010004000000f0010300030000001e00070000001604b800700170ffa0fc08000000fa0206000800000000000002040000002d0103000500000014021000d8f705
000000130210003006040000002d010200040000002d01040004000000f0010300040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000680148ff7804280107000000fc020000ffffff020000040000002d01030008000000fa0206000800000000000002
040000002d010500070000001b042801780448ff6801050000001402100030061c000000fb0290ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000
000201010016000000320ad0ffb8010a0000005465787452656e64657244003f003e00250051003e00450044003f002b0004000000020102001c000000fb0290ff000000000000bc02ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c0000000006f87f040000002d01070004000000f001
0600040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a5600e0010800000049556e6b6e6f776e1f00510044003f00440045005700440004000000020102001c000000fb0290ff000000000000bc020000000000000000417269616c000f03d0bb550338f70f037884c5
77000000000c000000901bf87f040000002d01060004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010015000000320adc00e0010900000046756e6374696f6e73004400450044003f0025001f00440045003e0004000000020102000a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff0000080000008802f801d806f80307000000fc020000ffffff020000040000002d01070004000000f0010300040000002d01020008000000fa0206000800000000000002040000002d01030004000000f0010500070000001b04f803d806f801880205000000140210
0030060a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006e020e02bb06e2031c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000a01cf87f040000002d01050004000000f001060004000000
2e011800050000000a020000000005000000090200000002040000000201010015000000320a9002a8020900000044656c6567617465200251003e0019003e003f003e001f003e001f0004000000020102001c000000fb0290ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c57700
0000000c000000901bf87f040000002d01060004000000f001050005000000090200000002040000000201010013000000320a900287040800000049556e6b6e6f776e1f0051003e0038003f003e0051003e0004000000020102001c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb5503
38f70f037884c577000000000c000000a01cf87f040000002d01050004000000f00106001c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f037884c577000000000c000000901bf87f040000002d01060004000000f0010500040000002e011800050000000a020000000005
000000090200000002040000000201010015000000320a1603ae020900000063616c6c7320696e200038003e001900190038001f0019003e001f0004000000020102001c000000fb0290ff0000000000009001ff00000000000022417269616c000f03d0bb550338f70f037884c577000000000c000000a01cf87f04000000
2d01050004000000f001060005000000090200000002040000000201010018000000320a160323040b00000049446174614f626a656374001f0051003e001f003f0057003e0019003e0038001f0004000000020102001c000000fb0290ff00000000000090010000000000000000417269616c000f03d0bb550338f70f0378
84c577000000000c000000901bf87f040000002d01060004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a9c031e030e000000746f205465787452656e6465722e1f003e00200044003e0038001f0051003f003e003e003e0026001f0004000000
020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c8011c01c802570308000000fa0206000800000000000002040000002d01050004000000f0010300040000002d0104000b00000017085703c4027001de015803c003a300c80107000000fc0200000000000200
00040000002d01030004000000f0010700040000002d0102000a0000002403030007022001b9018201f9019c010a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff
010000000000040000002d010200040000002d01040004000000f001050004000000f0010300040000002d01010004000000f0010600030000000000040000002d01030004000000f0010100040000002701ffff0a000000260600}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure 6-5: Aggregation requires an explicit implementation of {\i IUnknown} on the inner\line object and delegation of {\i IUnknown }function of any other interface to the outer object\rquote 
s\line {\i IUnknown} functions.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Now let\rquote s look at how this mechanism manifests in code. First off, the TextRender object no longer needs it\rquote s own {\cs58\f5\fs16\lang1024 IDataObject} implementation and can thus remove it from it
\rquote s class, but will need to add a member {\cs58\f5\fs16\lang1024 m_pUnkImage} to maintain the TextImage\rquote s non-delegating {\i IUnknown}:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
class CTextRender : public IPersistFile \{
\par \tab private:
\par \tab \tab ULONG\tab \tab m_cRef;\tab \tab \tab //Reference Count
\par \tab \tab char *\tab \tab m_pszText;\tab \tab //Pointer to allocated text
\par \tab \tab ULONG\tab \tab m_cchText;\tab \tab //Number of characters in m_pszText
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 
\par \tab \tab IUnknown *\tab m_pUnkImage;\tab \tab //TextImage IUnknown
\par \tab \tab //Other internal member functions here
\par 
\par \tab public:
\par \tab \tab [Constructor, Destructor]
\par 
\par \tab \tab //Outer object IUnknown
\par \tab \tab HRESULT QueryInterface(REFIID iid, void ** ppv);
\par \tab \tab ULONG AddRef(void);
\par \tab \tab ULONG Release(void);
\par 
\par \tab \tab //IPersistFile Member overrides
\par \tab \tab ...
\par \tab \};
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In the previous section we saw how the TextRender object would create a TextImage object for containment using {\cs58\f5\fs16\lang1024 CoCreateInstance} with the {\cs58\f5\fs16\lang1024 pUnkOuter} parameter set to {
\cs58\f5\fs16\lang1024 NULL}. In aggregation, this parameter will be TextRender\rquote s own {\cs58\f5\fs16\lang1024 IUnknown}{\i  }(obtained using a typecast). Furthermore, TextRender must request {\cs58\f5\fs16\lang1024 IUnknown}
 initially from TextImage (storing the pointer in {\cs58\f5\fs16\lang1024 m_pUnkImage}{\i )}:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 //TextRender initialization
\par HRESULT     hr;
\par hr=CoCreateInstance(CLSID_TextImage, CLSCTX_ SERVER, (IUnknown *)this, IID_IUnknown, (void *)&m_pUnkImage);
\par if (FAILED(hr))
\par \tab //TextImage not available, either fail or disable graphic rendering
\par //Success:  can now make use of TextImage object.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Now, since TextRender does not have it\rquote s own {\cs58\f5\fs16\lang1024 IDataObject} any longer, its implementation of {\cs58\f5\fs16\lang1024 QueryInterface} will use {\cs58\f5\fs16\lang1024 
m_pUnkImage} to obtain interface pointers:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
HRESULT CTextRender::QueryInterface(REFIID iid, void ** ppv) \{
\par \tab *ppv=NULL;
\par 
\par \tab //This code assumes an overloaded == operator for GUIDs exists
\par \tab if (IID_IUnknown==iid)
\par \tab \tab *ppv=(void *)(IUnknown *)this;
\par 
\par \tab if (IID_IPersitFile==iid)
\par \tab \tab *ppv=(void *)(IPersistFile *)this;
\par 
\par \tab if (IID_IDataObject==iid)
\par \tab \tab return m_pUnkImage->QueryInterface(iid, ppv);
\par 
\par \tab if (NULL==*ppv)
\par \tab \tab return E_NOINTERFACE;\tab \tab //iid not supported.
\par \tab 
\par \tab //Any call to anyone\rquote s AddRef is our own.
\par \tab AddRef();
\par \tab return NOERROR;
\par \tab \}
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Note that delegating {\cs58\f5\fs16\lang1024 QueryInterface}
 to the inner object is done only for those interfaces that the outer object knows it wants to expose. The outer object should not delegate the query as a default case, for such blind forwarding without an understanding of the semantic being forwarded wil
l almost assuredly break the outer object should the inner one be revised with new functionality.
\par {\pntext\pard\plain\fs20\lang1024 6.6.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Caching interfaces on the inner object{\b0 
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 In order to avoid reference counting cycles, special action is needed if the outer object wishes to cache pointers to the inner object\rquote s interfaces.
\par Specifically, if the outer object wishes to cache a to an inner object\rquote s interface, once it has obtained the interface from the inner object, the outer object should invoke {\cs58\f5\fs16\lang1024 Release} on the {\cs58\f5\fs16\lang1024 punkOuter }
that was given to the inner object at its instantiation time.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
\par \pard \s57\fi-720\li1440\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 // Obtaining inner object interface pointer
\par pUnkInner->QueryInterface(IID_IFoo, &pIFoo);
\par pUnkOuter->Release();
\par \tab 
\par // Releasing inner object interface pointer
\par pUnkOuter->AddRef();
\par pIFoo->Release();
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 It is suggested that to allow inner objects to do better resource management that controlling objects delay the acquisition of cached pointers and release them when there is no possible use for them.
\par {\*\bkmkstart _Toc298215837}{\*\bkmkstart _Toc298216207}{\pntext\pard\plain\b\fs20\lang1024 6.6.2.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 
Efficiency at any Depth of Aggregation{\*\bkmkend _Toc298215837}{\*\bkmkend _Toc298216207}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Aggregation has one interesting aspect when aggregates are used on more than one level of an object implementation. Imagine that the TextImage object in the previous example is itself an aggregate object that uses 
other inner objects. In such a case TextImage will be passing some controlling unknown to those other inner objects. If TextImage is not being aggregated by anyone else, then the controlling unknown is its own; otherwise it passes the {
\cs58\f5\fs16\lang1024 pUnkOuter} from {\cs58\f5\fs16\lang1024 IClassFactory::CreateInstance} on down the line, and any other inner objects that are aggregates themselves do the same.
\par The net result is that any object in an aggregation, no matter how deeply it is buried in the overall structure, will almost always delegate directly to the controlling unknown if it\rquote 
s interface is exposed from that final outer object. Therefore performance and efficiency of multiple levels of aggregation is not an issue. At worst each delegation is a single extra function call.
\par {\*\bkmkstart _Toc324051616}{\*\bkmkstart _Toc324051801}{\*\bkmkstart _Toc324052043}{\*\bkmkstart _Toc335190105}{\*\bkmkstart _Toc337870051}{\*\bkmkstart _Toc339182964}{\pntext\pard\plain\b 6.7\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Emulating Other Servers{\*\bkmkend _Toc324051616}{\*\bkmkend _Toc324051801}{\*\bkmkend _Toc324052043}{\*\bkmkend _Toc335190105}{\*\bkmkend _Toc337870051}{\*\bkmkend _Toc339182964}

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The final topic related to COM Servers for this chapter is what is known as emulation: the ability for one server associated with one {\cs58\f5\fs16\lang1024 CLSID} to emulate a server of another {
\cs58\f5\fs16\lang1024 CLSID}. A server that can emulate another is responsible for providing com
patible behavior for a different class through a different implementation. This forms the basis for allowing end-users the choice in which servers are used for which objects, as long as the behavior is compatible between those servers.
\par As far as COM is concerned, it only has to provide some way for a server to indicate that it wishes to emulate some {\cs58\f5\fs16\lang1024 CLSID}. To that end, the COM Library supplies the function {\cs58\f5\fs16\lang1024 CoTreatAsClass}
 to establish an emulation that remains in effect (persistently) until canceled or changed. In addition it supplies {\cs58\f5\fs16\lang1024 CoGetTreatAsClass} to allow a caller to determine if a given CLSID is marked for emulation.
\par {\pntext\pard\plain\b\fs20\lang1024 6.7.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoTreatAsClass{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 }{\b0\fs12 CoTreatAsClass}{\fs12 }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoTreatAsClass(clsidOld, clsidNew)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Establish or cancel an emulation relationship between two classes. When {\cs58\f5\fs16\lang1024 clsidNew}{\i  }is emulating {\cs58\f5\fs16\lang1024 clsidOld}, calls to {\cs58\f5\fs16\lang1024 CoGetClassObject} with 
{\cs58\f5\fs16\lang1024 clsidOld}{\i  }will transparently use {\cs58\f5\fs16\lang1024 clsidNew}{\i . }Thus, for example, creating an object of {\cs58\f5\fs16\lang1024 clsidOld}{\i  }will in fact launch the server for {\cs58\f5\fs16\lang1024 clsidNew}{\i  
}and have it create the object instead.
\par This function does no validation on whether an appropriate registration entries exist for {\cs58\f5\fs16\lang1024 clsidNew}.
\par An emulation is canceled by calling this function with {\cs58\f5\fs16\lang1024 clsidOld} equal to the original class and {\cs58\f5\fs16\lang1024 clsidNew} set to {\cs58\f5\fs16\lang1024 CLSID_NULL}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 clsidOld\tab REFCID}\tab The class to be emulated.
\par {\cs58\f5\fs16\lang1024 clsidNew\tab REFCID}\tab The class which should emulate {\cs58\f5\fs16\lang1024 clsidOld}. This replaces any existing emulation for {\cs58\f5\fs16\lang1024 clsidOld}. May be {\cs58\f5\fs16\lang1024 CLSID_NULL}
, in which case any existing emulation for {\cs58\f5\fs16\lang1024 clsidOld} is removed.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\f4\fs18 {\cs58\f5\fs16\lang1024 CO_E_CLASSNOTREG\cell }{\i to be described.}\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 
CO_E_READREGDB\cell }{\i to be described.}\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CO_E_WRITEREGDB\cell }{\i to be described.}
\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }
An unspecified error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\fs20\lang1024 6.7.1.2\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\b\f4\fs20\lang1024 CoGetTreatAsClass{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 \ldblquote CoGetTreatAsClass\rdblquote }}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoGetTreatAsClass(clsidOld, pclsidNew)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the existing emulation information for a given class. If no emulation entry exists for {\cs58\f5\fs16\lang1024 clsidOld} then {\cs58\f5\fs16\lang1024 clsidOld} is returned in {\cs58\f5\fs16\lang1024 pclsidNew
}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 clsidOld\tab REFCID}\tab The class for which the emulation information is to be retrieved.
\par {\cs58\f5\fs16\lang1024 pclsidNew\tab CLSID *}\tab The place at which to return the class, if any, which emulates {\cs58\f5\fs16\lang1024 clsidOld}. {\cs58\f5\fs16\lang1024 clsidOld} is returned if there is no such class. {\cs58\f5\fs16\lang1024 pclsidNew
} may not be {\cs58\f5\fs16\lang1024 NULL}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. A new, (possibly) different {\cs58\f5\fs16\lang1024 CLSID} is returned through {\cs58\f5\fs16\lang1024 *pclisdNew}.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_FALSE\cell }Success.  The class is emulating itself.\cell \pard\plain \widctlpar\intbl \f4\fs20 {
\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CO_E_READREGDB\cell }{\i .}\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unspecified error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s44\qj\sb60\sa58\widctlpar 
\f4\fs20 How the COM Library implements these functions depends upon the structure of the system registry. For example, under Microsoft Windows, COM uses an additional subkey under an object\rquote s {\cs58\f5\fs16\lang1024 CLSID} key in the form of:

\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 TreatAs = \{{\i <new CLSID>}\}

\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 When the Windows\rquote  COM implementation of {\cs58\f5\fs16\lang1024 CoGetClassObject} attempts to locate a server for a {\cs58\f5\fs16\lang1024 CLSID}, it will always call {\cs58\f5\fs16\lang1024 
CoGetTreatAsClass}{\i  }to retrieve the actual {\cs58\f5\fs16\lang1024 CLSID} to use. Since {\cs58\f5\fs16\lang1024 CoGetTreatAsClass} will return the same {\cs58\f5\fs16\lang1024 CLSID} as passed in if no emulation exists, COM doesn\rquote 
t have to do any special case checks for emulation.
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par This page intentionally left blank.
\par {\*\bkmkstart _Toc335041420}{\*\bkmkstart _Toc337439341}{\*\bkmkstart _Toc337870052}{\*\bkmkstart _Toc339182965}{\pntext\pard\plain\b\fs28 7.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1
\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 Interface Remoting{\*\bkmkend _Toc335041420}{\*\bkmkend _Toc337439341}{\*\bkmkend _Toc337870052}{\*\bkmkend _Toc339182965}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
In COM, clients communicate with objects solely through the use of vtable-based interface instances. The state of the object is manipulated by invoking functions on those interfaces. For each interface method, the object provides an implementation that do
es the appropriate manipulation of the object internals.
\par {\i Interface remoting }provides the infrastructure and mechanisms to allow a method invocation to return an interface pointer to an object that is in a different process, perhaps even on a different machine. The infra
structure that performs the remoting of interfaces is transparent to both the client and the object server. Neither the client or object server is necessarily aware that the other party is in fact in a different process.
\par This chapter first explains how interface remoting works giving mention to the interfaces and COM API functions involved. The speci
fications for the interfaces and the API functions themselves are given later in this chapter. There is also a brief discussion about concurrency management at the end of the chapter that involves an interface called {\cs58\f5\fs16\lang1024 IMessageFilter
}.
\par {\*\bkmkstart _Toc324051618}{\*\bkmkstart _Toc324051803}{\*\bkmkstart _Toc324052045}{\*\bkmkstart _Toc335041421}{\*\bkmkstart _Toc337439342}{\*\bkmkstart _Toc337870053}{\*\bkmkstart _Toc339182966}{\pntext\pard\plain\b 7.1\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 How Interface Remoting Works{\*\bkmkend _Toc324051618}{\*\bkmkend _Toc324051803}{\*\bkmkend _Toc324052045}{\*\bkmkend _Toc335041421}
{\*\bkmkend _Toc337439342}{\*\bkmkend _Toc337870053}{\*\bkmkend _Toc339182966}
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 The crux of the problem to be addressed in interface remoting can be stated as follows:
\par \pard \qj\li720\ri720\sa60\widctlpar \ldblquote Given an already existing remoted-interface connection between a client process and a server process, how can a method invocation through that connection return a new inter
face pointer so as to create a second remoted-interface connection between the two processes?\rdblquote 
\par \pard \qj\sa60\widctlpar We state the problem in this way so as to avoid for the moment the issue of how an initial connection is made between the client and the server process; we will return to that later.
\par \pard\plain \s40\qc\keep\keepn\widctlpar\pvpara\posxr\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {{\pict\wmetafile8\picw22860\pich11430\picwgoal12962\pichgoal6481 \picscalex50\picscaley50\piccropl707\piccropt490\piccropr3816\piccropb2779 
0100090000038508000008003300000000000e00000026060f001200ffffffff000008000000e0f5f0fa200a10050a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000050000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02f0fae0f5050000000c02200a401433000000f700000317000000000091919100ffffff0000000000800000000080000080800000000080008000800000808000c0c0
c000c0dcc000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff00040000003402000003000000350007000000fc020000ffffff020000040000002d01010008000000fa02050000000000ffffff00040000002d010200070000001b041105210af0fae0f50e0000
0026060f001200ffffffff0000080000004af718fe28f9bafe0e00000026060f001200ffffffff00000800000070f848fe28f982fe0e00000026060f001200ffffffff00000800000070f848fea9f882fe07000000fc020000ffffff020000040000002d01030008000000fa0206000800000000000002040000002d010400
07000000180482fea9f848fe70f8050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a3f85ffe28f967fe040000002d01020007000000fc020100000000000000040000002d01050004000000f001040004000000f001030004000000f001010003
0000001e0007000000160407ff28f9bffda3f808000000fa0206000800000000000002040000002d0101000500000014025ffe26f80500000013025ffe9df9040000002d010200040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff0000080000004af718fe66f8bafe10000000fb02b0ff00000000000090010000000000000000417269616c008fc3040000002d010100040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a7dfe84f70400000049
466f6f160031002d002c0004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000016f82dfc2dfbe2fc10000000fb02a0ff000000000000bc02ff00000000000022417269616c0073c2040000002d010300
04000000f0010100040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320aa0fc50f80e000000436c69656e742050726f6365737345001b001b0035003b0020001a00400026003a00360035003600350004000000020102000a00000026060f000a00ffffffff0100000000
000e00000026060f001200ffffffff00000800000060ff2dfc9702e2fc10000000fb02a0ff000000000000bc02ff00000000000022417269616c008fc3040000002d01010004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320aa0fc9aff0e000000
5365727665722050726f636573734000350026003500360025001b00400025003b00350035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a6fc3bfbaefc7304040000002d010200040000002d01050010000000fb0210000700000000
00bc02000000000102022253797374656d0005040000002d01030004000000f0010100030000001e0007000000160473048efe3bfbc6fa08000000fa0206000800000091919102040000002d0101000500000014020bf29efc0500000013029b0d9efc0500000014020bf2aefc0500000013029b0daefc040000002d010200
040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002dff64fdc30220000e00000026060f001200ffffffff0000080000002dff6cfe0b010eff0e00000026060f001200ffffffff00000800000053009cfe0b01d6
fe0e00000026060f001200ffffffff00000800000053009cfe8c00d6fe07000000fc020000ffffff020000040000002d01010008000000fa0206000800000000000002040000002d010400070000001804d6fe8c009cfe53000500000014029b0daefc0a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff0000080000008600b3fe0b01bbfe040000002d010200040000002d01050004000000f001040004000000f0010100030000001e000700000016045bff0b0113fe860008000000fa0206000800000000000002040000002d010100050000001402b3fe0900050000001302b3fe8001040000002d010200040000
002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002dff6cfe49000eff10000000fb02b0ff00000000000090010000000000000000417269616c008fc3040000002d01
0100040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320ad1fe67ff0400000049466f6f160031002d002c0004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
00080000006d01eefda701a6fe0e00000026060f001200ffffffff0000080000006d01eefda70127fe07000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d01060007000000180427fea701eefd6d01050000001402b3fe80010a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff000008000000880121fe9001a6fe040000002d010200040000002d01050004000000f001060004000000f0010400040000002d01030004000000f0010100030000001e00070000001604a6fe300221fee80008000000fa0206000800000000000002040000002d010100050000
001402a4fd88010500000013021bff8801040000002d010200040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c20064fda20206fe10000000fb02b0ff0000
0000000090010000000000000000417269616c008fc3040000002d010100040000002e011800050000000a020000000005000000090200000002040000000201010013000000320ac9fdfc000800000049556e6b6e6f776e16003a002c0028002d002c003a002d0004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000db0068fec302200007000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d010600070000001b042000c30268fedb000500000014021bff88010a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff000008000000240199fe7e029bff10000000fb02b0ff00000000000090010000000000000000417269616c007fc1040000002d01070004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010010000000320afefe5e01060000007365727665
7228002c001b0028002d001a00040000000201020010000000fb02b0ff00000000000090010000000000000000417269616c008fc3040000002d01010004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a5eff6201060000006f626a6563742c00
2d0012002c002800160004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005af98efd94f946fe0e00000026060f001200ffffffff0000080000005af98efd94f9c7fd07000000fc020000ffffff0200
00040000002d01070004000000f0010400040000002d01020008000000fa0206000800000000000002040000002d01040004000000f0010600070000001804c7fd94f98efd5af90500000014021bff88010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000075f9c1fd7df9
46fe040000002d010200040000002d01050004000000f001040004000000f0010700040000002d01030004000000f0010100030000001e0007000000160446fe1dfac1fdd5f808000000fa0206000800000000000002040000002d01010005000000140244fd75f9050000001302bbfe75f9040000002d010200040000002d
01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000daf802fe9efa60ff07000000fc020000ffffff020000040000002d01010008000000fa02060008000000000000020400
00002d010400070000001b0460ff9efa02fedaf8050000001402bbfe75f90a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a6f804fd86faa6fd10000000fb02b0ff00000000000090010000000000000000417269616c0073c2040000002d010600040000002e01180005
0000000a020000000005000000090200000002040000000201010013000000320a69fde0f80800000049556e6b6e6f776e16003a002c0028002d002c003a002d0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000ff92afe60fa2cff10000000fb02
b0ff00000000000090010000000000000000417269616c009bc1040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a8ffe49f9060000006f626a6563742c002d0012002c0028001600040000000201020010000000fb02b0ff00
000000000090010000000000000000417269616c0073c2040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320aeffe51f90500000070726f7879002c001b002d002800280004000000020102000a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff0000080000000bfb2cfe15ff15ff08000000fa0206000800000000000002040000002d01070004000000f0010400040000002d0105000c0000002503040079fb53fe8cfd2cfed8fb0dffa0feccfe07000000fc020000000000020000040000002d01040004000000f00101
00040000002d0102000a000000240303000dffc1fe93feaafe99fef0fe0a000000240303000cfb5cfe84fb75fe7efb2ffe0a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d0102000400
00002d01050004000000f001070004000000f0010400040000002d01030004000000f001060003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070707070707070700ff0707070700ffffffffffffffffff00070707
07f8f80002ef1b530b871a9e04171a000000003b06471a360bc71a000000000000f71900}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Let\rquote s look at an example. Suppose we have an object in a server process which supports an interface {\cs58\f5\fs16\lang1024 IFoo}, and that interface of the object (and {\cs58\f5\fs16\lang1024 IUnknown}
) has sometime in the past been remoted to a client process through some means not here specified. In the client process, there is an object proxy which supports the exact same interfaces as does the original server object, but whose {\i implementations}
 of methods in those interfaces are special, in that they forward calls they receive on to calls on the real method imple\-menta\-tions back in the server object. We say that the method implementations in the object proxy {\i marshal }
the data, which is then conveyed to the server process, where it is {\i unmarshaled.} That is, \ldblquote marshaling\rdblquote  refers to the packaging up of method arguments for transmission to a remote process; \ldblquote unmarshaling\rdblquote 
 refers to the unpackaging of this data at the receiving end. Notice that in a given call, the method arguments are marshaled and unmarshaled in one direction, while the return values are marshaled and unmarshaled in the other direction.
\par \pard \qj\sa60\keepn\widctlpar For concreteness, let us suppose that the {\cs58\f5\fs16\lang1024 IFoo} interface is defined as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IFoo }
: IUnknown \{
\par \tab IBar *\tab {\b ReturnABar}();
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 If the in the client process {\cs58\f5\fs16\lang1024 pFoo->ReturnABar()} is invoked, then the object proxy will forward this call on to the{\cs58\f5\fs16\lang1024  IFoo::ReturnABar()}
 method in the server object, which will do whatever this method is supposed to do in order to come up with some appropriate{\cs58\f5\fs16\lang1024  IBar*}. The server object is then required to return this {\cs58\f5\fs16\lang1024 IBar*}
 back to the client process. The act of doing this will end up creating a second connection between the two processes:
\par \pard\plain \s40\qc\keep\keepn\widctlpar\pvpara\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {{\pict\wmetafile8\picw22860\pich11430\picwgoal12962\pichgoal6481 \picscalex50\picscaley50\piccropl864\piccropt490\piccropr4306\piccropb547 
010009000003a90e000008003300000000000e00000026060f001200ffffffff000008000000e0f5f0fa200a10050a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000050000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02f0fae0f5050000000c02200a401433000000f700000317000000000091919100ffffff0000000000800000000080000080800000000080008000800000808000c0c0
c000c0dcc000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff00040000003402000003000000350007000000fc020000ffffff020000040000002d01010008000000fa02050000000000ffffff00040000002d010200070000001b041105210af0fae0f50e0000
0026060f001200ffffffff0000080000004af718fe28f9bafe0e00000026060f001200ffffffff00000800000070f848fe28f982fe0e00000026060f001200ffffffff00000800000070f848fea9f882fe07000000fc020000ffffff020000040000002d01030008000000fa0206000800000000000002040000002d010400
07000000180482fea9f848fe70f8050000001402000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a3f85ffe28f967fe040000002d01020007000000fc020100000000000000040000002d01050004000000f001040004000000f001030004000000f001010003
0000001e0007000000160407ff28f9bffda3f808000000fa0206000800000000000002040000002d0101000500000014025ffe26f80500000013025ffe9df9040000002d010200040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff0000080000004af718fe66f8bafe10000000fb02b0ff00000000000090010000000000000000417269616c002b6b040000002d010100040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a7dfe84f70400000049
466f6f160031002d002c0004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000016f82dfc2dfbe2fc10000000fb02a0ff000000000000bc02ff00000000000022417269616c00036b040000002d010300
04000000f0010100040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320aa0fc50f80e000000436c69656e742050726f6365737345001b001b0035003b0020001a00400026003a00360035003600350004000000020102000a00000026060f000a00ffffffff0100000000
000e00000026060f001200ffffffff00000800000060ff2dfc9702e2fc10000000fb02a0ff000000000000bc02ff00000000000022417269616c002b6b040000002d01010004000000f0010300040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320aa0fc9aff0e000000
5365727665722050726f636573734000350026003500360025001b00400025003b00350035003600350004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000051fd44fb59fd7c04040000002d010200040000002d01050010000000fb0210000700000000
00bc02000000000102022253797374656d0005040000002d01030004000000f0010100030000001e000700000016047c0439ff44fb71fb08000000fa0206000800000091919102040000002d01010005000000140214f249fd050000001302a40d49fd05000000140214f259fd050000001302a40d59fd040000002d010200
040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002dff64fdc30220000e00000026060f001200ffffffff0000080000002dff6cfe0b010eff0e00000026060f001200ffffffff00000800000053009cfe0b01d6
fe0e00000026060f001200ffffffff00000800000053009cfe8c00d6fe07000000fc020000ffffff020000040000002d01010008000000fa0206000800000000000002040000002d010400070000001804d6fe8c009cfe5300050000001402a40d59fd0a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff0000080000008600b3fe0b01bbfe040000002d010200040000002d01050004000000f001040004000000f0010100030000001e000700000016045bff0b0113fe860008000000fa0206000800000000000002040000002d010100050000001402b3fe0900050000001302b3fe8001040000002d010200040000
002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002dff6cfe49000eff10000000fb02b0ff00000000000090010000000000000000417269616c002b6b040000002d01
0100040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320ad1fe67ff0400000049466f6f160031002d002c0004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
00080000006d01eefda701a6fe0e00000026060f001200ffffffff0000080000006d01eefda70127fe07000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d01060007000000180427fea701eefd6d01050000001402b3fe80010a00000026060f000a00ffffffff0100
000000000e00000026060f001200ffffffff000008000000880121fe9001a6fe040000002d010200040000002d01050004000000f001060004000000f0010400040000002d01030004000000f0010100030000001e00070000001604a6fe300221fee80008000000fa0206000800000000000002040000002d010100050000
001402a4fd88010500000013021bff8801040000002d010200040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c20064fda20206fe10000000fb02b0ff0000
0000000090010000000000000000417269616c002b6b040000002d010100040000002e011800050000000a020000000005000000090200000002040000000201010013000000320ac9fdfc000800000049556e6b6e6f776e16003a002c0028002d002c003a002d0004000000020102000a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000db0068fec302200007000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d010600070000001b042000c30268fedb000500000014021bff88010a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff000008000000240199fe7e029bff10000000fb02b0ff00000000000090010000000000000000417269616c00736a040000002d01070004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010010000000320afefe5e01060000007365727665
7228002c001b0028002d001a00040000000201020010000000fb02b0ff00000000000090010000000000000000417269616c002b6b040000002d01010004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a5eff6201060000006f626a6563742c00
2d0012002c002800160004000000020102000a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005af98efd94f946fe0e00000026060f001200ffffffff0000080000005af98efd94f9c7fd07000000fc020000ffffff0200
00040000002d01070004000000f0010400040000002d01020008000000fa0206000800000000000002040000002d01040004000000f0010600070000001804c7fd94f98efd5af90500000014021bff88010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000075f9c1fd7df9
46fe040000002d010200040000002d01050004000000f001040004000000f0010700040000002d01030004000000f0010100030000001e0007000000160446fe1dfac1fdd5f808000000fa0206000800000000000002040000002d01010005000000140244fd75f9050000001302bbfe75f9040000002d010200040000002d
01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000daf802fe9efa60ff07000000fc020000ffffff020000040000002d01010008000000fa02060008000000000000020400
00002d010400070000001b0460ff9efa02fedaf8050000001402bbfe75f90a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a6f804fd86faa6fd10000000fb02b0ff00000000000090010000000000000000417269616c00ef6a040000002d010600040000002e01180005
0000000a020000000005000000090200000002040000000201010013000000320a69fde0f80800000049556e6b6e6f776e16003a002c0028002d002c003a002d0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000ff92afe60fa2cff10000000fb02
b0ff00000000000090010000000000000000417269616c00736a040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a8ffe49f9060000006f626a6563742c002d0012002c0028001600040000000201020010000000fb02b0ff00
000000000090010000000000000000417269616c00ef6a040000002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320aeffe51f90500000070726f7879002c001b002d002800280004000000020102000a00000026060f000a00ffffffff
0100000000000e00000026060f001200ffffffff0000080000000bfb2cfe15ff15ff08000000fa0206000800000000000002040000002d01070004000000f0010400040000002d0105000c0000002503040079fb53fe8cfd2cfed8fb0dffa0feccfe07000000fc020000000000020000040000002d01040004000000f00101
00040000002d0102000a000000240303000dffc1fe93feaafe99fef0fe0a000000240303000cfb5cfe84fb75fe7efb2ffe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000088f8080240f942020e00000026060f001200ffffffff00000800000088f80802c1f842020700
0000fc020000ffffff020000040000002d01010004000000f001040008000000fa0206000800000000000002040000002d01040004000000f00107000700000018044202c1f8080288f8050000001402bbfe75f90a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000bbf81f
0240f92702040000002d010200040000002d01050004000000f001040004000000f0010100040000002d01030004000000f0010600030000001e00070000001604c70240f97f01bbf808000000fa0206000800000000000002040000002d0101000500000014021f023ef80500000013021f02b5f9040000002d0102000400
00002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006ff7d8017ef87a0210000000fb02b0ff00000000000090010000000000000000417269616c002b6b040000002d
010100040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a3d02a9f70400000049426172160036002c001b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b005c02230196020e0000002606
0f001200ffffffff0000080000006b005c02a400960207000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d0106000700000018049602a4005c026b000500000014021f02b5f90a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
00080000009e00730223017b02040000002d010200040000002d01050004000000f001060004000000f0010400040000002d01030004000000f0010100030000001e000700000016041b032301d3019e0008000000fa0206000800000000000002040000002d01010005000000140273022100050000001302730298010400
00002d010200040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000052ff2c026100ce0210000000fb02b0ff00000000000090010000000000000000417269616c
002b6b040000002d010100040000002e011800050000000a02000000000500000009020000000204000000020101000d000000320a91028cff0400000049426172160036002c001b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008501ae01bf01
66020e00000026060f001200ffffffff0000080000008501ae01bf01e70107000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d010600070000001804e701bf01ae018501050000001402730298010a00000026060f000a00ffffffff0100000000000e00000026060f
001200ffffffff000008000000a001e101a8016602040000002d010200040000002d01050004000000f001060004000000f0010400040000002d01030004000000f0010100030000001e0007000000160466024802e101000108000000fa0206000800000000000002040000002d0101000500000014026401a00105000000
1302db02a001040000002d010200040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000da002401ba02c60110000000fb02b0ff00000000000090010000000000
000000417269616c002b6b040000002d010100040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a890114010800000049556e6b6e6f776e16003a002c0028002d002c003a002d0004000000020102000a00000026060f000a00ffffffff0100000000000e0000002606
0f001200ffffffff000008000000f3002802db02e00307000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d010600070000001b04e003db022802f300050000001402db02a0010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00
00080000003c01590296025b0310000000fb02b0ff00000000000090010000000000000000417269616c00736a040000002d01070004000000f0010100040000002e011800050000000a020000000005000000090200000002040000000201010010000000320abe0276010600000073657276657228002c001b0028002d00
1a00040000000201020010000000fb02b0ff00000000000090010000000000000000417269616c002b6b040000002d01010004000000f0010700040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a1e037a01060000006f626a6563742c002d0012002c002800160004
000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000072f94e01acf906020e00000026060f001200ffffffff00000800000072f94e01acf9870107000000fc020000ffffff020000040000002d01070004000000f0010400040000002d01020008000000fa02
06000800000000000002040000002d01040004000000f00106000700000018048701acf94e0172f9050000001402db02a0010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008df9810195f90602040000002d010200040000002d01050004000000f001040004000000f0
010700040000002d01030004000000f0010100030000001e00070000001604060235fa8101edf808000000fa0206000800000000000002040000002d01010005000000140204018df90500000013027b028df9040000002d010200040000002d01050004000000f0010100040000002701ffff0a00000026060f000a00ffff
ffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f2f8c201b6fa200307000000fc020000ffffff020000040000002d01010008000000fa0206000800000000000002040000002d010400070000001b042003b6fac201f2f80500000014027b028df90a
00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000bef8c4009efa660110000000fb02b0ff00000000000090010000000000000000417269616c00ef6a040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010013000000
320a2901f8f80800000049556e6b6e6f776e16003a002c0028002d002c003a002d0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000027f9ea0178faec0210000000fb02b0ff00000000000090010000000000000000417269616c00736a040000002d
01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a4f0261f9060000006f626a6563742c002d0012002c0028001600040000000201020010000000fb02b0ff00000000000090010000000000000000417269616c00ef6a040000002d010600
04000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320aaf0269f90500000070726f7879002c001b002d002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000023fbec012d
ffd50208000000fa0206000800000000000002040000002d01070004000000f0010400040000002d0105000c0000002503040091fb1302a4fdec01f0fbcd02b8fe8c0207000000fc020000000000020000040000002d01040004000000f0010100040000002d0102000a0000002403030025ff8102abfe6a02b1feb0020a00
00002403030024fb1c029cfb350296fbef010a00000026060f000a00ffffffff0100000000000e00000026060f001200544e505004000800000000000000000000000a00000026060f000a00ffffffff010000000000040000002d010200040000002d01050004000000f001070004000000f0010400040000002d01030004
000000f00106000300000000000053706c697420486f72697a6f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006520436c65726b2e2e2e3b35333b433a5c415050535c57494e52554c45535c00}}

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 It is the procedure by which this second connection is established which is the subject of our discussion here. This process involves two steps:
\par \pard \qj\fi-360\li1080\sa60\widctlpar 1.\tab On the server side, the {\cs58\f5\fs16\lang1024 IBar*} is packaged or marshaled into a data packet.
\par 2.\tab The data packet is conveyed by some means to the client process, where the data it contains is unmarshaled to create the new object proxy.
\par \pard\plain \s84\qj\sa60\widctlpar \f4\fs20 The term \ldblquote marshaling\rdblquote  is a general one that is applied in the industry to the packaging of any particular data type, not just interface pointers, into a data packet for trans
mission through an RPC infrastructure. Each different data type has different rules for how it is to marshaled: integers are to be stored in a certain way, strings are to be stored in a certain way, etc.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab In fact, there exist several standard sets of rules, each promoted by a different organization. Two common such sets of rules are known as \ldblquote 
Network Data Representation\rdblquote  (NDR) and \ldblquote External Data Representation\rdblquote  (XDR) chiefly promoted respectively by the Open Software Foundation and Sun Microsystems. ASN.1 is another standard for the same sort of technology.}}
 Likewise, marshaled interface pointers are to be stored in a certain way; the Component Object Model function {\cs58\f5\fs16\lang1024 CoMarshalInterface}{\f5\fs16 ()}
 contains the knowledge of how this is to be done (note that we will in this document not mention further any kind of marshaling other than marshaling of interface pointers; that subject is well-explored in existing RPC systems).
\par The process begins with the code doing the marshaling of the returned {\cs58\f5\fs16\lang1024 IBar*} interface. This code has in hand a pointer to an interface that it knows in fact to be an {\cs58\f5\fs16\lang1024 IBar*} and that i
t wishes to marshal. To do so it calls {\cs58\f5\fs16\lang1024 CoMarshalInterface}{\f5\fs16 ()}. The first step in {\cs58\f5\fs16\lang1024 CoMarshalInterface}{\f5\fs16 ()}
 involves finding out whether the object of which this is an interface in fact supports {\i custom object marshaling} (often simply referred to as \ldblquote custom marshaling\rdblquote 
). Custom object marshaling is a mechanism that permits an object to be in control of creation of remote object proxies to itself. In certain situations, custom object marshaling can be used to create a more efficient object proxy than would otherwise 
be the case.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Notice here that we\rquote re only discussing the marshaling of pointers to interfaces, and that the term \ldblquote 
custom object marshaling\rdblquote  applies only to the marshaling of this data type. In general in a given remote procedure call the many other kinds of data which ap
pear as function parameters also needs to be marshaled: strings, integers, structures, etc. We shall not concern ourselves here with such other data types, but instead concentrate our discussion on marshaling interface pointers.}} Use of cus
tom marshaling is completely optional on the object\rquote s part; if the object chooses not to support custom marshaling, then {\i standard interface marshaling }is used to marshal the {\cs58\f5\fs16\lang1024 IBar*}
. Standard interface marshaling uses a system-provided object proxy implementa
tion in the client process. This standard implementation is a generic piece of code, in that it can be used as the object proxy for any interface on any object. However, the act of marshaling (and unmarshaling) method arguments and return values is inhere
ntly interface-specific, since it is highly sensitive to the semantics and data types used in the particular methods in question. To accommodate this, the standard implementation dynamically loads in interface-specific pieces of code as needed in order to
 do the parameter marshaling.
\par We shall discuss in great detail in a moment how standard interface marshaling works. First, however, we shall review custom object marshaling, as this provides a solid framework in which standard marshaling can be better understood.
\par {\*\bkmkstart _Toc308953724}{\*\bkmkstart _Toc324051619}{\*\bkmkstart _Toc324051804}{\*\bkmkstart _Toc324052046}{\*\bkmkstart _Toc335041422}{\*\bkmkstart _Toc337439343}{\*\bkmkstart _Toc337870054}{\*\bkmkstart _Toc339182967}{\pntext\pard\plain\b 7.2\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Architecture of Custom Object Marshaling{\*\bkmkend _Toc308953724}{\*\bkmkend _Toc324051619}{\*\bkmkend _Toc324051804}
{\*\bkmkend _Toc324052046}{\*\bkmkend _Toc335041422}{\*\bkmkend _Toc337439343}{\*\bkmkend _Toc337870054}{\*\bkmkend _Toc339182967}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Imagine that we are presently in a piece of code whose job it is to marshal an interface pointer that it has in hand. For clarity, in what follows we\rquote ll refer to this piece of code as the \ldblquote 
original marshaling stub.\rdblquote  The general case is that the original marshaling stub does not {\i statically}{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
i.e.: at compile time of the original marshaling stub}} know the particular interface identifier ({\cs58\f5\fs16\lang1024 IID}) to which the pointer conforms; the {\cs58\f5\fs16\lang1024 IID}
 may be passed to this code as a second parameter. This is a common paradigm in the Component Object Model. Extant examples of this paradigm include:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
IUnknown::QueryInterface(REFIID riid, void** ppvObject);
\par IOleItemContainer::GetObject(..., REFIID riid, void** ppvObject);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 
IClassFactory::CreateInstance(..., REFIID riid, void** ppvNewlyCreatedObject);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Let us assume the slightly less general case where the marshaling stub in fact does know a little bit about the {\cs58\f5\fs16\lang1024 IID}: that the interface in fact derives from {\cs58\f5\fs16\lang1024 
IUnknown}. This is a requirement for remoting: it is not possible to remote interfaces which are not derived from {\cs58\f5\fs16\lang1024 IUnknown}.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 To find out whether the object to which it has an interface supports custom marshaling, the original marshaling stub simply does a {\f5\fs16 QueryInterface()} for the interface {\f5\fs16 IMarshal}
. That is, an object signifies that it wishes to do custom marshaling simply by implementing the {\f5\fs16 IMarshal} interface. {\f5\fs16 IMarshal} is de\-fined as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 [
\par     local,
\par     object,
\par     uuid(00000003-0000-0000-C000-000000000046)
\par ]
\par interface IMarshal : IUnknown \{
\par \tab HRESULT GetUnmarshalClass ( [in] REFIID riid, [in, unique] void *pv, 
\par \tab \tab [in] DWORD dwDestContext, [in, unique] void *pvDestContext,
\par \tab \tab [in] DWORD mshlflags, [out] CLSID *pCid);
\par \tab HRESULT GetMarshalSizeMax ([in] REFIID riid, [in, unique] void *pv,
\par \tab \tab [in] DWORD dwDestContext, [in, unique] void *pvDestContext,
\par \tab \tab  [in] DWORD mshlflags, [out] DWORD *pSize);
\par \tab HRESULT MarshalInterface ([in, unique] IStream *pStm, [in] REFIID riid, [in, unique] void *pv,
\par \tab \tab [in] DWORD dwDestContext, [in, unique] void *pvDestContext, [in] DWORD mshlflags);
\par \tab HRESULT UnmarshalInterface ( [in, unique] IStream *pStm, [in] REFIID riid, [out] void **ppv);
\par \tab HRESULT ReleaseMarshalData ( [in, unique] IStream *pStm);
\par \tab HRESULT DisconnectObject ( [in] DWORD dwReserved);
\par \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The idea is that if the object says \ldblquote Yes, I do want to do custom marshaling\rdblquote 
 that the original marshaling stub will use this interface in order to carry out the task. The sequence of steps that carry this out is:
\par {\pntext\pard\plain\fs20 1.\tab}\pard\plain \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\f4\fs20 Using {\cs58\f5\fs16\lang1024 GetUnmarshalClass}
, the original marshaling stub asks the object which kind of (i.e.: which class of) proxy object it would like to have created on its behalf in the client process.
\par {\pntext\pard\plain\fs20 2.\tab}(optional on the part of the marshaling stub) Using {\cs58\f5\fs16\lang1024 GetMarshalSizeMax}, the stub asks the object how big of a marshaling packet it will need. When asked, the object {\i will }
return an upper bound on the amount of space it will need.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab That is, it is explicitly legal for the caller of {\cs89\f5\fs12 
GetMarshalSizeMax()} to allocate a fixed size marshaling buffer containing no more than the indicated upper bound number of bytes.}}
\par {\pntext\pard\plain\fs20 3.\tab}The marshaling stub allocates a marshaling packet of appropriate size, then creates an {\cs58\f5\fs16\lang1024 IStream*}
 which points into the buffer. Unless in the previous step the marshaling stub asked the object for an upper bound on the space needed, the {\cs58\f5\fs16\lang1024 IStream*} must be able to grow its underlying buffer dynamically as {
\cs58\f5\fs16\lang1024 IStream::Write} calls are made.
\par {\pntext\pard\plain\fs20 4.\tab}The original marshaling stub asks the object to marshal its data using {\cs58\f5\fs16\lang1024 MarshalInterface}.
\par \pard \qj\sa60\widctlpar We will discuss the methods of this interface in detail later in this chapter.
\par At this point, the contents of the memory buffer pointed to by the {\cs58\f5\fs16\lang1024 IStream*} together with the class tag re
turned in step (1) comprises all the information necessary in order to be able to create the proxy object in the client process. It is the nature of remoting and marshaling that \ldblquote original marshaling stubs\rdblquote 
 such as we have been discussing know how to communicate with the client process; recall that we are assuming that an initial connection between the two processes had already been established. The marshaling stub now com
municates to the client process, by whatever means is appropriate, the class tag and the contents of the memory that contains the marshaled interface pointer. In the client process, the proxy object is created as an instance of the indicated class using t
he standard COM instance creation paradigm.{\cs58\f5\fs16\lang1024  IMarshal} is used as the initialization interface; the initialization method is {\cs58\f5\fs16\lang1024 IMarshal::\-Un\-mar\-shal\-Interface()}. The unmarshaling p
rocess looks something like the following:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 void {\b ExampleUnmarshal}
(CLSID& clsidProxyObject, IStream* pstm, IID& iidOriginallyMarshalled, void** ppvReturn)
\par \{
\par \pard \s57\fi-720\li1440\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 IClassFactory* pcf;
\par \pard \s57\fi-720\li1440\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 IMarshal* pmsh;
\par CoGetClassObject(clsidProxyObject, CLSCTX_INPROC_HANDLER,  NULL, IID_IClassFactory, (void**)&pcf);
\par pcf->CreateInstance(NULL, IID_IMarshal, (void**)pmsh);
\par pmsh->UnmarshalInterface(pstm, iidOriginallyMarshalled, ppvReturn);
\par pmsh->ReleaseMarshalData(pstm)
\par pmsh->Release();
\par pcf->Release();
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 There are several important reasons why an object may choose to do custom marshaling.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 
It permits the server implementation, transparently to the client, to be in complete control of the nature of the invocations that actually transition across the network. In designing component architectures, one often runs into a design tension between t
he interface which for simplicity and elegance one wishes to exhibit to client programmers and the interface that is necessary to achieve efficient invocations across t
he network. The former, for example, might naturally wish to operate in terms of small-grained simple queries and responses, whereas the latter might wish to batch requests for efficient retrieval. The client and the network interfaces are in design tensi
on; custom marshaling is the crucial hook that allows us to have our cake and eat it too by giving the server implementor the ability to tune the network interface without affecting the interface seen by its client.\line 
When the object does custom marshaling, the client loses any "COM provided" communication to the original object. If the proxy wants to "keep in touch", it has to connect through some other means (RPC, Named pipe\'85
) to the original object. Custom Object Marshaling can not be done on a per interface basic, because object identity is lost! Custom Object Marshaling is a sophisticated way for an ob
ject to pass a copy of an existing instance of itself into another execution context.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Some objects are of the nature that once they have been created, they
 are immutable: their internal state does not subsequently change. Many monikers are an example of such objects. These sorts of objects can be efficiently remoted by making independent copies of themselves in client processes. Custom marshaling is the mec
hanism by which they can do that, yet have no other party be the wiser for it.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Objects which already are proxy objects can use custom marshaling to avoid creating proxies to proxies; new prox\-ies are instead short-circuited back to the original server. This is both an important effi
ciency and an important robustness consideration.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}
Object implementations whose whole state is kept in shared memory can often be remoted to other process on the same machine by creating an object in the client that talks directly to the shared memory rather than back to the original object. This can be a
 significant performance improve\-ment, since access to the remoted object does not result in context switches. The present Microsoft Compound File implementation is an  example of objects using this kind of custom marshaling.
\par {\*\bkmkstart _Toc308953725}{\*\bkmkstart _Toc324051620}{\*\bkmkstart _Toc324051805}{\*\bkmkstart _Toc324052047}{\*\bkmkstart _Toc335041423}{\*\bkmkstart _Toc337439344}{\*\bkmkstart _Toc337870055}{\*\bkmkstart _Toc339182968}{\pntext\pard\plain\b 7.3\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Architecture of Standard Interface / Object Marshaling{\*\bkmkend _Toc308953725}{\*\bkmkend _Toc324051620}
{\*\bkmkend _Toc324051805}{\*\bkmkend _Toc324052047}{\*\bkmkend _Toc335041423}{\*\bkmkend _Toc337439344}{\*\bkmkend _Toc337870055}{\*\bkmkend _Toc339182968}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 If the object being marshaled{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
Astute readers will notice an abuse of terminology here: what is really being marshaled in hand is one particular interface on the object, not the {\i whole}
 object, though in fact in the remote process access to the whole process is indeed obtained: new interfaces on the object will be marshaled later as needed. We trust that this will not lead to too much confusion.}} choos
es not to implement custom object marshaling, a \ldblquote default\rdblquote  or \ldblquote standard\rdblquote 
 object marshaling technique is used. An important part of this standard marshaling technique involves locating and loading the interface-specific pieces of code that are responsible f
or marshaling and unmarshaling remote calls to instances of that interface. We call these interface-specific pieces of code used in standard marshaling and unmarshaling \ldblquote interface proxies\rdblquote  and \ldblquote interface stubs\rdblquote 
 respectively.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Other RPC systems sometimes instead call these \ldblquote client side stubs\rdblquote  and \ldblquote 
server side stubs.\rdblquote  Sometimes {\i we} mix things up a bit and refer to \ldblquote proxy interfaces\rdblquote  and \ldblquote stub interfaces\rdblquote  instead of \ldblquote interface proxies\rdblquote  and \ldblquote interface stubs.\rdblquote 
}} (It is important not to confuse {\i interface }proxies with the {\i object }proxy, which relates to the {\i whole}
 representative in the client process, rather than just one interface on that representative. We apologize for the subtleties of the terminology.)
\par The following figure gives an slightly simplified view of how the standard client- and server-side structures cooperate.
\par \pard\plain \s40\qc\keep\keepn\widctlpar\pvpara\posxc\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {\pard\plain \s40\qc\keep\keepn\widctlpar\pvpara\posxc\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {\object\objemb\rsltmerge\objw0\objh0
\objscalex65\objscaley65\objcropt648{\*\objclass MSDraw.1.01}{\*\objdata 01050000020000000c0000004d53447261772e312e3031000000000000000000a01c0000
08005059aa2c010009000003310e000006005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700005a00000026060f00a9004d72456402009f0000009d000100c600c600fc03b8020000000000000100030000000000ffffff0000000000ffffff000100
000100000001000000000001000000000000010c0048656c76657469636100726966000003015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e0000002606
0f0012004d724564030008000000000000004114210a050000000b0200000000050000000c02210a4114030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e000e00000026060f0012004d72
4564030008000000000000004114210a07000000fc020000ffffff00ffff040000002d01000008000000fa02050000000000ffffff00040000002d010100070000001b04210a4114000000000e00000026060f001200ffffffff000008000000421234078612f9070e00000026060f0012004d7245640300080000004a12
3c077e126f0708000000fa0206000800080000000000040000002d01020007000000180473078212380746120b00000026060f000c004d7245640100020000000000080000002503020062126c076212f1070a00000026060f000a00ffffffff010000000000040000002e011800040000000201010010000000fb02b0ff
00000000000090010000000000000000417269616c00f86f040000002d0103000b000000320a140784120800000049556e6b6e6f776e0e00000026060f001200ffffffff000008000000f2014004360205050e00000026060f0012004d724564030008000000fa0148042e027b0404000000020102000700000018047f04
32024404f6010b00000026060f000c004d72456401000200000000000800000025030200120278041202fd040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000dc02cd07200392080e00000026060f0012004d724564030008000000e402570818038a08070000001804
8e081c035308e0020b00000026060f000c004d72456401000200000000000800000025030200fc025a08fc02d5070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006204cd07a60492080e00000026060f0012004d7245640300080000006a0457089e048a0807000000
18048e08a204530866040b00000026060f000c004d7245640100020000000000080000002503020082045a088204d5070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f201cd07360292080e00000026060f0012004d724564030008000000fa0157082e028a080700
000018048e0832025308f6010b00000026060f000c004d7245640100020000000000080000002503020012025a081202d5070a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000f5060102b50a5303070000001b045703b90afd01f1060e00000026060f001200ffffffff
000008000000f60744033a08e2030e00000026060f0012004d724564030008000000fe07a7033208da03070000001804de033608a303fa070b00000026060f000c004d724564010002000000000008000000250302001908aa0318084c030a00000026060f000a00ffffffff0100000000000b00000026060f000c004d72
456401000200000001001200000024030700f009e004a00ee004a00ea005b00aa005b00ae007f009e007f009e0040e00000026060f001200ffffffff000008000000db0ae605ad0bed070e00000026060f001200ffffffff000008000000200be605640b84060e00000026060f0012004d724564030008000000280bee05
5c0b21060700000018042506600bea05240b0b00000026060f000c004d72456401000200000000000800000025030200420b1e06410b7c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000e30a6306a50be507070000001b04e907a90b5f06df0a0a00000026060f00
0a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cb0be6059d0ced070e00000026060f001200ffffffff000008000000100ce605540c84060e00000026060f0012004d724564030008000000180cee054c0c21060700000018042506500cea05140c0b00000026060f000c004d7245640100
0200000000000800000025030200320c1e06310c7c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000d30b6306950ce507070000001b04e907990c5f06cf0b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004b0d
e6051d0eed070e00000026060f001200ffffffff000008000000900de605d40d84060e00000026060f0012004d724564030008000000980dee05cc0d21060700000018042506d00dea05940d0b00000026060f000c004d72456401000200000000000800000025030200b20d1e06b10d7c060a00000026060f000a00ffff
ffff0100000000000e00000026060f0012004d724564030008000000530d6306150ee507070000001b04e907190e5f064f0d0a00000026060f000a00ffffffff010000000000040000000201010010000000fb0270ff000000000000bc020000000000000000417269616c000f6e040000002d01040004000000f0010300
09000000320a2007c00c030000002e2e2e0004000000020102000b00000026060f000c004d72456401000200000001001200000024030700c000e0047005e0047005a0058001a0058001e007c000e007c000e0040e00000026060f001200ffffffff000008000000f001e605340284060e00000026060f0012004d724564
030008000000f801ee052c02210607000000180425063002ea05f4010b00000026060f000c004d7245640100020000000000080000002503020012021e0611027c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000b30163067502e507070000001b04e90779025f06
af010e00000026060f001200ffffffff000008000000e002e605240384060e00000026060f0012004d724564030008000000e802ee051c03210607000000180425062003ea05e4020b00000026060f000c004d7245640100020000000000080000002503020002031e0601037c060a00000026060f000a00ffffffff0100
000000000e00000026060f0012004d724564030008000000a30263066503e507070000001b04e90769035f069f020e00000026060f001200ffffffff0000080000006004e605a40484060e00000026060f0012004d7245640300080000006804ee059c0421060700000018042506a004ea0564040b00000026060f000c00
4d7245640100020000000000080000002503020082041e0681047c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d72456403000800000023046306e504e507070000001b04e907e9045f061f04040000000201010009000000320a20079003030000002e2e2e000e00000026060f001200
4d7245640300080000008700b304a505150807000000fc020100000000000000040000002d01030004000000f0010000070000001b041908a905af04830010000000fb02b0ff00000000000090010000000000000000417269616c001b70040000002d01000004000000f00104000b000000320a20048601080000004955
6e6b6e6f776e09000000320ae808ce010400000049466f6f09000000320ae808c402040000004942617209000000320ae8084404040000004942617a0e00000026060f001200ffffffff000008000000f00314099507e20910000000fb02a0ff000000000000bc02ff00000000000022417269616c00f36f040000002d01
040004000000f001000010000000320a6c09f00311000000696e746572666163652070726f786965730010000000fb02b0ff00000000000090010000000000000000417269616c001b70040000002d01000004000000f001040014000000320ad109f0031a00000028666f722049466f6f2c20494261722c20616e642049
42617a290a00000026060f000a00ffffffff0100000000000f000000320a2406ca050f0000004952706350726f7879427566666572000e00000026060f001200ffffffff000008000000ab04e205ce0529060b00000026060f000c004d72456401000200000000000800000025030200c6050606e604060607000000fc02
000000000000ffff040000002d0104000400000002010200040000002d01010004000000f00102000b00000026060f000c004d72456401000200000000000a00000024030300ab040606220529062205e2050a00000026060f000a00ffffffff01000000000004000000020101000e000000320a1e063c0f0e0000004952
7063537475624275666665720e00000026060f001200ffffffff000008000000db0de205220f290608000000fa0206000800080000000000040000002d0102000b00000026060f000c004d724564010002000000000008000000250302001a0f0606160e06060400000002010200040000002d01010004000000f0010200
0b00000026060f000c004d72456401000200000000000a00000024030300db0d0606520e2906520ee2050a00000026060f000a00ffffffff010000000000040000000201010010000000fb02a0ff000000000000bc02ff00000000000022417269616c000000040000002d01020004000000f00100000e000000320ab001
70020e000000436c69656e742050726f636573730e000000320ab001a00b0e0000005365727665722050726f636573730e00000026060f001200ffffffff000008000000c0084c00e008940908000000fa0206000800080091919100040000002d0100000b00000026060f000c004d724564010002000000000008000000
25030200c8085400c8088c090b00000026060f000c004d72456401000200000000000800000025030200d8085400d8088c090a00000026060f000a00ffffffff01000000000010000000fb02b0ff00000000000090010000000000000000417269616c00ff6f040000002d01050004000000f001020010000000320ade03
380511000000495270634368616e6e656c427566666572000e00000026060f0012004d7245640300080000000702ab062d02d106040000000201020008000000fa0206000800080000000000040000002d01020004000000f0010000070000001804d5063102a70603020e00000026060f0012004d724564030008000000
f702ab061d03d106070000001804d5062103a706f3020e00000026060f0012004d7245640300080000007704ab069d04d106070000001804d506a104a70673040e00000026060f001200ffffffff0000080000002002fe034a08c8060b00000026060f000c004d72456401000200000000000a000000250303001a080804
1a08c0062802c0060e00000026060f001200ffffffff000008000000ee07fe034a084e040b00000026060f000c004d724564010002000000000008000000250302001a080804420846040b00000026060f000c004d7245640100020000000000080000002503020019080604f6073c040a00000026060f000a00ffffffff
0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004809b408ed0c8209040000000201010010000000fb02a0ff000000000000bc02ff00000000000022417269616c00976e040000002d01000004000000f00105000f000000320a0c09aa090f000000696e
746572666163652073747562730010000000fb02b0ff00000000000090010000000000000000417269616c001b70040000002d01050004000000f001000014000000320a710948091a00000028666f722049466f6f2c20494261722c20616e64204942617a290a00000026060f000a00ffffffff01000000000008000000
fa0206000800080091919100040000002d01000004000000f00102000b00000026060f000c004d724564010002000000000008000000250302000f0ba808400b20070b00000026060f000c004d72456401000200000000000800000025030200100ba008300c20070b00000026060f000c004d7245640100020000000000
0800000025030200100ba008b00d20070e00000026060f001200ffffffff00000800000008021807870440090b00000026060f000c004d72456401000200000000000800000025030200c7033809100220070b00000026060f000c004d72456401000200000000000800000025030200a803ee08200378070b0000002606
0f000c004d72456401000200000000000800000025030200bd0338097f0420070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000001311df07d81123080e00000026060f0012004d7245640300080000001b11e7074e111b0807000000fc020000ffffff00ffff04000000
2d01020004000000f0010400040000000201020008000000fa0206000800080000000000040000002d01040004000000f00100000700000018041f085211e30717110b00000026060f000c004d724564010002000000000008000000250302004b11fb07d011fb070a00000026060f000a00ffffffff0100000000000e00
000026060f0012004d724564030008000000bb107708ee10ab08070000001804af08f2107308b7100b00000026060f000c004d72456401000200000000000800000025030200eb108b08d8118b080e00000026060f0012004d7245640300080000005b1007098e103b090700000018043f099210030957100b0000002606
0f000c004d724564010002000000000008000000250302008b101b09d8111b09040000000201010009000000320a10089c0f0400000049466f6f09000000320aa0089c0f040000004942617209000000320a30099c0f040000004942617a0e00000026060f0012004d724564030008000000a311b3078513650904000000
02010200070000001b0469098913af079f110b00000026060f000c004d72456401000200000000000a000000250303003411e6073411a206400ba2060b00000026060f000c004d72456401000200000000000a00000025030300ce107608ce10c006360cc0060e00000026060f0012004d724564030008000000310b9306
570bb90607000000fc02000000000000ffff040000002d01000004000000f0010200070000001804bd065b0b8f062d0b0e00000026060f0012004d724564030008000000270cb1064d0cd706070000001804db06510cad06230c0b00000026060f000c004d72456401000200000000000a000000250303006e1006096e10
e406bc0de4060e00000026060f0012004d724564030008000000a70ddb06cd0d01070700000018040507d10dd706a30d0e00000026060f001200ffffffff0000080000002312fd072e13b70804000000020101000a000000320a46082312060000007365727665720a000000320aa6082712060000006f626a6563740a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c70316030d04e1040b00000026060f000c004d72456401000200000000000800000025030200ea03a404ea031e030400000002010200040000002d01010004000000f00104000b00000026060f000c004d72456401000200
000000000a00000024030300ea03e1040d046904c70369040a00000026060f000a00ffffffff010000000000040000000201010010000000fb02b0ff000000000000bc020000000000000000417269616c000000040000002d01020004000000f00105000e000000320af40206030d00000070726f7879206d616e616765
72000e00000026060f001200ffffffff0000080000007f0c1003c50cdb0408000000fa0206000800080000000000040000002d0104000b00000026060f000c004d72456401000200000000000800000025030200a20c9e04a20c18030400000002010200040000002d01010004000000f00104000b00000026060f000c00
4d72456401000200000000000a00000024030300a20cdb04c50c63047f0c63040a00000026060f000a00ffffffff01000000000004000000020101000d000000320a8e028e0b0c00000073747562206d616e616765720e00000026060f001200ffffffff000008000000c700e6020d01b10408000000fa02060008000800
00000000040000002d0104000b00000026060f000c004d72456401000200000000000800000025030200ea007404ea00ee020400000002010200040000002d01010004000000f00104000b00000026060f000c004d72456401000200000000000a00000024030300ea00b1040d013904c70039040a00000026060f000a00
ffffffff01000000000004000000020101000d000000320ad0025a000c0000006f626a6563742070726f787908000000fa0206000800080000000000040000002d0104000b00000026060f000c004d72456401000200000000000a00000025030300400e400560124005601238070e00000026060f0012004d7245640300
08000000310e3105570e570504000000020102000700000018045b055b0e2d052d0e0e00000026060f001200ffffffff000008000000390ad3022f0ce7040e00000026060f0012004d724564030008000000410adb026c0a0a0307000000fc020000c0c0c000ffff040000002d01050004000000f001000008000000fa02
060007000700c0c0c000040000002d01000004000000f00104000700000018040d036f0ad8023e0a0e00000026060f001200ffffffff0000080000005e0aea022f0ce7040e00000026060f0012004d724564030008000000a608f202270ccb06040000002d01030004000000f00105000b0000001708f202660a4e04110c
ce062a0cef02a3080e00000026060f0012004d724564030008000000b6080503170cb9060b00000017080503660a5304020cbc061a0c0203b30807000000fc020000c0c0c000ffff040000002d010400040000002d01010004000000f00100000b00000026060f000c004d72456401000200000000000a00000024030300
1e0cdf042f0c1904cc0b2e040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000037097f03cd0b9904040000000201010010000000fb02b0ff00000000000090010000000000000000417269616c001b70040000002d01
000004000000f00102000c000000320ac80337090a0000006368616e6e656c20746f0f000000320a280437090f00000073747562206d677220636f6d6d926e000c000000320a880437090a000000697320707269766174650a00000026060f000a00ffffffff01000000000010000000fb02b0ff000000000000bc020100
000000000000417269616c000000040000002d01020004000000f00100000d000000320a7002b6070b000000525043204368616e6e656c0010000000fb02b0ff00000000000090010000000000000000417269616c001b70040000002d01000004000000f00102000d000000320aee02be0b0c00000028636f6e63657074
75616c2910000000fb021000070000000000bc02000000000102022253797374656d0018040000002d01020004000000f0010000040000002d01030004000000f0010400040000002701ffff040000002701ffff030000000000000000000000000000000000000000000000000000000000000000000000ffffffffffff
ffffffffffffffffffffffffffffffffffffffff0105000000000000}{\result {{\pict\wmetafile8\picw22864\pich11434\picwgoal12964\pichgoal6483 \picscalex65\picscaley65\piccropt648 
010009000003310e000006005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700005a00000026060f00a9004d72456402009f0000009d000100c600c600fc03b8020000000000000100030000000000ffffff0000000000ffffff00010000010000000100
0000000001000000000000010c0048656c76657469636100726966000003015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e00000026060f0012004d724564
030008000000000000004114210a050000000b0200000000050000000c02210a4114030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e000e00000026060f0012004d72456403000800000000
0000004114210a07000000fc020000ffffff00ffff040000002d01000008000000fa02050000000000ffffff00040000002d010100070000001b04210a4114000000000e00000026060f001200ffffffff000008000000421234078612f9070e00000026060f0012004d7245640300080000004a123c077e126f0708000000
fa0206000800080000000000040000002d01020007000000180473078212380746120b00000026060f000c004d7245640100020000000000080000002503020062126c076212f1070a00000026060f000a00ffffffff010000000000040000002e011800040000000201010010000000fb02b0ff0000000000009001000000
0000000000417269616c00f86f040000002d0103000b000000320a140784120800000049556e6b6e6f776e0e00000026060f001200ffffffff000008000000f2014004360205050e00000026060f0012004d724564030008000000fa0148042e027b0404000000020102000700000018047f0432024404f6010b0000002606
0f000c004d72456401000200000000000800000025030200120278041202fd040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000dc02cd07200392080e00000026060f0012004d724564030008000000e402570818038a080700000018048e081c035308e0020b00000026
060f000c004d72456401000200000000000800000025030200fc025a08fc02d5070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006204cd07a60492080e00000026060f0012004d7245640300080000006a0457089e048a080700000018048e08a204530866040b000000
26060f000c004d7245640100020000000000080000002503020082045a088204d5070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000f201cd07360292080e00000026060f0012004d724564030008000000fa0157082e028a080700000018048e0832025308f6010b0000
0026060f000c004d7245640100020000000000080000002503020012025a081202d5070a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000f5060102b50a5303070000001b045703b90afd01f1060e00000026060f001200ffffffff000008000000f60744033a08e2030e00
000026060f0012004d724564030008000000fe07a7033208da03070000001804de033608a303fa070b00000026060f000c004d724564010002000000000008000000250302001908aa0318084c030a00000026060f000a00ffffffff0100000000000b00000026060f000c004d724564010002000000010012000000240307
00f009e004a00ee004a00ea005b00aa005b00ae007f009e007f009e0040e00000026060f001200ffffffff000008000000db0ae605ad0bed070e00000026060f001200ffffffff000008000000200be605640b84060e00000026060f0012004d724564030008000000280bee055c0b21060700000018042506600bea05240b
0b00000026060f000c004d72456401000200000000000800000025030200420b1e06410b7c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000e30a6306a50be507070000001b04e907a90b5f06df0a0a00000026060f000a00ffffffff0100000000000e00000026060f
001200ffffffff000008000000cb0be6059d0ced070e00000026060f001200ffffffff000008000000100ce605540c84060e00000026060f0012004d724564030008000000180cee054c0c21060700000018042506500cea05140c0b00000026060f000c004d72456401000200000000000800000025030200320c1e06310c
7c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000d30b6306950ce507070000001b04e907990c5f06cf0b0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004b0de6051d0eed070e00000026060f001200ffffffff00
0008000000900de605d40d84060e00000026060f0012004d724564030008000000980dee05cc0d21060700000018042506d00dea05940d0b00000026060f000c004d72456401000200000000000800000025030200b20d1e06b10d7c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564
030008000000530d6306150ee507070000001b04e907190e5f064f0d0a00000026060f000a00ffffffff010000000000040000000201010010000000fb0270ff000000000000bc020000000000000000417269616c000f6e040000002d01040004000000f001030009000000320a2007c00c030000002e2e2e000400000002
0102000b00000026060f000c004d72456401000200000001001200000024030700c000e0047005e0047005a0058001a0058001e007c000e007c000e0040e00000026060f001200ffffffff000008000000f001e605340284060e00000026060f0012004d724564030008000000f801ee052c02210607000000180425063002
ea05f4010b00000026060f000c004d7245640100020000000000080000002503020012021e0611027c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000b30163067502e507070000001b04e90779025f06af010e00000026060f001200ffffffff000008000000e002e6
05240384060e00000026060f0012004d724564030008000000e802ee051c03210607000000180425062003ea05e4020b00000026060f000c004d7245640100020000000000080000002503020002031e0601037c060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000a302
63066503e507070000001b04e90769035f069f020e00000026060f001200ffffffff0000080000006004e605a40484060e00000026060f0012004d7245640300080000006804ee059c0421060700000018042506a004ea0564040b00000026060f000c004d7245640100020000000000080000002503020082041e0681047c
060a00000026060f000a00ffffffff0100000000000e00000026060f0012004d72456403000800000023046306e504e507070000001b04e907e9045f061f04040000000201010009000000320a20079003030000002e2e2e000e00000026060f0012004d7245640300080000008700b304a505150807000000fc0201000000
00000000040000002d01030004000000f0010000070000001b041908a905af04830010000000fb02b0ff00000000000090010000000000000000417269616c001b70040000002d01000004000000f00104000b000000320a200486010800000049556e6b6e6f776e09000000320ae808ce010400000049466f6f0900000032
0ae808c402040000004942617209000000320ae8084404040000004942617a0e00000026060f001200ffffffff000008000000f00314099507e20910000000fb02a0ff000000000000bc02ff00000000000022417269616c00f36f040000002d01040004000000f001000010000000320a6c09f00311000000696e74657266
6163652070726f786965730010000000fb02b0ff00000000000090010000000000000000417269616c001b70040000002d01000004000000f001040014000000320ad109f0031a00000028666f722049466f6f2c20494261722c20616e64204942617a290a00000026060f000a00ffffffff0100000000000f000000320a24
06ca050f0000004952706350726f7879427566666572000e00000026060f001200ffffffff000008000000ab04e205ce0529060b00000026060f000c004d72456401000200000000000800000025030200c6050606e604060607000000fc02000000000000ffff040000002d0104000400000002010200040000002d010100
04000000f00102000b00000026060f000c004d72456401000200000000000a00000024030300ab040606220529062205e2050a00000026060f000a00ffffffff01000000000004000000020101000e000000320a1e063c0f0e00000049527063537475624275666665720e00000026060f001200ffffffff000008000000db
0de205220f290608000000fa0206000800080000000000040000002d0102000b00000026060f000c004d724564010002000000000008000000250302001a0f0606160e06060400000002010200040000002d01010004000000f00102000b00000026060f000c004d72456401000200000000000a00000024030300db0d0606
520e2906520ee2050a00000026060f000a00ffffffff010000000000040000000201010010000000fb02a0ff000000000000bc02ff00000000000022417269616c000000040000002d01020004000000f00100000e000000320ab00170020e000000436c69656e742050726f636573730e000000320ab001a00b0e00000053
65727665722050726f636573730e00000026060f001200ffffffff000008000000c0084c00e008940908000000fa0206000800080091919100040000002d0100000b00000026060f000c004d72456401000200000000000800000025030200c8085400c8088c090b00000026060f000c004d72456401000200000000000800
000025030200d8085400d8088c090a00000026060f000a00ffffffff01000000000010000000fb02b0ff00000000000090010000000000000000417269616c00ff6f040000002d01050004000000f001020010000000320ade03380511000000495270634368616e6e656c427566666572000e00000026060f0012004d7245
640300080000000702ab062d02d106040000000201020008000000fa0206000800080000000000040000002d01020004000000f0010000070000001804d5063102a70603020e00000026060f0012004d724564030008000000f702ab061d03d106070000001804d5062103a706f3020e00000026060f0012004d7245640300
080000007704ab069d04d106070000001804d506a104a70673040e00000026060f001200ffffffff0000080000002002fe034a08c8060b00000026060f000c004d72456401000200000000000a000000250303001a0808041a08c0062802c0060e00000026060f001200ffffffff000008000000ee07fe034a084e040b0000
0026060f000c004d724564010002000000000008000000250302001a080804420846040b00000026060f000c004d7245640100020000000000080000002503020019080604f6073c040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff
0000080000004809b408ed0c8209040000000201010010000000fb02a0ff000000000000bc02ff00000000000022417269616c00976e040000002d01000004000000f00105000f000000320a0c09aa090f000000696e746572666163652073747562730010000000fb02b0ff00000000000090010000000000000000417269
616c001b70040000002d01050004000000f001000014000000320a710948091a00000028666f722049466f6f2c20494261722c20616e64204942617a290a00000026060f000a00ffffffff01000000000008000000fa0206000800080091919100040000002d01000004000000f00102000b00000026060f000c004d724564
010002000000000008000000250302000f0ba808400b20070b00000026060f000c004d72456401000200000000000800000025030200100ba008300c20070b00000026060f000c004d72456401000200000000000800000025030200100ba008b00d20070e00000026060f001200ffffffff00000800000008021807870440
090b00000026060f000c004d72456401000200000000000800000025030200c7033809100220070b00000026060f000c004d72456401000200000000000800000025030200a803ee08200378070b00000026060f000c004d72456401000200000000000800000025030200bd0338097f0420070a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff0000080000001311df07d81123080e00000026060f0012004d7245640300080000001b11e7074e111b0807000000fc020000ffffff00ffff040000002d01020004000000f0010400040000000201020008000000fa0206000800080000000000040000002d01040004
000000f00100000700000018041f085211e30717110b00000026060f000c004d724564010002000000000008000000250302004b11fb07d011fb070a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000bb107708ee10ab08070000001804af08f2107308b7100b0000002606
0f000c004d72456401000200000000000800000025030200eb108b08d8118b080e00000026060f0012004d7245640300080000005b1007098e103b090700000018043f099210030957100b00000026060f000c004d724564010002000000000008000000250302008b101b09d8111b09040000000201010009000000320a10
089c0f0400000049466f6f09000000320aa0089c0f040000004942617209000000320a30099c0f040000004942617a0e00000026060f0012004d724564030008000000a311b307851365090400000002010200070000001b0469098913af079f110b00000026060f000c004d72456401000200000000000a00000025030300
3411e6073411a206400ba2060b00000026060f000c004d72456401000200000000000a00000025030300ce107608ce10c006360cc0060e00000026060f0012004d724564030008000000310b9306570bb90607000000fc02000000000000ffff040000002d01000004000000f0010200070000001804bd065b0b8f062d0b0e
00000026060f0012004d724564030008000000270cb1064d0cd706070000001804db06510cad06230c0b00000026060f000c004d72456401000200000000000a000000250303006e1006096e10e406bc0de4060e00000026060f0012004d724564030008000000a70ddb06cd0d01070700000018040507d10dd706a30d0e00
000026060f001200ffffffff0000080000002312fd072e13b70804000000020101000a000000320a46082312060000007365727665720a000000320aa6082712060000006f626a6563740a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000c70316030d04e1040b00000026
060f000c004d72456401000200000000000800000025030200ea03a404ea031e030400000002010200040000002d01010004000000f00104000b00000026060f000c004d72456401000200000000000a00000024030300ea03e1040d046904c70369040a00000026060f000a00ffffffff0100000000000400000002010100
10000000fb02b0ff000000000000bc020000000000000000417269616c000000040000002d01020004000000f00105000e000000320af40206030d00000070726f7879206d616e61676572000e00000026060f001200ffffffff0000080000007f0c1003c50cdb0408000000fa0206000800080000000000040000002d0104
000b00000026060f000c004d72456401000200000000000800000025030200a20c9e04a20c18030400000002010200040000002d01010004000000f00104000b00000026060f000c004d72456401000200000000000a00000024030300a20cdb04c50c63047f0c63040a00000026060f000a00ffffffff0100000000000400
0000020101000d000000320a8e028e0b0c00000073747562206d616e616765720e00000026060f001200ffffffff000008000000c700e6020d01b10408000000fa0206000800080000000000040000002d0104000b00000026060f000c004d72456401000200000000000800000025030200ea007404ea00ee020400000002
010200040000002d01010004000000f00104000b00000026060f000c004d72456401000200000000000a00000024030300ea00b1040d013904c70039040a00000026060f000a00ffffffff01000000000004000000020101000d000000320ad0025a000c0000006f626a6563742070726f787908000000fa02060008000800
00000000040000002d0104000b00000026060f000c004d72456401000200000000000a00000025030300400e400560124005601238070e00000026060f0012004d724564030008000000310e3105570e570504000000020102000700000018045b055b0e2d052d0e0e00000026060f001200ffffffff000008000000390ad3
022f0ce7040e00000026060f0012004d724564030008000000410adb026c0a0a0307000000fc020000c0c0c000ffff040000002d01050004000000f001000008000000fa02060007000700c0c0c000040000002d01000004000000f00104000700000018040d036f0ad8023e0a0e00000026060f001200ffffffff00000800
00005e0aea022f0ce7040e00000026060f0012004d724564030008000000a608f202270ccb06040000002d01030004000000f00105000b0000001708f202660a4e04110cce062a0cef02a3080e00000026060f0012004d724564030008000000b6080503170cb9060b00000017080503660a5304020cbc061a0c0203b30807
000000fc020000c0c0c000ffff040000002d010400040000002d01010004000000f00100000b00000026060f000c004d72456401000200000000000a000000240303001e0cdf042f0c1904cc0b2e040a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f00
1200ffffffff00000800000037097f03cd0b9904040000000201010010000000fb02b0ff00000000000090010000000000000000417269616c001b70040000002d01000004000000f00102000c000000320ac80337090a0000006368616e6e656c20746f0f000000320a280437090f00000073747562206d677220636f6d6d
926e000c000000320a880437090a000000697320707269766174650a00000026060f000a00ffffffff01000000000010000000fb02b0ff000000000000bc020100000000000000417269616c000000040000002d01020004000000f00100000d000000320a7002b6070b000000525043204368616e6e656c0010000000fb02
b0ff00000000000090010000000000000000417269616c001b70040000002d01000004000000f00102000d000000320aee02be0b0c00000028636f6e6365707475616c2910000000fb021000070000000000bc02000000000102022253797374656d0018040000002d01020004000000f0010000040000002d010300040000
00f0010400040000002701ffff040000002701ffff0300000000000000000000000000000000000000000000000000000000000000000000000001f0fbcd02b8fe8c0207000000fc020000000000020000040000002d01040000}}}}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\pvpara\posxc\posy0\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Simplified conceptual view of client - server remoting structures
\par \pard\plain \s84\sa60\widctlpar \f4\fs20 When an interface of type {\cs58\f5\fs16\lang1024 IFoo} needs to be remoted, a system registry is consulted under a key derived from {\cs58\f5\fs16\lang1024 IID_IFoo }
to locate a class id that implements the interface proxy and interface stub for the given interface. Both the interface proxies and the interface stubs for a given interface must be implemented by the same class. Most often, this class is automatically ge
nerated by a tool whose input is a description of the function signatures and semantics of the interface, written in some \ldblquote interface description language,\rdblquote  often known as \ldblquote IDL.\rdblquote 
 However, while highly recommended and encouraged for accuracy\rquote s sake, the use of such a tool is by no means required; interface proxies and stubs ar
e merely Component Object Model components which are used by the RPC infrastructure, and as such, can be written in any manner desired so long as the correct external contracts are upheld. {\i 
From a logical perspective, it is ultimately the programmer who is the d}{\i e}{\i signer of a new interface who is responsible for ensuring that all interface proxies and stubs that ever exist agree on the representation of their marshaled data.}
 The programmer has the freedom to achieve this by whatever means he sees fit, but with that freedom comes the responsibility for ensuring the compatibility.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In the figure, the \ldblquote stub manager\rdblquote  is \ldblquote conceptual\rdblquote 
 in the sense that while it useful in this documentation to have a term to refer to the pieces of code and state on in the server-side RP
C infrastructure which service the remoting of a given object, there is no direct requirement that the code and state take any particular well-specified form.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar 
\f4\fs16 {\cs38\super \chftn }\tab There are, however, implied requirements for the existence of some piece of code / state that manages the {\i entire set of }external remoting connections for a given object. See {\cs89\f5\fs12 CoLockObjectExternal}{
\f5\fs12 ()}, for example.}} In contrast, on the client side, there is an identifiable piece of state and associated behavior which appears to the client code to be the one, whole object. The term \ldblquote proxy manager\rdblquote 
 is used to refer to the COM Library provided code that manages the client object identity, etc., and which dynamically loads in interface proxies as needed (per {\cs58\f5\fs16\lang1024 QueryInterface} calls). The proxy manager imple\-men\-ta\-tion is int
imate with the client-side RPC channel implementation, and the server-side RPC channel imple\-mentation is intimate with the stub man\-ager implementation.
\par Interface proxies are created by the client-side COM Library infrastructure using a code sequence resembling the following:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
clsid = LookUpInRegistry(key derived from iid)
\par CoGetClassObject(clsid, CLSCTX_SERVER, NULL, IID_IPSFactoryBuffer, &pPSFactory));
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 pPSFactory->CreateProxy(pUnkOuter, riid, &pProxy, &piid);

\par \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 Interface stubs are created by the server-side RPC infrastructure using a code sequence resembling:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
clsid = LookUpInRegistry(key derived from iid)
\par CoGetClassObject(clsid, CLSCTX_SERVER, NULL, IID_IPSFactoryBuffer, &pPSFactory));
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 pPSFactory->CreateStub(iid, pUnkServer, &pStub);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 In particular, notice that the class object is talked-to with {\f5\fs16 IPSFactoryBuffer} interface rather than the more common {\f5\fs16 IClassFactory}.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The interfaces mentioned here are as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IPSFactoryBuffer
}{\pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 
IPSFactoryBuffer}}}{\b  }: IUnknown \{
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b CreateProxy}
(pUnkOuter, iid, ppProxy, ppv);
\par \tab HRESULT\tab {\b CreateStub}(iid, pUnkServer, ppStub);
\par \tab \};
\par 
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 interface {\b IRpcChannelBuffer}{\pard\plain 
\s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 IRpcChannelBuffer}}}
 : IUnknown \{
\par \tab HRESULT\tab {\b GetBuffer}(pMessage, riid);
\par \tab HRESULT\tab {\b SendReceive}(pMessage, pStatus);
\par \tab HRESULT\tab {\b FreeBuffer}(pMessage);
\par \tab HRESULT\tab {\b GetDestCtx}(pdwDestCtx, ppvDestCtx);
\par \tab HRESULT\tab {\b IsConnected}();
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 
\par interface {\b IRpcProxyBuffer}{\pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 
\v\f5\fs12\lang1024 {\xe {\fs12 IRpcProxyBuffer}}} : IUnknown \{
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b Connect}(pRpcChannelBuffer);
\par \tab void\tab \tab \tab {\b Disconnect}();
\par \tab \};
\par 
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 interface {\b IRpcStubBuffer}{\pard\plain 
\s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 IRpcStubBuffer}}}
 : IUnknown \{
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab \tab {\b Connect}(pUnkServer);
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab void \tab \tab \tab \tab {\b Disconnect}();

\par \tab HRESULT\tab \tab {\b Invoke}(pMessage, pChannel);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab IRPCStubBuffer*\tab {\b IsIIDSupported}(iid);
\par \tab ULONG\tab \tab \tab {\b CountRefs}();
\par \tab HRESULT\tab \tab {\b DebugServerQueryInterface}(ppv);
\par \tab void\tab \tab \tab \tab {\b DebugServerRelease}(pv);
\par \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Suppose an interface proxy receives a method invocation on one of it\rquote s interfaces (such as {\cs58\f5\fs16\lang1024 IFoo}, {\cs58\f5\fs16\lang1024 IBar}, or {\cs58\f5\fs16\lang1024 IBaz}
 in the above figure). The interface proxy\rquote s implementation of this method first obtains a marshaling packet from its RPC channel using {\f5\fs16 IRpcChannelBuffer::GetBuffer()}
. The process of marshaling the arguments will copy data into the buffer. When marshaling is complete, the interface proxy invokes {\f5\fs16 IRpc\-Chan\-nelBuffer::SendReceive()} to send the method invocation across the \ldblquote wire\rdblquote 
 to the corresponding interface stub. When {\f5\fs16 IRpcChannelBuffer::SendReceive() }returns, the contents of buffer into which the arguments were mar
shaled will have been replaced by the return values marshaled from the interface stub. The interface proxy unmarshals the return values, invokes {\f5\fs16 IRpcChannelBuffer::FreeBuffer()}
 to free the buffer, then returns the return values to the original caller of the method.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 It is the implementation of {\f5\fs16 IRpcChannelBuffer::SendReceive()} that actually sends the request over to the server process. It is only the channel who kno
ws or cares how to identify the server process and object within that process to which the request should be sent; this encapsulation allows the architecture we are describing here to function for a variety of different kinds of channels: intra-machine ch
annels, inter-machine channels (i.e.: across the network), etc. The channel implementation knows how to forward the request onto the ap
propriate stub manager object in the appropriate process. From the perspective of this specification, the channel and the 
stub manager are intimate with each other (and intimate with the proxy manager, for that matter). Through this intimacy, eventually the appropriate interface stub receives an {\f5\fs16 IRpcStubBuffer::Invoke()}
 call. The stub unmarshals the arguments from the provided buffer, invokes the indicated method on the server object, and marshals the return values back into a new buffer, allocated by a call to {\f5\fs16 IRpcChanne}{\f5\fs16 l}{\f5\fs16 
Buffer::GetBuffer()}. The stub manager and the channel then cooperate to ferry the return data packet back to the interface proxy, who is still in the middle of {\f5\fs16 IRpcChannelBuffer::SendReceive()}. {\f5\fs16 IRpcChanne}{\f5\fs16 l}{\f5\fs16 
Buffer::SendReceive()} returns to the proxy, and we proceed as just described above.
\par When created, interface proxies are always aggregated{\pard\plain \qj\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 aggregation}}} into the larger object proxy: at interface-proxy-creation time, the proxy is given the {\f5\fs16 IUnknown*}
 to which it should delegate its {\f5\fs16 QueryInterface()}, etc., calls, as per the usual aggregation rules. When connected, the interface proxy is also given (with {\f5\fs16 IRpcProxy\-Buffer\-::\-Con\-nect()}) a pointer to an {\f5\fs16 
IRpcChannelBuffer }
interface instance. It is through this pointer that the interface proxy actually sends calls to the server process. Interface proxies bring a small twist to the normal everyday aggregation scenario. In aggregation, each interface supported by an aggregate
able object is classified as either \ldblquote external\rdblquote  or \ldblquote internal.\rdblquote  External interfaces are the norm. They are the ones whose instances are exposed directly to the clients of the aggregate as whole. It is {\i always }
the case that a {\f5\fs16 QueryInterface()} that requests an external interface of an aggregated object should be delegated by the object to its controlling unknown (ditto for {\f5\fs16 AddRef() }and {\f5\fs16 Release()}
). Internal interfaces, on the other hand, are never exposed to outside clients. Instead, they are solely for the use of the controlling unknown in manipulating the aggregated object. {\f5\fs16 QueryInterface()} for internal interfaces should {\i never}
 be delegated to the controlling unknown (ditto again). In the common uses of aggregation, the {\f5\fs16 IUnknown }interface on the object is the only internal interface. The twist that interface proxies bring is that {\f5\fs16 IRpcProxyBuffer }is {\i 
also} an internal interface.
\par Interface stubs, by contrast with interface proxies, are not aggregated, since there is no need that they appear to some external client to be part of a larger whole. When connected, an interface stub is given (with {\f5\fs16 IRpcStubBuffer::Connect()}
) a pointer to the server object to which they should forward invocations that they receive.
\par A given interface proxy instance can if it chooses to do so service more than one interface. For example, in the above figure, one interface proxy could have chosen to service {\i both} {\cs58\f5\fs16\lang1024 IFoo} and {\cs58\f5\fs16\lang1024 IBar}
. To accomplish this, in addition to installing itself under the appropriate registry entries, the proxy should support {\f5\fs16 Query\-Inter\-face()}ing from one supported interface (and from {\f5\fs16 IUnknown} and {\f5\fs16 IRpcProxyBuffer}
) to the other interfaces, as usual. When the Proxy Manager in a given object proxy finds that it needs the interface proxy for some new interface that it doesn\rquote 
t already have, before it goes out to the registry to load in the appropriate code using the code sequence described above, it first does a {\f5\fs16 QueryInterface()} for the new interface id ({\f5\fs16 IID}) on all of its {\i existing}
 interface proxies. If one of them supports the interface, then it is used rather than loading a new interface proxy.
\par {\*\bkmkstart MultIIDsStub}Interface stub instances, too, can service more than one interface on a server object. However, the extent to which they can do so is quite restricted: a given interface stub instance may support one or more inter\-
faces only if that set of interfaces has in fact a strict single-inheritance relationship. In short, a given inter\-face stub needs to know how to interpret a given method nu
mber that it is asked to invoke without at that same time also being told the interface id ({\f5\fs16 IID}) in which that method belongs; the stub must already {\i know} the relevant {\f5\fs16 IID}. The {\f5\fs16 IID }
which an interface stub is initially created to service is passed as parameter to {\f5\fs16 IPSFac\-tory\-Buffer\-::\-Create\-Stub()}. After creation, the interface stub may from time to time be asked using {\f5\fs16 IRpc\-Stub\-Buffer\-\-::Is\-
IIDSupported()} if it in fact would also like be used to service another {\f5\fs16 IID}. If the stub also supports the second {\f5\fs16 IID}, then it should return the appropriate {\f5\fs16 IRpcStubBuffer*} for that {\f5\fs16 IID}
; otherwise, the stub buffer should return {\cs58\f5\fs16\lang1024 NULL}. This permits the stub manager in certain cases to optimize the loading of interface stubs.
\par {\*\bkmkend MultIIDsStub}Both proxies and stubs will at various times have need to allocate or free memory. Interface proxies, for example, will need to allocate memory in which to return out parameters to their caller. In this respect inter
face proxies and interface stubs are just normal Component Object Model components, in that they should use the standard task allocator; see {\cs58\f5\fs16\lang1024 CoGetMalloc()}. See also the earlier discussion regarding specific rules for passing {
\cs58\f5\fs16\lang1024 in}, {\cs58\f5\fs16\lang1024 out}, and {\cs58\f5\fs16\lang1024 in out} pointers.
\par On Microsoft Windows platforms, the \ldblquote key derived from IID\rdblquote  under which the registry is consulted to learn the proxy/stub class is as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 {\b Interfaces
\par \tab }\{IID\}
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \tab {\b ProxyStubClsid32}{\fs14  }= \{CLSID\}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Here {\f5\fs16 \{CLSID\}} is a shorthand for any class id; the actual value of the unique id is put between the {\cs58\f5\fs16\lang1024 \{\}}'s; e.g. {\cs58\f5\fs16\lang1024 \{}{\f5\fs16 
DEADBEEF-DEAD-BEEF-C000-000000000046\}}; all digits are upper case hex and there can be no spaces.  This string format for a unique id (without the {\cs58\f5\fs16\lang1024 \{\}}\rquote s) is the same as the OSF DCE{{\field{\*\fldinst SYMBOL 228 \\f 
"Symbol" \\s 10}{\fldrslt\f1\fs20}}} standard and is the result of the {\f5\fs16 StringFromCLSID}{\pard\plain \s44\qj\sb60\sa58\widctlpar \b\v\f4\fs12 {\xe {\b\fs12 StringFromCLSID}}} routine. {\cs58\f5\fs16\lang1024 \{}{\f5\fs16 IID\}} is a s
horthand for an interface id; this is similar to {\f5\fs16 \{CLSID\}}; {\cs58\f5\fs16\lang1024 String\-From\-IID}{\pard\plain \s44\qj\sb60\sa58\widctlpar \cs58\b\v\f5\fs12\lang1024 {\xe {\cs58\b\f5\fs12\lang1024 String\-From\-IID}}}{
\cs58\f5\fs16\lang1024  }can be used to produce this string.
\par {\*\bkmkstart _Toc324051621}{\*\bkmkstart _Toc324051806}{\*\bkmkstart _Toc324052048}{\*\bkmkstart _Toc335041424}{\*\bkmkstart _Toc337439345}{\*\bkmkstart _Toc337870056}{\*\bkmkstart _Toc308953727}{\*\bkmkstart _Toc339182969}{\pntext\pard\plain\b 7.4\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Architecture of Handler Marshaling{\*\bkmkend _Toc324051621}{\*\bkmkend _Toc324051806}{\*\bkmkend _Toc324052048}
{\*\bkmkend _Toc335041424}{\*\bkmkend _Toc337439345}{\*\bkmkend _Toc337870056}{\*\bkmkend _Toc339182969}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Handler marshaling is a third variation on marshaling, one closely related to standard marshaling. Colloquially, one can think of it as a middle ground between raw standard marshaling and full custom marshaling.

\par In handler{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 handler}}} marshaling, the object specifies that it would like to have some amount of client-side state; this is designated by the class returned by {\cs58\f5\fs16\lang1024 IStdMarshalInfo}
{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 IStdMarshalInfo}}}{\cs58\f5\fs16\lang1024 ::GetClassForHandler.}
 However, this handler class rather than fully taking over the remoting to the object instead aggregates in the default handler, which carries out the remoting in the standard manner as described above.
\par {\*\bkmkstart _Toc324051622}{\*\bkmkstart _Toc324051807}{\*\bkmkstart _Toc324052049}{\*\bkmkstart _Toc335041425}{\*\bkmkstart _Toc337439346}{\*\bkmkstart _Toc337870057}{\*\bkmkstart _Toc339182970}{\pntext\pard\plain\b 7.5\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Standards for Marshaled Data Packets{\*\bkmkend _Toc308953727}{\*\bkmkend _Toc324051622}{\*\bkmkend _Toc324051807}
{\*\bkmkend _Toc324052049}{\*\bkmkend _Toc335041425}{\*\bkmkend _Toc337439346}{\*\bkmkend _Toc337870057}{\*\bkmkend _Toc339182970}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In the architecture described here, nothing has yet to be said about representation or format standards for the data that gets placed in marshaling packets. There is a g
ood reason for this. In the Component Object Model architecture, the only two parties that have to agree on what goes into a marshaling packet are the code that marshals the data into the packet and the code that unmarshals it out again: the interface pro
xies and the interface stubs. So long as we are dealing only with intra-machine procedure calls (i.e.: non-network), then we can reasonably assume that pairs of interface proxies and stubs are always installed to\-
gether on the machine. In this situation, we have no need to specify a packet format standard; the packet format can safely be a private matter between the two piece of code.
\par However, once a network is involved, relying on the simultaneous installation of corresponding interface proxies and stubs (on different machines) is no longer a reasonable thing to do. Thus, when the a method invocation is in fact remoted over a network,
 it is strongly recommended that the data marshaled into the packet to conform to a published standard (NDR), though, as pointed out above, it is technically the interface-designer\rquote 
s responsibility to achieve this correspondence by whatever means he sees fit.
\par {\*\bkmkstart _Toc308953728}{\*\bkmkstart _Toc324051623}{\*\bkmkstart _Toc324051808}{\*\bkmkstart _Toc324052050}{\*\bkmkstart _Toc335041426}{\*\bkmkstart _Toc337439347}{\*\bkmkstart _Toc337870058}{\*\bkmkstart _Toc339182971}{\pntext\pard\plain\b 7.6\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Creating an Initial Connection Between Processes{\*\bkmkend _Toc308953728}{\*\bkmkend _Toc324051623}
{\*\bkmkend _Toc324051808}{\*\bkmkend _Toc324052050}{\*\bkmkend _Toc335041426}{\*\bkmkend _Toc337439347}{\*\bkmkend _Toc337870058}{\*\bkmkend _Toc339182971}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Earlier we said we would later discuss how an initial remoting connection is established between two processes. It is now time to have that discussion.
\par The real truth of the matter is that the initial connection is established by some means outside of the architecture that we have been discussing here. The minimal that is required is some primitive com\-
munication channel between the two processes. As such, we cannot hope to discuss all the possibilities. But we will point out some common ones.
\par One common approach is that initial connections are estab\-
lished just like other connections: an interface pointer is marshaled in the server process, the marshaled data packet is ferried the client process, and it is unmarshaled. The only twist is that the ferrying is done by some means {\i other }
than the RPC mechanism which we\rquote 
ve been describing. There are many ways this could be accomplished. The most important, by far is one where the marshaled data is passed as an out-parameter from an invocation on a well-known endpoint to a Service Control Manager.
\par {\*\bkmkstart _Toc324051624}{\*\bkmkstart _Toc324051809}{\*\bkmkstart _Toc324052051}{\*\bkmkstart _Toc335041427}{\*\bkmkstart _Toc337439348}{\*\bkmkstart _Toc337870059}{\*\bkmkstart _Toc339182972}{\pntext\pard\plain\b 7.7\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Marshaling Interface and Function Descriptions{\*\bkmkend _Toc324051624}{\*\bkmkend _Toc324051809}{\*\bkmkend _Toc324052051}
{\*\bkmkend _Toc335041427}{\*\bkmkend _Toc337439348}{\*\bkmkend _Toc337870059}{\*\bkmkend _Toc339182972}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Having discussed on a high level how various remoting related interfaces work together, we now present each of them in detail.
\par {\*\bkmkstart _Toc308953730}{\*\bkmkstart _Toc324051625}{\*\bkmkstart _Toc324051810}{\*\bkmkstart _Toc324052052}{\*\bkmkstart _Toc335041428}{\pntext\pard\plain\b\i\fs22 7.7.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IPSFactoryBuffer Interface{\*\bkmkend _Toc308953730}{\*\bkmkend _Toc324051625}{\*\bkmkend _Toc324051810}{\*\bkmkend _Toc324052052}{\*\bkmkend _Toc335041428}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IPSFactoryBuffer} is the interface through which proxies and stubs are created.  It is used to create proxies and stubs that support {\cs58\f5\fs16\lang1024 IRpcProxyBuffer} and {
\cs58\f5\fs16\lang1024 IRpcStubBuffer }respectively. Each proxy / stub DLL must support {\cs58\f5\fs16\lang1024 IPS\-Factory} interface on the class object accessible through its {\f5\fs16 DllGetClassObject()}
 entry point. As was described above, the registry is consulted under a key derived from the {\cs58\f5\fs16\lang1024 IID}
 to be remoted in order to learn the proxy/stub class that handles the remoting of the indicated interface. The class object for this class is retrieved, asking for this interface. A proxy or a stub is then instantiated as appropriate.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IPSFactoryBuffer
}{\pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 
IPSFactoryBuffer}}}{\b  }: IUnknown \{
\par \tab HRESULT\tab {\b CreateProxy}(pUnkOuter, iid, ppProxy, ppv);
\par \tab HRESULT\tab {\b CreateStub}(iid, pUnkServer, ppStub);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IPSFactoryBuffer::CreateProxy{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IPSFactoryBuffer\:functions\:CreateProxy}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IPSFactoryBuffer::CreateProxy(pUnkOuter, iid, ppProxy, ppv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Create a new interface proxy object. This function returns both an{\cs58\f5\fs16\lang1024  IRpcProxy} instance and an instance of the interface which the proxy is being
 created to service in the first place. The newly created proxy is initially in the unconnected state.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1170 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1170 \f4\fs20 {\cs58\f5\fs16\lang1024 pUnkOuter\tab IUnknown *\tab }the controlling unknown of the aggregate in which the proxy is being created.
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }the interface id which the proxy is being created to service, and of which an instance should be returned through {\cs58\f5\fs16\lang1024 ppv}.
\par {\cs58\f5\fs16\lang1024 ppProxy\tab IRpcProxyBuffer**}\tab on exit, contains the new{\cs58\f5\fs16\lang1024  IRpcProxyBuffer} instance.
\par {\cs58\f5\fs16\lang1024 ppv\tab void **\tab }on exit, contains an interface pointer of type indicated by {\cs58\f5\fs16\lang1024 iid}.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_OUTOFMEMORY, E_NOINTERFACE, E_UNEXPECTED,} no others.{\f5\fs16 
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.1.2\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IPSFactoryBuffer::CreateStub{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IPSFactoryBuffer\:functions\:CreateStub}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IPSFactoryBuffer::CreateStub(iid, pUnkServer, ppStub)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Create a new interface stub object. The stub is created in the connected state on the object indicated by {\f5\fs16 pUnk\-Server}.
\par If {\cs58\f5\fs16\lang1024 pUnkServer} is non-{\cs58\f5\fs16\lang1024 NULL}, then before this function returns the stub must verify (by using {\f5\fs16 QueryInter\-face())} that the server object in fact supports the interface indicated by {
\cs58\f5\fs16\lang1024 iid}. If it does not, then this function should fail with the error {\f5\fs16 E_NOINTERFACE}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1170 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1170 \f4\fs20 {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }the interface that the stub is being created to service
\par {\cs58\f5\fs16\lang1024 pUnkServer\tab IUnknown*\tab }the server object that is being remoted. The stub should delegate incoming calls (see {\f5\fs16 IRpcStubBuffer::Invoke()}) to the appropriate interface on this object. {\cs58\f5\fs16\lang1024 
pUnkServer} may legally be {\cs58\f5\fs16\lang1024 NULL}, in which case the caller is responsible for later calling{\cs58\f5\fs16\lang1024  IRpcStubBuffer::Connect()} before using {\cs58\f5\fs16\lang1024 IRpcStubBuffer::Invoke().}
\par {\cs58\f5\fs16\lang1024 ppStub\tab IRpcStubBuffer**}\tab the place at which the newly create stub is to be returned.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_OUTOFMEMORY, E_NOINTERFACE, E_UNEXPECTED, }no others.{\f5\fs16 
\par {\*\bkmkstart _Toc308953731}{\*\bkmkstart _Toc324051626}{\*\bkmkstart _Toc324051811}{\*\bkmkstart _Toc324052053}{\*\bkmkstart _Toc335041429}{\pntext\pard\plain\b\i\fs22 7.7.2\tab}}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IRpcChannelBuffer interface{\*\bkmkend _Toc308953731}{\*\bkmkend _Toc324051626}{\*\bkmkend _Toc324051811}{\*\bkmkend _Toc324052053}{\*\bkmkend _Toc335041429}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IRpcChannelBuffer}
 is the interface through which interface proxies send calls through to the corresponding interface stub. This interface is implemented by the RPC infrastructure. The infrastructure provides an instance of this interface to interface proxies in {
\cs58\f5\fs16\lang1024 IRpcProxyBuffer::Connect()}. The interface proxies hold on to this instance and use it each time they receive an incoming call.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IRpcChannelBuffer}
{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 IRpcChannelBuffer}}}
 : IUnknown \{
\par \tab HRESULT\tab {\b GetBuffer}(pMessage, riid);
\par \tab HRESULT\tab {\b SendReceive}(pMessage, pStatus);
\par \tab HRESULT\tab {\b FreeBuffer}(pMessage);
\par \tab HRESULT\tab {\b GetDestCtx}(pdwDestCtx, ppvDestCtx);
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b IsConnected}();
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 RPCOLEMESSAGE and related structures{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {RPCOLEMESSAGE and related structures}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Common to several of the methods in {\cs58\f5\fs16\lang1024 IRpcChannelBuffer} is a data structure of type {\f5\fs16 RPCOLEMESSAGE}
. This structure is defined as is show below. The structure is to be packed so that there are no holes in its memory layout.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef struct RPCOLEMESSAGE \{

\par \tab void *\tab \tab \tab \tab reserved1;
\par \tab RPCOLEDATAREP\tab \tab {\b dataRepresentation};\tab // in NDR transfer syntax: info about endianness, etc.
\par \tab void \tab *\tab \tab \tab \tab {\b pvBuffer};\tab \tab \tab \tab // memory buffer used for marshalling
\par \tab ULONG\tab \tab \tab \tab {\b cbBuffer};\tab \tab \tab \tab // size of the marshalling buffer
\par \tab ULONG\tab \tab \tab \tab {\b iMethod};\tab \tab \tab \tab // the method number being invoked
\par \tab void *\tab \tab \tab \tab reserved2[5];
\par \tab ULONG\tab \tab \tab \tab {\b rpcFlags};
\par \tab \} on the ultimate destination machine {\b MESSAGE}{\pard\plain 
\s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 RPCOLEMESSAGE}}};{\cs38\super 
\chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab The layout of this structure is as odd as it is for historical reasons. Apologies are extended to those whose design aesthetics are offended.}}

\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The most significant member of this structure is {\f5\fs16 pvBuffer}. It is through the memory buffer to which {\f5\fs16 pvBuffer }points that marshaled method arguments are transferred. {\f5\fs16 cbBuffer}
 is used to indicate the size of the buffer. {\f5\fs16 iMethod }is indicates a particular method number within the interface being invoked. The {\f5\fs16 IID }of that interface is identified through other means: on the client side as a parameter to {
\f5\fs16 GetBuffer()}, and on the server side as part of the internal state of each interface stub.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 At all times all reserved values in this structure are to be initialized to zero by non-RPC-infrastructure par\-ties (i.e.: parties other than the channel / RPC runtime implementor) who allocate {\f5\fs16 
RPCOLEMESSAGE} struc\-tures. However, the RPC channel (m
ore generally, the RPC runtime infrastructure) is free to modify these reserved fields. Therefore, once initialized, the reserved fields must be ignored by the initializing code; they cannot be relied on to remain as zero. Further, there are very carefull
y specified rules as to what val\-
ues in these structures may or may not be modified at various times and by which parties. In almost all cases, aside from actually reading and writing data from the marshaling buffer, which is done by proxies and stubs, only
 the channel may change these fields. See the individual method descriptions for details.
\par Readers familiar with the connection-oriented DCE protocol may notice that the \ldblquote transfer syntax\rdblquote 
 used for marshaling the arguments, the particular set of rules and conventions according to which data is marshaled, is not explicitly called out. Architecturally speaking, it is only the interface proxy for a given inter\-
face and its corresponding interface stub that cares at all about what set of marshaling rules is in fact used. However, in the general case these interface proxies and stubs may be installed on different ma\-
chines with a network in the middle, be written by different development organizations on different oper\-ating systems, etc. Accordingly, in cases where the author of an interface proxy for a given {\cs58\f5\fs16\lang1024 IID}
 cannot guarantee that all copies of the corresponding interface stub are in fact always revised and updated in syn\-chrony with his interface proxy, a well-defined convention should be used for the transfer syntax. Indeed, formal transfer syntax stan
dards exist for this purpose. The one most commonly used is known as \ldblquote Network Data Representation\rdblquote  (NDR), originally developed by Apollo Corporation and subsequently en\-
hanced and adopted by the Open Software Foundation as part of their Distributed Computing Environ\-ment (DCE). The Windows NT oper
ating system also uses NDR in its RPC implementation. Unless very good reasons exist to do otherwise, programmers are encouraged to use the NDR transfer syntax.
\par When NDR transfer syntax is used (and whether it {\i is} in use or not is implicitly known by the proxy or stub), the member {\f5\fs16 dataRepresentation} provides further information about the rules by which data in the buffer is marshaled. NDR is a 
\ldblquote multi-canonical\rdblquote  standard, meaning that rather than adopting one stan\-dard for things like byte-order, character set, etc., multiple standards (a fixed set of them) are accommodated. Specifically, this is accommodated by a 
\ldblquote reader make right\rdblquote  policy: the writer / marshaler of the data
 is free to write the data in any of the supported variations and the reader / unmarshaler is expected to be able to read any of them. The particular data type in use is conveyed in an {\f5\fs16 RPCOLEDATAREP} structure, which is defined as fol
lows. Note that this structure, too, is packed; the size of the entire structure is ex\-actly four bytes. The actual layout of the structure in all cases always corresponds to the data representa\-
tion value as defined in the DCE standard; the particular struc\-ture shown here is equivalent to that layout in Microsoft\rquote s and other common compilers.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef RPCOLEDATAREP \{
\par \tab UINT\tab \tab {\b uCharacterRep} \tab : 4;\tab \tab // least signficant nibble of first byte
\par \tab UINT\tab \tab {\b uByteOrder}\tab \tab : 4;\tab \tab // most signficant nibble of first byte
\par \tab BYTE\tab \tab {\b uFloatRep};
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab BYTE\tab \tab {\b uReserved};
\par \tab BYTE\tab \tab {\b uReserved2};
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \} {\b RPCOLEDATAREP}{\pard\plain 
\s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 RPCOLEDATAREP}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The values which may legally be found in these fields are as shown in Table {\field{\*\fldinst seq table DataPresentation}{\fldrslt {\lang1024 1}}}
. Further information on the interpretation of this field can be found in the NDR Transfer Syntax standards documentation.
\par \trowd \trgaph108\trleft-108 \cellx1350\cellx5040\cellx6480\cellx8640 \pard\plain \qj\sa60\widctlpar\intbl\posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {\b Field Name\cell Meaning of Field\cell }\pard 
\qc\sa60\widctlpar\intbl\posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\b Value in field\cell }\pard \qj\sa60\widctlpar\intbl\posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\b Interpretation\cell }\pard \widctlpar\intbl {\b\fs16 \row }\trowd 
\trgaph108\trleft-108 \cellx1350\cellx5040\cellx6480\cellx8640 \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {\f5\fs16 uCharacterRep}\cell \pard \s85\widctlpar\intbl\brdrt
\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 determines interpretation of single-byte-character valued and single-byte-string valued entities\cell \pard \s85\qc\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 
\posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 0
\par 1\cell \pard \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 ASCII
\par EBCDIC\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {\f5\fs16 uByteOrder}\cell \pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 
\posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 integer and floating point byte order\cell \pard \s85\qc\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 0
\par 1\cell \pard \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 Big-endian (Motorola)
\par Little-endian (Intel)\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1350\cellx5040\cellx6480\cellx8640 \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 
\f4\fs20 {\f5\fs16 uFloatRep}\cell \pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 representation of floating point numbers\cell \pard \s85\qc\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 
\posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 0
\par 1
\par 2
\par 3\cell \pard \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 IEEE
\par VAX
\par Cray
\par IBM\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\posxc\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Table {\*\bkmkstart DataPresentation}{\field{\*\fldinst seq table}{\fldrslt {\lang1024 1}}}
{\*\bkmkend DataPresentation}. Interpretation of dataPresentation
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.2.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcChannelBuffer::GetBuffer{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IRpcChannelBuffer\:functions\:GetBuffer}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRpcChannelBuffer::GetBuffer(pMessage, iid)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
This method returns a buffer into which data can be marshaled for subsequent transmission over the wire. It is used both by interface proxies and by interface stubs, the former to marshal the incoming arguments for transmission to the server, and the latt
er to marshal the return values back to the client.
\par Upon receipt of an incoming call from the client of the proxy object, interface proxies use {\f5\fs16 GetBuffer()} to get a
 buffer into which they can marshaling the incoming arguments. A new buffer must be obtained for every call operation; old buffers cannot be reused by the interface proxy. The proxy needs to ask for and correctly manage a new buffer even if he himself doe
s not have arguments to marshal (i.e.: a {\f5\fs16 void} argument list).{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
This permits the channel to behind-the-scenes add additional space into the buffer. Such a capability is needed, for example, in order to support remote debugging.}} Having marshaled the arguments, the interface proxy then calls {\f5\fs16 SendReceive()}
 to actually invoke the operation. Upon return from {\f5\fs16 SendReceive()}, the buffer no longer contains the marshaled arguments but instead contains the marshaled return values (and out parameter values). The interface proxy unmarshals these val
ues, calls {\f5\fs16 FreeBuffer() }to free the buffer, then returns to its calling client.
\par On the server side (in interface stubs), the sequence is somewhat different. The server side will not be explored further here; see instead the description of {\f5\fs16 IRpcStubBuffer::Invoke}{\pard\plain \qj\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 
IRpcStubBuffer\:functions\:Invoke}}}{\f5\fs16 ()} for details.
\par On the client side, the {\f5\fs16 RPCOLEMESSAGE} structure argument to {\f5\fs16 GetBuffer()} has been allocated and init\-ial\-ized by the caller (or by some other party on the caller\rquote s behalf). Interface proxies are to initialize the mem\-
bers of this structure as follows.
\par \trowd \trgaph108\trleft-108 \cellx2070\cellx8748 \pard \qj\sa60\widctlpar\intbl {\b Member Name\cell Value to initalize to\cell }\pard \widctlpar\intbl {\b \row }\trowd \trgaph108\trleft-108 \cellx2070\cellx8748 \pard\plain \s85\qj\widctlpar\intbl\brdrt
\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 reserved members}\cell \pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 as always, reserved values must be initialized to zero / {\cs58\f5\fs16\lang1024 NULL}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 pvBuffer\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 must be {\cs58\f5\fs16\lang1024 NULL}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 cbBuffer\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 
the size in bytes that the channel should allocate for the buffer; that is, the maximum size in bytes needed to marshal the arguments. The interface proxy will have determined this information by considering the function signature and the particular argum
ent values passed in.
\par It is explicitly legal to have this value be zero, indicating that that the caller does not himself require a memory buffer.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 
iMethod\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 the zero-based method number in the interface {\f5\fs16 iid} which is being invoked\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt
\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 dataRepresentation\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 if NDR t
ransfer syntax is being used, then this indicates the byte order, etc., by which the caller will marshal data into the returned buffer.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2070\cellx8748 \pard\plain 
\s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 rpcFlags\cell {\pntext\pard\plain\intbl\i\f1\fs16\cf2 \'a8\tab}}\pard\plain \s45\qj\sa58\widctlpar\intbl{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent144 {\pntxtb \'a8}}\i\f4\fs16\cf2 
Exact values to be listed here.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 If the {\f5\fs16 GetBuffer()} function is successful, then upon function exit {\f5\fs16 pvBuffer}
 will have been changed by the channel to point to a memory buffer of (at least) {\f5\fs16 cbBuffer }bytes in size into which the method arguments can now be marshaled (if {\f5\fs16 cbBuffer }was zero, {\cs58\f5\fs16\lang1024 pvBuffer} may or may not be {
\cs58\f5\fs16\lang1024 NULL}). The reserved fields in the {\f5\fs16 RPCOLEMESSAGE} structure may or may not have been changed by the channel. However, neither the {\f5\fs16 cbBuffer} nor {\f5\fs16 iMethod }fields of {\f5\fs16 RPCOLEMESSAGE}
 will have been changed; the channel treats these as read-only.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab The fact that {\cs89\f5\fs12 cbBuffer }
is unchanged can be of particular use to interface stubs. See {\cs89\f5\fs12 IRpcStubBuffer::Invoke().}}} Furthermore, until such time as the now-allocated memory buffer is subsequently freed (see {\f5\fs16 SendR}{\f5\fs16 e}{\f5\fs16 ceive()} and {
\f5\fs16 FreeBuffer()}), no party other than the channel may modify any of the data accessible from {\f5\fs16 pMe}{\f5\fs16 s}{\f5\fs16 sage} with the lone exceptions of the data pointed to by {\f5\fs16 pvBuffer }and the member {\f5\fs16 cbBuffer}
, which may be modified only in limited ways; see below.
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 The arguments to {\f5\fs16 GetBuffer()} are as follows:
\par \pard\plain \s48\fi-3600\li3600\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE *}\tab a message structure initialized as discussed above.
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab \tab }the interface identifier of the interface being invoked.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab \tab }{\f5\fs16 S_OK, E_OUTOFMEMORY, E_UNEXPECTED
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.2.3\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcChannelBuffer::SendReceive{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IRpcChannelBuffer\:functions\:SendReceive}}}
\par \pard\plain \s50\fi-1440\li1440\ri-360\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRpcChannelBuffer::SendReceive(pMessage, pStatus)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Cause an invocation to be sent across to the server process. The caller will have first obtained access to a transmission packet in which to marshal the arguments by calling {\f5\fs16 IRpcChannelBuffer::GetBuffer()}
. The same {\f5\fs16 pMessage} structure passed as an argument into that function is passed here to the channel a second time.
\par In the intervening time period, the method arguments will have been marshaled into the buffer pointed to by {\f5\fs16 pMessage->pvBuffer}. However, the {\f5\fs16 pvBuffer} pointer parameter must on entry to {\f5\fs16 SendReceive()}
 be exactly as it was when returned from {\f5\fs16 GetBuffer()}. That is, it must point to the start of the memory buffer. The caller should in addition set {\f5\fs16 pMessage->cbBuffer} to the number of bytes actually written into the buffer (zero is ex
plicitly a legal value). No other values accessible from {\f5\fs16 pMessage }may be different than they were on exit from {\f5\fs16 GetBuffer()}.
\par Upon {\i successful} exit from {\f5\fs16 SendReceive()}, the incoming buffer pointed to by {\f5\fs16 pvBuffer }
will have been freed by the channel. In its place will be found a buffer containing the marshaled return values / out parameters from the interface stub: {\f5\fs16 pMessage->pvBuffer }points to the new buffer, and {\f5\fs16 pMessage->cbBuffer}
 indicates the size thereof. If there are no such return values, then {\f5\fs16 pMessage->cbBuffer} is set to zero, while {\f5\fs16 pMess\-age\_>pv\-Buff\-er }may or may not be {\cs58\f5\fs16\lang1024 NULL}.
\par On {\i error} exit from {\f5\fs16 SendReceive()},{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab That is, if {\cs89\f5\fs12 SendReceive()}
 returns an error. Note that this does NOT indicate an error returned from the function invocation on the server object, for in that case {\cs89\f5\fs12 SendReceive()} returns success; rather, it indicates an error that occurred somewhere in the RPC trans
mission.}} the incoming buffer pointed to by {\f5\fs16 pvBuffer }may or may not have been freed. If it has been freed, then on error exit {\f5\fs16 pMess\-age\_>pvBuffer} is set to {\cs58\f5\fs16\lang1024 NULL} and {\f5\fs16 pMessage->cbBuffer}
 is set to zero. If in contrast, {\f5\fs16 pMessage->pvBuffer} is on error exit not {\cs58\f5\fs16\lang1024 NULL}, then that pointer, the data to which it points, and the value {\f5\fs16 pMessage->cbBuffer} wil
l contain exactly as they did on entry; that is, the marshaled argu\-ments will not have been touched. Thus, on error exit from {\f5\fs16 SendReceive()}, in no case are any marshaled {\i return values}
 passed back; if a marshaling buffer is in fact returned, then it contains the marshaled {\i arg}{\i u}{\i ments} as they were on entry.
\par The exact cases on error exit when the incoming buffer has or has not been freed needs careful attention. There are three cases:
\par \pard \qj\fi-360\li1080\sa60\widctlpar 1)\tab The channel implementation knows with certainty either that all of the incoming data was success\-fully unmarshaled or that if any errors occurred during unmarshaling that the inter\-
face stub correctly cleaned up. In practical terms, this condition is equivalent to the stub manager having actually called {\f5\fs16 IRpcStubBuffer::Invoke}{\pard\plain \qj\fi-360\li1080\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 IRpcStubBuffer\:functions
\:Invoke}}}{\f5\fs16 ()} on the appropriate interface stub.
\par \tab In this case, on exit from {\f5\fs16 SendReceive()} the incoming argu\-ments will {\i always} have been freed.
\par {\f5\fs16 2)}\tab The channel implementation knows with certainty the situation in case 1) has {\i not} occurred.
\par \tab In this case, on exit from {\f5\fs16 SendReceive()}, the incoming arguments will {\i never} have been freed.
\par 3)\tab The channel implementation does not know with certainty that either of the above two cases has occurred.
\par \tab In this case, on exit from {\f5\fs16 SendReceive()}, the incoming arguments will {\i always} have been freed. This is a possible resource leakage (due to, for example, {\f5\fs16 CoReleaseMarshalData() }
calls that never get made), but it safely avoids freeing resources that should not be freed.{\f5\fs16 
\par }\pard \qj\sa60\widctlpar If {\f5\fs16 pMessage->pvBuffer }is returned as non-{\cs58\f5\fs16\lang1024 NULL}, then the caller is responsible for subsequently freeing it; see {\f5\fs16 FreeBuffer()}. A returned non-{\cs58\f5\fs16\lang1024 NULL} {\f5\fs16 
pMessage->pvBuffer }may in general legally be (and will commonly be, the success case) different than the (non-{\cs58\f5\fs16\lang1024 NULL}) value on entry; i.e.: the buffer may be legally be re\-alloca\-ted. Further, between the return from {\f5\fs16 
SendReceive()} and the subsequent freeing call no data accessible from {\f5\fs16 pMessage }may be modi\-fied, with the possible exception of the data actually in the memory buffer.
\par Upon successful exit from {\f5\fs16 SendReceive()}, the {\f5\fs16 pMessage->dataRepresentation} field will have been modified to contain whatever was returned by the interface stub in field of the same name value on exit to {\f5\fs16 IRpcStubBuf\-fer\-
::Invoke()}. This is particularly important when NDR transfer syntax is used, as {\f5\fs16 dataRepresentation} indicates critical things (such as byte order) which apply to the marshaled return / out values. Upon error exit from {\f5\fs16 SendReceive()}, 
{\f5\fs16 pMess\-age\_>dataRepresentation} is undefined.
\par \pard\plain \s48\fi-3600\li3600\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3600\li3600\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE *\tab }message structure containing info to transmit to server.
\par {\cs58\f5\fs16\lang1024 pStatus\tab ULONG *\tab }may legally be {\cs58\f5\fs16\lang1024 NULL}. If non-{\cs58\f5\fs16\lang1024 NULL}, then if either 1) an RPC-infra\-struc\-
ture-detected server-object fault (e.g.: a server object bug caused an exception which was caught by the RPC infrastructure) or 2) an RPC communications failure occurs, then at this location a status code is written which describes what hap
pened. In the two error cases, the errors {\f5\fs16 E_RPCFAULT} and {\f5\fs16 E_RPCSTATUS} are (respectively) returned (and are always returned when these errors occur, irrespective of the {\cs58\f5\fs16\lang1024 NULL}-ness of {\f5\fs16 pStatus}).
\par \pard \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab \tab }{\f5\fs16 S_OK, E_RPCFAULT, E_RPCSTATUS
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.2.4\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcChannelBuffer::FreeBuffer{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IRpcChannelBuffer\:functions\:FreeBuffer}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRpcChannelBuffer::FreeBuffer(pMessage)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Free a memory buffer in {\f5\fs16 pMessage->pvBuffer }that was previously allocated by the channel.
\par At various times the RPC channel allocates a memory buffer and returns control of same to a calling client. Both {\f5\fs16 GetBuffer()} and {\f5\fs16 SendReceive()} do so, for example. {\f5\fs16 FreeBuffer()}
 is the means by which said calling client informs the channel that it is done with the buffer.
\par On function entry, the buffer which is to be freed is {\f5\fs16 pMessage->pvBuffer}, which explicitly may or may not be {\cs58\f5\fs16\lang1024 NULL}. If {\f5\fs16 pMessage->pvBuffer} is non-{\cs58\f5\fs16\lang1024 NULL}, then {\f5\fs16 FreeBuffer() }
frees the buffer, {\cs58\f5\fs16\lang1024 NULL}s the pointer, and returns {\f5\fs16 NOERROR}; if {\f5\fs16 pMessage->pvBuffer} is {\cs58\f5\fs16\lang1024 NULL}, then FreeBuffer() simply returns {\f5\fs16 NOERROR} (i.e.: passing {\cs58\f5\fs16\lang1024 
NULL} is {\i not} an error). Thus, on function exit, {\f5\fs16 pMessage->pvBuffer} is always {\cs58\f5\fs16\lang1024 NULL}. Notice that {\f5\fs16 pMess\-age\_>cbBuffer} is never looked at or changed.
\par There are strict rules as to what data accessible from {\f5\fs16 pMessage }may have been modified in the intervening time between the time the buffer was allocated and the call to {\f5\fs16 FreeBuffer()}
. In short, very little modification is permitted; see above and below for precise details.
\par \pard\plain \s48\fi-3600\li3600\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3600\li3600\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE *\tab }pointer to structure containing pointer to buffer to free.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_UNEXPECTED
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.2.5\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcChannelBuffer::GetDestCtx{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IRpcChannelBuffer\:functions\:GetDestCtx}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRpcChannelBuffer::GetDestCtx(pdwDestCtx, ppvDestCtx)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the destination context for this RPC channel. The destination context here is as specified in the description of the {\cs58\f5\fs16\lang1024 IMarshal} interface.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pdwDestCtx\tab DWORD *\tab }the place at which the destination context is to be returned.
\par {\cs58\f5\fs16\lang1024 ppvDestCtx\tab void **\tab }May be {\cs58\f5\fs16\lang1024 NULL}. If non-{\cs58\f5\fs16\lang1024 NULL}, then this is the place at which auxiliary in
formation associated with certain destination contexts will be returned. Interface proxies may not hold on to this returned pointer in their internal state; rather, they must assume that a subsequent call to {\f5\fs16 IRpcCha}{\f5\fs16 n}{\f5\fs16 
nel::Call()} may in fact invalidate a previously returned destina\-tion context.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
It is possible that in the future a less restrictive rule as to the duration in which the interface proxy may hold on to{\cs89\f5\fs12  ppvDestCtxt} may be established, such as (perhaps) guaranteeing that the pointer is valid for t
he lifetime of the interface proxy itself. However, as it stands today, the rule, as stated here, is in fact the law.}}
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_OUTOFMEMORY, E_UNEXPECTED}, but no others.
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.2.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcChannelBuffer::IsConnected{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IRpcChannelBuffer\:functions\:IsConnected}}}
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 HRESULT IRpcChannelBuffer::IsConnected()
\par \pard \qj\sa60\widctlpar Answers as to whether the RPC channel is still connected to the other side. A negative reply is definitive: the connection to server end has definitely been terminated. A positive reply is tenta
tive: the server end may or may not be still up. Interface proxies can if they wish use this method as an optimization by which they can quickly return an error condition.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, S_FALSE}. No error values may be returned.
\par {\*\bkmkstart _Toc308953732}{\*\bkmkstart _Toc324051627}{\*\bkmkstart _Toc324051812}{\*\bkmkstart _Toc324052054}{\*\bkmkstart _Toc335041430}{\pntext\pard\plain\b\i\fs22 7.7.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IRpcProxyBuffer Interface{\*\bkmkend _Toc308953732}{\*\bkmkend _Toc324051627}{\*\bkmkend _Toc324051812}{\*\bkmkend _Toc324052054}{\*\bkmkend _Toc335041430}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 IRpcProxyBuffer interface is the interface by which the client-side infrastructure (i.e. the proxy manager) talks to the interface proxy instances that it manages. When created, proxies are aggregated into some l
arger object as per the normal creation process (where {\f5\fs16 pUnkOuter} in {\f5\fs16 IPSFactoryBuffer::CreateProxy() }is non-{\cs58\f5\fs16\lang1024 NULL}). The controlling unknown will then {\f5\fs16 QueryInterface()}
 to the interface that it wishes to expose from the interface proxy.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IRpcProxyBuffer}
{\pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 IRpcProxyBuffer
}}} : IUnknown \{
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab HRESULT\tab {\b Connect}
(pRpcChannelBuffer) = 0;
\par \tab virtual\tab void\tab \tab \tab {\b Disconnect}() = 0;
\par \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.3.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcProxyBuffer::Connect{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IRpcProxyBuffer\:functions\:Connect}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRpcProxyBuffer::Connect(pRpcChannelBuffer)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Connect the interface proxy to the indicated RPC channel. The proxy should hold on to the channel, {\cs58\f5\fs16\lang1024 AddRef()}
ing it as per the usual rules. If the proxy is currently connected, then this call fails (with {\f5\fs16 E_UNEXPECTED}); call {\cs58\f5\fs16\lang1024 Dis\-con\-nect()} first if in doubt.
\par \pard\plain \s48\fi-3600\li3600\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1710 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \qj\fi-3600\li3600\sa60\widctlpar\tx1710 \f4\fs20 {\cs58\f5\fs16\lang1024 pRpcChannelBuffer\tab IRpcChannelBuffer*\tab }the RPC channel that the interface proxy is to use to effect invocations to the server object. May not be {
\cs58\f5\fs16\lang1024 NULL}.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_OUTOFMEMORY, E_NOINTERFACE, E_UNEXPECTED}
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.3.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcProxyBuffer::Disconnect{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IRpcProxyBuffer\:functions\:Disconnect}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void IRpcProxyBuffer::Disconnect()
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Informs the proxy that it should disconnect itself from any RPC channel that it may currently be holding on to. This will involve {\cs58\f5\fs16\lang1024 Release()}ing the{\cs58\f5\fs16\lang1024  IRpcChannel}
 pointer to counteract the {\cs58\f5\fs16\lang1024 AddRef()} done in {\cs58\f5\fs16\lang1024 IRpcProxy::Con\-nect().}
\par Notice that this function does not return a value.
\par {\*\bkmkstart _Toc308953733}{\*\bkmkstart _Toc324051628}{\*\bkmkstart _Toc324051813}{\*\bkmkstart _Toc324052055}{\*\bkmkstart _Toc335041431}{\pntext\pard\plain\b\i\fs22 7.7.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IRpcStubBuffer interface{\*\bkmkend _Toc308953733}{\*\bkmkend _Toc324051628}{\*\bkmkend _Toc324051813}{\*\bkmkend _Toc324052055}{\*\bkmkend _Toc335041431}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IRpcStubBuffer} is the interface used on the server side by the RPC runtime infrastructure (herein referred to loosely as the \ldblquote channel\rdblquote 
) to communicate with interface stubs that it dynamically loads into a server process.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IRpcStubBuffer}
 : IUnknown \{
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab HRESULT\tab \tab {\b Connect}
(pUnkServer) = 0;
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab void \tab \tab \tab \tab {\b 
Disconnect}() = 0;
\par \tab virtual\tab HRESULT\tab \tab {\b Invoke}(pMessage, pChannel) = 0;
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab IRpcStubBuffer*\tab {\b IsIIDSupported}
(iid) = 0;
\par \tab virtual\tab ULONG\tab \tab \tab {\b CountRefs}() = 0;
\par \tab virtual\tab HRESULT\tab \tab {\b DebugServerQueryInterface}(ppv) = 0;
\par \tab virtual\tab void\tab \tab \tab \tab {\b DebugServerRelease}(pv) = 0;
\par \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.4.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcStubBuffer::Connect{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IRpcStubBuffer\:functions\:Connect}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRpcStubBuffer::Connect(pUnkServer)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Informs the interface stub of server object to which it is now to be connected, and to which it should forward all subsequent {\f5\fs16 Invoke() }operations. The stub will have to {\f5\fs16 QueryInterface() }on {
\f5\fs16 pUnkServer }to obtain access to appropriate inter\-faces. The stub will of course follow the normal {\f5\fs16 AddRef() }rules when it stores pointers to the server object in its internal state.
\par If the stub is currently connected, then this call fails with {\f5\fs16 E_UNEXPECTED}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pUnkServer\tab IUnknown *\tab }the new server object to which this stub is now to be connected.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_OUTOFMEMORY, E_NOINTERFACE, E_UNEXPECTED}
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.4.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcStubBuffer::Disconnect{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IRpcStubBuffer\:functions\:Disconnect}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void IRpcStubBuffer::Disconnect()
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Informs the stub that it should disconnect itself from any server object that it may currently be holding on to. Notice that this function does not return a value.
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.4.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcStubBuffer::Invoke{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IRpcStubBuffer\:functions\:Invoke}}}
\par \pard\plain \s50\fi-3420\li3420\sa60\keepn\widctlpar \f4\fs20\lang1024 HRESULT IRpcStubBuffer::Invoke(pMessage, pChannel)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Invoke the {\f5\fs16 pMessage->iMethod\rquote th }method in the server object interface instance to which this interface stub is currently connected. The RPC runtime infra\-structure (the \ldblquote channel
\rdblquote ) calls this method on the appropriate interface stub upon receipt of an incoming request from some remote client. See the discussion on page {\field{\*\fldinst pageref MultIIDsStub}{\fldrslt {\lang1024 133}}}
 regarding how interface stubs implicitly know the {\f5\fs16 IID }which they are servicing.
\par \pard \qj\sa60\keepn\widctlpar On entry, the members of {\cs58\f5\fs16\lang1024 pMessage} are set as follows:
\par \trowd \trgaph108\trleft-108 \cellx2070\cellx8730 \pard \qj\sa60\keepn\widctlpar\intbl {\b Member Name\cell Value on entry to }{\b\f5\fs16 Invoke()}{\b \cell }\pard \widctlpar\intbl {\b \row }\trowd \trgaph108\trleft-108 \cellx2070\cellx8730 \pard\plain 
\s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 reserved members}\cell \pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 indeterminate. These members are neither to be read nor to be changed by the stub.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 pvBuffer\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 
points to a buffer which contains the marshaled incoming arguments. In the case that there are no such arguments (i.e.: {\f5\fs16 cbBuffer == 0}), {\f5\fs16 pvBuffer }may be {\cs58\f5\fs16\lang1024 NULL}, but will not necessarily be so.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 cbBuffer\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 the size in bytes of the memory buffer to which {\f5\fs16 pvBuffer }
points. If {\f5\fs16 pvBuffer }is {\cs58\f5\fs16\lang1024 NULL}, then {\f5\fs16 cbBuffer }will be zero (but the converse is not necessarily true, as was mentioned in {\f5\fs16 pvBuffer}).\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 iMethod\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 the zero-based method number in the interface which is being invoked\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 dataRepresentation\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 if NDR transfer syntax is being used, then this indicates the byte order, etc., ac
cording to which the data in {\f5\fs16 pvBuffer }has been marshaled.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2070\cellx8730 \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 
rpcFlags\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 indeterminate. Neither to be read nor to be changed by the stub.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb240\sa58\widctlpar \f4\fs20 The stub is
 to do the following:
\par \pard\plain \qj\fi-360\li1080\sa60\widctlpar \f4\fs20 {\f1 \'b7\tab }unmarshal the incoming arguments,
\par {\f1 \'b7\tab }invoke the designated operation in the server object,
\par {\f1 \'b7\tab }ask the channel to allocate a new buffer for the return values and out values,
\par {\f1 \'b7\tab }marshal the return values and out values into the buffer, then
\par {\f1 \'b7\tab }return successfully (i.e.: {\f5\fs16 NOERROR}) from {\f5\fs16 Invoke()}.
\par \pard \qj\sa60\widctlpar Errors may of course occur at various places in this process.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
Be careful with the terminology here: we are not talking at all about what values are returned from the invocation of the server object, but rather only about errors that occur in the unmarshaling and marshaling process itself.}}
 Such errors will cause the stub to return an error from {\f5\fs16 Invoke()} rather than {\f5\fs16 NOERROR}. In cases where such an error code is returned, it is the stub\rquote s re
sponsibility to have cleaned up any data and other resources allocated by the unmarshaling and marshaling processes or returned as out values from the server object. However, the stub is {\i not} responsible for invoking {\f5\fs16 FreeBuffer()}
 to free the actual marshaling buffer (i.e.: it is illegal for the stub to do so); rather, on error return from {\f5\fs16 Invoke() }the caller of {\f5\fs16 Invoke()} will ignore {\f5\fs16 pvBuffer}, and will also free it if non-{\cs58\f5\fs16\lang1024 
NULL}. Hav\-ing made that general statement as to the exit conditions of {\f5\fs16 Invoke()}, let us examine its operation in greater detail.
\par If the stub cannot deal with the indicated {\f5\fs16 dataRepresentation}, it is to return {\f5\fs16 RPC_E_SER\-VER_\-INVALID\-DATA\-REP}. If it understands the data representation, the stub is to then unmarshal the arguments from the buffer provided in {
\f5\fs16 pMessage->pvBuffer}, the size of which is passed in {\f5\fs16 pMessage->cbBuffer}. If the argument data cannot be completely unmarshaled, the server is to free any partially unmarshaled data, then return {\f5\fs16 RPC_E_SER\-VER_\-CANT\-
UNMARSHALDATA} from {\f5\fs16 Invoke()}.
\par If the data is successfully completely unmarshaled, then the interface stub is to invoke the designated method in the designated interface on the server object. Notice that the incoming {\f5\fs16 pvBuffer }
memory buffer is at this time still valid, and that therefore the stub may 
if it wishes and if appropriate for the argument and data representations in question pass to the server object pointers which point directly into this buffer. The memory allocation and data copying that is thus avoided can at times be a significant perfo
rmance opti\-mization.
\par Once the invocation of the server object returns, the stub is to marshal the return value and out parameters returned from the server back to the client. It does so irrespective of whether the server object invocation returned an error
 or success code; that is, the stub marshals back to the client whatever the server object returned.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
However, debugging versions of the stub may if they wish to at this time check that certain details of the contract of the interface have been upheld. A common example of this is checking that on error return from the server allocated out-values are expl
icitly {\cs89\f5\fs12 NULL}ed, a policy which is common to many interfaces. This is simply in the interest of improving the debug capabilities. It is illegal, however, to 
do such things in non-debug versions of stubs; they must always simply marshal back whatever the server returned.}} The stub gets a reply buffer into which to do this marshaling by calling {\f5\fs16 pChannel->GetBuffer()}, passing in the {\f5\fs16 
pMessage }structure that it received in {\f5\fs16 Invoke()}. Before calling {\f5\fs16 GetBuffer()}, the stub is to set the {\f5\fs16 cbBuffer} member to the size that it requires for the to-be-allocated reply buffer. Zero is explicitly a legal value for {
\f5\fs16 cbBuffer}, and the stub must {\i always }call {\f5\fs16 GetBuffer() (}more precisely, to be clear about the error case: the stub must always call {\f5\fs16 GetBuffer()} if the server object method has actually been invoked){\cs38\super \chftn 
{\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab This policy exists in order to enable behind-the-scenes things such as debugging support to function in all cases.}}
 to allocate a reply buffer, even if the stub itself does not require one (such as would be the case if for a void-returning function with no out parameters). The stub must also set {\f5\fs16 dataRepresentation }
as appropriate for the standard by which it intends to marshal the returning values (or would marshal them if there were some).{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
Presently, this is only significant if NDR transfer syntax is in use. In NDR, it is explicitly the case that the return values may be marshaled using a different data representation than was used for the incoming arguments.}} Aside from {\f5\fs16 
cbBuffer, dataRepresentation} and possibly the contents of the bytes inside the memory buffer, on entry to {\f5\fs16 GetBuffer()} no other data accessible from {\f5\fs16 pMessage }may be different than they were on entry to {\f5\fs16 Invoke()}.
\par Before it allocates a reply buffer, the call to {\f5\fs16 GetBuffer()} has the side effect of freeing the memory buffer to which {\f5\fs16 pvBuffer }
presently points. Thus, the act by the interface stub of allocating a reply buffer for the return values necessarily terminates access by the stub to the incoming marshaled arguments.
\par If {\f5\fs16 GetBuffer()} successfully allocates a reply buffer (see {\f5\fs16 GetBuffer()} for a description of how the stub deter\-mines this), then the stub is to marshal the return value and returned out parameters into the buffer accord
ing to the rules of the transfer syntax. Once this is complete, the stub is to set the {\f5\fs16 cbBuffer} member to the number of bytes it actually marshaled (if it marshaled nothing, then it must explicitly set this to zero (but see also {\f5\fs16 
GetBuffer()})), and then return {\f5\fs16 NOERROR }from {\f5\fs16 Invoke()}.
\par If an error occurs during the unmarshaling of the incoming arguments or the marshaling of the return values, then the interface stub is responsible for correctly freeing any resources consumed by the marshaled data. See in particular {\f5\fs16 
CoReleaseMarshalData}{\pard\plain \qj\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 CoReleaseMarshalData}}}{\f5\fs16 ()}. See also the discussion of this topic in {\f5\fs16 IRpcChannel\-Buff\-er\-::\-SendRecieve}{\pard\plain \qj\sa60\widctlpar \v\f5\fs12 {\xe 
{\f5\fs12 IRpcChannel\-Buff\-er\-\:functions\:\-SendRecieve}}}{\f5\fs16 ()}.
\par \pard\plain \s48\fi-3600\li3600\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-3600\li3600\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE *}\tab channel-allocated message structure.
\par {\cs58\f5\fs16\lang1024 pChannel\tab IRpcChannelBuffer *}\tab the channel to use for buffer management, etc.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, RPC_E_SER\-VER_\-INVALID\-DATA\-REP, RPC_E_SER\-VER_\-CANT\-\-UNMARSHALDATA, RPC_E_SERVER_CANTMARSHALDATA}
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.4.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcStubBuffer::IsIIDSupported{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IRpcStubBuffer\:functions\:IsIIDSupported}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 IRpcStubBuffer* IRpcStubBuffer::IsIIDSupported(iid)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Answer whether this stub is designed to handle the unmarshaling of the indicated interface.
\par If the stub buffer supports the specified {\cs58\f5\fs16\lang1024 IID}, then it should return an appropriate {\cs58\f5\fs16\lang1024 IRpcStubBuffer*} for that interface. Otherwise, the it should return {\cs58\f5\fs16\lang1024 NULL}.
\par When presented with the need to remote a new {\cs58\f5\fs16\lang1024 IID} on a given object, the RPC runtime typically calls this function on all the presently-connected interface stubs in an attempt to locate one that can handle the mar
shaling for the request before it goes to the trouble of creating a new stub.
\par As in {\f5\fs16 IPSFactoryBuffer::CreateStub()}, if this stub is presently connected to a server object, then not only must this function verify that the {\i stub} can handle the requested interface id, but it must also verify (using {\f5\fs16 Query\-
Interface()}) that the connected server object in fact supports the indicated interface (depending on the {\f5\fs16 IID} and previous interface servicing requests, it may have already done so).
\par A common special case is the following: interface stubs which are designed to only support one interface id (as most are designed to do) can simply check if {\cs58\f5\fs16\lang1024 iid} designates the one interface that they handle. If not, re
turn false. Otherwise, then if connected check that the server object supports the interface. Otherwise return true.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }the interface that the caller wishes to know if the stub can handle. {\f5\fs16 iid} is never to be {\f5\fs16 IID_IUnknown}.
\par {\cs58\f5\fs16\lang1024 return value\tab IRpcStubBuffer*\tab }see above.
\par {\pntext\pard\plain\b\f5\fs20\lang1024 7.7.4.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcStubBuffer::CountRefs{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IRpcStubBuffer\:functions\:CountRefs}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 ULONG IRpcStub::CountRefs()
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the total number of references that this stub interface instance has on the server object.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 return value\tab ULONG}\tab the number of such references.
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.4.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcStubBuffer::DebugServerQueryInterface{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IRpcStubBuffer\:functions\:DebugServerQueryInterface}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRpcStubBuffer::DebugServerQueryInterface(ppv) 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
This function exists in order to facilitate the support of debuggers which wish to provide transparency when single-stepping, etc., across remote invocations on objects. As such, the semantics of this function are a little strange in order to avoid the un
necessarily disturbing the state of the actual server object.
\par If the stub is not presently connected then set {\f5\fs16 *ppv} to {\cs58\f5\fs16\lang1024 NULL} (per the usual error-case convention) and return {\f5\fs16 E_UNEX\-PECTED}. If connected b
ut this stub does not support the indicated interface (in the sense expressed in {\f5\fs16 IsIIDSupported()}), then (set {\f5\fs16 *ppv }to {\cs58\f5\fs16\lang1024 NULL} and) return {\f5\fs16 E_NOINTERFACE }instead.
\par Otherwise, return the interface pointer on the connected server object which would be used by an immediate subsequent invocation of {\f5\fs16 Invoke()} on this interface stub (see the discussion on page {\field{\*\fldinst pageref MultIIDsStub}{\fldrslt {
\lang1024 133}}} regarding how interface stubs implicitly know the {\f5\fs16 IID }which they are servicing){\f5\fs16 .} {\f5\fs16 Debug\-Server\-\-Query\-Inter\-face()} is anal\-ogous to invoking {\f5\fs16 QueryInterface()}
 on the server itself with the important difference that the caller will later call {\f5\fs16 Debu}{\f5\fs16 g}{\f5\fs16 ServerRelease()} to indicate that he is done with the pointer instead of releasing the returned pointer himself. It is required that {
\f5\fs16 DebugServerRelease()} be called before the interface stub itself is destroyed or, in fact, before it is disconnected.
\par In the vast majority of interface stub implementations, {\f5\fs16 DebugServerQueryInterface() }can therefore be imple\-mented simply by returning an internal state variable inside the interface stub itself without doing an {\f5\fs16 A}{\f5\fs16 d}{
\f5\fs16 dRef()} on the server or otherwise running any code in the actual server object. In such implementations, {\f5\fs16 De\-bug\-ServerRelease() }will be a completely empty no-op. The other rational implementation is one where {\f5\fs16 De\-bug\-
ServerQueryInterface()} does a {\f5\fs16 Query\-Interface() }on the server object and {\f5\fs16 DebugServerRelease() }does a corresponding {\f5\fs16 Release()}
, but as this actually runs server code, the former implementation is highly preferred if at all achievable.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppv\tab void**\tab }the place at which the interface pointer is to be returned.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_NOINTERFACE, E_UNEXPECTED}
\par {\pntext\pard\plain\b\fs20\lang1024 7.7.4.7\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRpcStubBuffer::DebugServerRelease{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f5\fs12\lang1024 {\xe {\f5\fs12 IRpcStubBuffer\:functions\:DebugServerRelease}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void IRpcStubBuffer::DebugServerRelease(pv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Indicate that an interface pointer returned previously from {\f5\fs16 DebugServerQueryInterface()} is no longer needed by the caller. In most implementations, {\f5\fs16 DebugServerRelease()}
 is a completely empty no-op; see the description of {\f5\fs16 DebugServerQueryInterface()} for details.
\par {\*\bkmkstart _Toc308953734}{\*\bkmkstart _Toc324051629}{\*\bkmkstart _Toc324051814}{\*\bkmkstart _Toc324052056}{\*\bkmkstart _Toc335041432}{\*\bkmkstart _Toc337439349}{\*\bkmkstart _Toc337870060}{\*\bkmkstart _Toc339182973}{\pntext\pard\plain\b 7.8\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Marshaling - Related API Functions{\*\bkmkend _Toc308953734}{\*\bkmkend _Toc324051629}{\*\bkmkend _Toc324051814}
{\*\bkmkend _Toc324052056}{\*\bkmkend _Toc335041432}{\*\bkmkend _Toc337439349}{\*\bkmkend _Toc337870060}{\*\bkmkend _Toc339182973}
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 The following functions are related to the process of remoting interface pointers and to marshaling in general.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 HRESULT\tab {\b 
CoMarshalInterface}(pstm, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
\par HRESULT\tab {\b CoUnmarshalInterface}(pstm, iid, ppv);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 HRESULT\tab {\b CoDisconnectObject}
(pUnkInterface, dwReserved);
\par {\*\bkmkstart there}{\*\bkmkend there}HRESULT\tab {\b CoReleaseMarshalData}(pstm);
\par HRESULT \tab {\b CoGetStandardMarshal}(iid, pUnkObject, dwDestContext, pvDestContext, mshlflags, ppmarshal);
\par 
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 typedef enum tagMSHLFLAGS \{
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab MSHLFLAGS_NORMAL\tab \tab \tab = 0,
\par \tab MSHLFLAGS_TABLESTRONG\tab = 1,
\par \tab MSHLFLAGS_TABLEWEAK\tab \tab = 2,
\par \tab \} {\b MSHLFLAGS}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {
\fs12 MSHLFLAGS}}};
\par {\pntext\pard\plain\b\fs20\lang1024 7.8.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoMarshalInterface{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CoMarshalInterface}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoMarshalInterface(pstm, riid, pUnk, dwDestContext, pvDestContext, mshlflags)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Marshal the interface {\cs58\f5\fs16\lang1024 riid} on the object on which {\cs58\f5\fs16\lang1024 pUnk} is an {\cs58\f5\fs16\lang1024 IUnknown*} into the given stream in such a way as it can be recon\-sti\-tu\-
ted in the destination using {\f5\fs16 CoUnmarshalInterface()}.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
That is, the mechanism for unmarshaling a marshaled interface pointer is the {\i same} irrespective of whether the marshaling was done using custom or standard marshaling.}}
 This the root level function by which an interface pointer can be marshaled into a stream. It carries out the test for custom marshaling, using it if present, and carries out standard marshaling if not. This func\-
tion is normally only called by code in interface proxies or interface stubs that wish to marshal an inter\-face pointer parameter, though it will sometimes also be called by objects which support custom marshaling.
\par {\cs58\f5\fs16\lang1024 riid }indicates the interface on the object which is to be marshaled. It is specifically {\i not }the case that {\cs58\f5\fs16\lang1024 pUnk} need actually be of interface {\cs58\f5\fs16\lang1024 riid}; this function will {
\f5\fs16 QueryInterface} from {\f5\fs16 pUnk} to determine the actual interface pointer to be marshaled.
\par {\f5\fs16 dwDestContext} is a bit field which identifies the execution context relative to the current context in which the unmarshaling will be done. Different marshaling might be done, fo
r example, depending on whether the unmarshal happens on the same workstation vs. on a different workstation on the network; an object could choose to do custom marshaling in one case but not the other. The legal values for {\f5\fs16 dwDestContext}
 are taken from the enumeration {\f5\fs16 MSHCTX}, which presently contains the following values.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef enum tagMSHCTX \{

\par \tab MSHCTX_NOSHAREDMEM{\pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 
{\xe {\fs12 MSHCTX_NOSHAREDMEM}}}\tab \tab \tab \tab = 1,
\par \tab MSHCTX_DIFFERENTMACHINE{\pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 
\v\f5\fs12\lang1024 {\xe {\fs12 MSHCTX_DIFFERENTMACHINE}}}\tab \tab \tab = 2,
\par \tab MSHCTX_SAMEPROCESS\tab \tab \tab \tab = 4,
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \} {\b MSHCTX}{\pard\plain 
\s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 MSHCTX}}};
\par \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 These flags have the following meanings.
\par \pard\plain \s48\fi-2610\li2610\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f4\fs20 {\b Value\tab Description
\par }\pard\plain \s49\fi-2610\li2610\sa58\keepn\widctlpar \f4\fs20 {\f5\fs16 MSHCTX_NOSHAREDMEM}\tab The unmarshaling context does not have shared memory access with the marshaling context.
\par {\f5\fs16 MSHCTX_DIFFERENTMACHINE\tab }
If this flag is set, then it cannot be assumed that this marshaling is being carried out to the same machine as that on which the marshaling is being done. The unmarshaling context is (very probably) on a computer with a differ\-
ent set of installed applications / components than the marshaling context (i.e.: is on a different computer). This is significant in that the mar
shaling cannot in this case assume that it knows whether a certain piece of application code is installed remotely.
\par {\cs58\f5\fs16\lang1024 MSHCTX_SAMEPROCESS\tab }The interface is being marshaled to another apartment within the same process in which it is being unmarshaled.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In the future, more {\f5\fs16 MSHCTX} flags may be defined; recall that this is a bit field.
\par {\f5\fs16 pvDestContext} is a parameter that optionally supplies additional information about the destination of the marshaling. If non-{\cs58\f5\fs16\lang1024 NULL}, then it is a pointer to a structure of the following form.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef struct MSHCTXDATA \{
\par \tab ULONG\tab \tab \tab \tab cbStruct;
\par \tab IRpcChannelBuffer*\tab \tab pChannel;
\par \tab \} {\b MSHCTXDATA}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \b\v\f4\fs12\lang1024 {\xe {
\b\f4\fs12 MSHCTXDATA}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The members in this structure have the following meanings:
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Value\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 cbStruct}\tab The size of the {\cs58\f5\fs16\lang1024 MSHCTXDATA }structure in bytes.
\par {\f5\fs16 pChannel}\tab The channel object involved in the marshaling process.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 pvDestContext} may legally be {\cs58\f5\fs16\lang1024 NULL}, in which case such data is not provided.
\par {\cs58\f5\fs16\lang1024 mslflags }indicates the purpose for which the marshal is taking place, as was discussed in an earlier part of this document. Values for this parameter are taken from the enumeration {\f5\fs16 MSHLFLAGS}, and have the follow
ing interpretation.
\par \pard\plain \s48\fi-2610\li2610\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f4\fs20 {\b Value\tab Description
\par }\pard\plain \s49\fi-2610\li2610\sa58\keepn\widctlpar \f4\fs20 {\f5\fs16 MSHLFLAGS_NORMAL}\tab The marshaling is occurring because of the normal case of passing an inter
face from one process to another. The marshaled-data-packet that results from the call will be transported to the other process, where it will be unmarshaled (see {\f5\fs16 CoUnmarshalInterface}).
\par \tab With this flag, the marshaled data packet will be unmarshaled either one or zero times. {\f5\fs16 CoRelease\-Marshal\-Data} is always (eventually) called to free the data packet.
\par {\f5\fs16 MSHLFLAGS_TABLESTRONG}\tab 
The marshaling is occurring because the data-packet is to be stored in a globally-accessible table from which it is to be unmarshaled zero, one, or more times. Further, the presence of the data-packet in the table is to count as a reference on the marsha
led interface.
\par \tab When removed from the table, it is the responsibility of the table implementor to call {\f5\fs16 CoReleaseMarshalData} on the data-packet.
\par {\f5\fs16 MSHLFLAGS_TABLEWEAK}\tab The marshaling is occurring because the data-packet is to be stored in a globally-accessible table from which it is to be unmarshaled zero, one, or more times. However, the presence of the data-packet in the table is {
\i not }to count as a reference on the marshaled interface.
\par \tab Destruction of the data-packet is as in the {\f5\fs16 MSHLFLAGS_TABLESTRONG case.}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A consequence of this design is that the marshaled data packet will want to store the value of {\cs58\f5\fs16\lang1024 mshlflags }in the marshaled data so as to be able to do the right thing at unmarshal time.

\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pstm\tab IStream *\tab }the stream onto which the object should be marshaled. The stream passed to this function must be dynamically growable.
\par {\cs58\f5\fs16\lang1024 riid\tab REFIID\tab }the interface that we wish to marshal.
\par {\cs58\f5\fs16\lang1024 pUnk\tab IUnknown *\tab }the object on which we wish to marshal the interface {\cs58\f5\fs16\lang1024 riid}.
\par {\cs58\f5\fs16\lang1024 dwDestContext\tab DWORD\tab }the destination context in which the unmarshaling will occur.
\par {\cs58\f5\fs16\lang1024 pvDestContext\tab void*\tab }as described above.
\par {\cs58\f5\fs16\lang1024 mshlflags\tab DWORD\tab }the reason that the marshaling is taking place.
\par \pard \s49\fi-2880\li2880\sa58\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, STG_E_MEDIUMFULL, E_NOINTERFACE, E_FAIL
\par {\pntext\pard\plain\b\fs20\lang1024 7.8.1.2\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoUnmarshalInterface{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CoUnmarshalInterface}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoUnmarshalInterface(pstm, iid, ppv)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Unmarshal from the given stream an object previously marshaled with {\cs58\f5\fs16\lang1024 CoMarshalInterface}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pstm\tab IStream *\tab }the stream from which the object should be unmarshaled. 
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }the interface with which we wish to talk to the reconstituted object.
\par {\cs58\f5\fs16\lang1024 ppv\tab void **\tab }the place in which we should return the interface pointer.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_FAIL, E_NOINTERFACE
\par {\pntext\pard\plain\b\fs20\lang1024 7.8.1.3\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoDisconnectObject{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CoDisconnectObject}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoDisconnectObject(pUnkInterface, dwReserved)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This function severs any extant Remote Procedure Call connections that are being maintained on behalf of all the interface pointers on this object. This is a very rude operation, and is not to be used in the nor\-
mal course of processing; clients of interfaces should use {\f5\fs16 IUnknown::Release()} in\-stead. In effect, this function is a privileged operation, which should only be invoked by the process in which the object actually is managed.
\par The primary purpose of this operation is to give an application process certain and definite control over remoting con\-nections to other processes that may have been made from objects managed by the process. If the applica\-
tion process wishes to exit, then we do not want it to be the case that the extant ref\-er\-ence counts from clients of the application\rquote 
s objects in fact keeps the process alive. When the application process wishes to exit, it should inform the extant clients of its objects{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super 
\chftn } \tab using a higher-level notification scheme appropriate for the semantics of the particular connection. An example of this is OLE 2.0 is broadcasting IAdviseSink::OnClose() to connected links.}} that the objects are going away. Having so in
formed its clients, the process can then call this function for each of the object that it manages, even without waiting for a
 confirmation from each client. Having thus released resources maintained by the remoting connections, the application process can exit safely and cleanly. In effect, {\f5\fs16 CoDisconnectObject()} causes a controlled crash of the remoting con\-
nections to the object. It is also (one of) the triggers by which a client\rquote s subsequent {\f5\fs16 IRpcChannel::IsConnected()} call may return false.
\par For illustration, contrast this with the situation with Microsoft\rquote s elderly Dynamic Data Exchange (DDE) desktop application integration protocol. If it has extant DDE connections, an applica\-
tion is required to send a DDE Terminate message before exiting, and it is {\i also }responsible for waiting around for an acknowledgment from each client before it can actually exit. Thus, if the client process has crashed, the appli
cation process will wait around forever. Because of this, with DDE there simply is no way for an application process to reliably and robustly terminate itself. Using {\f5\fs16 CoDis\-con\-nectObject()}, we avoid this sort of situation.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 punkInterface\tab IUnknown *\tab }the object that we wish to disconnect. May be any interface on the object which is polymorphic with {\cs58\f5\fs16\lang1024 
IUnknown*}, not necessarily the exact interface returned by {\f5\fs16 QueryInterface(IID_IUnknown...).}
\par {\cs58\f5\fs16\lang1024 dwReserved\tab DWORD\tab }reserved for future use; must be zero.
\par \pard \s49\fi-2880\li2880\sa58\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_FAIL}
\par {\pntext\pard\plain\b\fs20\lang1024 7.8.1.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoReleaseMarshalData{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CoReleaseMarshalData}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoReleaseMarshalData(pstm)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This helper function destroys a previously marshaled data packet. This function must always be called in order to destroy data packets. Examples of when this occurs include:
\par \pard \qj\fi-360\li1080\sa60\widctlpar 1.\tab an internal error during an RPC invocation prevented the {\cs58\f5\fs16\lang1024 UnmarshalInterface()} operation from being attempted.
\par 2.\tab a marshaled-data-packet was removed from a global table.
\par 3.\tab following a successful, normal, unmarshal call.
\par \pard \qj\sa60\widctlpar This function works as should be expected: the class id is obtained from the stream; an instance is created; {\cs58\f5\fs16\lang1024 IMarshal} is obtained from that instance; then {\f5\fs16 IMarshal::ReleaseMarshalData()}
 is invoked.
\par Note for clarity: {\f5\fs16 CoReleaseMarshalData()} is not to be called following a normal, successful {\f5\fs16 CoUnmarshalInter\-face()}, as the latter function does this automatically for {\f5\fs16 MSHLFLAGS_NORMAL}{\pard\plain \qj\sa60\widctlpar 
\v\f5\fs12 {\xe {\f5\fs12 MSHLFLAGS_NORMAL}}}{\f5\fs12 .} However, clients that use {\cs58\f5\fs16\lang1024 IMarshal} interface directly, rather than simply going through the functions {\f5\fs16 CoMarshal/UnmarshalInterface()}
, etc., must of course themselves always call {\f5\fs16 IMarshal::ReleaseMarshalData()} after calling {\f5\fs16 IMarshal::Unmarshal\-Inter\-face()}.{\f5\fs16 
\par }\pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pstm\tab IStream*}\tab a pointer to a stream that contains the data packet which is to be destroyed.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT}\tab {\f5\fs16 S_OK, E_FAIL
\par {\pntext\pard\plain\b\fs20\lang1024 7.8.1.5\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoGetStandardMarshal{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CoGetStandardMarshal}}}
\par \pard\plain \s50\fi-1440\li1440\ri-360\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoGetStandardMarshal(iid, pUnkObject, dwDestContext, pvDestContext, mshlflags, ppmarshal)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return an {\cs58\f5\fs16\lang1024 IMarshal} instance that knows how to do the standard marshaling and unmarshaling in order to create a proxy in the indicated destination context. Custom marshaling
 implementations should delegate to the marshaler here returned for destination contexts that they do not fully understand or for which they choose not to take special action. The standard marshaler is also used in the case that the object being marshaled
 does not support custom marshaling.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }the interface id we would like to marshal.
\par {\cs58\f5\fs16\lang1024 pUnkObject\tab IUnknown*}\tab the object that we wish to marshal. It is specifically {\i not} the case that this interface is known to be of shape iid; rather, it can be any interface on the object which conforms to {
\cs58\f5\fs16\lang1024 IUnknown}. The standard marshaler will internally do a {\f5\fs16 QueryInterface()}.
\par {\cs58\f5\fs16\lang1024 dwDestContext\tab DWORD\tab }the destination context in which the unmarshaling will occur.
\par {\cs58\f5\fs16\lang1024 pvDestContext\tab void *\tab }associated with the destination context.
\par {\cs58\f5\fs16\lang1024 mshlflags\tab DWORD\tab }the marshal flags for the marshaling operation.
\par {\cs58\f5\fs16\lang1024 ppmarshal\tab IMarshal **}\tab the place at which the standard marshaler should be returned.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab }{\f5\fs16 S_OK, E_FAIL
\par {\pntext\pard\plain\f5\fs12\lang1024 7.8.1.6\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoGetMarshalSizeMax{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 CoGetMarshalSizeMax}}}{\b0\f5\fs12 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoGetMarshalSizeMax(riid, pUnk, dwDestContext, pvDestContext, mshlfags, pulSize)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the number of bytes needed to marshal the given interface on the given object. On successful exit, the value pointed to by {\f5\fs16 *pulSize }will have been {\i incremented }by the number of bytes required.

\par This function is useful to custom marshaling implementations which themselves internally marshal inter\-face pointers as part of their state.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 riid\tab REFIID\tab }the interface on the object which is to be marshaled.
\par {\cs58\f5\fs16\lang1024 pUnk\tab IUnknown*\tab }an {\cs58\f5\fs16\lang1024 IUnknown} (any old one) on the object.
\par \pard \s49\fi-2880\li2880\sa58\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 dwDestContext\tab DWORD\tab }the context into which the object is to be marshaled.
\par {\cs58\f5\fs16\lang1024 pvDestContext\tab void *\tab }the context into which the object is to be marshaled.
\par {\cs58\f5\fs16\lang1024 mshlflags\tab DWORD\tab }the marshal flags for the marshaling operation
\par {\cs58\f5\fs16\lang1024 pulSize\tab ULONG *\tab }the place at which the required size is to be returned.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT\tab S_OK, E_NOINTERFACE, E_OUTOFMEMORY, E_UNEXPECTED}
\par {\*\bkmkstart _Toc308953735}{\*\bkmkstart _Toc324051630}{\*\bkmkstart _Toc324051815}{\*\bkmkstart _Toc324052057}{\*\bkmkstart _Toc335041433}{\*\bkmkstart _Toc337439350}{\*\bkmkstart _Toc337870061}{\*\bkmkstart _Toc339182974}{\pntext\pard\plain\b 7.9\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 IMarshal interface{\*\bkmkend _Toc308953735}{\*\bkmkend _Toc324051630}{\*\bkmkend _Toc324051815}{\*\bkmkend _Toc324052057}
{\*\bkmkend _Toc335041433}{\*\bkmkend _Toc337439350}{\*\bkmkend _Toc337870061}{\*\bkmkend _Toc339182974}
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IMarshal} interface is the mechanism by which an object is custom-marshaled. {\cs58\f5\fs16\lang1024 IMarshal} is defined as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IMarshal }
: IUnknown \{
\par \pard \s57\fi-720\li1080\ri-360\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b GetUnmarshalClass}
(iid, pvInterface, dwDestContext, pvDestContext, mshlflags, pclsid);
\par \pard \s57\fi-720\li1080\ri-360\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b GetMarshalSizeMax}
(iid, pvInterface, dwDestContext, pvDestContext, mshlflags, pcb);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b MarshalInterface}
(pstm, iid, pvInterface, dwDestContext, pvDestContext, mshlflags);
\par \tab HRESULT\tab {\b UnmarshalInterface}(pstm, iid, ppvInterface);
\par \tab HRESULT\tab {\b DisconnectObject}(dwReserved);
\par \tab HRESULT\tab {\b ReleaseMarshalData}(pstm);
\par \tab \};
\par \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 The process of custom marshaling an interface pointer involves two steps, with an optional third:
\par \pard\plain \qj\fi-360\li1080\sa60\widctlpar \f4\fs20 1.\tab The code doing the marshaling calls {\cs58\f5\fs16\lang1024 IMarshal::GetUnmarshalClass()}
. This returns the class id that will be used to create an uninitialized proxy object  in the unmarshaling context.
\par 2.\tab (optional) The marshaler calls {\cs58\f5\fs16\lang1024 IMarshal::GetMarshalSizeMax()} to learn an upper bound on the amount of memory that will be required by the object to do the marshaling.
\par 3.\tab The marshaler calls {\cs58\f5\fs16\lang1024 IMarshal::MarshalInterface()} to carry out the marshaling.
\par \pard \qj\sa60\keepn\widctlpar The class id and the bits that were marshaled into the stream are then conveyed by appropriate means to the destination, where they are unmarshaled. Unmarshaling involves the following essential steps:
\par \pard \qj\fi-360\li1080\sa60\keepn\widctlpar 1.\tab Load the class object that corresponds to the class that the server said to use in {\cs58\f5\fs16\lang1024 GetUnmar\-shal\-Class()}.
\par \pard\plain \s57\fi-720\li2160\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 IClassFactory * pcf;
\par CoGetClassObject(clsid, CLSCTX_INPROCSERVER, IID_IClassFactory, &pcf);
\par \pard\plain \s44\qj\fi-360\li1080\sb60\sa58\widctlpar \f4\fs20 2.\tab Instantiate the class, asking for {\cs58\f5\fs16\lang1024 IMarshal} interface:
\par \pard\plain \s57\fi-720\li2160\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 IMarshal * proxy;
\par pcf->CreateInstance(NULL, IID_IMarshal, &proxy);
\par \pard\plain \s44\qj\fi-360\li1080\sb60\sa58\widctlpar \f4\fs20 3.\tab Initialize the proxy with {\cs58\f5\fs16\lang1024 IMarshal::UnmarshalInterface()} using a copy of the bits that were originally pro\-duced by {\cs58\f5\fs16\lang1024 
IMarshal::MarshalInterface()} and asking for the interface that was originally marshaled.
\par \pard\plain \s57\fi-720\li2160\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 IOriginal * pobj;
\par proxy->UnmarshalInterface(pstm, IID_Original, &pboj);
\par proxy->Release();
\par pcf->Release();
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The object proxy is now ready for use.
\par {\pntext\pard\plain\b\fs20\lang1024 7.9.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMarshal::GetUnmarshalClass{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IMarshal\:functions\:GetUnmarshalClass}}}
\par \pard\plain \s50\fi-1440\li1440\ri-360\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMarshal::GetUnmarshalClass(iid, pvInterface, dwDestContext, pvDestContext, mshlflags, pclsid)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Answer the class that should be used in the unmarshaling process to create an uninitialized object proxy.
\par {\cs58\f5\fs16\lang1024 dwDestContext} is described in the API function {\cs58\f5\fs16\lang1024 CoMarshalInterface}. The implementation of {\cs58\f5\fs16\lang1024 Get\-Un\-mar\-shal\-Class}
 may wish for some destination contexts for which it takes no special action to delegate to the standard marshaling implementation, which is available through {\cs58\f5\fs16\lang1024 CoGetStandardMarshal}. In addition, this delegation should {\i always }
be done if the {\cs58\f5\fs16\lang1024 dwDestContext }parameter contains any flags that the {\cs58\f5\fs16\lang1024 GetUn\-mar\-shal\-Class}
 does not fully understand; it is by this means that we can extend the richness of destination contexts in the future. For ex
ample, in the future, one of these bits will likely be defined to indicate that the destination of the marshaling is across the network.
\par If the caller already has in hand the {\cs58\f5\fs16\lang1024 iid} interface identified as being marshaled, he should pass the inter\-face pointer through {\cs58\f5\fs16\lang1024 pvInterface}. If he does not have
 this interface already, then he should pass {\cs58\f5\fs16\lang1024 NULL}. This pointer can sometimes, though rarely, be used in order to determine the appropriate unmarshal class. If the {\cs58\f5\fs16\lang1024 IMarshal }
implementation really needs it, in can always {\cs58\f5\fs16\lang1024 QueryInterface} on itself to retrieve the interface pointer; we optionally pass it here only to improve efficiency.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 iid\tab REFIID}\tab the interface on this object that we are going to marshal.
\par {\cs58\f5\fs16\lang1024 pvInterface\tab void *}\tab the actual pointer that will be marshaled. May be {\cs58\f5\fs16\lang1024 NULL}.
\par {\cs58\f5\fs16\lang1024 dwDestContext\tab DWORD}\tab the destination context relative to the current context in which the unmarshaling will be done.
\par {\cs58\f5\fs16\lang1024 pvDestContext\tab void*}\tab non-{\cs58\f5\fs16\lang1024 NULL} for some {\cs58\f5\fs16\lang1024 dwDestContext} values.
\par {\cs58\f5\fs16\lang1024 mshlflags\tab DWORD}\tab as in {\cs58\f5\fs16\lang1024 CoMarshalInterface().}
\par {\cs58\f5\fs16\lang1024 pclsid\tab CLSID *}\tab the class to be used in the unmarshaling process.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT}\tab {\f5\fs16 S_OK, E_FAIL, E_NOINTERFACE, E_UNEXPECTED}
\par {\pntext\pard\plain\b\fs20\lang1024 7.9.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMarshal::MarshalInterface{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IMarshal\:functions\:MarshalInterface}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMarshal::MarshalInterface(pstm, iid, pvInterface, dwDestContext, pvDestContext, mshlflags)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Marshal a reference to the interface {\cs58\f5\fs16\lang1024 iid} of this object into the given stream. The interface actually marshaled is the one that would be returned by {\cs58\f5\fs16\lang1024 
this->QueryInterface(iid, ...)}. Once the contents of this stream are conveyed to the destination by whatever means, the interface reference can be reconstituted by in\-stan\-tiating with {\cs58\f5\fs16\lang1024 IMarshal }
interface the class here retrievable with {\cs58\f5\fs16\lang1024 GetUnmarshalClass} and then calling {\cs58\f5\fs16\lang1024 IMarshal::UnmarshalInterface}. The implementation of {\cs58\f5\fs16\lang1024 IMarshal::MarshalInterface}
 writes in the stream any data required for initial\-iza\-tion of this proxy.
\par If the caller already has in hand the iid interface identified as being marshaled, he should pass the inter\-face pointer through pvInterface. If he does not have this interface already, then he should pass {\cs58\f5\fs16\lang1024 NULL}; the {
\cs58\f5\fs16\lang1024 IMarshal }implementation will {\cs58\f5\fs16\lang1024 QueryInterface} on itself to retrieve the interface pointer.
\par On exit from this function, the seek pointer in the stream must be positioned immediately after the last byte of data written to the stream.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pstm\tab IStream *}\tab the stream onto which the object should be marshaled. 
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }the interface of this object that we wish to marshal.
\par {\cs58\f5\fs16\lang1024 pvInterface\tab void *\tab }the actual pointer that will be marshaled. May be {\cs58\f5\fs16\lang1024 NULL}.
\par {\cs58\f5\fs16\lang1024 dwDestContext\tab DWORD}\tab as in {\cs58\f5\fs16\lang1024 CoMarshalInterface()}.
\par {\cs58\f5\fs16\lang1024 pvDestContext\tab void *\tab }as in {\cs58\f5\fs16\lang1024 CoMarshalInterface()}.
\par {\cs58\f5\fs16\lang1024 mshlflags\tab DWORD}\tab as in {\cs58\f5\fs16\lang1024 CoMarshalInterface()}.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT}\tab {\f5\fs16 S_OK, E_FAIL, E_NOINTERFACE, STG_E_MEDIUMFULL, E_UNEXPECTED}
\par {\pntext\pard\plain\b\fs20\lang1024 7.9.1.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMarshal::GetMarshalSizeMax{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IMarshal\:functions\:GetMarshalSizeMax}}}
\par \pard\plain \s50\fi-1440\li1440\ri-270\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMarshal::GetMarshalSizeMax(iid, pvInterface, dwDestContext, pvDestContext, mshlflags, pcb)
\par \pard\plain \s84\qj\sa60\widctlpar \f4\fs20 Return an upper bound on the amount of data that would be written into the marshaling stream in an {\f5\fs16 IMa}{\f5\fs16 r}{\f5\fs16 shal::MarshalInterface() }
stream. The value returned must be an upper bound in the sense that it must be the case that a subsequent call to {\f5\fs16 MarshalInterface() }in fact require no more than the indicated number of bytes of marshaled data.
\par Callers can optionally use the returned upper bound to pre-allocate stream buffers used in the marshaling process. Note that when {\f5\fs16 IMarshal::MarshalInterface() }is ultimately called, the {\f5\fs16 IMarshal}
 implementation cannot rely on the caller actually having called {\f5\fs16 GetMarshalSizeMax() }beforehand; it must still be wary of {\f5\fs16 STG_E_MEDIUMFULL} errors returned by the stream.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The value returned by this function is guaranteed by the callee to be a conservative estimate of the amount of data needed to ma
rshal the object; it is valid so long as the object instance is alive. Violation of this can be treated as a catastrophic error. To repeat for emphasis: an object {\i must}
 return a reasonable maximum size needed for marshaling: callers have the option of allo\-cating a fixed-size marshaling buffer.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 iid\tab REFIID}\tab the interface of this object that we wish to marshal.
\par {\cs58\f5\fs16\lang1024 pvInterface\tab void *}\tab the actual pointer that will be marshaled. May be {\cs58\f5\fs16\lang1024 NULL}.
\par {\cs58\f5\fs16\lang1024 dwDestContext\tab DWORD}\tab as in {\f5\fs16 CoMarshalInterface()}.
\par {\cs58\f5\fs16\lang1024 pvDestContext\tab void *}\tab as in {\f5\fs16 CoMarshalInterface()}.
\par {\cs58\f5\fs16\lang1024 mshlflags\tab DWORD}\tab as in {\f5\fs16 CoMarshalInterface()}.
\par {\cs58\f5\fs16\lang1024 pcb\tab ULONG *}\tab the place at which the maximum marshal size should be returned. A return of zero indicates \ldblquote unknown maximum size.\rdblquote 
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT}\tab {\f5\fs16 S_OK, E_FAIL, E_NOINTERFACE, E_UNEXPECTED
\par {\pntext\pard\plain\b\fs20\lang1024 7.9.1.4\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMarshal::UnmarshalInterface{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IMarshal\:functions\:UnmarshalInterface}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMarshal::UnmarshalInterface(pstm, iid, ppvInterface)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This is called as part of the unmarshaling process in order to initialize a newly created proxy; see the above sketch of the unmarshaling process for more details.
\par {\cs58\f5\fs16\lang1024 iid }indicates the interface that the caller in fact would like to retrieve from this object; this interface instance is returned through {\f5\fs16 ppvInterface}. In order to support this, {\cs58\f5\fs16\lang1024 UnmarshalInterface
} will often merely do a {\cs58\f5\fs16\lang1024 Query\-Interface(iid, ppvInterface)} on itself immediately before returning, though it is free to create a different object (an object with a different identity) if it wishes.
\par On successful exit from this function, 
the seek pointer must be positioned immediately after the data read from the stream. On error exit, the seek pointer should still be in this location: even in the face of an error, the stream should be positioned as if the unmarshal were successful.

\par See also {\cs58\f5\fs16\lang1024 CoReleaseMarshalData}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pstm\tab IStream *}\tab the stream from which the interface should be unmarshaled. 
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID}\tab the interface that the caller ultimately wants from the object.
\par {\cs58\f5\fs16\lang1024 ppvInterface\tab void **}\tab the place at which the interface the caller wants is to be returned.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT}\tab {\f5\fs16 S_OK, E_FAIL, E_NOINTERFACE, E_UNEXPECTED
\par {\pntext\pard\plain\b\fs20\lang1024 7.9.1.5\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMarshal::Disconnect{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f9\fs12\lang1024 {\xe {\f9\fs12 IMarshal\:functions\:Disconnect}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMarshal::DisconnectObject(dwReserved)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This function is called by the implementation of {\cs58\f5\fs16\lang1024 CoDisconnectObject}
 in the event that the object attempting to be disconnected in fact supports custom marshaling. This is completely analogous to how {\cs58\f5\fs16\lang1024 CoMarshalInterface} defers to {\cs58\f5\fs16\lang1024 IMarshal::MarshalInterface}
 in if the object supports {\cs58\f5\fs16\lang1024 IMarshal}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 dwReserved\tab DWORD}\tab as in {\f5\fs16 CoDisconnectObject()}.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT}\tab as in {\f5\fs16 CoDisconnectObject()}.
\par {\pntext\pard\plain\b\f5\fs20\lang1024 7.9.1.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMarshal::ReleaseMarshalData{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMarshal\:functions\:ReleaseMarshalData}}}{\f5 
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 HRESULT IMarshal::ReleaseMarshalData(pstm)
\par This function is called by {\cs58\f5\fs16\lang1024 CoReleaseMarshalData}() in order to actually carry out the destruction of a marshaled-data-packet. See that function for more details.
\par Note that whereas the {\f5\fs16 IMarshal} methods
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 \tab GetUmarshalClass
\par \tab GetMarshalSizeMax
\par \tab MarshalInterface
\par \tab Disconnect
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 are always called on the {\f5\fs16 IMarshal} interface instance in the originating side (server side), the method
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 \tab UnmarshalInterface
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 is called on the receiving (client) side. (This should be no surprise.) However, the function
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 \tab ReleaseMarshalData
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 (when needed) will be called on the receiving (client) side if the appropriate {\f5\fs16 IMarshal} instance can be successfully created there; otherwise, it is invoked on the originating (server) side.

\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pstm\tab IStream*}\tab as in {\f5\fs16 CoReleaseMarshalData()}.
\par {\cs58\f5\fs16\lang1024 return value\tab HRESULT}\tab as in {\f5\fs16 CoReleaseMarshalData()}.
\par {\*\bkmkstart _Toc324051631}{\*\bkmkstart _Toc324051816}{\*\bkmkstart _Toc324052058}{\*\bkmkstart _Toc335041434}{\*\bkmkstart _Toc337439351}{\*\bkmkstart _Toc337870062}{\*\bkmkstart _Toc339182975}{\pntext\pard\plain\b 7.10\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 IStdMarshalInfo interface{\*\bkmkend _Toc324051631}{\*\bkmkend _Toc324051816}{\*\bkmkend _Toc324052058}{\*\bkmkend _Toc335041434}
{\*\bkmkend _Toc337439351}{\*\bkmkend _Toc337870062}{\*\bkmkend _Toc339182975}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IStdMarshalInfo }is implemented by objects wishing to support handler marshaling{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 handler marshalling}}} in their remote client proc
ess. This is common, for example, for OLE 2 compound document embedded objects which for example support client-side drawing related interfaces using the {\cs58\f5\fs16\lang1024 IViewObject }
interface, an interface which is not (usually) supported on the actual embedding itself.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IStdMarshalInfo 
}: IUnknown \{
\par \tab HRESULT\tab {\b GetClassForHandler}({\cs61\fs12 DWORD }dwDestContext, {\cs61\fs12 void* }pvDestContext, {\cs61\fs12 CLISD* }pclsid);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 7.10.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IStdMarshalInfo::GetClassForHandler{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 IStdMarshalInfo\:functions\:GetClassForHandler}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IStdMarshalInfo::GetClassForHandler(dwDestContext, dwDestContext, pclsid)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the {\cs58\f5\fs16\lang1024 CLSID }whose handler is to be used in the remote client process.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 dwDestContext\tab DWORD}\tab As in {\f5\fs16 CoMarshalInterface}.
\par {\cs58\f5\fs16\lang1024 pvDestContext\tab void*}\tab As in {\f5\fs16 CoMarshalInterface}.
\par {\cs58\f5\fs16\lang1024 pclsid\tab CLSID*}\tab The place at which the requested {\cs58\f5\fs16\lang1024 CLSID }is returned.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The required {\cs58\f5\fs16\lang1024 CLSID }is returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd 
\trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unspecified error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 
\row }\pard \qj\sa60\widctlpar {\*\bkmkstart _Toc324051632}{\*\bkmkstart _Toc324051817}{\*\bkmkstart _Toc324052059}{\*\bkmkstart _Toc335041435}
\par {\*\bkmkend _Toc324051632}{\*\bkmkend _Toc324051817}{\*\bkmkend _Toc324052059}{\*\bkmkend _Toc335041435}{\pntext\pard\plain\b 7.11\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2
\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 {\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\v\f4\fs12 {\xe {\b0\fs12 Remote Debugging}}}{\*\bkmkstart _Toc335041436}
{\*\bkmkend _Toc335041436} {\*\bkmkstart _Toc337439352}{\*\bkmkstart _Toc337870063}{\*\bkmkstart _Toc339182976}Support for Remote Debugging{\*\bkmkend _Toc337439352}{\*\bkmkend _Toc337870063}{\*\bkmkend _Toc339182976}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The COM Library and the COM Network Protocol provide support for debugging engines on the client and the server side of a remote COM invocation to cooperate in allowing the overall application to be de
bugged. This section describes the runtime infrastructure provided by the Microsoft Windows implementation of the COM Library by which that is accomplished; other implementations will provide similar infra
structures, though in practice the details of such support will be highly sensitive to the mechanisms by which debugging engines are supported on the given platform. This section also specifies the standard data formats transmitted between client and serv
er by which this cooperation is carried out.
\par The following a brief example of the sort of debugging session scenario which can be supported with this infrastructure.
\par Suppose the programmer is debugging an application with is an OLE document container, and that the ap
plication is presently stopped in the debugger at a point in the code where the container is about to invoke a method in some interface on one of its contained objects, the implementation of which happens to be in another executable. That is, the pointer 
that the container has in hand actually points to an occurrence of part of the remoting infrastructure known as an \ldblquote interface proxy\rdblquote  (see above). Interface proxies and the 
rest of the remoting infrastructure are not (normally) part of the programmer\rquote s concern when debugging client and server applications, as the whole {\i raison d\rquote \'eatre} of the RPC infrastructure is to be {\i transparent}
, is to make remote object invocations appear to be local ones. Unless the programmer is debugging the remoting infrastructure himself, this should apply to debugging as well. 
\par This perspective leads to some of the following scenarios that need to be supportable by the debugger. If the programmer Single
 Steps into the function invocation, then the debugger should next stop just inside the real implementation of the remote server object, having transparently passed through the RPC infrastruc
ture. (Notice that before the Step command is executed, the remote process may not presently have the debugger{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
More precisely, it may not have {\i a} debugger attached to it: depending on the debugger\rquote 
s implementation and the relative location of the two processes with respect to machine boundaries, a new debugger instance may or may not need to be created. The main point is that the process wasn\rquote t being debugged.}}
 attached to it, and so the act of doing the step may need to cause the debugger to attach itself.) The programmer will now be able to step line by line through the server's function. When he steps past the closing brace of the function, he should wind up
 back in the debugger of the client process immediately after the function call.
\par A similar scenario is one where we skip the incoming single step but instead, out of the blue, hit a break\-point in the server, then start single stepping. This, too, should single step over the end of the server func
tion back into the client process. The twist is that this time, the {\i client} debugger may not presently be running, and therefore may need to be started.
\par {\*\bkmkstart _Toc315526407}{\*\bkmkstart _Toc315532172}{\*\bkmkstart _Toc324051633}{\*\bkmkstart _Toc324051818}{\*\bkmkstart _Toc324052060}{\*\bkmkstart _Toc335041437}{\pntext\pard\plain\b\i\fs22 7.11.1\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Implementation{\*\bkmkend _Toc315526407}{\*\bkmkend _Toc315532172}{\*\bkmkend _Toc324051633}{\*\bkmkend _Toc324051818}{\*\bkmkend _Toc324052060}
{\*\bkmkend _Toc335041437}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The ability for debuggers to support scenarios such as these is provided by hoo
ks in the client and server side RPC infrastructure. If requested by the debugger, at certain important times, these hooks inform the debugger of the fact that a transmission of a remote call about to be made or that transmission of return val
ues is about to occur. That is, when the COM Library is about to make or return from a call to an object, it notifies the debugger of what is happening, so that the debugger can take any special actions it desires.
\par {\*\bkmkstart _Toc315526408}{\*\bkmkstart _Toc315532173}{\pntext\pard\plain\b\fs20\lang1024 7.11.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 DllDebugObjectRPCHook
{\*\bkmkend _Toc315526408}{\*\bkmkend _Toc315532173}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 BOOL WINAPI DllDebugObjectRPCHook({\cs58\f5\fs16 BOOL }fTrace, {\cs58\f5\fs16 LPORPC_INIT_ARGS }lpOrpcInitArgs)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This function is to be exported by name from one or more DLLs that wish to be informed when from the user\rquote 
s point of view that debugging is engaged. Debuggers will should call this function to inform each of their loaded DLLs that export this function as 
to whether they are presently being debugged or not. When the debugger wants to enable debugging, it calls {\f5\fs16 DllDebugObject\-Rpc\-Hook} with {\cs58\f5\fs16\lang1024 fTrace=TRUE} and when it wants to disable it, it calls {\f5\fs16 DllDebugO
bjectRpcHook } with  {\cs58\f5\fs16\lang1024 fTrace=FALSE}. When enabled, debugging support such as the tracing described herein should be enabled.
\par Certain of the COM Library DLLs, for example, implement this function. When debugging is enabled, they turn on what is here called COM remote debugging, and which is the focus of this section.
\par The second argument points to an {\cs58\f5\fs16\lang1024 ORPC_INIT_ARGS} structure whose definition is given below. The {\cs58\f5\fs16\lang1024 pvPSN} member is used only on the Macintosh, where the calling debugger is required in this field to pa
ss the process serial number of the debuggee\rquote s process. On other systems {\cs58\f5\fs16\lang1024 pvPSN }should be {\cs58\f5\fs16\lang1024 NULL}.
\par The {\cs58\f5\fs16\lang1024 lpIntfOrpcDebug }member is a pointer to an interface. This is used by in-process debuggers and is discussed in more detail later. Debuggers that are neither in-process debuggers nor are Macintosh debuggers should pass {
\cs58\f5\fs16\lang1024 NULL }for {\cs58\f5\fs16\lang1024 lpIntfOrpcDebug.}
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef struct ORPC_INIT_ARGS \{

\par \tab IOrpcDebugNotify __RPC_FAR * \tab {\b lpIntfOrpcDebug};
\par \tab void *\tab \tab \tab \tab \tab \tab {\b pvPSN};\tab \tab \tab // contains ptr to Process Serial No. for Mac COM debugging.
\par \tab DWORD\tab \tab \tab \tab \tab \tab {\b dwReserved1}; \tab // For future use, must be 0.
\par \tab DWORD\tab \tab \tab \tab \tab \tab {\b dwReserved2}; \tab // For future use, must be 0.
\par \tab \} ORPC_INIT_ARGS;
\par \tab 
\par typedef ORPC_INIT_ARGS  __RPC_FAR * LPORPC_INIT_ARGS;
\par 
\par interface {\b IOrpcDebugNotify }: IUnknown \{
\par \tab VOID\tab {\b ClientGetBufferSize}(LPORPC_DBG_ALL);
\par \tab VOID\tab {\b ClientFillBuffer}(LPORPC_DBG_ALL);
\par \tab VOID\tab {\b ClientNotify}(LPORPC_DBG_ALL);
\par \tab VOID \tab {\b ServerNotify}(LPORPC_DBG_ALL);
\par \tab VOID\tab {\b ServerGetBufferSize}(LPORPC_DBG_ALL);
\par \tab VOID\tab {\b ServerFillBuffer(}LPORPC_DBG_ALL);
\par \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 As one would expect, a debugger calls {\f5\fs16 DllDebugObjectRPCHook} within the context (that is, within the proc
ess) of the relevant debuggee. Thus, the implementation of this function most often will merely store the arguments in global DLL-specific state.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Further, as this function is called from the debugger, the function can be called when the DLL in which it is implemented is in pretty well any state; no synchronization with other internal DLL state can be relied upon. Thus, it is recommended that the im
plementation of this function indeed do nothing {\i more} than set internal global variables.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab \tab Description}
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 fTrace\tab BOOL\tab }\tab {\f5\fs16 TRUE} if debugging is enabled, {\f5\fs16 FALSE} otherwise
\par \pard \s49\fi-3240\li3240\sa58\keepn\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 lpOrpcInitArgs\tab LPORPC_INIT_ARGS}\tab \tab typically {\cs58\f5\fs16\lang1024 NULL}; see comments above for MAC COM \tab debuggers or in-process debuggers.
\par \pard \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 return value\tab BOOL\tab }\tab {\f5\fs16 TRUE} if the function was successful (the DLL understood and \tab executed the request), {\f5\fs16 FALSE} otherwise
\par {\*\bkmkstart _Toc315526409}{\*\bkmkstart _Toc315532174}{\*\bkmkstart _Toc324051634}{\*\bkmkstart _Toc324051819}{\*\bkmkstart _Toc324052061}{\*\bkmkstart _Toc335041438}{\pntext\pard\plain\b\i\fs22 7.11.2\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Architectural Overview{\*\bkmkend _Toc315526409}{\*\bkmkend _Toc315532174}{\*\bkmkend _Toc324051634}{\*\bkmkend _Toc324051819}
{\*\bkmkend _Toc324052061}{\*\bkmkend _Toc335041438}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 When COM remote debugging is enabled, there are a total of six notifications that occur in the round-trip of one COM
 RPC call: three on the client side and three on the server side. The overall sequence of events is as follows.
\par Suppose the client has an interface pointer {\f5\fs16 pFoo} of type {\f5\fs16 IFoo*} which happens to be a proxy for another object in a remote server process.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IFoo }: IUnknown \{

\par \tab HRESULT {\b Func}();
\par \tab \};
\par IFoo *pFoo;
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 When the client invokes {\f5\fs16 pFoo->Func()}, it executes code in the interface proxy. This code is responsible for marsh
aling the arguments into a buffer, calling the server, and unmarshaling the return values. To do so, it draws on the services of an {\f5\fs16 IRpcChannelBuffer }instance with which it was initialized by the COM Library. 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 To get the buffer, the interface proxy calls {\f5\fs16 IRpcChannelBuffer::GetBuffer()}, passing in (among other things) the requested size for the buffer. Before actually allocating the buffer, the {\f5\fs16 
GetBuffer()} implemen\-tation (normally{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab That is, in the channel implementation approach described here, which uses 
only one memory buffer. Another channel implementation approach would use two separate buffers, one to give back to the interface proxy, and another independent one for the debug information. Such an implementation would only need to call {\f5\fs12 
DebugORPCClient\-Get\-Buf\-fer\-Size()} in its {\f5\fs12 IRpcChannellBuffer::SendReceive()} implementation immediately before calling {\f5\fs12 DebugORPCClientFillBuffer()}
. While perfectly legal, this will not be elaborated further here, though in fact this is the implementation likely to be used i
n practice, given how the debug data is to be transmitted in the COM Network Protocol. We trust that readers can accommodate our pedagogical style; apologies to those who cannot.}}) checks to see if debugging is enabled per {\f5\fs16 
DllDebugObjectRPCHook()}. If so, then the channel calls {\f5\fs16 DebugORPCClient\-Get\-Buf\-fer\-Size()} (see below for details) to inform the debugger that an COM RPC call is about to take place and to ask the debugger how many bytes of infor\-ma\-tion 
{\i it }would like to transmit to the remote server debugger. The channel then, unbeknownst to the interface proxy, allocates a buffer with this many additional bytes in it.
\par The interface proxy marshals the incoming arguments in the usual way into the buffer that it received, then calls {\f5\fs16 IRpcChan\-nelBuffer::SendReceive()}. Immediately on function entry, the channel again checks to see if de
bugging is enabled. If so, then it calls {\f5\fs16 DebugORPCClientFillBuffer()} passing in the pointer to (the debugger\rquote s part of) the marshaling buffer. The debugger will write some inform
ation into the buffer, but this need be of no concern to the channel implementation other than that it is to ferry the contents of the buffer to the server debugger. Once {\f5\fs16 DebugORPCClientFillBuffer()} returns, the channel implementation of {
\f5\fs16 SendReceive()} pro\-ceeds as in the normal case.
\par We now switch context in our explanation here to the server-side RPC channel. Suppose that it has received an incoming call request and has done what it normally does just up to the point where it is about to call {\f5\fs16 IRpcStubBuffer::Invoke()}
, which when will cause the arguments to be unmarshaled, etc. Just before calling {\f5\fs16 Invoke()}, if there was any debugger information (i.e.: it exists in the incoming request and is of non-zero size) in the incoming request {\i or }
if debugging is presently {\i already} enabled per {\f5\fs16 DllDebugObjectRPC\-Hook() }(irrespective of the presence or size of the debug info), then the channel is to call {\f5\fs16 DebugORPCServerNotify()}.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Some control as to whether this is to be actually carried out is provided by the first four bytes of the incoming debug data; see later in this specification.}}
 The act of calling this function may in fact {\i start} a new debugger if needed and attach it to this (the server) process; however, this need not be of concern to the channel implementation. Having made the request, the channel proceeds to call {
\f5\fs16 Invoke()} as in the normal case.
\par The implementation of {\f5\fs16 Invoke()} will unmarshal the incoming arguments, then call the appropriate method on the server object. When the server object returns, {\f5\fs16 Invoke() }marsh
als the return values for transmission back to the client. As on the client side, the marshaling process begins by calling {\f5\fs16 IRpcChan\-nelBuffer\-::\-Get\-Buffer()} to get a marshaling buffer. As on the client side, the server side channel {
\f5\fs16 GetBuffer() }imple\-men\-ta\-tion when being debugged (per the present setting of {\f5\fs16 DllDebugObjectRPCHook()}, {\i not }
per the presence of the incoming debug info) asks the debugger how many bytes it wishes to transmit back to the client debugger. The channel allocates the buffer accordingly and returns it to the {\f5\fs16 Invoke()}
 implementation who marshals the return values into it, then returns to its caller.
\par The caller of {\f5\fs16 IRpcStubBuffer::Invoke()} then checks to see if he is presently being debugged. If so, then he at this time calls {\f5\fs16 DebugORPCServerFillBuffer()}
, passing in the pointer to the debug-buffer that was allocated in the (last, should there erroneously be more than one) call to {\f5\fs16 GetBuffer()} made inside {\f5\fs16 Invoke()}; should no such call exist, and thus there is no such buffer, {
\cs58\f5\fs16\lang1024 NULL} is passed.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
This is important in error handling cases to allow us to ensure that breakpoints are always cleared correctly.}} The bytes written into the buffer (if any) by the debugger are ferried to the client side.
\par We now switch our explanatory context back to the client side. Eventually the client channel either receives a reply from the server containing the marshaled return values (and possibly debug info), receives an error indication from the server RPC infrast
ructure, or decides to stop waiting. That is, even\-tually the client channel decides that it is about to return from {\f5\fs16 IRpcChannel::SendReceive()}. Immediately before doing so, it checks to see if it is either already presently being debugged {
\i or} if in the reply it received any (non-zero sized) information from the server debugger. If so, then it calls {\f5\fs16 DebugORPCClientNotify()}, pass\-ing in the server-debugger\rquote 
s info if it has any; doing so may start and attach the debugger if needed. The channel then returns from {\f5\fs16 SendReceive()}.
\par {\*\bkmkstart _Toc315526410}{\*\bkmkstart _Toc315532175}{\*\bkmkstart _Toc324051635}{\*\bkmkstart _Toc324051820}{\*\bkmkstart _Toc324052062}{\*\bkmkstart _Toc335041439}{\pntext\pard\plain\b\i\fs22 7.11.3\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Calling Convention for Notifications{\*\bkmkend _Toc315526410}{\*\bkmkend _Toc315532175}{\*\bkmkend _Toc324051635}{\*\bkmkend _Toc324051820}
{\*\bkmkend _Toc324052062}{\*\bkmkend _Toc335041439}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The preceding discussion discussed the COM RPC debugging architecture in terms of six of debugger-notification APIs ({\f5\fs16 DebugORPC...()}
). However, rather than being actual API-entry points in a a static-linked or dynamically-linked library, these notifications use an somewhat unusual calling convention to communi
cate with the notification implementations, which are found inside debugger products. This somewhat strange calling con\-vention is used for the following reasons:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}
Two of the six notifications need to start and attach the debugger if it is not already attached to the relevant process.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The convention used transitions into the debugger code with the least possible disturbance of the debuggee\rquote s state and executing the minimal amount of debuggee code. This increases robustness of debugging.

\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The debugger is necessarily equipped to deal with concurrency issues of other threads executing in the same process. Therefore, it is important to transition to the debugger as fast as possible to avoid inad
vertent concurrency problems.
\par \pard \qj\sa60\widctlpar The actual calling convention used is by its nature inherently processor and operating-system specific. On  Win32 implementations, the default calling convention for notifications takes the form of a software excep
tion, which is raised by a call to the {\f5\fs16 RaiseException}{\f8  }Win32 API{\f8 :
\par }\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 VOID {\b RaiseException}(
\par \tab DWORD  dwExceptionCode,\tab \tab // exception code
\par \tab DWORD  dwExceptionFlags,\tab \tab // continuable exception flag
\par \tab DWORD  cArguments,\tab \tab \tab // number of arguments in array
\par \tab CONST DWORD *  lpArguments \tab // address of array of arguments
\par \tab );\tab {\f8 
\par }\pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 As used here, the arguments to this raised exception call in order are:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 {\cs58\f5\fs16\lang1024 dwExceptionCode}{\f8 : An exception code }{\cs58\f5\fs16\lang1024 
EXCEPTION_ORPC_DEBUG }{\f5\fs16\lang1024 (0x804F4C45)}{\cs58\f5\fs16\lang1024  }{\f8 is used. The debugger should  recognize this exception as a special one indicating an COM RPC debug notification.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\cs58\f5\fs16\lang1024 dwExceptionFlags}{\f8 : This is zero to indicate a continuable exception.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\cs58\f5\fs16\lang1024 cArguments}{\f8 : One
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\cs58\f5\fs16\lang1024 lpArguments}{\f8 
: The array contains one argument. This argument is a pointer to a structure which contains the notification specific information that the COM RPC system passes to the debugger. The definition of this structure }{\cs58\f5\fs16\lang1024 ORPC_DBG_ALL }{\f8 
is given below. The same structure is used for all the notifications. The structure is just the union of the arguments of the six debugger notification APIs. For a particular not}{\f8 i}{\f8 fication not all the fields in the st
ructure are meaningful and those that are not relevant have undefined values; details on this are below:
\par }\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024  typedef struct ORPC_DBG_ALL  \{

\par \tab BYTE *\tab \tab \tab \tab {\b pSignature;}
\par \tab RPCOLEMESSAGE *\tab {\b pMessage;}
\par \tab const IID *\tab  \tab \tab {\b iid;}
\par \tab void*\tab \tab \tab \tab \tab reserved1;
\par \tab void*\tab \tab \tab \tab \tab reserved2;
\par \tab void*\tab \tab \tab \tab \tab {\b pInterface;}
\par \tab IUnknown *\tab \tab \tab {\b pUnkObject;}
\par \tab HRESULT\tab \tab \tab {\b hresult;}
\par \tab void *\tab \tab \tab \tab {\b pvBuffer;}
\par \tab ULONG\tab \tab \tab \tab {\b cbBuffer;\tab }
\par \tab ULONG *\tab \tab \tab \tab {\b lpcbBuffer; }
\par \tab void * \tab \tab \tab \tab reserved3;
\par \tab \} {\b ORPC_DBG_ALL};
\par \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 pSignature }member of this structure points to a sequence of bytes which contains:{\f5\fs16 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard\plain \qj\fi-360\li360\sa60\keepn\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 a four-byte sanity-check signature of the ASCII characters {\cs58\f5\fs16\lang1024 \ldblquote 
MARB\rdblquote } in increasing memory order.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab \ldblquote MARB\rdblquote  is \ldblquote Mike Alex Rico Bob,\rdblquote 
 arranged in an order such that it makes a goofy-sounding syllable. Call us whimsical.}}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}a 16-byte {\f5\fs16 GUID }
indicating which notification this is. Each of the six notifications defined here has a different {\f5\fs16 GUID}. More notifications and corresponding {\f5\fs16 GUIDs} can be defined in the future and be known not to collide with existing notifications.

\par {\pntext\pard\plain\f1\fs20 \'b7\tab}a four-byte value which is reserved for future use. This value is {\cs58\f5\fs16\lang1024 NULL} currently.
\par \pard \qj\sa60\widctlpar The notifications specified here pass their arguments by filling in the appropriate structure members. See each notification description for details.
\par Using software exceptions for COM debugging notifications is inconvenient for \ldblquote in-process\rdblquote  debugging. In-process debuggers can alternately get these notifications via direct calls into the debugger\rquote s code. The de
bugger which wants to be notified by a direct call passes in an {\f5\fs16 IOrpcDebugNotify }interface in the {\cs58\f5\fs16\lang1024 LPORPC}{\f5\fs16 _\-INIT_\-ARGS} argument to {\f5\fs16 DllDebugObjectRPCHook. }
If this interface pointer is available, COM makes the debug notifications by calling the methods on this interface. The methods all take an {\f5\fs16 LPORPC_DBG_ALL}
 as  the only argument. The information passed in this structure is identical to that passed when the notification is done by raising a software exception. 
\par {\*\bkmkstart _Toc315526411}{\*\bkmkstart _Toc315532176}{\*\bkmkstart _Toc324051636}{\*\bkmkstart _Toc324051821}{\*\bkmkstart _Toc324052063}{\*\bkmkstart _Toc335041440}{\pntext\pard\plain\b\i\fs22 7.11.4\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Notifications{\*\bkmkend _Toc315526411}{\*\bkmkend _Toc315532176}{\*\bkmkend _Toc324051636}{\*\bkmkend _Toc324051821}{\*\bkmkend _Toc324052063}
{\*\bkmkend _Toc335041440}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 What follows is a detailed description of each of the relevant notifications.
\par Note that in the network case, depending on the notification in question the byte order used may be different than that of the local machine. The byte order, etc., of the incoming data is provided from the {\cs58\f5\fs16\lang1024 dataRep }con
tained the passed {\cs58\f5\fs16\lang1024 RPCOLEMESSAGE }structure.
\par Though each function is documented here for purely historical reasons as if it were in fact a function call, we have seen above that this is not the case. Unless otherwise specified, the name of the argument to the {\f5\fs16 DebugORPC...}
 notification call is the same as the name of the structure member in {\f5\fs16 ORPC_DBG_ALL} used to pass it to the debugger. So for example the {\cs58\f5\fs16\lang1024 pMessage }argument of{\f5\fs16  }the{\f5\fs16  DebugORPCClientGetBufferSize }notifi
cation is passed to the debugger in the {\cs58\f5\fs16\lang1024 pMessage }structure member of {\f5\fs16 ORPC_DBG_ALL}. We trust that readers will not be too confused by this, and apologize profusely should this prove not to be the case.{\f5\fs16 
\par {\*\bkmkstart _Toc315526412}{\*\bkmkstart _Toc315532177}{\pntext\pard\plain\b\fs20\lang1024 7.11.4.1\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 
DebugORPCClientGetBufferSize{\*\bkmkend _Toc315526412}{\*\bkmkend _Toc315532177}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 DebugORPCClientGetBufferSize}}}

\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 ULONG DebugORPCClientGetBufferSize(pMessage, iid, reserved, pUnkProxyObject)
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Called on the client side in {\f5\fs16 IRpcChannel::GetBuffer()}. 
\par The GUID for this notification is {\cs58\f5\fs16\lang1024 9ED14F80-9673-101A-B07B-00DD01113F11}
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 GUID __private_to_macro__ = \{
 /* 9ED14F80-9673-101A-B07B-00DD01113F11 */
\par     0x9ED14F80,
\par     0x9673,
\par     0x101A,
\par     0xB0,
\par     0x7B,
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280     \{0x00, 0xDD, 0x1, 0x11, 0x3F, 0x11\}
\par   \};
\par \pard\plain \s48\fi-3600\li3600\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3600\li3600\sa58\keepn\widctlpar\tx1620 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE*\tab }identification of the method being invoked, etc.
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }contains the {\cs58\f5\fs16\lang1024 IID} of the interface being called.
\par {\cs58\f5\fs16\lang1024 reserved\tab void *\tab }reserved for future use.
\par {\cs58\f5\fs16\lang1024 pUnkProxyObject\tab IUnknown *\tab }an {\cs58\f5\fs16\lang1024 IUnknown} (no particular one) on the object involved in this invocation. May legally be {\cs58\f5\fs16\lang1024 NULL}, though this reduces debug
ging functionality. Further, this and like-named parameters must consistently be either {\cs58\f5\fs16\lang1024 NULL} or non-{\cs58\f5\fs16\lang1024 NULL} in all notifications in a given client side COM RPC implementa\-tion.
\par {\cs58\f5\fs16\lang1024 \ldblquote return value\rdblquote \tab ULONG\tab }the number of bytes that the client debugger wishes to transmit to the server debugger. May legitimately be zero, which indicates that no information need be transmitted. The {
\cs58\f5\fs16\lang1024 lpcbBuffer} field in the {\cs58\f5\fs16\lang1024 ORPC_DBG_ALL} structure holds a pointer to a {\cs58\f5\fs16\lang1024 ULONG}. The debugger writes the number of bytes it wants to transmit with the  packet in that location. 
\par {\*\bkmkstart _Toc315526413}{\*\bkmkstart _Toc315532178}{\pntext\pard\plain\b\fs20\lang1024 7.11.4.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 
DebugORPCClientFillBuffer{\*\bkmkend _Toc315526413}{\*\bkmkend _Toc315532178}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 DebugORPCClientFillBuffer}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void DebugORPCClientFillBuffer(pMessage, iid, reserved, pUnkProxyObject, pvBuffer, cbBuffer)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Called on the client side on entry to {\f5\fs16 IRpcChannel::SendReceive().} See the above overview for further details.
\par The {\cs58\f5\fs16\lang1024 GUID} for this notification is {\cs58\f5\fs16\lang1024 DA45F3E0-9673-101A-B07B-00DD01113F11}:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 GUID __private_to_macro__ {
\lang1033 = \{ /* DA45F3E0-9673-101A-B07B-00DD01113F11 */
\par     0xDA45F3E0,
\par     0x9673,
\par     0x101A,
\par     0xB0,
\par     0x7B,
\par     \{0x00, 0xDD, 0x01, 0x11, 0x3F, 0x11\}
\par   \};}
\par \pard\plain \s48\fi-3600\li3600\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1530 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3600\li3600\sa58\keepn\widctlpar\tx1530 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE*\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCClientGetBufferSize()}.
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCClientGetBufferSize()}.
\par {\cs58\f5\fs16\lang1024 reserved\tab void *\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCClientGetBufferSize()}.
\par {\cs58\f5\fs16\lang1024 pUnkProxyObject\tab IUnknown *\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCClientGetBufferSize()}.
\par {\cs58\f5\fs16\lang1024 pvBuffer\tab void *\tab }the debug-data buffer which is to be filled. Is undefined (may or may not be {\cs58\f5\fs16\lang1024 NULL}) if {\cs58\f5\fs16\lang1024 cbBuffer} is zero.
\par {\cs58\f5\fs16\lang1024 cbBuffer\tab ULONG\tab }the size of the data pointed to by {\cs58\f5\fs16\lang1024 pvBuffer}.
\par {\*\bkmkstart _Toc315526414}{\*\bkmkstart _Toc315532179}{\pntext\pard\plain\b\fs20\lang1024 7.11.4.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 DebugORPCServerNotify
{\*\bkmkend _Toc315526414}{\*\bkmkend _Toc315532179}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void DebugORPCServerNotify(pMessage, iid, pChannel, pInterface, pUnkObject, pvBuffer, cbBuffer)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Called on the server side immediately before calling {\f5\fs16 IRpcStubBuffer::Invoke()} to inform it that there is an in
coming request. Will start the debugger in this process if need be. See the above overview for further details.
\par \pard \qj\sa60\keepn\widctlpar The GUID for this notification is {\cs58\f5\fs16\lang1024 1084FA00-9674-101A-B07B-00DD01113F11}:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 GUID __private_to_macro__ = \{
 /* 1084FA00-9674-101A-B07B-00DD01113F11 */
\par     0x1084FA00,
\par     0x9674,
\par     0x101A,
\par     0xB0,
\par     0x7B,
\par     \{0x00, 0xDD, 0x01, 0x11, 0x3F, 0x11\}
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280   \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 On entry, the members of {\cs58\f5\fs16\lang1024 pMessage} are set as follows:
\par \trowd \trgaph108\trleft-108 \cellx2070\cellx8730 \pard\plain \qj\sa60\keepn\widctlpar\intbl \f4\fs20 {\b Member Name\cell Value on entry to }{\b\f5\fs16 Invoke()}{\b \cell }\pard \widctlpar\intbl {\b \row }\trowd \trgaph108\trleft-108 \cellx2070
\cellx8730 \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 reserved members}\cell \pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 indeterminate. These members are neither to be read nor to be changed by the callee.
\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 dataRepresentation\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 
this indicates the byte order, etc., of the client debugger\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 pvBuffer\cell }\pard \s85\widctlpar\intbl\brdrt
\brdrs\brdrw15\brsp20 points to a buffer which contains the marshaled incoming arguments. In the case that there are no such arguments (i.e.: {\f5\fs16 cbBuffer == 0}), {\f5\fs16 pvBuffer }may be {\cs58\f5\fs16\lang1024 NULL}
, but will not necessarily be so.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 cbBuffer\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 
the size in bytes of the memory buffer to which {\f5\fs16 pvBuffer }points. If {\f5\fs16 pvBuffer }is {\cs58\f5\fs16\lang1024 NULL}, then {\f5\fs16 cbBuffer }will be zero (but the converse is not necessarily true, as was mentioned in {\f5\fs16 pvBuffer}).
\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 iMethod\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 
the zero-based method number in the interface which is being invoked.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2070\cellx8730 \pard\plain \s85\qj\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \f4\fs20 {\f5\fs16 
rpcFlags\cell }\pard \s85\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 indeterminate. Neither to be read nor to be changed by the callee.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s48\fi-3330\li3330\sa58\keepn\widctlpar\brdrb
\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3330\li3330\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE*}\tab as in {\f5\fs16 IRpcStubBuffer::Invoke}().
\par \pard \s49\fi-3330\li3330\sa58\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }contains the iid of the interface being called.
\par {\cs58\f5\fs16\lang1024 pChannel\tab IRpcChannelBuffer*\tab }as in {\f5\fs16 IRpcStubBuffer::Invoke}(). The COM RPC channel implementation on the server side.
\par {\cs58\f5\fs16\lang1024 pInterface\tab void *\tab }This contains the pointer to the COM interface instance which contains the pointer to the method that will be invoked by this particular remote procedure call. Debuggers can use this informa
tion in conjunction with the {\cs58\f5\fs16\lang1024 iMethod} field of the {\cs58\f5\fs16\lang1024 pMessage} structure to get to the address of the method to be invoked. May not be {\cs58\f5\fs16\lang1024 NULL}.
\par {\cs58\f5\fs16\lang1024 pUnkObject\tab IUnknown *\tab }this pointer is currently {\cs58\f5\fs16\lang1024 NULL}. In the future this might be used to pass the controlling{\cs58\f5\fs16\lang1024  IUnknown} of the server object whose method is being invoked.

\par {\cs58\f5\fs16\lang1024 pvBuffer\tab void *\tab }the pointer to the incoming debug information. Is undefined (may or may not be {\cs58\f5\fs16\lang1024 NULL}) if {\cs58\f5\fs16\lang1024 cbBuffer }is zero.
\par {\cs58\f5\fs16\lang1024 cbBuffer\tab ULONG\tab }the size of the data pointed to by {\cs58\f5\fs16\lang1024 pvBuffer}. May be zero, but as described above, a size of zero can only passed in the case that debugging is already enabled.
\par {\*\bkmkstart _Toc315526415}{\*\bkmkstart _Toc315532180}{\pntext\pard\plain\b\fs20\lang1024 7.11.4.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 
DebugORPCServerGetBufferSize{\*\bkmkend _Toc315526415}{\*\bkmkend _Toc315532180}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 ULONG DebugORPCServerGetBufferSize(pMessage, iid, pChannel, pInterface, pUnkObject)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Called on the server side from within {\f5\fs16 IRpcChannelBuffer::GetBuffer().} See the above overview for further details.
\par The GUID for this notification is {\cs58\f5\fs16\lang1024 22080240-9674-101A-B07B-00DD01113F11}:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 GUID __private_to_macro__ = \{
 /* 22080240-9674-101A-B07B-00DD01113F11 */
\par     0x22080240,
\par     0x9674,
\par     0x101A,
\par     0xB0,
\par     0x7B,
\par     \{0x00, 0xDD, 0x01, 0x11, 0x3F, 0x11\}
\par   \};
\par \pard\plain \s48\fi-3330\li3330\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3330\li3330\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE*}\tab as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par {\cs58\f5\fs16\lang1024 pChannel\tab IRpcChannelBuffer*\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par {\cs58\f5\fs16\lang1024 pInterface\tab void *\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par {\cs58\f5\fs16\lang1024 pUnkObject\tab IUnknown *\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par {\cs58\f5\fs16\lang1024 return value\tab ULONG\tab }the number of bytes that the client debugger wishes to transmit to the server debugge
r. May legitimately be zero, which indicates that no information need be transmitted. Value is actually returned through {\cs58\f5\fs16\lang1024 lpcbBuffer }member of an {\cs58\f5\fs16\lang1024 ORPC_DBG_ALL}.
\par {\*\bkmkstart _Toc315526416}{\*\bkmkstart _Toc315532181}{\pntext\pard\plain\b\fs20\lang1024 7.11.4.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 
DebugORPCServerFillBuffer{\*\bkmkend _Toc315526416}{\*\bkmkend _Toc315532181}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void DebugORPCServerFillBuffer(pMessage, iid, pChannel, pInterface, pUnkObject, pvBuffer, cbBuffer)
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Called on the server side immediately after calling {\f5\fs16 IRpcStubBuffer::Invoke()}. See the above overview for further details.
\par The GUID for this notification is {\cs58\f5\fs16\lang1024 2FC09500-9674-101A-B07B-00DD01113F11}:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 GUID __private_to_macro__ = \{
 /* 2FC09500-9674-101A-B07B-00DD01113F11 */
\par     0x2FC09500,
\par     0x9674,
\par     0x101A,
\par     0xB0,
\par     0x7B,
\par     \{0x00, 0xDD, 0x01, 0x11, 0x3F, 0x11\}
\par   \};
\par \pard\plain \s48\fi-3330\li3330\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3330\li3330\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE*}\tab as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par \pard \s49\fi-3330\li3330\sa58\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par {\cs58\f5\fs16\lang1024 pChannel\tab IRpcChannelBuffer*\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par {\cs58\f5\fs16\lang1024 pInterface\tab void *\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par {\cs58\f5\fs16\lang1024 pUnkObject\tab IUnknown *\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCServerNotify()}.
\par \pard \s49\fi-3330\li3330\sa58\keepn\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 pvBuffer\tab void *\tab }the debug-data buffer which is to be filled. Is undefined (may or may not be {\cs58\f5\fs16\lang1024 NULL}) if {\cs58\f5\fs16\lang1024 cbBuffer}
 is zero.
\par \pard \s49\fi-3330\li3330\sa58\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 cbBuffer\tab ULONG\tab }the size of the data pointed to by pvBuffer.
\par {\*\bkmkstart _Toc315526417}{\*\bkmkstart _Toc315532182}{\pntext\pard\plain\b\fs20\lang1024 7.11.4.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 DebugORPCClientNotify
{\*\bkmkend _Toc315526417}{\*\bkmkend _Toc315532182}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 void DebugORPCClientNotify(pMessage, iid, reserved, pUnkProxyObject, hresult,  pvBuffer, cbBuffer)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Called on the client side immediately before returning from {\f5\fs16 IRpcChannelBuffer::SendReceive()}. See the above overview for further details.
\par The {\cs58\f5\fs16\lang1024 GUID }for this notification is {\cs58\f5\fs16\lang1024 4F60E540-9674-101A-B07B-00DD01113F11}:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 GUID __private_to_macro__ = \{
 /* 4F60E540-9674-101A-B07B-00DD01113F11 */
\par     0x4F60E540,
\par     0x9674,
\par     0x101A,
\par     0xB0,
\par     0x7B,
\par     \{0x00, 0xDD, 0x01, 0x11, 0x3F, 0x11\}
\par   \};
\par \pard\plain \s48\fi-3600\li3600\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3600\li3600\sa58\keepn\widctlpar\tx1620 \f4\fs20 {\cs58\f5\fs16\lang1024 pMessage\tab RPCOLEMESSAGE*\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCClientGetBufferSize().}
\par {\cs58\f5\fs16\lang1024 iid\tab REFIID\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCClientGetBufferSize().}
\par {\cs58\f5\fs16\lang1024 reserved\tab void *\tab }reserved for future use.
\par {\cs58\f5\fs16\lang1024 pUnkProxyObject\tab IUnknown *\tab }as in {\cs58\f5\fs16\lang1024 DebugORPCClientGetBufferSize().}
\par {\cs58\f5\fs16\lang1024 hresult\tab HRESULT\tab }the {\cs58\f5\fs16\lang1024 HRESULT} of the RPC call that just happened.
\par {\cs58\f5\fs16\lang1024 pvBuffer\tab void *\tab }the pointer to the incoming debug information. Is undefined (may or may not be {\cs58\f5\fs16\lang1024 NULL}) if {\cs58\f5\fs16\lang1024 cbBuffer} is zero.
\par {\cs58\f5\fs16\lang1024 cbBuffer\tab ULONG\tab }the size of the data pointed to by {\cs58\f5\fs16\lang1024 pvBuffer}.
\par {\*\bkmkstart _Toc315526418}{\*\bkmkstart _Toc315532183}{\*\bkmkstart _Toc324051637}{\*\bkmkstart _Toc324051822}{\*\bkmkstart _Toc324052064}{\*\bkmkstart _Toc335041441}{\pntext\pard\plain\b\i\fs22 7.11.5\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Special Segments{\*\bkmkend _Toc315526418}{\*\bkmkend _Toc315532183}{\*\bkmkend _Toc324051637}{\*\bkmkend _Toc324051822}{\*\bkmkend _Toc324052064}
{\*\bkmkend _Toc335041441}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The COM Library system DLLs have code in specially named segments (sections in COFF terminology) to aid debuggers. The remoting code in the COM interface proxy and interface stub DLLs and other appropri
ate parts of the runtime are put in segments whose name begins with \ldblquote {\cs58\f5\fs16\lang1024 .orpc}\rdblquote {\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab 
This is so segment names such as .{\cs89\f5\fs12 orpc1}, {\cs89\f5\fs12 .orpc2}... can be used if the remoting code needs to be split up into different segments for swap tuning, etc.}}. These segments are henceforth referred to as {\cs58\f5\fs16\lang1024 
.orpc }segments. A transition of the instruction pointer from a non {\cs58\f5\fs16\lang1024 .orpc }segment to a {\cs58\f5\fs16\lang1024 .orpc }
segment indicates that the program control is entering the RPC layer. On the client side such a transition implies that a RPC call is about to happen.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {
\cs38\super \chftn }\tab It is not guaranteed that a  RPC call  will happen for every such  transition. The debugger should deal with the case where it receives no notification about an RPC call.}} On the server side if a function is returning back to a {
\cs58\f5\fs16\lang1024 .orpc }segment it implies that the call is going to return back to the client side. Application writers who write their own remoting code can also avail of this feature by putting their remoting specific code in a {
\cs58\f5\fs16\lang1024 .orpc }segment.
\par Debuggers can use this naming convention regarding which code lies in COM RPC to aid in their user interface as to what code they choose to show the user and what code they do not. When the debugger reaches the code address after handling the {\f5\fs16 
DebugOrpcServerNotify()} exception it should check if it is still in a {\cs58\f5\fs16\lang1024 .orpc}
 segment. This implies that the instruction pointer is still in code that to the programmer is part of the local-remote transparency magic provided by COM, and so should be skipped by the debugger.
\par Similar behavior on the client side after the {\cs58\f5\fs16\lang1024 DebugOrpcClientNotify() }exception is also desirable.
\par {\*\bkmkstart _Toc315526419}{\*\bkmkstart _Toc315532184}{\*\bkmkstart _Toc324051638}{\*\bkmkstart _Toc324051823}{\*\bkmkstart _Toc324052065}{\*\bkmkstart _Toc335041442}{\pntext\pard\plain\b\i\fs22 7.11.6\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Registry specific information{\*\bkmkend _Toc315526419}{\*\bkmkend _Toc315532184}{\*\bkmkend _Toc324051638}{\*\bkmkend _Toc324051823}
{\*\bkmkend _Toc324052065}{\*\bkmkend _Toc335041442}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Windows NT and Windows \lquote 95 provide facilities to spawn a debugger when an application faults. Familiarity with the post-mortem debugging support on these systems is assumed in this section.
\par COM RPC debuggers make use of this mechanism in order to start the debugging of a client or server ap
plication that is not presently being debugged. A common scenario is that of a user wanting to step into a RPC call as she is debugging. The client side debugger is notified about the RPC call and sends debugger specific information with the packet. A {
\f5\fs16 DebugOrpcServerNotify()}
 notification is raised in the server process. If the server application is already being debugged, it recognizes this as a COM RPC notification and handles it. However if the server application is not being debugged, the system will launch the debugger s
pecified in the {\f5\fs16 AeDebug} entry. The debugger will then get the exception notification and handle it.
\par To avoid having malicious clients being able to force the debugging of a remote server, additional safeguards are required. The COM RPC system checks that the registry key {\f5\fs16 DebugObjectRPCEnabled }exists on the system.{\cs38\super \chftn 
{\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab In Windows NT, the registry is securable.}}
 If this key does not exist, the debug notifications are disabled. Thus, debugging will only take place if explicit action has been taken on a given machine to enable it, and so a remote client cannot cause debugging (and thus denial of service) to occur 
on an otherwise secure machine.
\par \pard \qj\sa60\keepn\widctlpar The full path to this key for a Windows NT system is: 
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 Software\\Microsoft\\Windows NT\\
CurrentVersion\\DebugObjectRPCEnabled.
\par \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 For Windows \lquote 95 the path to this key is:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 Software\\Microsoft\\Windows\\
CurrentVersion\\DebugObjectRPCEnabled.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The client side debugger should also ensure that the {\f5\fs16 AeDebug\\Debugger }entry on its machine is set appropriately. 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Before sending any notification, COM sets the {\cs58\f5\fs16\lang1024 AeDebug\\Auto }
entry to 1. This is done in order that the system does not put up a dialog box to ask the user if she wants to debug the server application. Instead it directly launches the debugger.
\par The scenario where the user steps out of the server application into to a client application which is not being debugged currently is symmetrically identical the preceding insofar as launch of the debugger is concerned.
\par {\*\bkmkstart _Toc315526420}{\*\bkmkstart _Toc315532185}{\*\bkmkstart FormatOfDebugInformation}{\*\bkmkstart _Toc324051639}{\*\bkmkstart _Toc324051824}{\*\bkmkstart _Toc324052066}{\*\bkmkstart _Toc335041443}{\pntext\pard\plain\b\i\fs22 7.11.7\tab}
\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Format of Debug Information{\*\bkmkend _Toc315526420}{\*\bkmkend _Toc315532185}{\*\bkmkend FormatOfDebugInformation}
{\*\bkmkend _Toc324051639}{\*\bkmkend _Toc324051824}{\*\bkmkend _Toc324052066}{\*\bkmkend _Toc335041443}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This section discusses the format of the debug information which the debugger puts into the buffer in the {\cs58\f5\fs16\lang1024 DebugORPCClientFillBuffer }and {\cs58\f5\fs16\lang1024 DebugORPCServerFillBuffer }
calls. The structure of this data is as follows, here specified in an IDL-like manner.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab One can think of this 
as IDL with a) default packing override, and b) the ability to have a union keyed by a {\cs58\f5\lang1024 GUID}. This will be made more precise in future drafts of this specification.}}
 For historical reasons, this structure has 1-byte alignment of its internal members. Again, for historical reasons, the data is always transmitted in little-endian byte order.
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
#pragma pack(1) // this structure defined with 1-byte packing alignment
\par struct \{
\par     DWORD   alwaysOrSometimes;  // controls spawning of debugger
\par     BYTE    verMajor;           // major version
\par     BYTE    verMinor;           // minor version
\par     DWORD   cbRemaining;        // inclusive of byte count itself
\par     GUID    guidSemantic;       // semantic of this packet
\par     [switch_is(guidSemantic)] union \{ // semantic specific information
\par     
\par     // case \ldblquote step\rdblquote  semantic, guid = {\lang1033 9CADE560}-{\lang1033 8F43}-101A-B07B-{\lang1033 00DD01113F11}
\par         BOOL    fStopOnOtherSide;   // should single step or not?
\par 
\par \pard \s86\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280     // case \ldblquote general\rdblquote 
 semantic, guid = {\lang1033 D62AE}DFA-57EA-11ce-A964-00AA006C3706
\par         USHORT  wDebuggingOpCode;   // should single step or not, etc.
\par         USHORT  cExtent;            // offset=28
\par \pard \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280         BYTE    padding[2];         // offset=30, m.b.z.

\par \pard \s86\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280         [size_is(cExtent)] struct \{
\par             ULONG cb;               // offset=32
\par             GUID  guidExtent;       // the semantic of this extent
\par             [size_is(cb)] BYTE  *rgbData;\tab 
\par \pard \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280             \};
\par \tab \tab \};\tab \tab \tab \tab \tab \tab 
\par \tab \}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The first {\cs58\f5\fs16\lang1024 DWORD }
in the debug packet has a special meaning assigned to it. The rest of the debug packet is treated as a stream of bytes by COM and is simply passed across the channel to the debugger on the other side. If the first {\cs58\f5\fs16\lang1024 DWORD}
 contains the value {\f5\fs16 ORPC_DEBUG_ALWAYS} (this is a manifest constant defined in the header files) then COM will {\i always} raise the notification on the other side (use of the four bytes \ldblquote MARB\rdblquote 
 is for historical reasons synonymous with use of {\f5\fs16 ORPC_DEBUG_ALWAYS}). If the first {\cs58\f5\fs16\lang1024 DWORD }in the debug packet contains the value {\f5\fs16 ORPC_DEBUG_IF_HOOK_ENABLED, }
then the notification is raised on the other side of the channel only if COM debugging has been enabled in that context; that is only if {\f5\fs16 DllDebugO}{\f5\fs16 b}{\f5\fs16 jectRPCHook} has been called in that process with {\cs58\f5\fs16\lang1024 
fTrace = TRUE}. It is the debugger\rquote s responsibility to include enough memory for the first {\cs58\f5\fs16\lang1024 DWORD }in its response to the {\f5\fs16 DebugOrpcClientGetBufferSize} or {\f5\fs16 Debug\-Orpc\-ServerGetBufferSize }notifications.

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The two bytes immediately following the initial {\cs58\f5\fs16\lang1024 DWORD }contain the major and minor version numbers of the data format specification.
\par For packets in the format of the current major version, this is followed by
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li720\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}A{\cs58\f5\fs16\lang1024  DWORD }
which holds the count of bytes that follow in this data, and which is inclusive of this byte count itself.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}A {\cs58\f5\fs16\lang1024 GUID }that identifies the semantic of the packet.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Semantic specific information. The layout of this information is dependent on the GUID that specifies the semantic. These are as follows:
\par \trowd \trgaph108\trleft-108 \cellx1080\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Semantic\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1080\cellx8730 \pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 Step\cell This semantic indicates that the single stepping is to be performed or not. The GUID of this semantic is {\cs58\f5\fs16\lang1024 9CADE560-8F43-101A-B07B-00DD01113F11}
. The data of this semantic consists of a boolean value which indicates in the \ldblquote step out of a server\rdblquote  case whether execution should continue once the other side is reached or one should remain stopped.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 General\cell This semantic, which has GUID {\cs58\f5\fs16\lang1024 D62AEDFA-57EA-11ce-A964-00AA006C3706}
, allows for series of tagged bags of data to be passed. Each is byte counted, and has associated with it a GUID. {\cs58\f5\fs16\lang1024 wDebuggingOpCode}
 allows for one of a series of operations to be specified. Existing-defined opcodes are as follows. Future opcodes are to be allocated by a central coordinating body.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar 
\f4\fs16 {\cs38\super \chftn } \tab This is presently Microsoft Corporation.}}\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1080\cellx2700\cellx8730 \pard\plain \s69\keepn\widctlpar\intbl \f4\fs18 \cell \pard\plain 
\s54\qc\keepn\widctlpar\intbl \b\f4\fs18 Opcode\cell \pard \s54\keepn\widctlpar\intbl Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s69\keepn\widctlpar\intbl \f4\fs18 \cell \pard\plain \s53\qc\keepn\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 0x0000\cell \pard \s53\keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 No operation\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1080\cellx2700\cellx8730
 \pard\plain \s69\widctlpar\intbl \f4\fs18  \cell \pard\plain \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 0x0001\cell \pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
Single step,  stop on the other side, as in the \ldblquote Step\rdblquote  semantic.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Extents presently defined for use in the General semantic are as follows:

\par \trowd \trgaph108\trleft-108 \cellx1080\cellx2700\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Extent\cell Meaning\cell {\b0 \cell }\pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1080\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 Interface pointer\cell This semantic has GUID {\cs58\f5\fs16\lang1024 53199051-57EB-11ce-A964-00AA006C3706}. 
\par \pard\plain \s69\widctlpar\intbl \f4\fs18 The contents of {\cs58\f5\fs16\lang1024 rgbData }for this extent is simply an {\cs58\f5\fs16\lang1024 OBJREF}{\pard\plain \s69\widctlpar\intbl \v\f4\fs12 {\xe {\fs12 OBJREF}}}, which is the data structure which de
scribes a marshaled interface pointer, the data that results from calling {\cs58\f5\fs16\lang1024 CoMarshalInterface}{\pard\plain \s69\widctlpar\intbl \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 CoMarshalInterface}}} ({\cs58\f5\fs16\lang1024 
OBREFs }are described later in this specification). Usually, this {\cs58\f5\fs16\lang1024 OBJREF }is either the self-enclosed {\cs58\f5\fs16\lang1024 LONGOBJREF }variation or a custom-marshaled variation, but this is not required. The {
\cs58\f5\fs16\lang1024 LONGOBJREF }usually contains a reference count of zero, allowing this information to be freely discared without a leakage of state. Remember that {\cs58\f5\fs16\lang1024 OBJREFs }are always in little-endian byte order. An {
\cs58\f5\fs16\lang1024 OBJREF} is converted into its corresponding interface pointer using {\cs58\f5\fs16\lang1024 CoUnmarshalInterface}{\pard\plain \s69\widctlpar\intbl \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 CoUnmarshalInterface}}}.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 With the Interface Pointer extent, an object can be created in the source debugger\rquote 
s space that relates to the call being made. It can then be marshaled, again, in the source debugger\rquote s process, not the source debuggee; this yields an {\cs58\f5\fs16\lang1024 OBJREF}. The {\cs58\f5\fs16\lang1024 OBJREF }
is then transmitted in the course of the cal
l as an extent in the passed debug information. On the destination side, it is conveyed to the destination debugger, who unmarshals it in its process. The result is a COM remoting connection from the source debuggers process to the destination debugger
\rquote s process that is semantically tied to a particular COM call that needs to be debugged. (TBD) Interfaces on this object can be then be used to provide stack walk-backs, remote memory manipulation, or other debugging functionality.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par {\*\bkmkstart _Toc335038472}{\*\bkmkstart _Toc335045055}{\*\bkmkstart _Toc339182977}{\pntext\pard\plain\b\fs28 8.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}
\b\f4\fs28 Security{\*\bkmkend _Toc335038472}{\*\bkmkend _Toc335045055}{\*\bkmkend _Toc339182977}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 There are two distinguishable categories of security provided by COM. The first form is termed {\b\i Activation Security}
, and it dictates how new objects are started, how new and existing objects are connected to, and how certain public services, such as the {\i Class Table} and the {\i Running Object Table} are secured. The second form is {\b\i Call Security}
, which dictates how security operates at the call level between an established connection from a client to an object (server).
\par Aspects of the security API are necessarily platform dependent.  The Windows versions are shown for ref
erence.  Complete interoperability is supported by the user of common, installable authenticators.  COM on Windows will support at least Windows NT, Novell Netware, and DCE Kerberos security.
\par The remainder of this chapter describes these two forms of COM security in detail.
\par {\*\bkmkstart _Toc339182978}{\pntext\pard\plain\b 8.1\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Activation Security{\*\bkmkend _Toc339182978}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As described in previous chapters, objects are exposed to clients either statically, by configuring a persistent registry with information about the server code the {\i Service Control Manager}
 launches to retrieve an object, or dynamically, through publishing an object, such as a class object via {\cs58\f5\fs16\lang1024 CoRegisterClassObject} or a running object via {\cs58\f5\fs16\lang1024 IRunningObjectTable::Register}
. Accordingly, there are two aspects to activation security, one static (or automatic) form, and one dynamic form.
\par Activation security is automatically applied by the {\i Service Control Manager} of a particular machine. Upon receipt of a request to retrieve an object, the {\i Service Control Manager} checks the request 
against security information stored either within its registry or gathered dynamically from objects and stored within its internal tables.
\par {\pntext\pard\plain\b\i\fs22 8.1.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Registry Configuration
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 All {\i Service Control Managers} should offer a level of simple registry-driven configurability for use admin
istering classes of a machine and for specific user accounts on that machine. The following tables contain suggested configuration variables and a description of their Win32 implementation as elaboration. 
\par \trowd \trgaph108\trleft-108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15\brdrcf8 \clshdng10000 \cellx1440\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15\brdrcf8 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15\brdrcf8 \clshdng10000 
\cellx4300\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15\brdrcf8 \clbrdrb\brdrs\brdrw15 \clshdng10000 \cellx8748 \pard \qc\sa60\keep\keepn\widctlpar\intbl {\b Machine Wide Settings\cell Use\cell Win32 Implementation\cell }\pard \widctlpar\intbl {\b \row 
}\trowd \trgaph108\trleft-108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1440\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4300\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8748 \pard \sa60\keep\keepn\widctlpar\intbl Allow Activation\cell Boolean enables and disables activation on a machine-wide basis.\cell {\cs58\f5\fs16\lang1024 HKLM}{\cs38\f5\fs16\lang1024\super \chftn 
{\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Shorthand for {\cs58\f5\fs12\lang1024 HKEY_LOCAL_MACHINE}
, the section of the registry containing machine-wide software configuration information. Typically holds configuration information used by server applications that are not running as a particular user but rather on behalf of the system.}}{
\cs58\f5\fs16\lang1024 \\Software\\Network OLE\\Enabled = [0 | 1]}\cell \pard \widctlpar\intbl \row \pard \sa60\keep\keepn\widctlpar\intbl Per-Class Security\cell Establishes automatic activation security for a specific class reg
istered for use by any users on this machine.\cell {\cs58\f5\fs16\lang1024 HKCC}{\cs38\f5\fs16\lang1024\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Shorthand for {
\cs58\f5\fs12\lang1024 HKEY_COMMON_CLASSES}, the section of the registry containing machine-wide class information (mappings between CLSID\rquote s and DLL/EXE names).}}{\cs58\f5\fs16\lang1024 \\CLSID\\\{\'85\}\\ActivationSecurity} is secured.{
\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Under Win32, when a key is {\i secured}
 the act of retrieving its value performs an access check against the security descriptor that guards it. Therefore, the {\i SCM}\rquote s retrieval of the value of a secure key causes an implicit access check.}}
\par {\cs58\f5\fs16\lang1024 HKCC\\CLSID\\\{\'85\}\\FindActivationSecurityAt = \{clsid\}} points to a class with an {\cs58\f5\fs16\lang1024 \\ActivationSecurity} secured key.{\cs58\f5\fs16\lang1024 \cell }\pard \widctlpar\intbl \row \pard 
\sa60\keep\keepn\widctlpar\intbl Default Class Security\cell Establishes automatic activation security for any classes without per-class security registered for use by any user on this machine.\cell {\cs58\f5\fs16\lang1024 HKLM\\Software\\Network OLE\\
DefaultActivationSecurity} is secured.{\cs58\f5\fs16\lang1024 \cell }\pard \widctlpar\intbl \row \trowd \trgaph108\trleft-108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1440\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4300\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8748 \pard \sa60\keep\widctlpar\intbl Default ROT Security\cell Defines default security on objects placed in the {\i 
Running O}{\i b}{\i ject Table} of this machine by any user.\cell {\cs58\f5\fs16\lang1024 HKLM\\Software\\Network OLE\\DefaultROTSecurity} is secured.{\cs58\f5\fs16\lang1024 \cell }\pard \widctlpar\intbl \row \pard \sa60\widctlpar\tx8856 {\b 
\par }\trowd \trgaph108\trleft-108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15\brdrcf8 \clshdng10000 \cellx1440\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15\brdrcf8 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15\brdrcf8 \clshdng10000 
\cellx4300\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15\brdrcf8 \clbrdrb\brdrs\brdrw15 \clshdng10000 \cellx8748 \pard \qc\sa60\keep\keepn\widctlpar\intbl {\b Per-User Se}{\b t}{\b tings\cell Use\cell Win32 Implementation\cell }\pard \widctlpar\intbl {\b 
\row }\trowd \trgaph108\trleft-108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1440\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4300\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8748 \pard \sa60\keep\keepn\widctlpar\intbl Allow Activation\cell Boolean enables and disables all activation for a particular user on this machine.\cell {\cs58\f5\fs16\lang1024 HKCU}{
\cs38\f5\fs16\lang1024\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Shorthand for {\cs58\f5\fs12\lang1024 HKEY_CURRENT_USER}
, the section of the registry containing per-user software configuration information. Typically holds configuration information used by applications that are running on behalf of a particular user.}}{\cs58\f5\fs16\lang1024 \\Software\\Network OLE\\
Enabled = [0 | 1]\cell }\pard \widctlpar\intbl \row \pard \sa60\keep\keepn\widctlpar\intbl Per-Class Security\cell Establishes automatic activation security for a specific class registered for use by a particular user on this machine.\cell {
\cs58\f5\fs16\lang1024 HKCR}{\cs38\f5\fs16\lang1024\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Shorthand for {\cs58\f5\fs12\lang1024 HKEY_CLASSES_ROOT}
, the section of the registry containing per-user class information (mappings between CLSID\rquote s and DLL/EXE names).}}{\cs58\f5\fs16\lang1024 \\CLSID\\\{\'85\}\\ActivationSecurity} is secured.
\par {\cs58\f5\fs16\lang1024 HKCR\\CLSID\\\{\'85\}\\FindActivationSecurityAt = \{clsid\}} points to a class with an {\cs58\f5\fs16\lang1024 \\ActivationSecurity} secured key.{\cs58\f5\fs16\lang1024 \cell }\pard \widctlpar\intbl \row \pard 
\sa60\keep\keepn\widctlpar\intbl Default Class Security\cell Establishes automatic activation security for any classes without per-class security registered for use by a particular user on this machine.\cell {\cs58\f5\fs16\lang1024 HKCU\\Software\\
Network OLE\\DefaultActivationSecurity} is secured.{\cs58\f5\fs16\lang1024 \cell }\pard \widctlpar\intbl \row \trowd \trgaph108\trleft-108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1440\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4300\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8748 \pard \sa60\keep\widctlpar\intbl Default ROT Security\cell Defines default security on ob
jects placed in the {\i Running O}{\i b}{\i ject Table} of this machine by a particular user.\cell {\cs58\f5\fs16\lang1024 HKCU\\Software\\Network OLE\\DefaultROTSecurity} is secured.{\cs58\f5\fs16\lang1024 \cell }\pard \widctlpar\intbl \row {\pntext
\pard\plain\b\i\fs22 8.1.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IActivationSecurity{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12 {\xe {\i0\fs12 IActivationSecurity}}}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12 {\xe {\i0\fs12 Interfaces\:
IActivationSecurity}}} Interface
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 IActivationSecurity} interface is exposed by objects which register themselves via {\cs58\f5\fs16\lang1024 CoRegisterClassObject} and {\cs58\f5\fs16\lang1024 IRunningObjectTable::Register
} in order to secure access to the tables in which these objects are registered, as described above. 
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
\par interface {\b IActivationSecurity }: IUnknown \{
\par \tab HRESULT\tab {\b GetSecurityDescriptor}({\cs61\fs12 SECURITY_DESCRIPTOR**} ppSecDesc);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 8.1.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IActivationSecurity::GetSecurityDescriptor{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 IActivationSecurity\:functions\:GetSecurityDescriptor}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IActivationSecurity::GetSecurityDescriptor(ppSecDesc);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Retrieves the security descriptor associated with this object. This security descriptor is used to control access to this object pointer in system-maintained tables.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppSecDesc\tab SECURITY_DESCRIPTOR**}\tab Location in which to return a pointer to the security descriptor for activation or binding to this object.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success. {\cs58\f5\fs16\lang1024 *ppSecDesc} refers to a valid {\cs58\f5\fs16\lang1024 SECURITY_DESCRIPTOR}.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_INVALIDARG}\tab One or more arguments are invalid.
\par {\pntext\pard\plain\b\i\fs22 8.1.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Applying Activation Security
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 The following table outlines how activation security is applied to requests to the {\i Service Control Manager}.
\par \trowd \trgaph108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15\brdrcf8 \clshdng10000 \cellx1774\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15\brdrcf8 \clbrdrb\brdrs\brdrw15 \clshdng10000 \cellx8640 \pard 
\sa60\keep\keepn\widctlpar\intbl {\b Request\cell Action\cell }\pard \widctlpar\intbl {\b \row }\trowd \trgaph108 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1774\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard 
\sa60\keep\keepn\widctlpar\intbl {\cs58\f5\fs16\lang1024 CoGetClassObject} or {\cs58\f5\fs16\lang1024 CoCreateInstance} of a non-running class {\i X}\cell {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}\pard 
\fi-360\li360\keep\keepn\widctlpar\intbl{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnacross\pnhang{\pntxtb \'b7}}Check {\cs58\f5\fs16\lang1024 \ldblquote HKLM\\Software\\Network OLE\\Enabled\rdblquote }. Fail the request if zero.
\par {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}Check {\cs58\f5\fs16\lang1024 \rdblquote HKCU\\Software\\Network OLE\\Enabled\rdblquote }. Fail the request if zero.
\par {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}If class is registered in {\cs58\f5\fs16\lang1024 HKCR}, follow {\cs58\f5\fs16\lang1024 \rdblquote HKCR\\CLSID\\\{\'85\}\\FindActivationSecurityAt = \{\'85\}\rdblquote } until an {\cs58\f5\fs16\lang1024 
\rdblquote HKCR\\CLSID\\\{\'85\}\\ActivationSecurity\rdblquote } key is found. If these keys do not exist, use {\cs58\f5\fs16\lang1024 \rdblquote HKCU\\Software\\Network OLE\\Default Activation Security\rdblquote }
. Check the request against the security on this key.
\par {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}Otherwise, if class is registered in {\cs58\f5\fs16\lang1024 HKCC}, follow {\cs58\f5\fs16\lang1024 \rdblquote HKCC\\CLSID\\\{\'85\}\\FindActivationSecurityAt = \{\'85\}\rdblquote } until an {
\cs58\f5\fs16\lang1024 \rdblquote HKCC\\CLSID\\\{\'85\}\\ActivationSecurity\rdblquote } key is found. If these keys do not exist, use {\cs58\f5\fs16\lang1024 \rdblquote HKLM\\Software\\Network OLE\\Default Activation Security\rdblquote }
. Check the request against the security on this key.\cell \pard \widctlpar\intbl \row \trowd \trgaph108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1774\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\cellx8640 \pard \sa60\keep\keepn\widctlpar\intbl {\cs58\f5\fs16\lang1024 CoGetClassObject} or {\cs58\f5\fs16\lang1024 CoCreateInstance} of a running class {\i Y}{\cs58\f5\fs16\lang1024 \cell {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}}\pard 
\fi-360\li360\keep\keepn\widctlpar\intbl{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnacross\pnhang{\pntxtb \'b7}}Check {\cs58\f5\fs16\lang1024 \ldblquote HKLM\\Software\\Network OLE\\Enabled\rdblquote }. Fail the request if zero.
\par {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}Check {\cs58\f5\fs16\lang1024 \rdblquote HKCU\\Software\\Network OLE\\Enabled\rdblquote }. Fail the request if zero.
\par {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}Check the request against the {\cs58\f5\fs16\lang1024 SECURITY_DESCRIPTOR} available from {\cs58\f5\fs16\lang1024 CoRegisterClassObject(CLSID_Y, \'85)}. This will be either the value returned by the class object
\rquote s {\cs58\f5\fs16\lang1024 IactivationSecurity::GetSecurityDescriptor} at the time of {\cs58\f5\fs16\lang1024 CoRegisterClassObject }or will have been taken from {\cs58\f5\fs16\lang1024 \rdblquote HKCU\\Software\\Network OLE\\
DefaultActivationSecurity\rdblquote } or {\cs58\f5\fs16\lang1024 \ldblquote HKLM\\Software\\Network OLE\\DefaultActivationSecurity\rdblquote } at the time of {\cs58\f5\fs16\lang1024 CoRegisterClassObject} if the class object did not support {
\cs58\f5\fs16\lang1024 IActivationSecurity}.\cell \pard \widctlpar\intbl \row \trowd \trgaph108 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1774\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 
\pard \sa60\keep\widctlpar\intbl {\cs58\f5\fs16\lang1024 Running Object Table\cell {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}}\pard \fi-360\li360\keep\widctlpar\intbl{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnacross\pnhang{\pntxtb \'b7}}Check {
\cs58\f5\fs16\lang1024 \ldblquote HKLM\\Software\\Network OLE\\Enabled\rdblquote }. Fail the request if zero.
\par {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}Check {\cs58\f5\fs16\lang1024 \rdblquote HKCU\\Software\\Network OLE\\Enabled\rdblquote }. Fail the request if zero.
\par {\pntext\pard\plain\intbl\f1\fs20 \'b7\tab}Before performing any operation against a {\cs58\f5\fs16\lang1024 ROT} entry (i.e., {\cs58\f5\fs16\lang1024 IRunningObjectTable::Revoke}, {\cs58\f5\fs16\lang1024 IRunningObjectTable::IsRunning}, {
\cs58\f5\fs16\lang1024 IRunningObjectTable::GetObject}, {\cs58\f5\fs16\lang1024 IRunningObjectTable::NoteTimeChange}, {\cs58\f5\fs16\lang1024 IRunningObjectTable::GetTimeOfLastChange}, or when including an entry in an {\cs58\f5\fs16\lang1024 
IEnumMoniker::Next} of an {\cs58\f5\fs16\lang1024 IEnumMoniker} returned from {\cs58\f5\fs16\lang1024 IRunningObjectTable::EnumRunning}), check the call against the {\cs58\f5\fs16\lang1024 SECURITY_DESCRIPTOR} available from {\cs58\f5\fs16\lang1024 
IRunningObjectTable::Register}. This will be either the value returned by the object\rquote s {\cs58\f5\fs16\lang1024 IActivationSecurity::GetSecurityDescriptor} at the time of {\cs58\f5\fs16\lang1024 IRunningObjectTable::Register}
 or will have been taken from {\cs58\f5\fs16\lang1024 \rdblquote HKCU\\Software\\Network OLE\\DefaultROTSecurity\rdblquote } or {\cs58\f5\fs16\lang1024 \ldblquote HKLM\\Software\\Network OLE\\DefaultROTSecurity\rdblquote } at the time of {
\cs58\f5\fs16\lang1024 IRunningObjectTable::Register} if the object did not support {\cs58\f5\fs16\lang1024 IActivationSecurity}.\cell \pard \widctlpar\intbl \row {\pntext\pard\plain\b 8.2\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt
\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4  {\*\bkmkstart _Toc339182979}Call Security{\*\bkmkend _Toc339182979}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM provides two mechanisms to secure calls. The first mechanism is similar to {\cs58\f5\fs16\lang1024 DCE-RPC}
: COM provides APIs that applications may use do their own security checking. The second mechanism is done automati
cally by the COM infrastructure. If the application provides some setup information, COM will make all the necessary checks to secure the application. This automatic mechanism does security checking for the proc
ess, not for individual objects or methods. If an application wants more fine grained security, it performs its own checki
ng. However, the two mechanisms are not exclusive: an application may ask COM to perform automatic security checking and then perform its own.
\par COM call security services are divided into three categories: general APIs called by both clients and serv
ers, new interfaces on client proxies, and server-side APIs and call-context interfaces. The general APIs allow the automatic security mechanism to be initialized and automatic authentication services to be regis
tered. The proxy interfaces allow the client to control the security on calls to individual interfaces. The server APIs and interfaces allow the server to retrieve security information about a call and to impersonate the caller.
\par In a typical scenario, the client queries the object for {\cs58\f5\fs16\lang1024 IClientSecurity}, which is implemented locally by the remoting layer.  The client uses {\cs58\f5\fs16\lang1024 IClientSecurity }
to control the security of individual interface proxies on the object prior to making a call on one of the interfaces. When a call arrives at the server, the server may call {\cs58\f5\fs16\lang1024 CoGetCallContext} to retrieve an {\cs58\f5\fs16\lang1024 
IServerSecurity} interface.  {\cs58\f5\fs16\lang1024 IServerSecurity }allows the server to check the client\rquote s authentication and to impersonate the client, if needed. The {\cs58\f5\fs16\lang1024 IServerSecurity}
 object is valid for the duration of the call. {\cs58\f5\fs16\lang1024 CoInitializeSecurity }allows the client to establish default call security for the process, avoiding the use of {\cs58\f5\fs16\lang1024 IClientSecurity} on individual proxies. {
\cs58\f5\fs16\lang1024 CoInitializeSecurity} and {\cs58\f5\fs16\lang1024 CoRegisterAuthenticationServices} allow a server to register automatic authentication services for the process.
\par Implementations of {\cs58\f5\fs16\lang1024 QueryInterace} must never check ACLs.  COM requires that an object which supports a particular {\cs58\f5\fs16\lang1024 IID} always return success when queried for that {\cs58\f5\fs16\lang1024 IID}
.  Aside from the requirement, checking ACLs on {\cs58\f5\fs16\lang1024 QueryInterface} does not provide any real security.  If client A legally has access to interface {\cs58\f5\fs16\lang1024 IFoo}
, A can hand it directly to B without any calls back to the server.  Additionally, OLE caches interface pointers and will not call {\cs58\f5\fs16\lang1024 QueryInterface} on the server every time a client does a query.
\par Each time a proxy is created, COM sets the security information to default values, which are the same values used for automatic security.
\par {\pntext\pard\plain\b\i\fs22 8.2.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 General Call Security APIs
\par {\pntext\pard\plain\b\fs20\lang1024 8.2.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 RPC_C_AUTHN{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 RPC_C_AUTHN}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 Constants\:
RPC_C_AUTHN}}} Constants
\par \pard\plain \s48\fi-3420\li3420\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Value\tab \tab Description
\par \pard\plain \s49\fi-3420\li3420\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_NONE}\tab Performs no authentication.
\par {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_CONNECT}\tab Authenticates only when the client establishes a relationship with the server. Datagram transports always use {\cs58\f5\fs16\lang1024 RPC_AUTHN_LEVEL_PKT} instead. 
\par {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_CALL}\tab Authenticates only at the beginning of each remote procedure call when the server receives the request.  Datagram transports use {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_PKT} instead.
\par {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_PKT}\tab Authenticates that all data received is from the expected client.
\par {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_PKT_INTEGRITY}\tab Authenticates and verifies that none of the data transferred between client and server has been modified.
\par {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_PKT_PRIVACY}\tab Authenticates all previous levels and encrypts the argument value of each remote procedure call.
\par {\pntext\pard\plain\b\fs20\lang1024 8.2.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 RPC_C_IMP{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 RPC_C_IMP}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 Constants\:RPC_C_IMP}}}
 Constants
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Value\tab \tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 RPC_C_IMP_LEVEL_ANONYMOUS}\tab The client is anonymous to the server.  The server process cannot ob
tain identification information about the client and it cannot impersonate the client.
\par {\cs58\f5\fs16\lang1024 RPC_C_IMP_LEVEL_IDENTIFY}\tab The server can obtain the client\rquote s identity.  The server can impersonate the client for {\cs58\f5\fs16\lang1024 ACL} checking but cannot access system objects as the client. This information 
is obtained when the connection is established, not on every call.
\par {\cs58\f5\fs16\lang1024 RPC_C_IMP_LEVEL_IMPERSONATE}\tab The server process can impersonate the client's security context while acting on behalf of the client.  This information is obtained when the connection is established, not on every call.
\par {\cs58\f5\fs16\lang1024 RPC_C_IMP_LEVEL_DELEGATE}\tab The server process can impersonate the client's security context while acting on behalf of the client.  The server process can also make out
going calls to other servers while acting on behalf of the client.  This information is obtained when the connection is established, not on every call.
\par {\*\bkmkstart _Toc332698986}{\*\bkmkstart _Toc332699025}{\*\bkmkstart _Toc332699046}{\*\bkmkstart _Toc332787752}{\*\bkmkstart _Toc332787788}{\*\bkmkstart _Toc332790074}{\*\bkmkstart _Toc333305230}{\*\bkmkstart _Toc333742889}{\*\bkmkstart _Toc333742922}
{\*\bkmkstart _Toc333742955}{\*\bkmkstart _Toc336411072}{\*\bkmkstart _Toc337289182}{\pntext\pard\plain\b\fs20\lang1024 8.2.1.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\b\f4\fs20\lang1024 CoInitializeSecurity{\*\bkmkend _Toc332698986}{\*\bkmkend _Toc332699025}{\*\bkmkend _Toc332699046}{\*\bkmkend _Toc332787752}{\*\bkmkend _Toc332787788}{\*\bkmkend _Toc332790074}{\*\bkmkend _Toc333305230}{\*\bkmkend _Toc333742889}
{\*\bkmkend _Toc333742922}{\*\bkmkend _Toc333742955}{\*\bkmkend _Toc336411072}{\*\bkmkend _Toc337289182}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 
CoInitializeSecurity}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoInitializeSecurity}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoInitializeSecurity(pSecDesc, AuthnLevel, Reserved); 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Initializes the security layer.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pSecDesc\tab SECURITY_DESCRIPTOR*\tab }This parameter contains two {\cs58\f5\fs16\lang1024 ACLs}.  The discretionary {\cs58\f5\fs16\lang1024 ACL} in
dicates who is allowed to call this process and who is explicitly denied.  The system {\cs58\f5\fs16\lang1024 ACL} contains audit information.  COM will write an audit entry for each account listed in the system {\cs58\f5\fs16\lang1024 ACL}
 if the administrator for the machine has turned on auditing of COM calls on the machine. A {\cs58\f5\fs16\lang1024 NULL} {\cs58\f5\fs16\lang1024 SACL} implies no auditing.  A {\cs58\f5\fs16\lang1024 SACL} with no {\cs58\f5\fs16\lang1024 ACE}
s also implies no auditing. A {\cs58\f5\fs16\lang1024 NULL} {\cs58\f5\fs16\lang1024 DACL} will allow calls from anyone.  A {\cs58\f5\fs16\lang1024 DACL} with no {\cs58\f5\fs16\lang1024 ACE}s allows no access. If the application passes a {
\cs58\f5\fs16\lang1024 NULL} security descriptor, COM will construct one that allows calls from the current user and local system.  All calls will be audited. COM does not actually audit eve
ry call.  It only audits new connections. COM will hold a pointer to the security descriptor until the last call to {\cs58\f5\fs16\lang1024 CoUninitialize} com
pletes.  The descriptor and its components may be allocated any way the application desires, but it may not be freed until after the application uninitializes COM.
\par {\cs58\f5\fs16\lang1024 AuthnLevel}\tab {\cs58\f5\fs16\lang1024 ULONG\tab }This parameters defines the security level and impersonation level used by automatic security.  It may contain one of the values from each of the {\cs58\f5\fs16\lang1024 
RPC_C_AUTHN} and {\cs58\f5\fs16\lang1024 RPC_C_IMP} constants {\cs58\f5\fs16\lang1024 OR}\rquote d together. Additionally, the value {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_MUTUAL may be OR}\rquote 
d in. This value causes the authentication service to guarantee that the client can find out the login account of the server securely.  When calls arrive, they must be at least as high as the specified security level and impersona
tion level.  If not, COM will automatically fail the call. Outgoing calls will be made at the specified security level or higher if COM has a hint from the server.  The impersonation level will always be set as specif
ied and not negotiated.  Dynamic impersonation is not supported.
\par {\cs58\f5\fs16\lang1024 Reserved}\tab {\cs58\f5\fs16\lang1024 void*\tab }This parameter is reserved for future use.  It must be set to {\cs58\f5\fs16\lang1024 NULL}.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par {\cs58\f5\fs16\lang1024 \tab E_INVALIDARG}\tab One or more arguments are invalid.
\par {\*\bkmkstart _Toc332787754}{\*\bkmkstart _Toc332787790}{\*\bkmkstart _Toc332790076}{\*\bkmkstart _Toc333305232}{\*\bkmkstart _Toc333742891}{\*\bkmkstart _Toc333742924}{\*\bkmkstart _Toc333742957}{\*\bkmkstart _Toc336411074}{\*\bkmkstart _Toc337289184}
{\pntext\pard\plain\b\fs20\lang1024 8.2.1.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoQueryAuthenticationService{\*\bkmkend _Toc332787754}{\*\bkmkend _Toc332787790}
{\*\bkmkend _Toc332790076}{\*\bkmkend _Toc333305232}{\*\bkmkend _Toc333742891}{\*\bkmkend _Toc333742924}{\*\bkmkend _Toc333742957}s{\*\bkmkend _Toc336411074}{\*\bkmkend _Toc337289184}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoQueryAuthenticationServices}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 
APIs\:CoQueryAuthenticationServices}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoQueryAuthenticationServices(pcbAuthSvc, adwAuthSvc); 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Returns a list of the authentication services that are installed on the machine.  The list can be used as input to {\cs58\f5\fs16\lang1024 CoRegisterAuthenticationService}
.  Different authentication services support different levels of security.  For example, {\cs58\f5\fs16\lang1024 NTLMSSP} does not support delegation or mutual authentication while {\i Kerberos} does.  The appli
cation is responsible for only registering authentication services that provide the features the application needs. There is no way to query which services have been registered with {\cs58\f5\fs16\lang1024 CoRegisterAuthenticationService}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pcbAuthSvc}\tab {\cs58\f5\fs16\lang1024 DWORD*}\tab Returns a count of  the authentication services supported on the machine.
\par {\cs58\f5\fs16\lang1024 adwAuthSvc}\tab {\cs58\f5\fs16\lang1024 DWORD**}\tab Returns a list of authentication services supported on the machine.  The enumeration of authentication services is in {\cs58\f5\fs16\lang1024 rpcdce.h}
.  Authentication services that are not currently in the enumeration may be installed on a machine without upgrading the operating system.  The list is allocated by {\cs58\f5\fs16\lang1024 CoTaskMemAlloc}.  The application must free the list by calling {
\cs58\f5\fs16\lang1024 CoTaskMemFree}.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i {\*\bkmkstart _Toc332787755}{\*\bkmkstart _Toc332787791}{\*\bkmkstart _Toc332790077}{\*\bkmkstart _Toc333305233}{\*\bkmkstart _Toc333742892}{\*\bkmkstart _Toc333742925}
{\*\bkmkstart _Toc333742958}{\*\bkmkstart _Toc336411075}{\*\bkmkstart _Toc337289185}Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_INVALIDARG}\tab One or more arguments are invalid.
\par {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY}\tab Insufficient memory to create the {\cs58\f5\fs16\lang1024 adwAuthSvc} out-parameter.
\par {\pntext\pard\plain\b\fs20\lang1024 8.2.1.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoRegisterAuthenticationService{\*\bkmkend _Toc332787755}
{\*\bkmkend _Toc332787791}{\*\bkmkend _Toc332790077}{\*\bkmkend _Toc333305233}{\*\bkmkend _Toc333742892}{\*\bkmkend _Toc333742925}{\*\bkmkend _Toc333742958}{\*\bkmkend _Toc336411075}{\*\bkmkend _Toc337289185}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoRegisterAuthenticationService}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoRegisterAuthenticationService}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoRegisterAuthenticationServices(cbauthSvc, asAuthSvc); 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This API sets the list of authentication services COM will use to authenticate incoming calls.  If a call ar
rives with a different authentication service, the call will fail.  Registering authentication services does not prevent the arrival of unsecure calls (i.e., 
calls with no authentication service).  This API can only be called before any interfaces are marshaled.  Thus servers must call this if they want security.  This call is not useful for clients (unless they are also servers).
\par This API can only be called once.
\par An application cannot call both {\cs58\f5\fs16\lang1024 CoInitializeSecurity} and {\cs58\f5\fs16\lang1024 CoRegisterAuthenticationService}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 cbAuthSvc}\tab {\cs58\f5\fs16\lang1024 DWORD}\tab Specify the number of authentication services in the list {\cs58\f5\fs16\lang1024 asAuthSvc}.
\par {\cs58\f5\fs16\lang1024 asAuthSvc}\tab {\cs58\f5\fs16\lang1024 SOLE_AUTHENTICATION_SERVICE*}\tab An array of authentication services to register.  The authentication services are enumerated in {\cs58\f5\fs16\lang1024 rpcdce.h}
.  COM copies the list.  If the principal name is {\cs58\f5\fs16\lang1024 NULL}, COM will assume the current user id.  A {\cs58\f5\fs16\lang1024 NULL} principal name will work for {\cs58\f5\fs16\lang1024 NTLMSSP} and {\i Kerberos}
.  It may or may not work for other authentication services.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-3240\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 \tab E_INVALIDARG}\tab One or more arguments are invalid.
\par {\pntext\pard\plain\b\i\fs22 8.2.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IClientSecurity{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12 {\xe {\i0\fs12 IClientSecurity}}}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12 {\xe {\i0\fs12 Interfaces\:IClientSecurity}
}} Interface
\par \pard\plain \qj\sa60\widctlpar \f4\fs20  {\cs58\f5\fs16\lang1024 IClientSecurity} gives the client control over the call-security of individual interfaces on a remote object.
\par All proxies generated by the COM {\cs58\f5\fs16\lang1024 MIDL} compiler support the {\cs58\f5\fs16\lang1024 IClientSecurity} interface. If {\cs58\f5\fs16\lang1024 QueryInterface} for {\cs58\f5\fs16\lang1024 IClientSecurity}
 fails, either the object is implemented in-process or it is remoted by a custom marshaler which does not support security (a custom marshaler may support security by offering the {\cs58\f5\fs16\lang1024 IClientSecurity}
 interface to the client). The proxies passed as parameters to an {\cs58\f5\fs16\lang1024 IClientSecurity} method must be from the same object as the {\cs58\f5\fs16\lang1024 IClientSecurity} interface.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
\par interface {\b IClientSecurity}{\b\f4\fs12  }: IUnknown \{
\par \tab HRESULT\tab {\b QueryBlanket}({\cs61\fs12 void* }pProxy, {\cs61\fs12 DWORD* }pcbAuthnSvc, {\cs61\fs12 SOLE_AUTHENTICATION_SERVICE* }pasAuthnSvc, {\cs61\fs12 RPC_AUTH_IDENTITY_HANDLE** }ppAuthInfo, {\cs61\fs12 DWORD* }AuthnLevel);
\par \tab HRESULT\tab {\b SetBlanket}({\cs61\fs12 void*} pProxy, {\cs61\fs12 DWORD }AuthnSvc, {\cs61\fs12 WCHAR*} ServerPrincName, {\cs61\fs12 RPC_AUTH_IDENTITY_HANDLE*} pAuthInfo, {\cs61\fs12 DWORD }AuthnLevel, {\cs61\fs12 DWORD }AuthzSvc);
\par \tab HRESULT\tab {\b CopyProxy}({\cs61\fs12 void* }pProxy, {\cs61\fs12 REFIID }riid, {\cs61\fs12 void** }ppCopy);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par {\*\bkmkstart _Toc332787756}{\*\bkmkstart _Toc332787792}{\*\bkmkstart _Toc332790078}{\*\bkmkstart _Toc333305234}{\*\bkmkstart _Toc333742893}{\*\bkmkstart _Toc333742926}{\*\bkmkstart _Toc333742959}{\*\bkmkstart _Toc336411076}{\*\bkmkstart _Toc337289186}
{\pntext\pard\plain\b\fs20\lang1024 8.2.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IClientSecurity::Query{\*\bkmkend _Toc332787756}{\*\bkmkend _Toc332787792}
{\*\bkmkend _Toc332790078}{\*\bkmkend _Toc333305234}{\*\bkmkend _Toc333742893}{\*\bkmkend _Toc333742926}{\*\bkmkend _Toc333742959}Blanket{\*\bkmkend _Toc336411076}{\*\bkmkend _Toc337289186}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 IClientSecurity\:functions\:QueryBlanket}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IClientSecurity::QueryBlanket(pProxy, pcbAuthnSvc, pasAuthnSvc, ppAuthInfo, AuthnLevel);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This method returns authentication information.  This method is called by the client to find out what authentication information COM will use on calls made from the specified proxy.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pProxy\tab void*}\tab This parameter indicates the proxy to query.
\par {\cs58\f5\fs16\lang1024 pcbAuthnSvc}\tab {\cs58\f5\fs16\lang1024 DWORD*}\tab This parameter indicates the number of entries in the array {\cs58\f5\fs16\lang1024 pasAuthSvc}.
\par {\cs58\f5\fs16\lang1024 pasAuthnSvc}\tab {\cs58\f5\fs16\lang1024 SOLE_AUTHENTICATION_SERVICE*}\tab 
This parameter is an array of authentication service, principal name pairs.  The first entry is the one that COM will use to make calls to the server.  The array is allocated with {\cs58\f5\fs16\lang1024 CoTaskMemAlloc}
 and the application must free it by calling {\cs58\f5\fs16\lang1024 CoTaskMemFree}.
\par {\cs58\f5\fs16\lang1024 ppAuthInfo\tab RPC_AUTH_IDENTITY_HANDLE**}\tab This parameter returns the value passed to {\cs58\f5\fs16\lang1024 CoSetProxyAuthenticationInfo}.  It may be {\cs58\f5\fs16\lang1024 NULL} if you do not care.
\par {\cs58\f5\fs16\lang1024 AuthnLevel\tab DWORD*}\tab This parameter returns the current authentication level.  It may be NULL if you do not care.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_INVALIDARG}\tab One or more arguments are invalid.
\par {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY}\tab Insufficient memory to create the {\cs58\f5\fs16\lang1024 pasAuthnSvc} out-parameter.
\par {\*\bkmkstart _Toc332787757}{\*\bkmkstart _Toc332787793}{\*\bkmkstart _Toc332790079}{\*\bkmkstart _Toc333305235}{\*\bkmkstart _Toc333742894}{\*\bkmkstart _Toc333742927}{\*\bkmkstart _Toc333742960}{\*\bkmkstart _Toc336411077}{\*\bkmkstart _Toc337289187}
{\pntext\pard\plain\b\fs20\lang1024 8.2.2.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IClientSecurity::Set{\*\bkmkend _Toc332787757}{\*\bkmkend _Toc332787793}
{\*\bkmkend _Toc332790079}{\*\bkmkend _Toc333305235}{\*\bkmkend _Toc333742894}{\*\bkmkend _Toc333742927}{\*\bkmkend _Toc333742960}Blanket{\*\bkmkend _Toc336411077}{\*\bkmkend _Toc337289187}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 IClientSecurity\:functions\:SetBlanket}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IClientSecurity::SetBlanket(pProxy, AuthnSvc, ServerPrincName, pAuthInfo, AuthnLevel, AuthzSvc);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This method sets the authentication information that will be used to make calls on the specified proxy.  The values specified here override the values c
hosen by automatic security.  Calling this method changes the security values for all other users of the specified proxy.  Use {\cs58\f5\fs16\lang1024 IClientSecurity::CopyProxy} to make a private copy.
\par By default the authentication service and principal name is set to a list of authentication service and princi
pal name pairs that were registered on the server.  When this method is called COM will forget the default list. By default COM will try one principal name from the list of authentication services available on both machines.
  It will not retry if that principal name fails.
\par If {\cs58\f5\fs16\lang1024 pAuthInfo} is not set, it defaults to the logged in id. {\cs58\f5\fs16\lang1024 AuthnLevel} and {\cs58\f5\fs16\lang1024 AuthzSvc} default to the values specified to {\cs58\f5\fs16\lang1024 CoInitializeSecurity}.  If {
\cs58\f5\fs16\lang1024 CoInitializeSecurity} is not called, they default to {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_NONE} and {\cs58\f5\fs16\lang1024 RPC_C_AUTHZ_NONE}.  
\par Security information will often be ignored if set on local interfaces.  For example, it is legal to set security on the {\cs58\f5\fs16\lang1024 IClientSecurity} interface.  However, since that interface is supported locally, there is no need for secu
rity.  {\cs58\f5\fs16\lang1024 IUnknown} and {\cs58\f5\fs16\lang1024 IMultiQuery} are special cases.  The local implementation makes remote calls to support these interfaces.  The local implementation will use the security settings for those interfaces.

\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pProxy\tab void*}\tab This parameter indicates the proxy to set.
\par {\cs58\f5\fs16\lang1024 AuthnSvc\tab DWORD}\tab This parameter indicates the authentication service.  It may be {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_NONE} if no authentication is required.  It may be {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_DONT_CHANGE}
 if you do not want to change the current value.
\par {\cs58\f5\fs16\lang1024 ServerPrincName}\tab {\cs58\f5\fs16\lang1024 WCHAR*}\tab This parameter indicates the server principal name.  It may be {\cs58\f5\fs16\lang1024 NULL} if you don\rquote t want to change the current value.
\par {\cs58\f5\fs16\lang1024 pAuthInfo\tab RPC_AUTH_IDENTITY_HANDLE*}\tab This parameter sets the identity of the client.  It is authentication service specific.  Some authentication services allow the appli
cation to pass in a different user name and password.  COM keeps a pointer to the memory passed in until COM is uninitialized or a new value is set.  If {\cs58\f5\fs16\lang1024 NULL} is specified COM uses the current identity (whether the
 logged in or impersonated id).
\par {\cs58\f5\fs16\lang1024 AuthnLevel\tab DWORD}\tab This parameter specifies the authentication level.  It may be {\cs58\f5\fs16\lang1024 RPC_C_AUTHN_LEVEL_DONT_CHANGE} if you do not want to change the current value.
\par {\cs58\f5\fs16\lang1024 AuthzSvc\tab DWORD}\tab This parameter specifies the authorization level.  It may be {\cs58\f5\fs16\lang1024 RPC_C_AUTHZ_DONT_CHANGE} is you do not want to change the current value.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_INVALIDARG}\tab One or more arguments is invalid.
\par {\*\bkmkstart _Toc333305236}{\*\bkmkstart _Toc333742895}{\*\bkmkstart _Toc333742928}{\*\bkmkstart _Toc333742961}{\*\bkmkstart _Toc336411078}{\*\bkmkstart _Toc337289188}{\pntext\pard\plain\b\fs20\lang1024 8.2.2.3\tab}\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IClientSecurity::CopyProxy{\*\bkmkend _Toc333305236}{\*\bkmkend _Toc333742895}{\*\bkmkend _Toc333742928}{\*\bkmkend _Toc333742961}
{\*\bkmkend _Toc336411078}{\*\bkmkend _Toc337289188}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 IClientSecurity\:functions\:CopyProxy}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IClientSecurity::CopyProxy(pProxy, riid, ppCopy)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This method makes a copy of the specified proxy. Its authentication information may be changed without affecting any users of the original proxy.  The copy has the default values for the authentication informa
tion. The copy has one reference and must be released.
\par Local interfaces may not be copied.  {\cs58\f5\fs16\lang1024 IUnknown}, {\cs58\f5\fs16\lang1024 IMultiQuery}, and {\cs58\f5\fs16\lang1024 IClientSecurity} are examples of existing local interfaces.  
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pProxy}\tab {\cs58\f5\fs16\lang1024 void*}\tab This parameter indicates the proxy to copy.
\par {\cs58\f5\fs16\lang1024 riid}\tab {\cs58\f5\fs16\lang1024 REFIIID}\tab Identifies the proxy to return.
\par {\cs58\f5\fs16\lang1024 ppCopy}\tab {\cs58\f5\fs16\lang1024 void**}\tab The copy is returned to this parameter.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}{\cs58\f5\fs16\lang1024 \tab S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_NOINTERFACE}\tab The interface {\cs58\f5\fs16\lang1024 riid} is not supported by this object.
\par {\*\bkmkstart _Toc337289193}{\pntext\pard\plain\b\i\fs22 8.2.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Client APIs for Call Security
\par {\pntext\pard\plain\b\fs20\lang1024 8.2.3.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoQueryProxyAuthenticationInfo{\*\bkmkend _Toc337289193}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoQueryProxyAuthenticationInfo}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoQueryProxyAuthenticationInfo}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoQueryProxyAuthenticationInfo(pProxy, pcbAuthnSvc, pasAuthnSvc, ppAuthInfo, pAuthnLevel);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Returns the authentication information used to make calls on the specified proxy. This function encapsulates the following sequence of common calls:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
pProxy->QueryInterface(IID_IClientSecurity, (void**)&pcs);
\par pcs->QueryBlanket(pProxy, AuthnSvc, ServerPrincName, pAuthInfo, AuthnLevel);
\par pcs->Release();
\par 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i see }{\cs58\i\f5\fs16\lang1024 IClientSecurity::QueryBlanket}
\par {\*\bkmkstart _Toc337289194}{\pntext\pard\plain\b\fs20\lang1024 8.2.3.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoSetProxyAuthenticationInfo
{\*\bkmkend _Toc337289194}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoSetProxyAuthenticationInfo}}}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoSetProxyAuthenticationInfo}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoSetProxyAuthenticationInfo(pProxy, AuthnSvc, ServerPrincName, pAuthInfo, AuthnLevel, AuthzSvc);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Sets the authentication information that will be used to make calls on the specified proxy. This function encapsulates the following sequence of common calls:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
pProxy->QueryInterface(IID_IClientSecurity, (void**)&pcs);
\par pcs->SetBlanket(pProxy, AuthnSvc, ServerPrincName, pAuthInfo, AuthnLevel);
\par pcs->Release();
\par 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i see }{\cs58\i\f5\fs16\lang1024 IClientSecurity::SetBlanket}
\par {\*\bkmkstart _Toc332787758}{\*\bkmkstart _Toc332787794}{\*\bkmkstart _Toc332790080}{\*\bkmkstart _Toc337289195}{\pntext\pard\plain\b\fs20\lang1024 8.2.3.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\f4\fs20\lang1024 Co{\*\bkmkend _Toc332787758}{\*\bkmkend _Toc332787794}{\*\bkmkend _Toc332790080}CopyProxy{\*\bkmkend _Toc337289195}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\b\v\f4\fs12\lang1024 {\xe {\fs12 CoCopyProxy}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoCopyProxy}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoCopyProxy(pProxy, riid, ppCopy);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Makes a copy of the specified proxy. This function encapsulates the following sequence of common calls:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
pProxy->QueryInterface(IID_IClientSecurity, (void**)&pcs);
\par pcs->CopyProxy(pProxy, riid, ppCopy);
\par pcs->Release();
\par 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i see }{\cs58\i\f5\fs16\lang1024 IClientSecurity::CopyProxy}
\par {\pntext\pard\plain\b\i\fs22 8.2.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IServerSecurity{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12 {\xe {\i0\fs12 IServerSecurity}}}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12 {\xe {\i0\fs12 Interfaces\:IServerSecurity}
}} Interface
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IServerSecurity} may be used to impersonate the client during a call, even on other threads within the server. {\cs58\f5\fs16\lang1024 IServerSeciruty:QueryBlanket} and {
\cs58\f5\fs16\lang1024 IServerSecurity::ImpersonateClient} may only be called before the call completes. {\cs58\f5\fs16\lang1024 IServerSecurity::RevertToSelf}
 may be called at any time. The interface pointer must be released when it is no longer needed. Unless the server wishes to impersonate the client on another thread, there is not reason to keep an {\cs58\f5\fs16\lang1024 IServerSecurity}
 past the end of the call, since it will at that point no longer support {\cs58\f5\fs16\lang1024 IServerSecurity::QueryBlanket}.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
\par interface {\b IServerSecurity}{\b\f4\fs12  }: IUnknown \{
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b QueryBlanket}({\cs61\fs12 
RPC_AUTHZ_HANDLE* }Privs, {\cs61\fs12 WCHAR** }ServerPrincName, {\cs61\fs12 DWORD* }AuthnLevel, {\cs61\fs12 DWORD* }AuthnSvc, {\cs61\fs12 DWORD* }AuthzSvc );
\par \tab HRESULT\tab {\b ImpersonateClient}({\cs61\fs12 void});
\par \tab HRESULT\tab {\b RevertToSelf}({\cs61\fs12 void});
\par \tab \};
\par {\*\bkmkstart _Toc332787760}{\*\bkmkstart _Toc332787796}{\*\bkmkstart _Toc332790082}{\*\bkmkstart _Toc333305237}{\*\bkmkstart _Toc333742896}{\*\bkmkstart _Toc333742929}{\*\bkmkstart _Toc333742962}{\*\bkmkstart _Toc336411079}{\*\bkmkstart _Toc337289189}
{\pntext\pard\plain\b\fs20\lang1024 8.2.4.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IServerSecurity{\*\bkmkend _Toc332787760}{\*\bkmkend _Toc332787796}
{\*\bkmkend _Toc332790082}{\*\bkmkend _Toc333305237}{\*\bkmkend _Toc333742896}{\*\bkmkend _Toc333742929}{\*\bkmkend _Toc333742962}::QueryBlanket{\*\bkmkend _Toc336411079}{\*\bkmkend _Toc337289189}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 IServerSecurity\:functions\:QueryBlanket}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IServerSecurity::QueryBlanket(Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This method is used by the server to find out about the client that invoked one of its methods.  {\cs58\f5\fs16\lang1024 CoGetCallContext} with {\cs58\f5\fs16\lang1024 IID_ISeverSecurity} returns an {
\cs58\f5\fs16\lang1024 IServerSecurity} interface for the current call on the current thread.  This interface pointer may be used on any thread and calls to it may succeed until the call completes.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 Privs\tab RPC_AUTHZ_HANDLE*}\tab 
Returns a pointer to a handle to the privilege information for the client application. The format of the structure is authentication service specific. The application should not write or free the memory. The in
formation is only valid for the duration of the current call. {\cs58\f5\fs16\lang1024 NULL} may be passed if the application is not interested in this parameter.
\par {\cs58\f5\fs16\lang1024 ServerPrincName}\tab {\cs58\f5\fs16\lang1024 WCHAR*}\tab This parameter indicates the principal name the client specified.  It is a copy allocated with {\cs58\f5\fs16\lang1024 CoTaskMemAlloc}. The application must call {
\cs58\f5\fs16\lang1024 CoTaskMemFree} to release it. {\cs58\f5\fs16\lang1024 NULL} may be passed if the application is not interested in this parameter.
\par {\cs58\f5\fs16\lang1024 AuthnLevel\tab DWORD*}\tab This parameter indicates the authentication level. {\cs58\f5\fs16\lang1024 NULL} may be passed if the application is not interested in this parameter.
\par {\cs58\f5\fs16\lang1024 AuthnSvc\tab DWORD*}\tab This parameter indicate the authentication service the client specified. {\cs58\f5\fs16\lang1024 NULL }may be passed if the application is not interested in this parameter.
\par {\cs58\f5\fs16\lang1024 AuthzSvc\tab DWORD*}\tab This parameter indicates the authorization service. {\cs58\f5\fs16\lang1024 NULL} may be passed if the application is not interested in this parameter.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_INVALIDARG}\tab One or more arguments are invalid.
\par {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY}\tab Insufficient memory to create one or more out-parameters.
\par {\*\bkmkstart _Toc332787761}{\*\bkmkstart _Toc332787797}{\*\bkmkstart _Toc332790083}{\*\bkmkstart _Toc333305238}{\*\bkmkstart _Toc333742897}{\*\bkmkstart _Toc333742930}{\*\bkmkstart _Toc333742963}{\*\bkmkstart _Toc336411080}{\*\bkmkstart _Toc337289190}
{\pntext\pard\plain\b\fs20\lang1024 8.2.4.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IServerSecurity::ImpersonateClient{\*\bkmkend _Toc332787761}
{\*\bkmkend _Toc332787797}{\*\bkmkend _Toc332790083}{\*\bkmkend _Toc333305238}{\*\bkmkend _Toc333742897}{\*\bkmkend _Toc333742930}{\*\bkmkend _Toc333742963}{\*\bkmkend _Toc336411080}{\*\bkmkend _Toc337289190}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 IServerSecurity\:functions\:ImpersonateClient}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IServerSecurity::ImpersonateClient();
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
This method allows a server to impersonate a client for the duration of a call.  The server may impersonate the client on any secure call at identify, impersonate, or delegate level.  At identify level, the server may only find out the clients name and pe
rform  {\cs58\f5\fs16\lang1024 ACL}
 checks; it may not access system objects as the client.  At delegate level the server may make off machine calls while impersonating the client.  The impersonation information only lasts till the end of the current method call.  At that time {
\cs58\f5\fs16\lang1024 IServerSecurity::RevertToSelf} will automatically be called if necessary.
\par Impersonation information is not normally nested.  The last call to any {\cs58\f5\fs16\lang1024 Win32}
 impersonation mechanism overrides any previous impersonation.  However, in the apartment model, impersonation is maintained during nested calls.  Thus if the server {\b\i A} receives a call from {\b\i B}, impersonates, calls {\b\i C}
, receives a call from {\b\i D}, impersonates, reverts, and receives the reply from {\b\i C}, the impersonation will be set back to {\b\i B}, not {\b\i A}.
\par If {\cs58\f5\fs16\lang1024 IServerSecurity::ImpersonateClient} is called on a thread other then the one that received the call, the impersonation will not automatically be revoked.  It will be valid past the end of the call.  However, {
\cs58\f5\fs16\lang1024 IServerSecurity::ImpersonateClient} must be called before the original call completes.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_FAIL}\tab The caller can not impersonate the client identified by this {\cs58\f5\fs16\lang1024 ISeverSecurity} object.
\par {\*\bkmkstart _Toc332787762}{\*\bkmkstart _Toc332787798}{\*\bkmkstart _Toc332790084}{\*\bkmkstart _Toc333305239}{\*\bkmkstart _Toc333742898}{\*\bkmkstart _Toc333742931}{\*\bkmkstart _Toc333742964}{\*\bkmkstart _Toc336411081}{\*\bkmkstart _Toc337289191}
{\pntext\pard\plain\b\fs20\lang1024 8.2.4.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IServerSecurity::RevertToSelf{\*\bkmkend _Toc332787762}
{\*\bkmkend _Toc332787798}{\*\bkmkend _Toc332790084}{\*\bkmkend _Toc333305239}{\*\bkmkend _Toc333742898}{\*\bkmkend _Toc333742931}{\*\bkmkend _Toc333742964}{\*\bkmkend _Toc336411081}{\*\bkmkend _Toc337289191}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 IServerSecurity\:functions\:RevertToSelf}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IServerSecurity::RevertToSelf();
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This method restores the authentication information on a thread to the process\rquote s identity.
\par In the apartment model, {\cs58\f5\fs16\lang1024 IServerSecurity::RevertToSelf}
 only affects the current method invocation.  If there are nested method invocations, they each may have there own impersonation and COM will correctly restore the impersonation before returning to them (regardless of whether or not {
\cs58\f5\fs16\lang1024 IServerSecurity::RevertToSelf} was called).
\par {\cs58\f5\fs16\lang1024 IServerSecurity::RevertToSelf} may be called on threads other then the one that received the call. {\cs58\f5\fs16\lang1024 IServerSecurity::RevertToSelf} may be called after the call completes.  Calls to {\cs58\f5\fs16\lang1024 
IServerSecurity::RevertToSelf} that are not matched with an {\cs58\f5\fs16\lang1024 IServerSecurity::ImpersonateClient} call will fail.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_FAIL}\tab This call was not preceded by a call to {\cs58\f5\fs16\lang1024 IServerSecurity::ImpersonateClient} on this thread of execution.
\par {\*\bkmkstart _Toc333742899}{\*\bkmkstart _Toc333742932}{\*\bkmkstart _Toc333742965}{\*\bkmkstart _Toc336411082}{\*\bkmkstart _Toc337289192}{\pntext\pard\plain\b\i\fs22 8.2.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Sever APIs for Call Security
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The following APIs are provided to give the server access to any contextual information of the caller and to encapsulate common sequences of security checking and caller impersonation.
\par {\pntext\pard\plain\b\fs20\lang1024 8.2.5.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoGet{\*\bkmkend _Toc333742899}{\*\bkmkend _Toc333742932}
{\*\bkmkend _Toc333742965}{\*\bkmkend _Toc336411082}CallContext{\*\bkmkend _Toc337289192}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoGetCallContext}}}
{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoGetCallContext}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoGetCallContext(riid, ppv);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Retrieves the context of the current call on the current thread. {\cs58\f5\fs16\lang1024 riid} specifies the interface on the context to retrieve. Currently only {\cs58\f5\fs16\lang1024 IServerSecurity}
 is available from the default call-context (see {\cs58\f5\fs16\lang1024 ISeverSecurity} for details).
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 riid}\tab {\cs58\f5\fs16\lang1024 REFIID}\tab Identifies the interface to return.
\par {\cs58\f5\fs16\lang1024 ppv}\tab {\cs58\f5\fs16\lang1024 void**}\tab Returns an interface for the current call.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_NOINTERFACE}\tab The call context does not support the interface identified by {\cs58\f5\fs16\lang1024 riid}.
\par {\*\bkmkstart _Toc337289196}{\pntext\pard\plain\b\fs20\lang1024 8.2.5.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoSetCallContext{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoSetCallContext}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoSetCallContext}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoSetCallContext(punk);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Establishes the call context for the current call, overriding the default call context object normally available via {\cs58\f5\fs16\lang1024 CoGetCallContext}.
\par This function is provided primarily for objects performing custom marshaling. Before transferring control from their stub or IPC mechanism to the server-side code, a custom marshaler may establish the call context via {\cs58\f5\fs16\lang1024 
CoSetCallContext}
 so that subsequent objects can be written to take advantage of call-level security or other caller-specific contextual information in a transport neutral fashion, e.g. without regard to whether an object between them and the client was remoted via custom
 marshaling.
\par The call context reverts automatically at the end of each call. Furthermore, a custom marshaling layer which calls {\cs58\f5\fs16\lang1024 CoSetCallContext} prior to entering the server need not call {\cs58\f5\fs16\lang1024 CoSetCallContext(NULL)}
 after each returning call.
\par A second call to {\cs58\f5\fs16\lang1024 CoSetCallContext} with a non-{\cs58\f5\fs16\lang1024 NULL} {\cs58\f5\fs16\lang1024 punk} will {\cs58\f5\fs16\lang1024 Release} the first {\cs58\f5\fs16\lang1024 punk} and {\cs58\f5\fs16\lang1024 AddRef} the second.

\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 punk\tab {\cs58\f5\fs16\lang1024 IUnknown*}\tab When non-{\cs58\f5\fs16\lang1024 NULL}, the {\cs58\f5\fs16\lang1024 IUnknown} which is to be {\cs58\f5\fs16\lang1024 QueryInterface}
\rquote d for the requested call context interface by subsequent calls to {\cs58\f5\fs16\lang1024 CoGetCallContext} during the span of the current call. This interface is {\cs58\f5\fs16\lang1024 AddRef}\rquote d prior to returning. When {
\cs58\f5\fs16\lang1024 NULL}, resets the call context to the COM-provided default for the current call.
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i Returns}\tab {\cs58\f5\fs16\lang1024 S_OK}\tab Success.
\par \pard\plain \s60\fi-1800\li3240\sa58\widctlpar\tx1440\tx3870 \f4\fs20 {\cs58\f5\fs16\lang1024 E_INVALIDARG}\tab One or more arguments are invalid.
\par {\pntext\pard\plain\b\fs20\lang1024 8.2.5.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoQueryClientAuthenticationInfo{\*\bkmkend _Toc337289196}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoQueryClientAuthenticationInfo}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoQueryClientAuthenticationInfo}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoQueryClientAuthenticationInfo(Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Used by the server to find out about the client that invoked the method executing on the current thread. This function encapsulates the following sequence of common calls:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
CoGetCallContext(IID_IServerSecurity, (void**)&pss);
\par pss->QueryBlanket(Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
\par pss->Release();
\par 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i see }{\cs58\i\f5\fs16\lang1024 IServerSecurity::QueryBlanket}
\par {\*\bkmkstart _Toc337289197}{\pntext\pard\plain\b\fs20\lang1024 8.2.5.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoImpersonateClient{\*\bkmkend _Toc337289197}
{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoImpersonateClient}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoImpersonateClient}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoImpersonateClient();
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Allows the server to impersonate the client of the current call for the duration of the call. This function encapsulates the following sequence of common calls:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
CoGetCallContext(IID_IServerSecurity, (void**)&pss);
\par pss->ImpersonateClient();
\par pss->Release();
\par 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i see }{\cs58\i\f5\fs16\lang1024 IServerSecurity::ImpersonateClient}
\par {\*\bkmkstart _Toc337289198}{\pntext\pard\plain\b\fs20\lang1024 8.2.5.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CoRevertToSelf{\*\bkmkend _Toc337289198}
{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 CoRevertToSelf}}}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 APIs\:CoRevertToSelf}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CoRevertToSelf();
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Restores the authentication information on a thread of execution to its previous identity. This function encapsulates the following sequence of common calls:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 CoGetCallC
ontext(IID_IServerSecurity, (void**)&pss);
\par pss->RevertToSelf();
\par pss->Release();
\par 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s59\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx3870 \f4\fs20 {\i see }{\cs58\i\f5\fs16\lang1024 IServerSecurity::RevertToSelf}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc339182980}Part III: Component Object Model Protocols and Services{\*\bkmkend _Toc339182980}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 \line 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par {\*\bkmkstart _Toc339182981}{\pntext\pard\plain\b\fs28 9.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 Connectable Objects{\*\bkmkend _Toc339182981}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The COM technology known as Connectable Objects (also called \ldblquote connection points\rdblquote ) supports a generic ability for any object, called in this context a \ldblquote connectable\rdblquote 
 object, to express these capabilities:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 The existence of \ldblquote outgoing\rdblquote  interfaces,{\cs38\super \chftn {\footnote 
\pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab An \ldblquote outgoing\rdblquote  interface is one that an object defines itself but for which the object is itself a client.  Another piece of code called the 
\ldblquote sink\rdblquote  (generically) implements the outgoing interface such that the object can call the sink.}} such as event sets
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The ability to enumerate the {\cs58\f5\fs16\lang1024 IIDs} of the outgoing interfaces
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The ability to connect and disconnect \ldblquote sinks\rdblquote  to the object for those outgoing {\cs58\f5\fs16\lang1024 IIDs}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The ability to enumerate the connections that exist to a particular outgoing interface.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Support for these capabilities involves four interfaces:  {\cs58\f5\fs16\lang1024 IConnectionPointContainer}{\i , }{\cs58\f5\fs16\lang1024 IEnumConnectionPoints}{\i , }{\cs58\f5\fs16\lang1024 IConnectionPoint}{\i , 
}and {\cs58\f5\fs16\lang1024 IEnumConnections}.  A \ldblquote connectable object\rdblquote  implements {\cs58\f5\fs16\lang1024 IConnectionPointContainer}{\i  }to indi
cate existence of outgoing interfaces.  Through this interface a client can enumerate connection points for each outgoing {\cs58\f5\fs16\lang1024 IID} (via an enumerator with {\cs58\f5\fs16\lang1024 IEnumConnectionPoints}) and can obtain an {
\cs58\f5\fs16\lang1024 IConnectionPoint}{\i  }interface to a connection point for each {\cs58\f5\fs16\lang1024 IID}.  Through a connection point a client starts or terminates an advisory loop with the connectable object and the client\rquote 
s own sink.  The connection point can also enumerate the connections it knows about through an enumerator with {\cs58\f5\fs16\lang1024 IEnumConnections}{\i .}
\par {\*\bkmkstart _Toc339182982}{\pntext\pard\plain\b 9.1\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The {\i IConnectionPoint} Interface{\*\bkmkend _Toc339182982}

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\pard\plain \qj\sa60\widctlpar \b\v\f4\fs16 {\xe {\b\fs16 IConnectionPoint}}}The ability to connect to a single outgoing interface (that is, for a unique {\cs58\f5\fs16\lang1024 IID}) is provided by a \ldblquote 
connection point\rdblquote  sub-object that is conceptually owned by the connectable object.  The object is separate to avoid circular reference counting problems.  Through this in
terface the connection point allows callers to connect a sink to the connectable object, to disconnect a sink, or to enumerate the existing connections.
\par IDL:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 [
\par uuid(B196B286-BAB4-101A-B69C-00AA00341D07)
\par     , object, pointer_default(unique)
\par ]
\par interface IConnectionPoint : IUnknown
\par     \{
\par     HRESULT GetConnectionInterface([out] IID *pIID);
\par     HRESULT GetConnectionPointContainer([out] IConnectionPointContainer **ppCPC);
\par     HRESULT Advise([in] IUnknown *pUnk, [out] DWORD *pdwCookie);
\par     HRESULT Unadvise([in] DWORD dwCookie);
\par     HRESULT EnumConnections([out] IEnumConnections **ppEnum);
\par     \}
\par 
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A connection point is allowed to stipulate how many connections (one or more) it will allow in its implementation of {\cs58\f5\fs16\lang1024 Advise}.  A connection point that allows only one interface can return {
\cs58\f5\fs16\lang1024 E_NOTIMPL} from {\cs58\f5\fs16\lang1024 EnumConnections}{\i .}
\par {\pntext\pard\plain\b\i\fs22 9.1.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IConnectionPoint::GetConnectionInterface
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IConnectionPoint::GetConnectionInterface([out] IID *pIID); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {IConnectionPoint\:\:
GetConnectionInterface}}}{\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Returns the {\cs58\f5\fs16\lang1024 IID} of the outgoing interface managed by this connection point.  This is provided such that a client of {\cs58\f5\fs16\lang1024 IEnumConnectionPoints}{\i  }
can determine the {\cs58\f5\fs16\lang1024 IID} of each connection point thus enumerated.  The {\cs58\f5\fs16\lang1024 IID} returned from this method must enable the caller to access this same connection point through {\cs58\f5\fs16\lang1024 
IConnectionPointContainer::FindConnectionPoint}.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx2610\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx2610\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pIID\cell IID *\cell }\pard 
\s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [out]} \tab A pointer to the caller\rquote s variable to receive the {\cs58\f5\fs16\lang1024 IID} of the outgoing interface managed by this connection point.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_POINTER\cell }The address in {\cs58\f5\fs16\lang1024 pIID}{\i  }is not valid (such as {\cs58\f5\fs16\lang1024 NULL})\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd 
\trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
}\pard \qj\sa60\widctlpar 
\par {\ul Comments:
\par }This function must be completely implemented in any connection point; therefore E_{\cs58\f5\fs16\lang1024 NOTIMPL} is not an acceptable return code.
\par {\pntext\pard\plain\b\i\fs22 9.1.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IConnectionPoint::GetConnectionPointContainer
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IConnectionPoint::GetConnectionPointContainer([out] IConnectionPointContainer **ppCPC); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 
{\xe {IConnectionPoint\:\:GetConnectionPointContainer}}}{\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Retrieves the {\cs58\f5\fs16\lang1024 IConnectionPointContainer}{\i  }interface pointer to the connec
table object that conceptually owns this connection point.  The caller becomes responsible for the pointer on a successful return.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx4050\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx4050\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppCPC\cell IConnectionPointContainer *\cell }\pard 
\s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 [out] A pointer to the caller\rquote s variable in which to return a pointer to the connectable object\rquote s {\cs58\f5\fs16\lang1024 IConnectionPointContainer}{\i  }
interface.  The connection point will call {\cs58\f5\fs16\lang1024 IConnectionPointContainer::AddRef}{\i  }before returning and the caller must call {\cs58\f5\fs16\lang1024 IConnectionPoint::Release}{\i  }when it is done using the pointer.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_POINTER\cell }The value in {\cs58\f5\fs16\lang1024 ppCPC}{\i  }is not valid (such as {\cs58\f5\fs16\lang1024 NULL})\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd 
\trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
}\pard \qj\sa60\widctlpar 
\par {\ul Comments:}
\par {\cs58\f5\fs16\lang1024 E_NOTIMPL} is not an allowable return code.
\par {\pntext\pard\plain\b\i\fs22 9.1.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IConnectionPoint::Advise
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IConnectionPoint::Advise([in] IUnknown *pUnk, [out] DWORD *pdwCookie); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {
IConnectionPoint\:\:Advise}}}{\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Establishes an advisory connection between the connection point and the caller\rquote s sink object identified with {\cs58\f5\fs16\lang1024 pUnk}.  The connection point must call {\cs58\f5\fs16\lang1024 
pUnk->QueryInterface(iid, ...)} on this pointer in order to obtain the correct outgoing interface pointer to call when events occur, where {\i iid }is the inherent outgoing interface {\cs58\f5\fs16\lang1024 IID}
 managed by the connection point (that is, the that when passed to {\cs58\f5\fs16\lang1024 IConnectionPointContainer::FindConnectionPoint} would return an interface pointer to this same connection point).
\par Upone successful return, the connection point provides a unique \ldblquote cookie\rdblquote  in {\cs58\f5\fs16\lang1024 *pdwCookie}{\i  }that must be later passed to {\cs58\f5\fs16\lang1024 IConnectionPoint::Unadvise}{\i  }to terminate the connection.

\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx2790\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx2790\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pUnk\cell IUnknown *\cell }\pard 
\s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [in]} \tab The {\cs58\f5\fs16\lang1024 IUnknown}{\i  }pointer to the client\rquote 
s sink that wishes to receive calls for the outgoing interface managed by this connection point.  The connection point must query this pointer for the correct outgoing interface.  If this query fails, this member returns {\cs58\f5\fs16\lang1024 
CONNECT_E_CANNOTCONNECT}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1332\cellx2790\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pdwCookie\cell DWORD *
\cell }\pard \s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [out]} \tab A pointer to the caller\rquote s variable that is to receive the connection \ldblquote cookie\rdblquote 
 when connection is successful.  This cookie must be unique for each connection to any given {\i instance }of a connection point.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The connection has been established and {\cs58\f5\fs16\lang1024 *pdwCookie}{\i  }has the connection key.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_POINTER\cell }The value of {\cs58\f5\fs16\lang1024 pUnk}{\i  }or {\cs58\f5\fs16\lang1024 pdwCookie}{
\i  }is not valid ({\cs58\f5\fs16\lang1024 NULL} cannot be passed for either argument)\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 
E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }
There was not enough memory to complete the operation, such as if the connection point failed to allocate memory in which to store the sink\rquote s interface pointer.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CONNECT_E_ADVISELIMIT\cell }The connection point has already reached its limit of connections and cannot accept any more.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
}\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CONNECT_E_CANNOTCONNECT\cell }
The sink does not support the interface required by this connection point.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard \qj\sa60\widctlpar 
\par {\pntext\pard\plain\b\i\fs22 9.1.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IConnectionPoint::Unadvise
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IConnectionPoint::Unadvise([in] DWORD dwCookie); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {IConnectionPoint\:\:Unadvise}}}{
\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Terminates an advisory connection previously established through {\cs58\f5\fs16\lang1024 IConnectionPoint::Advise}.  The {\cs58\f5\fs16\lang1024 dwCookie} argument identifies the connection to terminate.

\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx2430\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx2430\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 dwCookie\cell DWORD\cell }\pard 
\s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [in]} \tab The connection \ldblquote cookie\rdblquote  previously returned from {\cs58\f5\fs16\lang1024 IConnectionPoint::Advise}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The connection was successfully terminated.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CONNECT_E_NOCONNECTION\cell dwCookie}{\i  }does not represent a value connection to this connection point.\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\f20 \row {\pntext\pard\plain\b\i\fs22 9.1.5\tab}}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IConnectionPoint::EnumConnections
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IConnectionPoint::EnumConnections([out] IEnumConnections **ppEnum); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {
IConnectionPoint\:\:EnumConnections}}}{\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Creates an enumerator object for iteration through the connections that exist to this connection point.
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx3330\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx3330\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppEnum\cell IEnumConnections *\cell }\pard 
\s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [out]} \tab A pointer to the caller\rquote s variable to receive the interface pointer of the newly created enumerator.  The caller is re
sponsible for releasing this pointer when it is no longer needed.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 E_POINTER\cell }The address in {\i ppEnum} is not valid (such as NULL)\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\f5\fs16 E_NOTIMPL}{\cs58\f5\fs16\lang1024 \cell }The connection point does not support enumeration.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }There was not enough memory to create the enumerator.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\*\bkmkstart _Toc339182983}{\pntext\pard\plain\b 9.2\tab}}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The {\i IConnectionPointContainer} Interface{\*\bkmkend _Toc339182983}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\pard\plain \qj\sa60\widctlpar \b\v\f4\fs16 {\xe {\b\fs16 IConnectionPointContainer}}}When implemented on an object, makes the object \ldblquote connectable\rdblquote 
  and expresses the existence of outgoing interfaces on the object.  Through this interface a client may either locate a specific \ldblquote connection point\rdblquote  for one IID or it can enumerate the connections points that exist.
\par IDL:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 [
\par uuid(B196B284-BAB4-101A-B69C-00AA00341D07)
\par     , object, pointer_default(unique)
\par ]
\par interface IConnectionPointContainer : IUnknown
\par     \{
\par     HRESULT EnumConnectionPoints([out] IEnumConnectionPoints **ppEnum);
\par     HRESULT FindConnectionPoint([in] REFIID riid
\par         , [out] IConnectionPoint **ppCP);
\par     \}
\par 
\par {\pntext\pard\plain\b\i\fs22 9.2.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IConnectionPointContainer::EnumConnectionPoints
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IConnectionPointContainer::EnumConnectionPoints([out] IEnumConnectionPoints **ppEnum); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 
{\xe {IConnectionPointContainer\:\:EnumConnectionPoints}}}{\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Creates an enumerator of all the connection points supported in the connectable object, one connection point per {\cs58\f5\fs16\lang1024 IID}.  Since {\cs58\f5\fs16\lang1024 IEnumConnectionPoints}{\i  }
enumerates {\cs58\f5\fs16\lang1024 IConnectionPoint*}{\i  }types, the caller must use {\cs58\f5\fs16\lang1024 IConnectionPoint::GetConnectionInterface}{\i  }to determine the actual {\cs58\f5\fs16\lang1024 IID} that the connection point supports.
\par The caller of this member must call {\cs58\f5\fs16\lang1024 (*ppEnum)->Release}{\i  }when the enumerator object is no longer needed.{\ul 
\par }\trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx3870\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain 
\widctlpar\intbl \f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx3870\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppEnum\cell IEnumConnectionPoints *\cell }\pard 
\s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [out]} \tab A pointer to the caller\rquote s variable t
hat is to receive the interface pointer to the enumerator.  The caller is responsible for releasing this pointer after this function returns successfully.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The enumerator was created successfully.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_POINTER\cell }The value passed in {\cs58\f5\fs16\lang1024 ppEnum}{\i  }is not valid (such as {\cs58\f5\fs16\lang1024 NULL}).\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd 
\trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }There was not enough memory to create the enumerator object.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 {\f20 \row }\pard \qj\sa60\widctlpar 
\par {\ul Comments:
\par }{\cs58\f5\fs16\lang1024 E_NOTIMPL} is specifically disallowed because outside of type information there would be no other means through which a caller could find the {\cs58\f5\fs16\lang1024 IIDs} of the outgoing interfaces.
\par {\pntext\pard\plain\b\i\fs22 9.2.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IConnectionPointContainer::FindConnectionPoint
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT FindConnectionPoint([in] REFIID riid , [out] IConnectionPoint **ppCP); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {
IConnectionPointContainer\:\:FindConnectionPoint}}}{\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Asks the \ldblquote connectable object\rdblquote  if it has a connection point for a particular {\cs58\f5\fs16\lang1024 IID}, and if so, returns the {\cs58\f5\fs16\lang1024 IConnectionPoint}{\i  }
interface pointer to that connection point.  Upon successful return, the caller must call {\cs58\f5\fs16\lang1024 IConnectionPoint::Release}{\i  }when that connection point is no longer needed.
\par Note that this function is the {\cs58\f5\fs16\lang1024 QueryInterface}{\i  }equivalent for an object\rquote s outgoing interfaces, where the outgoing interface is specified with {\cs58\f5\fs16\lang1024 riid}
 and where the interface pointer returned is always that of a connection point.{\ul 
\par }
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx3690\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx3690\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 riid\cell REFIID\cell }\pard 
\s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [in]} \tab A reference to the outgoing interface {\cs58\f5\fs16\lang1024 IID} whose connection point is being requested.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd 
\trgaph108\trleft-108 \cellx1332\cellx3690\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppCP\cell IConnectionPoint **\cell }\pard \s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {
\cs58\f5\fs16\lang1024 [out]} \tab The address of the caller\rquote s variable that is to receive the {\cs58\f5\fs16\lang1024 IConnectionPoint}{\i  }interface pointer to the connection point that manages the outgoing interface identified with {
\cs58\f5\fs16\lang1024 riid}.  This is set to {\cs58\f5\fs16\lang1024 NULL} on failure of the call; otherwise the caller must call {\cs58\f5\fs16\lang1024 IConnectionPoint::Release}{\i  }when the connection point is no longer needed.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The call succeeded and {\cs58\f5\fs16\lang1024 *ppCP}{\i  }has a valid interface pointer.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 E_POINTER}{\cs58\f5\fs16\lang1024 \cell }The address passed in {\cs58\f5\fs16\lang1024 ppCP}{\i  }is not valid (such as {
\cs58\f5\fs16\lang1024 NULL})\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }
There was not enough memory to carry out the operation, such as not being able to create a new connection point object.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CONNECT_E_NOCONNECTION\cell }This connectable object does not support the outgoing interface specified by {\cs58\f5\fs16\lang1024 riid}{\i .}\cell 
\pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard \qj\sa60\widctlpar 
\par {\ul Comments:
\par }{\cs58\f5\fs16\lang1024 E_NOTIMPL} is not allowed as a return code for this member. Any implementation of {\i IConnectionPointConta}{\cs58\f5\fs16\lang1024 i}{\i ner }must implement this method.
\par {\*\bkmkstart _Toc339182984}{\pntext\pard\plain\b 9.3\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The {\i IEnumConnectionPoints }Interface{\*\bkmkend _Toc339182984}

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\pard\plain \qj\sa60\widctlpar \b\v\f4\fs16 {\xe {\b\fs16 IEnumConnectionPoints}}}A connectable object can be asked to enumerate its supported connection points\endash in essence, it\rquote s outgoing interfaces
\endash through {\cs58\f5\fs16\lang1024 IConnectionPointContainer::EnumConnectionPoints}.  The resulting enumerator returned from this member implements the interface {\cs58\f5\fs16\lang1024 IEnumConnectionPoints}{\i  }
through which a client can access all the individual connection point sub-objects supported within the connectable object itself, where each connection point, of course, implements {\cs58\f5\fs16\lang1024 IConnectionPoint}{\i .
\par }Therefore {\cs58\f5\fs16\lang1024 IEnumConnectionPoints }is a standard enumerator interface typed for {\cs58\f5\fs16\lang1024 IConnectionPoint*}.
\par IDL:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 [
\par uuid(B196B285-BAB4-101A-B69C-00AA00341D07)
\par     , object, pointer_default(unique)
\par ]
\par interface IEnumConnectionPoints : IUnknown
\par     \{
\par     HRESULT Next([in] ULONG cConnections
\par         , [out, max_is(cConnections)] IConnectionPoint **rgpcn
\par         , [out] ULONG *pcFetched);
\par 
\par     HRESULT Skip([in] ULONG cConnections);
\par     HRESULT Reset(void);
\par     HRESULT Clone([out] IEnumConnectionPoints **ppEnum);
\par     \}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par {\pntext\pard\plain\b\i\fs22 9.3.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IEnumConnectionPoints::Next
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnumConnectionPoints::Next([in] ULONG cConnections , [out, max_is(cConnections)] IConnectionPoint **rgpcn, [out] ULONG *pcFetched); {\pard\plain 
\s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {IEnumConnectionPoints\:\:Next}}}
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Enumerates the next {\cs58\f5\fs16\lang1024 cConnections }elements in the enumerator\rquote s list, returning them in {\cs58\f5\fs16\lang1024 rgpcn}{\i  }along with the actual number of enumerated elements in 
{\cs58\f5\fs16\lang1024 pcFetched}{\i .}  The caller is responsible for calling {\cs58\f5\fs16\lang1024 IConnectionPoint::Release}{\i  }through each pointer returned in {\cs58\f5\fs16\lang1024 rgpcn}.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx3330\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell \pard 
\s48\fi-432\li432\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx432 Description\cell \pard\plain \widctlpar\intbl \f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx3330\cellx8748 \pard\plain 
\s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 cConnections\cell ULONG\cell }\pard \s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [in]\tab }Specfies the number of {\cs58\f5\fs16\lang1024 
IConnectionPoint}{\i  * }values to return in the array pointed to by {\cs58\f5\fs16\lang1024 rgpcn}.  This argument must be 1 if {\cs58\f5\fs16\lang1024 pcFetched}{\i  }is {\cs58\f5\fs16\lang1024 NULL}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 rgpcn\cell IConnectionPoint **\cell }\pard \s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [out]\tab }
A pointer to a caller-allocated {\cs58\f5\fs16\lang1024 IConnectionPoint}{\i  * }array of size {\cs58\f5\fs16\lang1024 cConnections}{\i  }in which to return the enumerated connection points.  The caller is responsible for calling {\cs58\f5\fs16\lang1024 
IConnectionPoint::Release}{\i  }through each pointer enumerated into the array once this method returns successfully.  If {\cs58\f5\fs16\lang1024 cConnections}{\i  }is greater than one the caller must also pass a non-{\cs58\f5\fs16\lang1024 NULL}
 pointer passed to {\cs58\f5\fs16\lang1024 pcFetched}{\i  }to know how many pointers to release.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1332\cellx3330\cellx8748 \pard\plain 
\s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pcFetched\cell ULONG\cell }\pard \s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [out]\tab }
A pointer to the variable to receive the actual number of connection points enumerated in {\i rgpcn}.  This argument can be NULL in which case the {\i cConnections }argument must be 1.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The requested number of elements has been returned and {\cs58\f5\fs16\lang1024 *pcFetched}{\i  }(if non-{
\cs58\f5\fs16\lang1024 NULL}) is set to {\cs58\f5\fs16\lang1024 cConnections}{\i  }if \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_FALSE
\cell }The enumerator returned fewer elements than {\cs58\f5\fs16\lang1024 cConnections}{\i  }because there were not that many elements left in the list.. In this case, unused elements in {\cs58\f5\fs16\lang1024 rgpcn}{\i  }
in the enumeration are not set to {\cs58\f5\fs16\lang1024 NULL} and {\cs58\f5\fs16\lang1024 *pcFetched}{\i  }holds the number of valid entries, even if zero is returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_POINTER\cell }The address in {\cs58\f5\fs16\lang1024 rgpcn}{\i  }is not valid (such as {\cs58\f5\fs16\lang1024 NULL})\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_INVALIDARG\cell }The value of {\i cConne}{\cs58\f5\fs16\lang1024 cti}{\i ons }is not 1 when {\cs58\f5\fs16\lang1024 
pcFetched}{\i  }is {\cs58\f5\fs16\lang1024 NULL}; or the value of {\cs58\f5\fs16\lang1024 cConnections}{\i  }is zero.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }There is not enough memory to enumerate the elements.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard \qj\sa60\widctlpar 
\par {\ul Comments:
\par }{\cs58\f5\fs16\lang1024 E_NOTIMPL} is not allowed as a return value.  If an error value is returned, no entries in the {\cs58\f5\fs16\lang1024 rgpcn}{\i  }array are valid on exit and require no release.
\par {\pntext\pard\plain\b\i\fs22 9.3.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IEnumConnectionPoints::Skip
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnumConnectionPoints::Skip([in] ULONG cConnections); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {IEnumConnectionPoints\:\:
Skip}}}Instructs the enumerator to skip the next {\cs58\f5\fs16 cConnections}{\i  }elements in the enumeration such that the next call to {\cs58\f5\fs16 IEnumConnectionPoints::Next}{\i  }will not return those elements.
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx2520\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx2520\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 cConnections\cell ULONG\cell [in] }Specifies the n
umber of elements to skip in the enumeration.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The number of elements skipped is {\cs58\f5\fs16\lang1024 cConnections}.\cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 S_FALSE}{\cs58\f5\fs16\lang1024 \cell }The enumerator skipped fewer than {\cs58\f5\fs16\lang1024 cConnections}{\i  }
because there were not that many left in the list.  The enumerator will, at this point, be positioned at the end of the list such that subsequent calls to {\cs58\f5\fs16\lang1024 Next}{\i  }(without an intervening {\cs58\f5\fs16\lang1024 R}{
\cs58\f5\fs16\lang1024 e}{\cs58\f5\fs16\lang1024 set}) will return zero elements.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 
E_INVALIDARG\cell }The value of {\i cC}{\cs58\f5\fs16\lang1024 o}{\i nnections }is zero, which is not valid.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard \qj\sa60\widctlpar 
\par {\pntext\pard\plain\b\i\fs22 9.3.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IEnumConnectionPoints::Reset
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnumConnectionPoints::Reset(void); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {IEnumConnectionPoints\:\:Reset}}}{
\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Instructs the enumerator to position itself back to the beginning of the list of elements.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx2520\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx2520\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 none\cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The enumerator was successfully reset to the beginning of the list.\cell \pard\plain \widctlpar\intbl \f4\fs20 
\row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 S_FALSE}{\cs58\f5\fs16\lang1024 \cell }The enumerator was not reset to the beginning of the list.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
}\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 
\row }\pard \qj\sa60\widctlpar 
\par {\ul Comments:}
\par There is no guarantee that the same set of elements will be enumerated on each pass through the list: it depends on the collection being enumerated. It is too expensive for some collections, such as files in a directory, to maintain this condition.
\par {\pntext\pard\plain\b\i\fs22 9.3.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IEnumConnectionPoints::Clone
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnumConnectionPoints::Clone([out] IEnumConnectionPoints **ppEnum); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {
IEnumConnectionPoints\:\:Clone}}}{\cs58\f5\fs16 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Creates another connection point enumerator with the same state as the current enumerator, which iterates over the 
same list.  This makes it possible to record a point in the enumeration sequence in order to return to that point at a later time.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx3870\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx3870\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppEnum\cell IEnumConnectionPoints**\cell }\pard 
\s49\fi-342\li342\sa58\keepn\widctlpar\intbl\tx342 {\cs58\f5\fs16\lang1024 [out]\tab }The address of the variable to receive the {\cs58\f5\fs16\lang1024 IEnumConnectionPoints}{\i  }
interface pointer to the newly created enumerator.  The caller must release this new enumerator separately from the first enumerator.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 

\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Clone creation succeeded.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 E_NOTIMPL}{\cs58\f5\fs16\lang1024 \cell }Cloning is not supported for this enumerator.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_POINTER\cell }The address in {\cs58\f5\fs16\lang1024 ppEnum}{\i  }is not valid (such as NU{\cs58\f5\fs16\lang1024 L}L)\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }There is not enough memory to create the clone enumerator.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
{\*\bkmkstart _Toc339182985}{\pntext\pard\plain\b 9.4\tab}}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The {\i IEnumConnections} Interface{\*\bkmkend _Toc339182985}

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\pard\plain \qj\sa60\widctlpar \b\v\f4\fs16 {\xe {\b\fs16 IEnumConnections}}}Any individual connection point can support enumeration of its known connections through {\cs58\f5\fs16\lang1024 
IConnectionPoint::EnumConnections}{\i . } The enumerator created by this function implements the interface {\cs58\f5\fs16\lang1024 IEnumConnections}{\i  }which deals with the type {\cs58\f5\fs16\lang1024 CONNECTDATA}.  Each {\cs58\f5\fs16\lang1024 
CONNECTDATA}{\i  }structure contains the the {\cs58\f5\fs16\lang1024 IUnknown *}{\i  }of a connected sink and the {\cs58\f5\fs16\lang1024 dwCookie}{\i  }that was returned by {\cs58\f5\fs16\lang1024 IConnectionPoint::Advise}
 when that sink was connected.  When enumerating connections through {\cs58\f5\fs16\lang1024 IEnumConnections}, the enumerator is responsible for calling {\cs58\f5\fs16\lang1024 IUnknown::AddRef}{\i  }
through the pointer in each enumerated structure, and the caller is responsible to later call {\cs58\f5\fs16\lang1024 IUnknown::Release}{\i  }when those pointers are no longer needed.
\par IDL:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 [
\par uuid(B196B287-BAB4-101A-B69C-00AA00341D07)
\par     , object, pointer_default(unique)
\par ]
\par interface IEnumConnections : IUnknown
\par     \{
\par     typedef struct tagCONNECTDATA
\par         \{
\par         IUnknown   *pUnk;
\par         DWORD       dwCookie;
\par         \} CONNECTDATA;
\par 
\par     typedef struct tagCONNECTDATA *PCONNECTDATA;
\par     typedef struct tagCONNECTDATA *LPCONNECTDATA;
\par 
\par     HRESULT Next([in] ULONG cConnections
\par         , [out, max_is(cConnections)] CONNECTDATA *rgpcd
\par         , [out] ULONG *pcFetched);
\par 
\par     HRESULT Skip([in] ULONG cConnections);
\par     HRESULT Reset(void);
\par     HRESULT Clone([out] IEnumConnections **ppEnum);
\par     \}
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par {\pntext\pard\plain\b\i\fs22 9.4.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IEnumConnections::Next
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnumConnections::Next([in] ULONG cConnections , \line [out, max_is(cConnections)] CONNECTDATA *rgpcd, \line [out] ULONG *pcFetched); {\pard\plain 
\s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {IEnumConnections\:\:Next}}}
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Enumerates the next {\cs58\f5\fs16\lang1024 cConnections}{\i  }elements in the enumerator\rquote s list, returning them in {\cs58\f5\fs16\lang1024 rgpcd}{\i  }
along with the actual number of enumerated elements in {\cs58\f5\fs16\lang1024 pcFetched}{\i .}  The caller is responsible for calling {\cs58\f5\fs16\lang1024 IUnknown::Release}{\i  }through each {\cs58\f5\fs16\lang1024 pUnk}{\i  }
pointer returned in the structure elements of {\cs58\f5\fs16\lang1024 rgpcd}.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx3330\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell \pard 
\s48\fi-342\li342\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx342 Description\cell \pard\plain \widctlpar\intbl \f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx3330\cellx8748 \pard\plain 
\s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 cConnections\cell ULONG\cell }\pard \s49\fi-342\li342\sa58\keepn\widctlpar\intbl\tx342 {\cs58\f5\fs16\lang1024 [in]\tab }Specfies the number of {\cs58\f5\fs16\lang1024 
CONNECTDATA}{\i  }structures to return in the array pointed to by {\cs58\f5\fs16\lang1024 rgpcd}.  This argument must be 1 if {\cs58\f5\fs16\lang1024 pcFetched}{\i  }is {\cs58\f5\fs16\lang1024 NULL}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 rgpcd\cell CONNECTDATA *\cell }\pard \s49\fi-342\li342\sa58\keepn\widctlpar\intbl\tx342 {\cs58\f5\fs16\lang1024 [out]\tab }A pointer to a caller-allocated {
\cs58\f5\fs16\lang1024 CONNECTDATA}{\i  }array of size {\cs58\f5\fs16\lang1024 cConnections}{\i  }in which to return the enumerated connections.  The caller is responsible for calling {\cs58\f5\fs16\lang1024 CONNECTDATA.pUnk->Release}{\i  }
for each element in the array once this method returns successfully.  If {\cs58\f5\fs16\lang1024 cConnections}{\i  }is greater than one the caller must also pass a non-{\cs58\f5\fs16\lang1024 NULL} pointer passed to {\cs58\f5\fs16\lang1024 pcFetched}{\i  
}to know how many pointers to release.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1332\cellx3330\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pcFetched
\cell ULONG\cell }\pard \s49\fi-342\li342\sa58\keepn\widctlpar\intbl\tx342 {\cs58\f5\fs16\lang1024 [out]\tab }A pointer to the variable to receive the actual number of connections enumerated in {\cs58\f5\fs16\lang1024 rgpcd}.  This argument can be {
\cs58\f5\fs16\lang1024 NULL} in which case the {\cs58\f5\fs16\lang1024 cConnections}{\i  }argument must be 1.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The requested number of elements has been returned and {\cs58\f5\fs16\lang1024 *pcFetched}{\i  }(if non-{
\cs58\f5\fs16\lang1024 NULL}) is set to {\i cCo}{\cs58\f5\fs16\lang1024 n}{\i nections }if \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 
S_FALSE\cell }The enumerator returned fewer elements than {\cs58\f5\fs16\lang1024 cConnections}{\i  }because there were not that many elements left in the list.. In this case, unused elements in {\i rgpcd }in the enumeration are not set to {
\cs58\f5\fs16\lang1024 NULL} and {\cs58\f5\fs16\lang1024 *pcFetched}{\i  }holds the number of valid entries, even if zero is returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_POINTER\cell }The address in {\cs58\f5\fs16\lang1024 rgpcd}{\i  }is not valid (such as {\cs58\f5\fs16\lang1024 NULL}).\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_INVALIDARG\cell }The value of {\cs58\f5\fs16\lang1024 cConnections}{\i  }is not 1 when {\cs58\f5\fs16\lang1024 pcFetched}{\i  }is {\cs58\f5\fs16\lang1024 
NULL}; or the value of {\cs58\f5\fs16\lang1024 cConnections}{\i  }is zero.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED
\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 
E_OUTOFMEMORY\cell }There is not enough memory to enumerate the elements.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard \qj\sa60\widctlpar 
\par {\ul Comments:
\par }{\cs58\f5\fs16\lang1024 E_NOTIMPL} is not allowed as a return value.  If an error value is returned, no entries in the {\cs58\f5\fs16\lang1024 rgpcn}{\i  }array are valid on exit and require no release.
\par {\pntext\pard\plain\b\i\fs22 9.4.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IEnumConnections::Skip
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 HRESULT IEnumConnections::Skip([in] ULONG cConnections); {\pard\plain \qj\sa60\keepn\widctlpar \v\f4\fs20 {\xe {IEnumConnections\:\:Skip}}}Instructs the enumerator to skip the next {\cs58\f5\fs16\lang1024 
cConnections}{\i  }elements in the enumeration such that the next call to {\cs58\f5\fs16\lang1024 IEnumConnections::Next}{\i  }will not return those elements.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx2700\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx2700\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 cConnections\cell ULONG\cell [in] }Specifies the number of elements t
o skip in the enumeration.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The number of elements skipped is {\cs58\f5\fs16\lang1024 cConnections}.\cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 S_FALSE}{\cs58\f5\fs16\lang1024 \cell }The enumerator skipped fewer than {\cs58\f5\fs16\lang1024 cConnections}{\i  }
because there were not that many left in the list.  The enumerator will, at this point, be positioned at the end of the list such that subsequent calls to {\cs58\f5\fs16\lang1024 Next}{\i  }(without an intervening {\cs58\f5\fs16\lang1024 R}{
\cs58\f5\fs16\lang1024 e}{\cs58\f5\fs16\lang1024 set}) will return zero elements.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 
E_INVALIDARG\cell }The value in {\cs58\f5\fs16\lang1024 cConnections}{\i  }is zero which is not valid.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\i\fs22 9.4.3\tab}}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IEnumConnections::Reset
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnumConnections::Reset(void); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {IEnumConnections\:\:Reset}}}
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Instructs the enumerator to position itself back to the beginning of the list of elements.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx2880\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 {\b \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx2880\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 none\cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 
\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }The enumerator was successfully reset to the beginning of the list.\cell \pard\plain \widctlpar\intbl \f4\fs20 
\row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 S_FALSE}{\cs58\f5\fs16\lang1024 \cell }The enumerator was not reset to the beginning of the list.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
}\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 
\row }\pard \qj\sa60\widctlpar 
\par {\ul Comments:}
\par There is no guarantee that the same set of elements will be enumerated on each pass through the list: it depends on the collection being enumerated. It is too expensive for some collections, such as files in a directory, to maintain this condition.
\par {\pntext\pard\plain\b\i\fs22 9.4.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IEnumConnections::Clone
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IEnumConnections::Clone([out] IEnumConnections **ppEnum); {\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \v\f4\fs20\lang1024 {\xe {IEnumConnections\:\:
Clone}}}
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Creates another connections enumerator with the same state as the current enumerator, which iterates over the same list.  This makes it
 possible to record a point in the enumeration sequence in order to return to that point at a later time.
\par 
\par \trowd \trgaph108\trleft-108\trbrdrb\brdrs\brdrw15 \cellx1332\cellx3510\cellx8748 \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\cell Type\cell Description\cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1332\cellx3510\cellx8748 \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\intbl\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppEnum}\cell {\cs58\f5\fs16\lang1024 IEnumConnections**}{\cs58\i\f5\fs16\lang1024 
\cell }\pard \s49\fi-432\li432\sa58\keepn\widctlpar\intbl\tx432 {\cs58\f5\fs16\lang1024 [out]\tab }The address of the variable to receive the {\cs58\f5\fs16\lang1024 IEnumConnections}{\i  }
interface pointer to the newly created enumerator.  The caller must release this new enumerator separately from the first enumerator.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 

\par \trowd \trgaph108\trleft-108 \clbrdrb\brdrs\brdrw15 \cellx2790\clbrdrb\brdrs\brdrw15 \cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Return Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 
\cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Clone creation succeeded.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\f5\fs16 E_NOTIMPL}{\cs58\f5\fs16\lang1024 \cell }Cloning is not supported for this enumerator.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_POINTER\cell }The address in {\cs58\f5\fs16\lang1024 ppEnum}{\i  }is not valid (such as {\cs58\f5\fs16\lang1024 NULL})\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unknown error occurred.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }There is not enough memory to create the clone enumerator.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard 
\qj\sa60\widctlpar 
\par {\*\bkmkstart _Toc335041447}{\*\bkmkstart _Toc335045058}{\*\bkmkstart _Toc335190120}{\*\bkmkstart _Toc338915490}{\*\bkmkstart _Toc339182986}{\pntext\pard\plain\b\fs28 10.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 
{\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 Persistent Storage{\*\bkmkend _Toc335041447}{\*\bkmkend _Toc335045058}{\*\bkmkend _Toc335190120}{\*\bkmkend _Toc338915490}{\*\bkmkend _Toc339182986}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par \pard \qj\li720\ri720\sa60\widctlpar\box\brdrsh\brdrs\brdrw15\brsp20 \shading500 
In order to reduce the overall size of this document, and because the topic of this chapter is fully specified in the Microsoft Win32 Software Development Kit, the text of this chapter has been omitted.
\par \pard \qj\sa60\widctlpar 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par {\*\bkmkstart _Toc335041455}{\*\bkmkstart _Toc335045066}{\*\bkmkstart _Toc335190128}{\*\bkmkstart _Toc339182987}{\pntext\pard\plain\b\fs28 11.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1
\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 Persistent Intelligent Names: Monikers{\*\bkmkend _Toc335041455}{\*\bkmkend _Toc335045066}{\*\bkmkend _Toc335190128}{\*\bkmkend _Toc339182987}
\par {\*\bkmkstart _Toc339182988}{\pntext\pard\plain\b 11.1\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Overview{\*\bkmkend _Toc339182988}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A moniker is simply an object that supports the {\cs58\f5\fs16\lang1024 IMoniker} interface. {\cs58\f5\fs16\lang1024 IMoniker} interface includes the {\cs58\f5\fs16\lang1024 IPersist\-Stream}
 interface; thus, monikers can be saved to and loaded from streams. The persis\-tent form of a mon\-i\-ker contains the class identifier ({\f5\fs16 CLSID}) of its implementation which is used during the loading pro\-c\-
ess, and so new kinds of monikers can be created transparently to clients.
\par The most basic operation in {\cs58\f5\fs16\lang1024 IMoniker} interface is that of {\i binding} to the object to which it points{\i ,} which is supported by {\cs58\f5\fs16\lang1024 IMoniker::BindTo\-Ob\-ject}. This function t
akes as a parameter the interface identifier by which the caller wishes to talk to the ob\-ject, runs whatever algorithm is necessary in order to locate the object, then returns a pointer of that in\-ter\-face type to the caller.{\cs38\super \chftn 
{\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab This function also takes some parameters that provide contextual information to the binding process which we shall get to in a moment.}}
 Each moniker class can store arbitrary data its persistent representation, and can run arbitrary code at binding time. 
\par If there is an identifiable piece of per\-sis\-tent storage in which the object referenced by the moniker is stored, then {\cs58\f5\fs16\lang1024 IMon\-i\-ker\-::\-Bind\-To\-Stor\-age}
 can be used to gain access to it. Many objects have such identifiable storage, but some, such as the objects which are the ranges on a Microsoft Excel spread\-sheet do not. (These ranges exist only as a part of Excel\rquote 
s data structures; they are in effect a figment of Excel\rquote s imagination and are only reified on demand for clients.)
\par In most cases, a particular moniker class is designed to be one step along the path to the information source in question. These pieces can be {\i composed} together to form a moniker which represents the com\-
plete path. For example, the moniker stored inside a chart that refers to its underlying data in a spreadsheet might be a composite moniker formed from three pieces:
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw16395\pich3003\picwgoal9296\pichgoal1703 \picscalex50\picscaley50\piccropr-1229 
0100090000036e03000004005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700005a00000026060f00a9004d72456402009f0000009d000100dc00dc00fc03b8020000000000000100030000000000ffffff0000000000ffffff00010000010000000000
010001000100001212dc05010c0048656c7600a20203008a00ff00290003015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e00000026060f0012004d724564
03000800000053012002d90fc904050000000b0220025301050000000c02a902860e030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e000e00000026060f0012004d72456403000800000066
032802d10fc10407000000fc020000ffffff00ffff040000002d01000008000000fa0206000800080000000000040000002d010100070000001b04c504d50f240262030e00000026060f0012004d724564030008000000f6035d02b607de03070000001b04e203ba075902f203040000002e011e0004000000020101001000
0000fb0290ff00000000000090010000000000000023417269616c001b3f040000002d0102000d000000320aef02d6050c000000433a5c51335250542e444f4310000000fb02b0ff00000000000090010000000000000023417269616c00af3d040000002d01030004000000f00102000d000000320aa803d6050b00000046
696c654d6f6e696b6572000e00000026060f0012004d72456403000800000058085f02880bde030400000002010200070000001b04e2038c0b5b025408040000000201010010000000fb0290ff00000000000090010000000000000023417269616c001b3f040000002d01020004000000f00103000b000000320aee02f009
0800000053414c455354424c10000000fb02b0ff00000000000090010000000000000023417269616c00af3d040000002d01030004000000f00102000d000000320aa803020a0b0000004974656d4d6f6e696b6572000e00000026060f0012004d724564030008000000f507be022508ee0204000000020102000700000018
04f2022908ba02f1070e00000026060f0012004d724564030008000000180c5f02480fde03070000001b04e2034c0f5b02140c040000000201010010000000fb0290ff00000000000090010000000000000023417269616c001b3f040000002d01020004000000f00103000c000000320aee02c20d09000000523243323a52
3743340010000000fb02b0ff00000000000090010000000000000023417269616c00af3d040000002d01030004000000f00102000d000000320aa803c20d0b0000004974656d4d6f6e696b6572000e00000026060f0012004d724564030008000000b50bbe02e50bee020400000002010200070000001804f202e90bba02b1
0b0e00000026060f001200ffffffff0000080000005301a002ac049e03040000002e011800040000000201010010000000fb02c0ff000000000000bc020000000000000023417269616c001b3f040000002d01020004000000f00103000e000000320a780353010d0000004d6f6e696b657220636c617373000e0000002606
0f0012004d7245640300080000007d046c03a404960307000000fc02000000000000ffff040000002d01030004000000f001000004000000020102000700000018049a03a804680379040b00000026060f000c004d72456401000200000000000800000025030200480366039504800304000000020101000c000000320adc
02b9010900000055736572204e616d65000b00000026060f000c004d724564010002000000000008000000250302003c03c4021704d0020e00000026060f0012004d724564030008000000fc03be022304e8020400000002010200070000001804ec022704ba02f8030a00000026060f000a00ffffffff0100000000000400
00002e011e00040000000201010010000000fb02b0ff00000000000090010000000000000023417269616c00af3d040000002d01000004000000f001020013000000320a7404020a1700000047656e65726963436f6d706f736974654d6f6e696b65720010000000fb021000070000000000bc020000000001020222537973
74656d0005040000002d01020004000000f001000008000000fa02050000000000ffffff00040000002d01000004000000f001010007000000fc020100000000000000040000002d01010004000000f0010300040000002701ffff040000002701ffff03000000000010001000350228030d0012001200ba02e20306001000
140015023d03000000000000000000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure {\field{\*\fldinst seq figure}{\fldrslt {\lang1024 2}}}. Moniker in a chart referring to a spreadsheet from which it extracts data.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This composite is {\i itself} a moniker; it just happens to be a moniker which is a sequenced collection of other monikers. The composition here is {\i generic} in that it has no knowledge of the pieces involved {
\i other} than that they are monikers.
\par Most monikers have a textual representation which is meaningful to the user; this can be retrieved with {\cs58\f5\fs16\lang1024 IMon\-i\-ker::GetDisplayName}. The API function {\cs58\f5\fs16\lang1024 MkParseDisplayName} goes the
 other direction: it can turn a textual display name into the appropriate moniker, though beware that in general this is operation is as ex\-pen\-sive as actually binding to the object.
\par Monikers can compare themselves to other monikers using {\cs58\f5\fs16\lang1024 IMoniker::IsEqual}. A hash value useful for storing monikers in lookup tables is available through {\cs58\f5\fs16\lang1024 IMoniker::Hash}
. Monikers are not a total order or even a partial order; therefore, monikers cannot be stored in tables that rely on sorting for retrieval; use hashing instead
 (it is inappropriate to use the display name of a moniker for sorting, since the display name may not reflect the totality of internal state of the moniker).
\par The earliest time after which the object to which the moniker points is known not to have changed can be obtained with {\cs58\f5\fs16\lang1024 IMoniker::\-Get\-Time\-OfLastChange}. This is {\i not}
 necessarily the time of last change of the object; rather, it is the best cheaply available approximation thereto.
\par A moniker can be asked to re-write itself into another equivalent moniker by calling {\cs58\f5\fs16\lang1024 IMoniker::\-Re\-\-duce}
. This function returns a new moniker that will bind to the same object, but does so in a more efficient way. This capability has several uses:
\par \pard \qj\fi-360\li1080\sa60\widctlpar {\field\flddirty{\*\fldinst SYMBOL 183 \\f "Symbol" \\s 10 \\h}{\fldrslt }}\tab 
It enables the construction of user-defined macros or aliases as new kinds of moniker classes. When reduced, the moniker to which the macro evaluates is returned.
\par {\field\flddirty{\*\fldinst SYMBOL 183 \\f "Symbol" \\s 10 \\h}{\fldrslt }}\tab It enables the construction of a kind of moniker which tracks data as it moves about. When reduced, the moniker of the data in its current location is returned.
\par {\field\flddirty{\*\fldinst SYMBOL 183 \\f "Symbol" \\s 10 \\h}{\fldrslt }}\tab 
On file systems such as Macintosh System 7 which support an ID-based method of accessing files which is independent of file names, a File Moniker could be reduced to a moniker which con\-tains one of these IDs.
\par \pard \qj\sa60\widctlpar Figure {\field{\*\fldinst seq figure EvaluationExample}{\fldrslt {\lang1024 3}}} shows a (somewhat con\-trived) example of moniker reduction. It illustrates the reduction of a moniker which names the net income entry for this year
\rquote s report in the \ldblquote Projects\rdblquote  directory of the current user\rquote s home directory.
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 {{\pict\wmetafile8\picw29444\pich5203\picwgoal16695\pichgoal2950 \picscalex50\picscaley50 
010009000003a509000005005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700005a00000026060f00a9004d72456402009f0000009d000100ffffffffffffffff0000c40200c00000030000000000ffffff0000000000ffffff00010000010000000000
00000000010000d80c100d010c0054696d6573204e657720526f6d616e00015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e00000026060f0012004d724564
03000800000069090c0d7e23a811050000000b020c0d6909050000000c029c04151a030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e00040000002e011e00040000000201010010000000fb
02b0ff00000000000090010000000000000023417269616c00ab8a040000002d0100000d000000320a720f84100c000000757365722070726f66696c650a000000320a180f041b05000000646174652c0010000000320a720f1c1b11000000776f726b696e67206469726563746f7279000e00000026060f001200ffffffff
000008000000b20f0d0df2129c0e0e00000026060f0012004d724564030008000000ba0f150dea12940e07000000fc020000ffffff00ffff040000002d010100040000000201020008000000fa0206000800080000000000040000002d010200070000001b04980eee12110db60f040000000201010010000000fb0290ff00
000000000090010000000000000023417269616c000200040000002d01030004000000f001000009000000320a9f0d5e1104000000486f6d6510000000fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00103000d000000320a650e5e110c000000416c6961734d6f6e
696b65720a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000730e8a0e7c1221100e00000026060f001200ffffffff000008000000730e8a0e0c10211008000000fa0206001000100000000000040000002d01030004000000f00102000b00000026060f000c004d72456401
000200000000000800000025030200fc0f9a0eac0eea0f07000000fc02000000000000ffff040000002d01020004000000f0010100040000000201020008000000fa0206000800080000000000040000002d01010004000000f00103000b00000026060f000c004d72456401000200000001000e000000240305000a0fe00f
7b0e1910b40e8a0fb40ee00f0a0fe00f0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e3108a0e7c12211008000000fa0206001000100000000000040000002d01030004000000f00101000b00000026060f000c004d72456401000200000000000800000025030200f3
109a0e4312ea0f08000000fa0206000800080000000000040000002d01010004000000f00103000b00000026060f000c004d72456401000200000001000e00000024030500e511e00f741219103b128a0f3b12e00fe511e00f0a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff01000000
00000e00000026060f001200ffffffff0000080000002a0d19106a10a8110e00000026060f0012004d724564030008000000320d21106210a01107000000fc020000ffffff00ffff040000002d01030004000000f0010200070000001b04a41166101d102e0d040000000201010010000000fb0290ff000000000000900100
00000000000023417269616c008f82040000002d01020004000000f00100000e000000320ab010d60e0e0000005c5c7365727665725c736861726510000000fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00102000f000000320a7011d60e100000004e6574566f6c
756d654d6f6e696b65720a00000026060f000a00ffffffff0100000000000e00000026060f0012004d724564030008000000ec1021101c14a0110400000002010200070000001b04a41120141d10e810040000000201010010000000fb0290ff00000000000090010000000000000023417269616c008f82040000002d0102
0004000000f001000009000000320ab0109012040000006672656410000000fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00102000d000000320a701190120b00000046696c654d6f6e696b6572000e00000026060f0012004d7245640300080000007413140da416
930e0400000002010200070000001b04970ea816100d7013040000000201010010000000fb0290ff00000000000090010000000000000023417269616c008f82040000002d01020004000000f00100000b000000320a9e0d18150800000050726f6a656374730e00000026060f0012004d7245640300080000001413740d44
13a40d0400000002010200070000001804a80d4813700d10130e00000026060f0012004d7245640300080000003417150d551c940e070000001b04980e591c110d301704000000020101000e000000320a9e0dc2190d00000043757272656e745265706f7274000e00000026060f0012004d724564030008000000d416740d
0417a40d0400000002010200070000001804a80d0817700dd0160e00000026060f0012004d7245640300080000008c1c7a0dbc1caa0d070000001804ae0dc01c760d881c040000000201010010000000fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00102000d0000
00320a640e06150b00000046696c654d6f6e696b6572000d000000320a640ec2190c0000004d6163726f4d6f6e696b65720e00000026060f0012004d724564030008000000041d1b0d64209a0e07000000fc020100000000000000040000002d01020004000000f0010300070000001b049e0e6820170d001d10000000fb02
90ff00000000000090010000000000000023417269616c00af82040000002d01030004000000f00100000c000000320ab00dae1e090000004e6574496e636f6d650010000000fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00103000d000000320a6b0ed81e0b0000
004974656d4d6f6e696b6572000e00000026060f0012004d724564030008000000a6141d10d6179c1107000000fc020000ffffff00ffff040000002d0103000400000002010200070000001b04a011da171910a214040000000201010010000000fb0290ff00000000000090010000000000000023417269616c008f820400
00002d01040004000000f00100000b000000320aad1044160800000050726f6a656374730e00000026060f0012004d72456403000800000046147d107614ad100400000002010200070000001804b1107a14791042140e00000026060f0012004d72456403000800000006187d103618ad10070000001804b1103a18791002
180e00000026060f0012004d724564030008000000c61b7d10f61bad10070000001804b110fa1b7910c21b040000000201010010000000fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00104000d000000320a6d1138160b00000046696c654d6f6e696b6572000e00
000026060f0012004d72456403000800000066181d10961b9c110400000002010200070000001b04a0119a1b19106218040000000201010010000000fb0290ff00000000000090010000000000000023417269616c008f82040000002d01040004000000f00100000a000000320aad10041a06000000416e6e75616c100000
00fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00104000d000000320a6d110a1a0b00000046696c654d6f6e696b65720010000000fb0290ff00000000000090010000000000000023417269616c008f82040000002d01040004000000f00100000c000000320aad10
c621090000004e6574496e636f6d650010000000fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00104000d000000320a6d11ba210b0000004974656d4d6f6e696b6572000e00000026060f0012004d72456403000800000016201d1076239c11040000002d01020004
000000f0010300070000001b04a0117a23191012200e00000026060f0012004d724564030008000000381c2110681fa01107000000fc020000ffffff00ffff040000002d0103000400000002010200070000001b04a4116c1f1d10341c040000000201010010000000fb0290ff000000000000900100000000000000234172
69616c008f82040000002d01040004000000f00100000b000000320ab110d61d08000000313939312e786c7310000000fb02b0ff00000000000090010000000000000023417269616c00ab8a040000002d01000004000000f00104000d000000320a7111dc1d0b00000046696c654d6f6e696b6572000e00000026060f0012
004d724564030008000000a11f7d10d11fad100400000002010200070000001804b110d51f79109d1f0e00000026060f0012004d72456403000800000092108010c210b010070000001804b410c6107c108e100e00000026060f001200ffffffff000008000000cd148a0e6616211008000000fa0206001000100000000000
040000002d01040004000000f00101000b00000026060f000c004d72456401000200000000000800000025030200dd149a0e2d16ea0f07000000fc02000000000000ffff040000002d01010004000000f001030008000000fa0206000800080000000000040000002d01030004000000f00104000b00000026060f000c004d
72456401000200000001000e00000024030500cf15e00f5e16191025168a0f2516e00fcf15e00f0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000cf188a0e681a211008000000fa0206001000100000000000040000002d01040004000000f00103000b00000026060f00
0c004d72456401000200000000000800000025030200df189a0e2f1aea0f08000000fa0206000800080000000000040000002d01030004000000f00104000b00000026060f000c004d72456401000200000001000e00000024030500d119e00f601a1910271a8a0f271ae00fd119e00f0a00000026060f000a00ffffffff01
00000000000e00000026060f001200ffffffff000008000000bd1b8a0e561d211008000000fa0206001000100000000000040000002d01040004000000f00103000b00000026060f000c004d72456401000200000000000800000025030200cd1b9a0e1d1dea0f08000000fa0206000800080000000000040000002d010300
04000000f00104000b00000026060f000c004d72456401000200000001000e00000024030500bf1ce00f4e1d1910151d8a0f151de00fbf1ce00f0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e91f900e8221271008000000fa0206001000100000000000040000002d
01040004000000f00103000b00000026060f000c004d72456401000200000000000800000025030200f91fa00e4921f00f08000000fa0206000800080000000000040000002d01030004000000f00104000b00000026060f000c004d72456401000200000001000e00000024030500eb20e60f7a211f104121900f4121e60f
eb20e60f0a00000026060f000a00ffffffff010000000000040000002e011800040000000201010010000000fb02b0ff000000000000bc020000000000000023417269616c008f82040000002d01040004000000f00100000c000000320a780db30d0900000075736572206e616d65000a000000320a340edb0d0500000063
6c617373000b00000026060f000c004d72456401000200000000000800000025030200570f620d8310740d0e00000026060f0012004d72456403000800000080105c0da710860d04000000020102000700000018048a0dab10580d7c100e00000026060f0012004d7245640300080000003510340e5c105e0e070000001804
620e6010300e31100b00000026060f000c004d72456401000200000000000800000025030200e80e250e4d10480e040000002e011a00040000000201010015000000fb02a0ff000000000000bc02000000000000001254696d6573204e657720526f6d616e000000040000002d01000004000000f001040010000000320ae4
0dd80c110000006f726967696e616c206d6f6e696b65723a000f000000320af410d80c1000000072656475636564206d6f6e696b65723a11000000320a040fd80c140000006f626a6563747320636f6e6e656374656420746f10000000320a840fd80c11000000647572696e6720726564756374696f6e3a0010000000fb02
1000070000000000bc02000000000102022253797374656d0005040000002d01040004000000f001000008000000fa02050000000000ffffff00040000002d01000004000000f0010300040000002d01020004000000f0010100040000002701ffff040000002701ffff03000000000026060f001200ffffffff0000080000
00bd1b8a0e561d00}}\line Figure {\field{\*\fldinst seq figure}{\fldrslt {\lang1024 3}}}. {\*\bkmkstart EvaluationExample}Reduction of a moniker {\*\bkmkend EvaluationExample}showing the objects connected to during reduction.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 (Note that the particular classes of monikers used here are for illustrative purposes only.) As we can see, many monikers in this example are reduced to something completely different, and some bind to some\-
thing during their reduction, but some do not. For example, to reduce the alias \ldblquote {\cs58\f5\fs16\lang1024 Home}\rdblquote , the reduction must access the infor\-mation that \ldblquote {\cs58\f5\fs16\lang1024 Home}\rdblquote  was an alias for 
\ldblquote {\cs58\f5\fs16\lang1024 \\\\server\\share\\fred}\rdblquote .
\par The process of moniker reduction may also be tied to a global table called the {\i Running Object Table}{\pard\plain \qj\sa60\widctlpar \v\f9\fs12 {\xe {\f9\fs12 Running Object Table}}}
. The Running Object Table serves as the place where monikers in the process of binding look to see if they are already running or not.
\par Pointers to instances of {\cs58\f5\fs16\lang1024 IMoniker} interface can be marshaled to other processes, just as any other inter\-face pointer can. Many monikers are of the nature that they are immutable once created and that they mai
ntain no object state outside themselves. Item Monikers are an example of a class of such monikers. These monikers, which can be replicated at will, will usually want to support custom marshaling (see {\cs58\f5\fs16\lang1024 IMarshal}
 interface) so as to simply serialize themselves and de-serialize themselves in the destination con\-text (see {\cs58\f5\fs16\lang1024 IPersistStream} regarding serialization). This is referred to as marshaling an object {\i by value}.
\par {\*\bkmkstart _Toc339182989}{\pntext\pard\plain\b 11.2\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 IMoniker interface and Core Monikers{\*\bkmkend _Toc339182989}
{\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\v\f5\fs12 {\xe {\f5\fs12 IMoniker\:definition}}}{\*\bkmkstart _Toc339182990}{\*\bkmkend _Toc339182990}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This section describes the details of {\cs58\f5\fs16\lang1024 IMoniker} interface and related interfaces. In addition, it discusses the various kinds of monikers that are provide as part of every COM implementation.

\par Some moniker errors have associated with them some extended information. See {\cs58\f5\fs16\lang1024 IBindCtxt::Register\-Ob\-ject\-Param} for more details.
\par {\pntext\pard\plain\b\i\fs22 11.2.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IMoniker interface
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 We\rquote ll now look in detail at {\cs58\f5\fs16\lang1024 IMoniker} interface its supporting functions and structures.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IMoniker}
 : IPersistStream{\f4  }\{ 
\par \tab HRESULT\tab {\b BindToObject}(pbc, pmkToLeft, iidResult, ppvResult);
\par \tab HRESULT\tab {\b BindToStorage}(pbc, pmkToLeft, iid, ppvObj);
\par \tab HRESULT\tab {\b Reduce}(pbc, dwReduceHowFar, ppmkToLeft, ppmkReduced);
\par \tab HRESULT\tab {\b ComposeWith}(pmkRight, fOnlyIfNotGeneric, ppmkComposite)
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b Enum}(fForward, ppenmMoniker);

\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b IsEqual}(pmkOtherMoniker);
\par \tab HRESULT\tab {\b Hash}(pdwHash);
\par \tab HRESULT\tab {\b IsRunning}(pbc, pmkToLeft, pmkNewlyRunning);{\b 
\par }\tab HRESULT\tab {\b GetTimeOfLastChange}(pbc, pmkToLeft, pfiletime);
\par \tab HRESULT\tab {\b Inverse}(ppmk);
\par \tab HRESULT\tab {\b CommonPrefixWith}(pmkOther, ppmkPrefix);
\par \tab HRESULT\tab {\b RelativePathTo}(pmkOther, ppmkRelPath);
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b GetDisplayName}
(pbc, pmkToLeft, lplpszDisplayName);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b ParseDisplayName}
(pbc, pmkToLeft, lpszDisplayName, pcchEaten, ppmkOut);
\par \tab HRESULT\tab {\b IsSystemMoniker}(pdwMksys);
\par {\b \tab }\};
\par 
\par HRESULT {\b BindMoniker}(pmk, reserved, iidResult, ppvResult);
\par HRESULT {\b CreateBindCtx}(reserved, ppbc);
\par 
\par HRESULT {\b MkParseDisplayName}(pbc, lpszDisplayName, pcchEaten, ppmk);
\par interface {\b IParseDisplayName }: IUnknown \{
\par \tab HRESULT\tab {\b ParseDisplayName}(pbc, lpszDisplayName, pcchEaten, ppmkOut);
\par \tab \};
\par 
\par HRESULT {\b CreateGenericComposite}(pmkFirst, pmkRest, ppmkComposite);\tab 
\par HRESULT {\b CreateFileMoniker}(lpszPathName, ppmk);
\par HRESULT {\b CreateItemMoniker}(lpszDelim, lpszItem, ppmk);
\par HRESULT {\b CreateAntiMoniker}(ppmk);
\par HRESULT {\b CreatePointerMoniker}(punk, ppmk);
\par {\*\bkmkstart MonikerBind}{\pntext\pard\plain\b\fs20\lang1024 11.2.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::BindToObject{\*\bkmkend MonikerBind}
{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:BindToObject}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::BindToObject(pbc, pmkToLeft, iidResult, ppvResult)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This is the workhorse function in {\cs58\f5\fs16\lang1024 IMoniker} interface. Locate and load the object semantically referred to by this moniker according to the interface indicated by {\cs58\f5\fs16\lang1024 
iidResult} and return the object through {\cs58\f5\fs16\lang1024 ppvResult}. After this call has returned, the semantics of the returned interface, whatever they are, should be fully func\-tion\-al.
\par In general, each kind of moniker is designed to be used as one piece in a composite which gives the com\-
plete path to the object in question. In this composite, any given piece has a certain prefix of the composite to its left, and a certain suffix to its right. If {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}
 is invoked on the given piece, then most often the implementation of {\cs58\f5\fs16\lang1024 IMoniker::BindToObject} will require certain services of the object indicated by the prefix to its left. Item monikers, for example, require {
\cs58\f5\fs16\lang1024 IOleItemContainer} interface of the object to their left; see below. The Item Moniker implementation of {\cs58\f5\fs16\lang1024 IMoniker::BindToObject} recursively calls {\cs58\f5\fs16\lang1024 pmkToLeft->Bind\-To\-Ob\-ject}
 in order to obtain this interface. Other implementations of {\cs58\f5\fs16\lang1024 IMoniker::BindToObject} might instead invoke {\cs58\f5\fs16\lang1024 pmkToLeft->BindToStorage} if they need access not to the object itself, but to its persistent stor
age.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw4758\pich1199\picwgoal2698\pichgoal680 \piccropl-255\piccropr-783 
0100090000031d02000004005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700005a00000026060f00a9004d72456402009f0000009d0001002e003100fe03bd020000000000000100030000000000ffffff0000000000ffffff00010000010000000000
00000000010000ae03ab01010c00417269616c000203008a00ff00290003015f0b020011000301af0d0200120003100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e00000026060f0012004d724564
03000800000090024301c7065302050000000b0243019002050000000c0210013704030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e0008000000fa0206000800080000000000040000002d
0100000b00000026060f000c004d72456401000200000000000c00000025030400a0024c0190034c019003ab01a002ab01040000002e011a00040000000201010010000000fb02c0ff00000000000090010000000000000022417269616c005050040000002d0101000a000000320a8d017d03060000007072656669780e00
000026060f001200ffffffff000008000000bf034401b505b2010e00000026060f0012004d724564030008000000c7034c01ad05aa0107000000fc020000ffffff00ffff040000002d0102000400000002010200070000001b04ae01b1054801c303040000002e011e0004000000020101000e000000320a9001bc040d0000
006d6f6e696b6572207069656365000a00000026060f000a00ffffffff0100000000000b00000026060f000c004d72456401000200000000000c00000025030400bf064b01ce054b01ce05ab01bf06ab01040000002e0118000a000000320a9501e60506000000737566666978040000002e011e0012000000320a4602d203
160000006e65656473206365727461696e2073657276696365730e00000026060f001200ffffffff0000080000004c03b50104040d020b00000026060f000c004d72456401000200000000000800000025030200fc03e0015403e0010b00000026060f000c004d724564010002000000000008000000250302005403e00180
03bd010b00000026060f000c004d724564010002000000000008000000250302005503e201810305020a00000026060f000a00ffffffff01000000000010000000fb021000070000000000bc02000000000102022253797374656d0005040000002d01030004000000f001010008000000fa02050000000000ffffff000400
00002d01010004000000f001000007000000fc020100000000000000040000002d01000004000000f0010200040000002701ffff040000002701ffff03000000000083ed028be51f5d4dca0400908cd89045558bec1e8ed881ec4c01ff361c02ff760a8d86dcfe1600}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure {\field{\*\fldinst seq figure}{\fldrslt {\lang1024 4}}}. Interface calculus of moniker pieces
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In situations where the caller of {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}
 does not have a moniker for the object on the left, but instead has the object itself, a Pointer Moniker can be used to wrap the object pointer so that the moniker may be bound.
\par In situations where the moniker in fact does {\i not} need services of the moniker to its left, yet one is provided by the caller nevertheless, {\i no} error should occur; the moniker should simply ignore the needless moniker to its left.
\par If the object indicated by the moniker does not exist, then the error {\f5\fs16 MK_E_NOOBJECT} is returned.
\par In general, binding a moniker can be quite a complicated process, since it may need to launch servers, open files, etc. This often may involve binding to other objects, and it is often the case that binding pieces of the composite to the right of the pres
ent piece will require the same other objects. In order to avoid load\-ing the object, releasing it, then having it loaded again later, {\cs58\f5\fs16\lang1024 IMoniker::BindToObject} can use the {\i bind context} passed through the {
\cs58\f5\fs16\lang1024 pbc} parameter in order to defer releasing the object until the binding process overall is complete. See {\cs58\f5\fs16\lang1024 IBindCtx::RegisterObjectBound} for details.
\par The bind context also contains a deadline time by which the caller would like the binding process to com\-plete, or fail with the error {\f5\fs16 MK_E_EXCEEDEDDEADLINE} if it cannot. This capability is not often used with {\cs58\f5\fs16\lang1024 
IMoniker::BindToObject}; it is more often used with other {\cs58\f5\fs16\lang1024 IMoniker} functions such as {\cs58\f5\fs16\lang1024 IMoniker::GetTimeOfLast\-Change}. Nevertheless, {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}
 implementations should (heuristically) honor the request. See {\cs58\f5\fs16\lang1024 IBindCtx::\-Get\-Bind\-Op\-tions} for details.
\par Usually, for most monikers, binding a second time will return the same running object as binding the first time, rather than reloading it again from passive backing store. This functionality is supported with the Running Object Table, which is described i
n detail later in this chapter. Basically, the Running Object Table is a lookup table keyed by a mon\-i\-ker whose values are pointers to the corresponding now-running ob
ject. As objects become running, the register themselves in this table. Implementations of {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}
 can use this table to shortcut the binding process if the object to which they point is already running. More precisely, if the passed {\cs58\f5\fs16\lang1024 pmkToLeft} parameter is {\cs58\f5\fs16\lang1024 NULL}
 (and this is not an error; that is, the moniker does not {\i require} something to its left), then the moniker should fully reduce itself, then look itself up in the Running Object Table and simply return the pointer to the object found there. If the {
\cs58\f5\fs16\lang1024 pmkToLeft} parameter is non-{\cs58\f5\fs16\lang1024 NULL}, then it is the responsibility of the caller to handle this situation; the {\cs58\f5\fs16\lang1024 Bind\-To\-Ob\-ject()} implementation should {\i not}
 consult the Running Object Table.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }
 The reason behind this rule lies in the fact that in order to look in the Running Object Table, we need the whole moniker in its fully reduced form. If the current moniker is but a piece of a generic composite, then it has to be the composite\rquote 
s responsibility for doing the reduction; the moniker cannot do it correctly do it by itself.}} The Running Object Table is access\-ible from the bind context using {\cs58\f5\fs16\lang1024 IBind\-Ctx::\-GetRunningObjectTable}, an implementation of {
\cs58\f5\fs16\lang1024 IMoniker::BindToObject} should not use {\cs58\f5\fs16\lang1024 GetRunningObjectTable()}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440\tx2880 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440\tx2880 \f4\fs20 {\cs58\f5\fs16\lang1024 pbc\tab IBindCtx*}\tab the bind context to be used for this binding operation.
\par {\cs58\f5\fs16\lang1024 pmkToLeft}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker of the object to the left of this moniker.
\par {\cs58\f5\fs16\lang1024 iidResult}\tab {\cs58\f5\fs16\lang1024 REFIID}\tab the interface by which the caller wishes to connect to the ob\-ject.
\par {\cs58\f5\fs16\lang1024 ppvResult}\tab {\cs58\f5\fs16\lang1024 void**}\tab on successful return, a pointer to the instantiated object is placed here, unless {\f5\fs16 BINDFLAGS_JUSTTESTEXISTENCE} was specified in the binding options, in which case {
\cs58\f5\fs16\lang1024 NULL} {\i may }be returned instead.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_NOOBJECT, STG_E_ACCESSDENIED, MK_E_EXCEED\-ED\-DEAD\-LINE, MK_E_CONNECTMANUALLY}, {\f5\fs16 MK_E_INTERMEDIATE\-IN\-TER\-FACE\-NOTSUPPORTED, E_OUTOFMEMORY, E_NOINTERFACE
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.2\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 BindMoniker{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 BindMoniker}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT BindMoniker(pmk, reserved, iidResult, ppvResult)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Bind a moniker with the specified interface and return the result. This is strictly a helper function in that it uses no functionality which is not also available publicly. It has roughly the following implementation:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 IBindCtx pbc;
\par CreateBindCtx(0, &pbc);
\par pmk->BindToObject(pbc, NULL, iidResult, ppvResult);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 pbc->Release();
\par \pard\plain \s48\fi-2880\li2880\sb60\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pmk}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker which is to be bound.
\par {\cs58\f5\fs16\lang1024 reserved}\tab {\cs58\f5\fs16\lang1024 DWORD}\tab reserved for future use; must be zero.
\par {\cs58\f5\fs16\lang1024 iidResult}\tab {\cs58\f5\fs16\lang1024 REFIID}\tab the interface by which the caller wishes to connect to the ob\-ject.
\par {\cs58\f5\fs16\lang1024 ppvResult}\tab {\cs58\f5\fs16\lang1024 void**}\tab on successful return, a pointer to the resulting object is placed here.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK}, union of {\cs58\f5\fs16\lang1024 IMoniker::BindToObject()} & {\cs58\f5\fs16\lang1024 CreateBindCtx()} errors
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::BindToStorage{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 IMoniker\:functions\:BindToStorage}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::BindToStorage(pbc, pmkToLeft, iid, ppvObj)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return access to the persistent {\i storage} of the receiver using the given interface, rather than access to the object itself, which is what {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}
 returns. Consider, for example, a moniker which re\-fers to spread\-sheet em\-bed\-ded in a word processing document, such as:
\par \pard \qj\li720\sa60\widctlpar {\cs58\f5\fs16\lang1024 [c:\\foo\\bar.doc]}{\fs12\dn6 File Moniker} \'b0 {\cs58\f5\fs16\lang1024 [summaryTable]}{\fs12\dn6 Item Moniker}
\par \pard \qj\sa60\widctlpar Calling {\cs58\f5\fs16\lang1024 IMoniker::BindToObject} on this composite will enable us to talk to the spreadsheet; calling {\cs58\f5\fs16\lang1024 IMon\-iker::BindToStorage} will let us to talk to the {\cs58\f5\fs16\lang1024 
IStorage} instance in which it resides.
\par {\cs58\f5\fs16\lang1024 IMoniker::BindToStorage} will most often be called during the right-to-left recursive process of {\cs58\f5\fs16\lang1024 IMoni\-ker\-::\-BindToObject} in\-voked on a Gen
eric Composite Moniker. Sometimes it is the case that monikers in the tail of the com\-po\-site don\rquote 
t require access to the object on their left; they merely require access to its persistent storage. In effect, these monikers can be bound to without also binding to the objects of the monikers to their left, po\-ten\-
tially a much more efficient operation.
\par Some objects do not have an independently identifiable piece of storage. These sorts of objects are really only a object-veneer on the internal state of their container. Examples include named cell ranges inside an Excel work\-
sheet, and fragments of a Windows Word document delimited by bookmarks. Attempting to call {\cs58\f5\fs16\lang1024 IMoniker::BindToStorage} on a moniker which indicates one of these kinds of objects will fail with the error{\f5\fs16  MK_E_NOSTORAGE}.

\par Use of the bind context in {\cs58\f5\fs16\lang1024 IMoniker::BindToStorage} is the same as in {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pbc}\tab {\cs58\f5\fs16\lang1024 IBindCtx*}\tab the binding context for this binding operation.
\par {\cs58\f5\fs16\lang1024 iid}\tab {\cs58\f5\fs16\lang1024 REFIID}\tab the interface by which we wish to bind to this storage. Common interfaces passed here include IStorage, IStream, and ILockBytes.
\par {\cs58\f5\fs16\lang1024 ppvObj}\tab {\cs58\f5\fs16\lang1024 void**}\tab On successful return, a pointer to the instantiated storage is placed here, unless {\f5\fs16 BINDFLAGS_JUSTTESTEXISTENCE} was specified in the binding options, in which case {
\cs58\f5\fs16\lang1024 NULL} {\i may }be returned instead.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK,  MK_E_NOSTORAGE, MK_E_EXCEEDEDDEADLINE, MK_E_CON\-NECTMANUALLY, E_NOINTERFACE, MK_E_INTERMEDIATE\-IN\-TER\-FACENOTSUPPORTED, STG_E_ACCESSDENIED}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::Reduce{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 IMoniker\:functions\:Reduce}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::Reduce(pbc, dwReduceHowFar, ppmkToLeft, ppmkReduced)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The reduction of monikers was reviewed and illustrated in the synopsis above; this is the function that actu
ally carries it out. Return a more efficient or equally efficient moniker that refers to the same object as does this mon\-iker. Many monikers, if not most, will simply reduce to themselves, since they cannot be re\-
written any further. A moniker which reduces to itself indicates this by returning itself through {\cs58\f5\fs16\lang1024 ppmk\-Re\-duced} and the returning status code {\f5\fs16 MK_S_REDUCED_TO_SELF}
. A moniker which reduces to nothing should return NULL, and should return the status code {\f5\fs16 S_OK}.
\par If the moniker does not reduce to itself, then this function does {\i not} reduce this moniker in-place; instead, it returns a {\i new} moniker.
\par The reduction of a moniker which is a composite of other monikers repeatedly reduces the pieces of which it is composed until they all reduce to themselves, then returns the composite of the reduced pieces. {\cs58\f5\fs16\lang1024 dwReduceHowFar}
 controls the stopping point of the reduction process. It controls to what extent the re\-duc\-tion should be carried out. It has the following legal values.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef enum tagMKRREDUCE \{
\par \tab MKRREDUCE_ONE\tab \tab \tab = 3<<16,
\par \tab MKRREDUCE_TOUSER\tab \tab \tab = 2<<16,
\par \tab MKRREDUCE_THROUGUSER\tab = 1<<16,
\par \tab MKRREDUCE_ALL \tab \tab \tab \tab = 0
\par \tab \} {\b MKRREDUCE}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f9\fs12\lang1024 {\xe {
\f9\fs12 MKRREDUCE}}}{\b ;}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 These values have the following semantics.
\par \pard\plain \s48\fi-2520\li2520\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Value\tab \tab Description
\par \pard\plain \s49\fi-2520\li2520\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\f5\fs16 MKRREDUCE_ONE}{\pard\plain \s49\fi-2520\li2520\sa58\keepn\widctlpar\tx1440 \v\f9\fs12 {\xe {\f9\fs12 MKRREDUCE_ONE}}}\tab 
Perform only one step of reduction on this moniker. In general, the caller will have to have specific knowledge as to the particular kind of moniker in question in order to be able to usefully take advantage of this option.
\par {\f5\fs16 MKRREDUCE_TOUSER}{\pard\plain \s49\fi-2520\li2520\sa58\keepn\widctlpar\tx1440 \v\f9\fs12 {\xe {\f9\fs12 MKRREDUCE_TOUSER}}}\tab 
Reduce this moniker to the first point where it first is of the form where it represents something that the user conceptualizes as being the identity of a persistent object. For example, a file name would qualify, but a macro or an alias would not.
 If no such point exists, then this option should be treated as {\f5\fs16 MKRREDUCE_ALL}.
\par {\f5\fs16 MKRREDUCE_THROUGUSER}{\pard\plain \s49\fi-2520\li2520\sa58\keepn\widctlpar\tx1440 \v\f9\fs12 {\xe {\f9\fs12 MKRREDUCE_THROUGHUSER}}}\tab 
Reduce this moniker to the point where any further reduction would reduce it to a form which the user does not conceptualize as being the identity of a persistent object. Often, this is the same stage as {\f5\fs16 MKRREDUCE_TOUSER}.
\par {\f5\fs16 MKRREDUCE_ALL\tab }{\pard\plain \s49\fi-2520\li2520\sa58\keepn\widctlpar\tx1440 \v\f9\fs12 {\xe {\f9\fs12 MKRREDUCE_ALL}}}\tab Reduce the entire moniker, then, if needed reduce it again and again to the point where it reduces to simply itself.

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 When determining whether they have reduced themselves as far as requested, {\cs58\f5\fs16\lang1024 IMoniker::Reduce} imple\-men\-tations should not compare for equality against {\cs58\f5\fs16\lang1024 dwReduceHowFar
}, as we wish to allow for the possi\-bility that intermediate levels of reduction will be introduced in the future. Instead, {\cs58\f5\fs16\lang1024 IMoniker::Reduce} imple\-menta\-tions should reduce themselves {\i at least} as far as is requested.

\par An important concept in the above is the idea of a moniker that the user thinks of as the name of a persist\-ent object; a persistent identity
. The intent is to provide the ability to programmatically reduce a moniker to canonical forms whose display names would be recognizable to the user. Paths in the file system, book\-
marks in word-processing documents, and range names in spreadsheets are all examples of user-identities. In contrast, neither a macro nor an alias encapsulated in a moniker, nor an inode-like file ID moniker are such identities.
\par The bind context parameter is used as in {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}. In particular, implementations of {\cs58\f5\fs16\lang1024 IMon\-iker::Reduce}
 should pay attention to the time deadline imposed by the caller and the reporting of the moniker of the object that, if it had been running, would have allowed the reduction to progress fur\-ther. See {\cs58\f5\fs16\lang1024 IBindCtx} below.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620\tx2880 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1620\tx2880 \f4\fs20 {\cs58\f5\fs16\lang1024 pbc\tab IBindCtx*}\tab The bind context to use in this operation.
\par {\cs58\f5\fs16\lang1024 dwReduceHowFar}\tab {\cs58\f5\fs16\lang1024 DWORD}\tab Indicates to what degree this moniker should be reduced; see above.
\par {\cs58\f5\fs16\lang1024 ppmkToLeft\tab IMoniker**}\tab On entry, the moniker which is the prefix of this one in the composite in which it is found. On exit, the pointer is either {\cs58\f5\fs16\lang1024 NULL} or non-{\cs58\f5\fs16\lang1024 NULL}. Non-{
\cs58\f5\fs16\lang1024 NULL }indicates that what was previously thought of as the prefix should be disregarded and the moniker returned through {\cs58\f5\fs16\lang1024 ppmkToLeft} considered the prefix in its place (this is very rare). {
\cs58\f5\fs16\lang1024 NULL} indicates that the prefix should not be so replaced. Thus, most monikers will {\cs58\f5\fs16\lang1024 NULL} out this parameter before returning.
\par {\cs58\f5\fs16\lang1024 ppmkReduced\tab IMoniker**}\tab On exit, the reduced form of this moniker. Possibly {\cs58\f5\fs16\lang1024 NULL}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_S_REDUCED_TO_SELF, MK_E_EXCEEDED\-DEADLINE}.
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.1.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::ComposeWith{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:ComposeWith}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::ComposeWith(pmkRight, fOnlyIfNotGeneric, ppmkComposite)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return a new moniker which is a composite formed with this moniker on the left and {\cs58\f5\fs16\lang1024 pmkRight}
 on the right. It is using this operation that the pieces of the path to an object are cobbled together to form the overall full path.
\par There are two distinct kinds of composite monikers: those that know nothing about their pieces other than that they are monikers, and those that know more. We have been terming the former a {\i generic}
 composite; we have seen several examples above. An example of the latter might be that of the result of composing a File Moniker containing a relative path on to the end of another File Moniker: the result could be a new File Moniker containing the compl
ete path.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } In fact, the Win32 implementation of File Monikers does have this behavior. An alternative to the non-generic composition impl
ementation described here is that the elements in a path are each separate monikers which are then {\i generically} composed together. }} There is only a need for one implementation of a Generic Composite Moniker, and this has been provided; see {
\cs58\f5\fs16\lang1024 CreateGenericComposite()}. Non-generic composi\-tion is useful for monikers that are capable of collapsing a path within a storage domain to a more effic\-i\-ent rep\-resentation in a subsequent {\cs58\f5\fs16\lang1024 
IMoniker::Reduce} operation. None of the core monikers on Win32 are capable of this, but an implementation of File Moniker which could collapse down to a inode-like file ID might be an example of such a behavior.
\par Each moniker class in general will have a (possibly empty) set of other kinds of special monikers that can be com\-posed onto the end of it in a non-generic way; the moniker class has some sort of intimate knowl\-
edge about the semantics of these special monikers, more than simply that they are monikers. Each {\cs58\f5\fs16\lang1024 IMoniker::Com\-poseWith} implementation will examine {\cs58\f5\fs16\lang1024 pmk\-Right}
 to see if it is such a special moniker for this imple\-mentation. Often, it will ask {\cs58\f5\fs16\lang1024 pmkRight} for its class, but other possibilities exist, such as using {\cs58\f5\fs16\lang1024 Query\-Interface}
. A very common case of such special monikers are Anti Monikers.
\par If {\cs58\f5\fs16\lang1024 pmkRight} is special, then the {\cs58\f5\fs16\lang1024 IMoniker::ComposeWith} implementation does whatever is approp\-riate for that special case. If it is not, then {\cs58\f5\fs16\lang1024 fOnlyIfNotGeneric}
 controls what should occur. If {\cs58\f5\fs16\lang1024 fOnlyIfNotGeneric} is true, then {\cs58\f5\fs16\lang1024 NULL} should be passed back through {\cs58\f5\fs16\lang1024 ppmkComposite} and the status {\f5\fs16 MK_E_NEEDGENERIC} re\-turned; if {
\cs58\f5\fs16\lang1024 fOnlyIfNot\-Gen\-eric} is false, then a generic composite should be returned using {\cs58\f5\fs16\lang1024 Create\-\-Gen\-er\-ic\-Composite}. Most callers of {\cs58\f5\fs16\lang1024 IMoniker::ComposeWith} should set {
\cs58\f5\fs16\lang1024 fOnlyIfNotGeneric} to false.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }
 fOnlyIfNotGeneric is set by recursive ComposeWith() calls from the implementation of Generic Composite Moniker \_ ComposeWith().}}
\par In any situation that {\cs58\f5\fs16\lang1024 pmkRight} completely annihilates the receiver (i.e.: irrespective of {\cs58\f5\fs16\lang1024 fOnly\-If\-Not\-Gener\-ic}), and so the resulting composite is empty, {\cs58\f5\fs16\lang1024 NULL}
 should be passed back through {\cs58\f5\fs16\lang1024 ppmkComposite} and the status {\cs58\f5\fs16\lang1024 S_OK} returned.
\par The pieces of a moniker that have been composed together can be picked apart using {\cs58\f5\fs16\lang1024 IMoniker::Enum}. On a generic composite, this enumerates the monikers contained within it. On other monikers, which par\-tic\-
ular pieces are returned is implementation-defined.
\par \pard \qj\sa60\keepn\widctlpar Composition of monikers is an associative operation. That is, if {\cs58\f5\fs16\lang1024 A}, {\cs58\f5\fs16\lang1024 B}, and {\cs58\f5\fs16\lang1024 C} are monikers, then
\par \pard\plain \s57\fi-720\li1080\ri-720\sl-180\slmult0\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 (A {\fs20\dn6 
{\field{\*\fldinst SYMBOL 176 \\f "Symbol" \\s 10}{\fldrslt\f1\fs20}}}  B) {\fs20\dn6 {\field{\*\fldinst SYMBOL 176 \\f "Symbol" \\s 10}{\fldrslt\f1\fs20}}} C
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 is always equal to
\par \pard\plain \s57\fi-720\li1080\ri-720\sl-180\slmult0\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 A {\fs20\dn6 
{\field{\*\fldinst SYMBOL 176 \\f "Symbol" \\s 10}{\fldrslt\f1\fs20}}}  (B {\fs20\dn6 {\field{\*\fldinst SYMBOL 176 \\f "Symbol" \\s 10}{\fldrslt\f1\fs20}}} C)
\par \pard\plain \s44\qj\sb60\sa58\sl-220\slmult0\widctlpar \f4\fs20 where {\f5\dn6 {\field{\*\fldinst SYMBOL 176 \\f "Symbol" \\s 10}{\fldrslt\f1\fs20}}} represents the composition operation. Each implementation of {\cs58\f5\fs16\lang1024 
IMoniker::ComposeWith} must main\-tain this invariant.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1620 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkRight\tab IMoniker*}\tab the moniker to compose onto the end of the receiver.
\par {\cs58\f5\fs16\lang1024 fOnlyIfNotGeneric\tab BOOL}\tab controls what should be done in the case that the way for form a com\-posite is to use a generic one.
\par {\cs58\f5\fs16\lang1024 ppmkComposite\tab IMoniker*}\tab on exit, the resulting composite moniker. Possibly {\cs58\f5\fs16\lang1024 NULL}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_NEEDGENERIC}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.1.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::Enum{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:Enum}}}{\f5 
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 HRESULT IMoniker::Enum(fForward, ppenmMoniker)
\par Enumerate the monikers of which the receiver is logically a composite. On a generic composite, this enu\-m\-
erates the pieces of which the composite is composed. On other monikers, the semantics of the pieces of which it is a composite are implementation-de
fined. For example, enumerating the pieces of a File Moniker might pick apart the internally stored path name into its components, even though they are not stored in\-
ternally as actual separate monikers. Many monikers have no discernible internal structure; they will simply pass back {\cs58\f5\fs16\lang1024 NULL} instead of an enumerator.
\par {\cs58\f5\fs16\lang1024 IEnumMoniker} is an enumerator that supports the enum\-er\-a\-tion of items which are monikers. It is defined as:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef Enum<IMoniker*> {\b 
IEnumMoniker}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f9\fs12\lang1024 {\xe {\f9\fs12 
IEnumMoniker}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 which is shorthand for
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IEnumMoniker}
 : IUnknown \{ 
\par \tab virtual\tab HRESULT\tab {\b Next}(ULONG celt, IMoniker* rgelt[], ULONG* pceltFetched);
\par \tab virtual\tab HRESULT\tab {\b Skip}(ULONG celt);
\par \tab virtual\tab HRESULT\tab {\b Reset}();
\par \tab virtual\tab HRESULT\tab {\b Clone}(IEnumMoniker** ppenm);
\par \tab \};
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1260 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1260 \f4\fs20 {\cs58\f5\fs16\lang1024 fForward\tab BOOL}\tab 
If true, then the enumeration should be done in the normal order. If false, then the order should be the reverse of the order enumerated by the normal order.
\par {\cs58\f5\fs16\lang1024 ppenmMoniker}\tab {\cs58\f5\fs16\lang1024 IEnumMoniker**}\tab On exit, the returned enumerator. May be {\cs58\f5\fs16\lang1024 NULL}, signifying that there is nothing to enumerate.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab S_OK.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.7\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::IsEqual{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 IMoniker\:functions\:IsEqual}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::IsEqual(pmkOtherMoniker)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The most important use of this function is in the implementation of the Running Object Table. As dis\-
cussed in detail later, this table has two distinct but closely related roles. First, using a moniker, entries in the Run
ning Object Table indicate those objects which are presently now logically running and to which auto-link reconnections should be made. Second, for those objects which are actually running (have an object pointer), it provides a means given their moniker 
to actually connect to the appropriate running ob\-ject.
\par The moniker implementation should {\i not} reduce itself before carrying out the compare operation.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Two monikers which can compare as equal in either order must hash to the same value; see {\cs58\f5\fs16\lang1024 IMoniker\-::\-Hash}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620\tx2880 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1620\tx2880 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkOtherMoniker}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the other moniker with whom we would like to compare the receiver.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab S_OK, S_FALSE
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.8\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::Hash{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:Hash}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::Hash(pdwHash)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return a 32 bit integer associated with this moniker. This integer is useful for maintaining tables of mon\-i\-kers: the moniker can be hashed to determine a hash bucket in the table, then compared with {
\cs58\f5\fs16\lang1024 IMoniker::IsEqual} against all the monikers presently in that hash bucket.
\par It must always be the case that two monikers that compare as equal in either order hash to the same value. In effect, implementations of {\cs58\f5\fs16\lang1024 IMoniker::IsEqual}() and {\cs58\f5\fs16\lang1024 IMoniker::Hash} are inti\-
mate with one another; they must always be written together.
\par The value returned by {\cs58\f5\fs16\lang1024 IMoniker::Hash} is invariant under marshaling: if a moniker is marshaled to a new context, then {\cs58\f5\fs16\lang1024 IMoniker::Hash}
 invoked on the unmarshaled moniker in the new context must return the same value as {\cs58\f5\fs16\lang1024 IMoniker::Hash}
 invoked on the original moniker. This is the only way that a global table of monikers such as the Running Object Table can be maintained in shared space, yet accessed from many processes. The obvious implementation technique this indicates is that {
\cs58\f5\fs16\lang1024 IMoniker::Hash} should not rely on the memory address of the moniker, but only its internal state.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620\tx2880 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1620\tx2880 \f4\fs20 pdwHash\tab {\cs58\f5\fs16\lang1024 DWORD*}\tab the place in which to put the returned hash value.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab S_OK
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.9\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::IsRunning{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 IMoniker\:functions\:IsRunning}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::IsRunning(pbc, pmkToLeft, pmkNewlyRunning){\b 
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 Answer as to whether this moniker is in fact running. As usual, the Running Object Table in whose context this question is to be answered is obtained by this moniker from the Bind context. {\cs58\f5\fs16\lang1024 
pmkToLeft} is the moniker to the left of this object in the generic composite in which it is found, if any. 
\par If non-{\cs58\f5\fs16\lang1024 NULL}, {\cs58\f5\fs16\lang1024 pmkNewly\-Run\-ning} is the moniker which has most recently been added to the Running Object Table; the implementation of {\cs58\f5\fs16\lang1024 IMoniker::IsRunning}
 can assume that without this object in the Running Object Table, that {\cs58\f5\fs16\lang1024 IMoniker::IsRunning}
 would have reported that it was not running; thus, the only way that it can now be running is if this newly running moniker is in fact itself! This allows for some n{\fs12\up6 2}-to-n reductions in algo
rithms that use monikers. (If the moniker implementation chose to ignore {\cs58\f5\fs16\lang1024 pmkNewlyRunning}, no harm would come: this moniker is in fact in the Running Object Table)
\par Implementations of this method in various kinds of moniker classes are roughly as follows:
\par \pard \qj\sa60\keepn\widctlpar {\i Generic Composite Moniker
\par }\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 if (pmkToLeft != NULL)
\par \tab return (pmkToLeft->ComposeWith(this)) -> IsRunning(pbc, NULL, pmkNewlyRunning);
\par if (pmkNewlyRunning != NULL) \{
\par \tab if (pmkNewlyRunning -> IsEqual(this) == NOERROR)
\par \tab \tab return NOERROR;
\par \tab \}
\par else if (pRunningObjectTable -> IsRunning(this) == NOERROR)
\par \tab return NOERROR;
\par // otherwise, forward it on to my last element.
\par return this->Last()->IsRunning{\fs18 (}pbc, this->AllButLast(), pmkNewlyRunning{\fs18 )}
\par \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 {\i Any moniker whose class does not do any wildcard matching
\par }\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 if (pmkToLeft == NULL) \{
\par \tab if (pmkNewlyRunning != NULL)
\par \tab \tab return pmkNewlyRunning -> IsEqual(this);
\par \tab else
\par \tab \tab return pRunningObjectTable -> IsRunning(this);
\par \tab \}
\par else
\par \tab return ResultFromScode(S_FALSE);\tab {\i // If I }{\i\ul was}{\i  running, then Generic Composite would have caught it.
\par }\pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 {\i 
A moniker class which has a wild card entry which always matches any instance of the moniker class: if the wild card is present, then all instances of the moniker class to the right of the same other moniker (that is, with the same moniker to their left) 
are deemed to be running. Such a moniker class might be reasonably used, for example, to match all the addressable ranges in a given spreadsheet. 
\par }\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 if (pmkToLeft == NULL) \{
\par \tab if (pmkNewlyRunning != NULL)
\par \pard \s57\fi-720\li1080\ri-450\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \tab return pmkNewlyRunning->IsEqual(this) == NOERROR 

\par \tab \tab \tab || pmkNewlyRunning->IsEqual(my wild card moniker) == NOERROR;
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab if {\i (}
pRunningObjectTable -> IsRunning(this) == NOERROR)
\par \tab \tab return NOERROR;
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab 
return pRunningObjectTable -> IsRunning(my wild card moniker);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \}
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 else 
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab 
return pmkToLeft->ComposeWith(my wild card moniker) -> IsRunning(pbc, NULL, pmkNewlyRunning);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 {\i 
A moniker class which has a wild card entry which matches against some of the objects, but only the ones which are in fact actually currently running. We illustrate here specifically the behaviour of Item Monikers}{\pard\plain \s44\qj\sb60\sa58\widctlpar 
\v\f5\fs12 {\xe {\f5\fs12 Item Moniker}}}{\i .
\par }\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 if (pmkToLeft == NULL) \{
\par \tab if (pmkNewlyRunning != NULL) \{
\par \tab \tab if (pmkNewlyRunning->IsEqual(this) == NOERROR)
\par \tab \tab \tab return NOERROR;
\par \tab \tab if (pmkNewlyRunning->IsEqual(my wild card moniker) != NOERROR)
\par \tab \tab \tab return ResultFromScode(S_FALSE);
\par \tab \tab goto TestBind:
\par \tab \tab \}
\par \tab \}
\par if (pmkToLeft->ComposeWith(my wild card moniker)->IsRunning(pbc, NULL, pmkNewlyRunning) != NOERROR)
\par \tab return ResultFromScode(S_FALSE);
\par \pard \s57\fi-900\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 TestBind:
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 {\i 
// In general, connect to the container and ask whether the object is running. The use of 
\par // IOleItemContainer here is Item Moniker-specific, but the theme is a general one.
\par }IOleItemContainer *pcont;
\par pmkToLeft->BindToObject(pbc, NULL, IID_IOleItemContainer, &pcont);
\par return pcont->IsRunning(szItemString);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The arguments to this function are as follows:
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1800 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1800 \f4\fs20 {\cs58\f5\fs16\lang1024 pbc\tab IBindCtx*}\tab the usual bind context
\par {\cs58\f5\fs16\lang1024 pmkToLeft\tab IMoniker*}\tab the moniker to the left of this one in the composite in which it is found.
\par {\cs58\f5\fs16\lang1024 pmkNewlyRunning}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab may be {\cs58\f5\fs16\lang1024 NULL}. If non-{\cs58\f5\fs16\lang1024 NULL}
, then this is the moniker which has been most recently added to the Running Object Table. In this case, {\cs58\f5\fs16\lang1024 IMoniker::IsRunning} implemen\-tations may assume that without this moniker in the R.O.T. that {\cs58\f5\fs16\lang1024 
IMoniker::IsRunning} would return {\f5\fs16 S_FALSE}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, S_FALSE}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.1.10\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::GetTimeOfLastChange{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:GetTimeOfLastChange}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::GetTimeOfLastChange(pbc, pmkToLeft, pfiletime)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Answer the earliest time after which the object pointed to by this moniker is known not to have changed. 
\par The purpose of this function is to support the ability to determine whether higher-level objects based on monikers are up-to-date or not. An example of higher level objects are the link objects in OLE Compound Documents.
\par The returned time of change is reported using a {\f5\fs16 FILETIME}{\pard\plain \qj\sa60\widctlpar \v\f5\fs12 {\xe {\f5\fs12 FILETIME}}}. A {\f5\fs16 FILETIME} is a 64-bit value indicating a time in units of 100 nanoseconds, with an origin in 1601.{
\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } The definition of FILETIME was taken from the Microsoft Windows\endash 32 specification.}}
 A resolution of 100 nanoseconds allows us to deal with very fast-changing data; allocating this many bits gives us a range of tens of thousands of years. It is not expected that most change times in objects will be actually be internally recorded with th
is precision and range; they only need be reported with such.
\par If the time of last change is unavailable, either because the deadline was exceeded or otherwise, then it is recommended that a {\f5\fs16 FILETIME} of \{{\f5\fs16 dwLowDateTime,dwHighDateTime\} = \{0xFFFFFFFF,0x}{\b\f5\fs16 7}{\f5\fs16 FFFFFFF\} }
(note the 0x7 to avoid accidental unsigned / signed confusions) should be passed back. If the deadline was exceeded, then the status {\f5\fs16 MK_E_EX\-CEEDED\-DEADLINE}
 should be returned. If the time of change is unavailable, and would not be available no matter what deadline were used, then {\f5\fs16 MK_E_UNAVAILABLE} should be returned. Other\-wise, {\f5\fs16 S_OK} should be returned.
\par If {\cs58\f5\fs16\lang1024 pmkToLeft} is {\cs58\f5\fs16\lang1024 NULL}, then this function should generally first check for a recorded change-time in the Running Object Table with {\cs58\f5\fs16\lang1024 IRunningOb\-ject\-Table::GetTimeOfLastChange}
 before proceeding with other strat\-
egies. Moniker classes that support wildcards will have to take into consideration exactly what does get put in the Running Object Table and look for the appropriate thing; since Generic Composite Monikers know nothing of wild\-
cards, they may even need to do that in the non-{\cs58\f5\fs16\lang1024 NULL} {\cs58\f5\fs16\lang1024 pmkToLeft} case. See {\cs58\f5\fs16\lang1024 IMoni\-ker::Is\-Run\-ning}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620\tx2880 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1620\tx2880 \f4\fs20 pbc\tab {\cs58\f5\fs16\lang1024 IBindCtx*}\tab the binding context for this operation.
\par pmkToLeft\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker to the left of this one in the composite in which it is found.
\par pfiletime\tab {\cs58\f5\fs16\lang1024 FILETIME*}\tab the place in which the time of last change should be reported.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_EXCEEDEDDEADLINE, MK_E_UNAVAILABLE, MK_E_CONNECTMANUALLY}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.1.11\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::Inverse{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:Inverse}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::Inverse(ppmk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Answer a moniker that when composed onto the end of this moniker or one of similar structure will an\-nihilate it; that is, will compose to nothing. {\cs58\f5\fs16\lang1024 IMoniker::Inverse}
 will be needed in implementations of {\cs58\f5\fs16\lang1024 IMoniker::RelativePathTo}, which are im\-port\-ant for supporting monikers that track information as it moves about.
\par This is the abstract generalization of the {\cs58\f5\fs16\lang1024 \ldblquote ..\rdblquote } operation in traditional file systems. For example a File Moniker which represented the path {\cs58\f5\fs16\lang1024 \ldblquote a\\b\\c\\d\rdblquote }
 would have as its inverse a moniker containing the path {\cs58\f5\fs16\lang1024 \ldblquote ..\\..\\..\\..\rdblquote }, since {\cs58\f5\fs16\lang1024 \ldblquote a\\b\\c\\d\rdblquote } composed with {\cs58\f5\fs16\lang1024 \ldblquote ..\\..\\..\\..
\rdblquote } yields nothing. 
\par Notice that an the inverse of a moniker does not annihilate just that particular moniker, but all monikers with a similar structure, where structure is of course interpreted with respect to the particular moniker. Thus, the inverse of a Generic Composite 
Moniker is the reverse composite of the inverse of its pieces. Monikers which are non-generic composites (such as File Monikers are presently implemented) will also have non-trivial inverses, as we just saw. How\-
ever, there will be many kinds of moniker whose inverse is trivial: the moniker {\i adds }one more piece to an existing structure; its inverse is merely a moniker that {\i removes} the last piece of the existing struc\-
ture. A moniker that when composed onto the end of a generic moniker removes the last piece is provided; see {\cs58\f5\fs16\lang1024 CreateAntiMoniker}. Monikers with no internal structure can return one of these as their inverse.
\par Not all monikers have inverses. The inverse of an anti-
moniker, for example, does not exist. Neither will the inverses of most monikers which are themselves inverses. It is conceivable that other monikers do not have inverses as well; a macro moniker might be an example. Monikers which have no inverse cannot 
have relative paths formed from things inside the objects they denote to things outside.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppmk}\tab {\cs58\f5\fs16\lang1024 IMoniker**}\tab the place to return the inverse moniker.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_NOINVERSE}.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.12\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::CommonPrefixWith{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 IMoniker\:functions\:CommonPrefixWith}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::CommonPrefixWith(pmkOther, ppmkPrefix)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Answer the longest common prefix that the receiver shares with the moniker {\cs58\f5\fs16\lang1024 pmkOther}. This function\-al\-
ity is useful in constructing relative paths, and for performing some of the calculus on monikers needed by the {\b\f5\fs16 Edit / Links} dialog in OLE Documents scenarios.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkOther}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker with whom we are determine the common prefix.
\par {\cs58\f5\fs16\lang1024 ppmkPrefix}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the place to return the common prefix moniker. {\cs58\f5\fs16\lang1024 NULL} is returned only in the case that the common prefix does not exist.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 MK_S_ME}, indicating that the receiver as a whole is the common prefix. {\f5\fs16 MK_S_HIM}, indicating that {\cs58\f5\fs16\lang1024 pmkOther} as a whole is the common prefix. {\f5\fs16 
MK_S_US}, indicating that in fact the two monikers are equal. {\f5\fs16 S_OK}, indicating that the common prefix exists but is neither the receiver nor {\cs58\f5\fs16\lang1024 pmkOther}. {\f5\fs16 MK_S_NOPREFIX} indicating that no common prefix exists.

\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.13\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 MonikerCommonPrefixWith{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 MonikerCommonPrefixWith}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT MonikerCommonPrefixWith(pmkThis, pmkOther, ppmkPrefix)
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 This function is intended solely for the use of moniker {\i implementors; }clients of monikers \ldblquote need not apply;\rdblquote 
 clients should instead compute the common prefix between two monikers by using
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
pmkSrc->CommonPrefixWith(pmkOther, ppmkPrefix);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Implementations of {\cs58\f5\fs16\lang1024 IMoniker::CommonPrefixWith} necessarily call {\cs58\f5\fs16\lang1024 MonikerCommonPrefixWith} as part of their in
ternal processing. Such a method should first check to see if the other moniker is a type that it recognizes and handles specially. If not, it should call {\cs58\f5\fs16\lang1024 MonikerCommonPrefixWith}, passing itself as {\cs58\f5\fs16\lang1024 pmkSrc}
 and the other moniker as {\cs58\f5\fs16\lang1024 pmkDest}. {\cs58\f5\fs16\lang1024 MonikerCommonPrefixWith} will handle the generic com\-p\-osite cases correctly.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkThis}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the starting moniker for the computation of the relative path.
\par {\cs58\f5\fs16\lang1024 pmkOther}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker to which a relative path should be taken.
\par {\cs58\f5\fs16\lang1024 ppmkPrefix}\tab {\cs58\f5\fs16\lang1024 IMoniker**}\tab May {\i not} be {\cs58\f5\fs16\lang1024 NULL}. The place at which the moniker of {\cs58\f5\fs16\lang1024 pmkDest} relative to {\cs58\f5\fs16\lang1024 pmkSrc}
 is to be returned.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_S_HIM, MK_S_ME, MK_S_US, MK_S_NOPREFIX}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.1.14\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::RelativePathTo{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:RelativePathTo}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::RelativePathTo(pmkOther, ppmkRelPath)
\par \pard\plain \qj\sa40\widctlpar \f4\fs20 Answer a moniker that when composed onto the end of this one or one with a similar structure will yield {\cs58\f5\fs16\lang1024 pmkOther}
. Conceptually, implementations of this function usually work as follows: the longest prefix that the re\-cei\-ver and {\cs58\f5\fs16\lang1024 pmkOther} have is common is determined. This breaks the receiver and {\cs58\f5\fs16\lang1024 pmkOther}
 each into two parts, say (P,T{\fs12\dn6 me}) and (P,T{\fs12\dn6 him}) respectively, where P is the maximal common prefix. The correct relative path result is then {\dn6 {\pict\wmetafile8\picw1429\pich467\picwgoal810\pichgoal265 
0100090000039b01000002005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700005a00000026060f00a9004d72456402009f0000009d00010084008400fc03b8020000000000000400030000000000ffffff0000000000ffffff00010000010000000000
0000000001000169028e01010c00417269616c001f03008600ff00f0020300d000ff007f0103001101ff00ff0353100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e00000026060f0012004d724564
03000800000014012b0158029501050000000b022b011401050000000c026a004401030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e00040000002e011800040000000201010015000000fb
02b0ff0000000000009001010000000002001054696d6573204e657720526f6d616e000000040000002d01000008000000320a7a01140101000000540008000000320a7a01d40101000000540015000000fb02d0ff0000000000009001010000000002001054696d6573204e657720526f6d616e008c3f040000002d010100
04000000f001000008000000320a87013301020000006d6509000000320a8701f1010300000068696d0010000000fb02d0ff0000000000009001000000020002001053796d626f6c0000040000002d01000004000000f001010008000000320a5d014a01010000002d0010000000fb02b0ff00000000000090010000000200
02001053796d626f6c0000040000002d01010004000000f001000008000000320a7c01960101000000b00015000000fb02d0ff0000000000009001000000000002001054696d6573204e657720526f6d616e008c3f040000002d01000004000000f001010008000000320a5c01670101000000310010000000fb0210000700
00000000bc02000000000102022253797374656d0005040000002d01010004000000f0010000040000002701ffff040000002701ffff0300000000001c002a002a0000000000de0106000000970000000000000000000000000000000000000000000000000000}}.
\par \pard \qj\sa60\sl-220\slmult0\widctlpar For any given implementation of this function, it is usually the case that the same {\cs58\f5\fs16\lang1024 pmkOther} monikers are treated specially as would be in {\cs58\f5\fs16\lang1024 IMoniker::ComposeWith}
(). File Monikers, for example, might treat other File Monikers specially in both cases.
\par See also {\cs58\f5\fs16\lang1024 MonikerRelativePathTo}().
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkOther}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker to which a relative path should be taken.
\par {\cs58\f5\fs16\lang1024 ppmkRelPath}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab May {\i not} be {\cs58\f5\fs16\lang1024 NULL}. The place at which the relative path is returned. 
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 MK_S_HIM}, indicating that the only form of relative path is in fact just the other moniker, {\cs58\f5\fs16\lang1024 pmkOther}. {\f5\fs16 S_OK}
, indicating that a non-trivial relative path exists.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.15\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 MonikerRelativePathTo{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 MonikerRelativePathTo}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT MonikerRelativePathTo(pmkSrc, pmkDest, ppmkRelPath, reserved)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This function is intended solely for the use of moniker {\i implementors; }clients of monikers \ldblquote need not apply;\rdblquote  clients should instead compute the relative path between two monikers by using

\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
pmkSrc->RelativePathTo(pmkDest, ppmkRelPath);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Implementations of {\cs58\f5\fs16\lang1024 IMoniker::RelativePathTo} necessarily call {\cs58\f5\fs16\lang1024 Mon\-i\-ker\-Rel\-a\-tive\-Path\-To}
 as part of their internal processing. Such a method should first check to see if the other moniker is a type that it recognizes and handles specially. If not, it should call {\cs58\f5\fs16\lang1024 Mon\-i\-ker\-Rel\-a\-tive\-Path\-To}, passing itself as 
{\cs58\f5\fs16\lang1024 pmkSrc} and the other moniker as {\cs58\f5\fs16\lang1024 pmkDest}. {\cs58\f5\fs16\lang1024 Mon\-i\-ker\-Rel\-a\-tive\-Path\-To} will handle the generic com\-p\-osite cases correctly.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkSrc\tab IMoniker*}\tab the starting moniker for the computation of the relative path.
\par {\cs58\f5\fs16\lang1024 pmkDest\tab IMoniker*}\tab the moniker to which a relative path should be taken.
\par {\cs58\f5\fs16\lang1024 ppmkRelPath}\tab {\cs58\f5\fs16\lang1024 IMoniker**}\tab May {\i not} be {\cs58\f5\fs16\lang1024 NULL}. The place at which the moniker of {\cs58\f5\fs16\lang1024 pmkDest} relative to {\cs58\f5\fs16\lang1024 pmkSrc}
 is to be returned.
\par {\cs58\f5\fs16\lang1024 reserved}\tab {\cs58\f5\fs16\lang1024 BOOL}\tab must be {\i non-zero (}{\b\i NOTE}{\i !)}
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_S_HIM}
\par {\*\bkmkstart MonikerGetUserName}{\pntext\pard\plain\b\fs20\lang1024 11.2.1.16\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::GetDisplayName
{\*\bkmkend MonikerGetUserName}{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:GetDisplayName}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::GetDisplayName(pbc, pmkToLeft, lplpszDisplayName)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Most monikers have a textual representation which is meaningful to a human being. This function re\-turns the current display name for this moniker, or {\cs58\f5\fs16\lang1024 NULL} if none exists.
\par {\*\bkmkstart UserNameDiscussion}Some display names may change over time as the object to which the moniker refers moves about in the con\-text in which it lives. Formula references between two Microsoft Excel spreadsheets are an exa\-
mple of this type of changing reference. A formula referring to cell {\cs58\f5\fs16\lang1024 \ldblquote R1C1\rdblquote } in another sheet may change to the refer to{\cs58\f5\fs16\lang1024  \ldblquote R2C1\rdblquote }
 if a new row is inserted at the top of the second sheet: the reference still re\-
fers to the same actual cell, but now the cell has a different address in its sheet. This behavior leads to the general observation that obtaining the current display name of a moniker may have to access at least the storage of the object to which it ref
ers, if not the object itself. Thus, it has the potential to be an expensive operation. As in other {\cs58\f5\fs16\lang1024 IMoniker} func\-tions, a bind con\-
text parameter is passed which includes a deadline within which the operation should complete, or fail with {\f5\fs16 MK_E_EXCEEDEDDEADLINE} if unable to do so.
\par A consequence of the possible unavailability of quick access to the display name of a moniker is that call\-
ers of this function most likely will want to cache the last successful result that they obtained, and use that if the current answer is inaccessible (this caching is the Microsoft Excel between-sheet behavior).
\par {\*\bkmkend UserNameDiscussion}In the general case, the display name of a moniker is {\i not }unambiguous: there may be more than one moniker with the same display name, though in practice this will be rare. There is also no {\i guarantee }
that a display name obtained from a moniker will parse back into that moniker in {\cs58\f5\fs16\lang1024 MkParseDisplayName}
, though failure to do so also will be rare. Display names should therefore be thought of as a merely a note or annotation on the moniker which aid a human being in distinguishing one moniker from another, rather than a completely equivalent representatio
n of the moniker itself.
\par Notice that due to how display names are constructed in composites, a moniker which is a prefix of ano
ther necessarily has a display name which is a (string) prefix of the display name of the second moniker. The converse, however, does not necessarily hold.
\par A moniker which is designed to be used as part of a generic composite is responsible for including any preceding delimiter as part of its display name. Many such monikers take a parameter for this delimiter in their instance creation functions.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1620 \f4\fs20 {\cs58\f5\fs16\lang1024 pbc\tab IBindCtx*}\tab the bind context for this operation.
\par {\cs58\f5\fs16\lang1024 pmkToLeft\tab IMoniker*}\tab the moniker to the left of this one in the composite in which it is found. Most monikers will not require this in {\cs58\f5\fs16\lang1024 IMoniker::GetDisplayName}.
\par {\cs58\f5\fs16\lang1024 lplpszDisplayName}\tab {\cs58\f5\fs16\lang1024 LPSTR*}\tab on exit, the current display name for this moniker. {\cs58\f5\fs16\lang1024 NULL} if the moniker does not have a display name or the deadline was exceeded.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_EXCEEDEDDEADLINE}.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.17\tab}\pard\plain \s4\sb480\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 MkParseDisplayName{\pard\plain 
\s4\sb480\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 MkParseDisplayName}}}{\pard\plain \s4\sb480\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 parsing}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT MkParseDisplayName(pbc, lpszDisplayName, pcchEaten, ppmk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Recall from {\cs58\f5\fs16\lang1024 IMoniker::GetDisplayName} that most monikers have a textual name which is meaningful to the user. The function {\cs58\f5\fs16\lang1024 MkParseDisplayName}
 does the logical inverse operation: given a string, it returns a mon\-iker of the object that the string denotes. This operation is known as {\i parsing. }A display name is parsed into a moniker; it is resolved into its component moniker parts.
\par If a syntax error occurs, than an indication of how much of the string was successfully parsed is returned in {\cs58\f5\fs16\lang1024 pcchEaten} and {\cs58\f5\fs16\lang1024 NULL} is returned through {\cs58\f5\fs16\lang1024 ppmk}. Otherwise, the value
 returned through {\cs58\f5\fs16\lang1024 pcchEaten} indi\-cates the entire size of the display name.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pbc\tab IBindCtx*}\tab the binding context in which to accumulate bound objects.
\par {\cs58\f5\fs16\lang1024 lpszDisplayName}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the display name to be parsed.
\par {\cs58\f5\fs16\lang1024 pcchEaten\tab ULONG*}\tab on exit the number of characters of the display name that was successfully parsed. Most useful on syntax error.
\par {\cs58\f5\fs16\lang1024 ppmk}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the resulting moniker.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_SYNTAX}{\i .}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Parsing a display name may in some cases be as expensive as binding to the obj
ect that it denotes, since along the way various non-trivial name space managers (such as a spreadsheet application that can parse into ranges in its sheets) need to be connected to by the parsing mechanism to succeed. As might be ex
pected, objects are not released by the parsing operation itself, but are instead handed over to the passed-in binding context (via {\cs58\f5\fs16\lang1024 IBindCtx::RegisterObjectBound)}. Thus, if the moniker resulting from the parse is immedi
ately bound using this same binding con\-text, redundant loading of objects is maximally avoided.
\par In many other cases, however, parsing a display name may be quite inexpensive since a single name-space manager may quickly return a moniker that will perform further expensive analysis on any acceptable name during {\cs58\f5\fs16\lang1024 
IMoniker::BindToObject} or other methods. An example of such an inexpensive parser is the Win32 implementation of a File Moniker. A theoretical example would be a na\'efve URL moniker which parsed from any valid URL strings (ie,{\cs58\f5\fs16\lang1024  
\ldblquote http:\'85\rdblquote ,} {\cs58\f5\fs16\lang1024 \ldblquote file:\'85\rdblquote ,} etc) and only during binding took time to resolve against the Internet server, a potentially expensive operation.
\par An important use of {\cs58\f5\fs16\lang1024 MkParse\-DisplayName} worth noting lies in textual pro\-gram\-ming lang\-uages which permit remote references as syn\-tactic ele\-ments. The expression language of a spread\-
sheet is a good example of such a language.
\par The parsing process is an inductive one, in that there is an initial step that gets the process going, fol\-lowed by the repeated applica\-tion of an inductive step. At any point after the beginning of the parse, a cer\-tain prefix of {
\cs58\f5\fs16\lang1024 lpsz\-DisplayName} has been parsed into a moniker, and a suffix of the display name remains not understood. This is illustra\-ted in Figure {\field{\*\fldinst seq figure ParseMoniker}{\fldrslt {\lang1024 5}}}.
\par \pard\plain \s40\qc\keep\keepn\widctlpar \f4\fs20 {{\pict\wmetafile8\picw12709\pich1856\picwgoal7206\pichgoal1052 
0100090000037502000004005a00000000001500000026060f001f00ffffffff0400150000004d7245640f004d6963726f736f6674204472617700005a00000026060f00a9004d72456402009f0000009d00010058005800fc03b8020000000000000100030000000000ffffff0000000000ffffff00010000010000000000
00000000010000260a3003010c00417269616c000303006f17ff00e70003001200ff00f0020300751aff00840103100000000000ffffff00c0c0c00080808000ff00000080000000ffff00008080000000ff00000080000000ffff00008080000000ff0000008000ff00ff0080008000000e00000026060f0012004d724564
0300080000003401b001760c5503050000000b02b0013401050000000c02a501420b030000001e000400000003010800050000000102ffffff000500000009020000000004000000070103000400000004010d0004000000060101000400000002010200030000001e00040000002e011800040000000201010010000000fb
02c0ff00000000000090010000000000000022417269616c000200040000002d01000024000000320aec016c033a00000022633a5c666f6f5c6261725c62617a2e646f635c73756d6d6172797461626c655c636861727420355c73657269657320315c706f696e74203722040000002e011a0015000000fb02c0ff00000000
0000bc02000000000000001254696d6573204e657720526f6d616e000000040000002d01010004000000f00100000d000000320aec01f3020c0000006c70737a557365724e616d650e00000026060f0012004d7245640300080000003c03ca02b7054d0307000000fc020000ffffff00ffff040000002d0100000400000002
01020008000000fa0206000000000000000000040000002d010200090000001c06900090004d03b705ca023c03040000002e011800040000000201010010000000fb02c0ff00000000000090010000000000000022417269616c00e853040000002d01030004000000f001010010000000320a24036c0312000000633a5c66
6f6f5c6261725c62617a2e646f630e00000026060f001200ffffffff00000800000088032002f1098a020b00000026060f000c004d7245640100020000000000120000002503070090032b02a00365027504650293048202b10465029e056502af0528020b00000026060f000c004d72456401000200000000001200000025
030700bc052b02dd05650295076502b3078202cb076502c9096502e90928020a00000026060f000a00ffffffff0100000000001b000000320a1e030006270000002273756d6d6172797461626c655c636861727420355c73657269657320315c706f696e7420372200040000002e011a0015000000fb02c0ff000000000000
bc02000000000000001254696d6573204e657720526f6d616e000000040000002d01010004000000f00103000e000000320a2403eb020e0000006d6f6e696b65722d736f2d666172040000002e0118000f000000320a1e039c0a1000000072656d61696e696e672073756666697810000000fb021000070000000000bc0200
0000000102022253797374656d0005040000002d01030004000000f001010008000000fa02050000000000ffffff00040000002d01010004000000f001020007000000fc020100000000000000040000002d01020004000000f0010000040000002701ffff040000002701ffff0300000000006e6f7420646566696e652074
68652073686f7274637500}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar \b\f4\fs20 Figure {\*\bkmkstart ParseMoniker}{\field{\*\fldinst seq figure}{\fldrslt {\lang1024 5}}}{\*\bkmkend ParseMoniker}. Intermediate stage in parsing a display name into a moniker.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\i inductive step} asks the moniker-so-far using {\cs58\f5\fs16\lang1024 IMoniker::ParseDisplayName}
 to consume as much as it would like of the remaining suffix and return the corresponding moniker and the new suffix. The moniker is composed onto the end of the existing moniker-so-far, and the process repeats.
\par Implementations of {\cs58\f5\fs16\lang1024 IMoniker::ParseDisplayName}
 vary in exactly where the knowledge of how to carry out the parsing is kept. Some monikers by their nature are only used in particular kinds of containers. It is likely that these monikers themselves have the knowledge of the legal display name syntax wi
thin the objects that they themselves denote, and so they can carry out the processes completely within {\cs58\f5\fs16\lang1024 IMoniker\-::\-Parse\-DisplayName}. The common case, however, is that the moniker-so-far is generic in the sense that is not spe
cific to one kind of container, and thus cannot know the legal syntax for elements within the con\-tain\-
er. File monikers are an example of these, as are Item Monikers. These monikers in general employ the following strategy to carry out parsing. First, the moniker connects to the {\i class} of object that it currently denotes, asking for {
\cs58\f5\fs16\lang1024 IParseDisplayName} interface. If that suc\-ceeds, then it uses the obtained interface pointer to attempt to carry out the parse. If the class refuses to handle the parse, then the moniker binds to the {\i object }it de
notes, asking again for {\cs58\f5\fs16\lang1024 IParseDisplayName} interface. If this fails, then the parse is aborted.
\par The effect is that ultimately an object always gets to be in control of the syntax of elements contained inside of itself. It\rquote 
s just that objects of a certain nature can carry out parsing more efficiently by having a moniker or their class do the parsing on their behalf.
\par Notice that since {\cs58\f5\fs16\lang1024 MkParseDisplayName }knows nothing of the legal syntax of display names (with the exception of the initial parsing step; see below). It is of course beneficial to the user that display names in differ
ent contexts not have gratuitously different syntax. While there some rare situations which call for special purpose syntax, it is recommended that, unless there are compelling reasons to do otherwise, the syntax for display names should be the same as or
 similar to the native file system syntax; the aim is to build on user familiarity. Most important about this are the characters allowed for the delimiters used to separate the displ
ay name of one of the component monikers from the next. Unless through some special cir\-cum\-stances they have {\i very} good reason not to, all moniker imple\-mentations should use inter-moniker delimiters from the character set:
\par \pard \qj\fi-1627\li2347\sa60\widctlpar\tx1890 {\f5 \\   /   :   !  [
\par }\pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 
Standardization in delimiters promotes usability. But more importantly, notice that the parsing algorithm has the characteristic that a given container consumes as much as it can of the string being parsed before passing the remainder on to the designated
 object inside themselves. If the delimiter expected of the next-to-be-generated mon\-iker in fact forms (part of) a valid display name in the container, then the container\rquote s parse will consume it!
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Monikers and objects which have implementations on more than one platform (such as File Monikers) should always parse according to the syntax of the platform on which they are currently running. When asked for their display name, monikers should also show
 delimiters appropriate to the platform on which they are currently running, even if they were originally created on a different platform. In total, users will always deal with delimiters appropriate for the host platform.
\par The {\i initial step} of the parsing process is a bit tricky, in that it needs to somehow determine the initial moniker-so-far. {\cs58\f5\fs16\lang1024 MkParseDisplayName}
 is omniscient with respect to the syntax with which the display name of a moniker may legally begin, and it uses this omniscience to choose the initial moniker.
\par The initial moniker is determined by trying the following strategies in order, using the first to succeed.
\par \pard \qj\fi-360\li1080\sa60\widctlpar 1.\tab All prefixes of {\cs58\f5\fs16\lang1024 lpszDisplayName} that consist solely of valid file name characters are consulted as file monikers in the Running Object Table.
\par 3.\tab The file system is consulted to check if a prefix of {\cs58\f5\fs16\lang1024 lpszDisplayName}
 matches an existing file. Said file name may be drive absolute, drive relative, working-directory relative, or begin with an explicit network share name. This is a common case.
\par 4.\tab If the initial character of {\cs58\f5\fs16\lang1024 lpszDisplayName} is {\cs58\f5\fs16\lang1024 \lquote @\rquote }, then the maximal string immediately fol\-low\-ing the {\cs58\f5\fs16\lang1024 \lquote @\rquote } which conforms to the legal {
\cs58\f5\fs16\lang1024 ProgID} syntax{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } Letters, numbers, or periods; must not begin with a number. See the appendix.}}
 is determined. This is converted to a {\cs58\f5\fs16\lang1024 CLSID} with {\cs58\f5\fs16\lang1024 CLSIDFromProgID}. An instance of this class is asked in turn for {\cs58\f5\fs16\lang1024 IParseDisplayName} interface; the {\cs58\f5\fs16\lang1024 
IParseDisplayName} interface so found is then given the whole string (starting with the {\cs58\f5\fs16\lang1024 \lquote @\rquote }) to continue parsing.
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.1.18\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::ParseDisplayName{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:ParseDisplayName}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::ParseDisplayName(pbc, pmkToLeft, lpszDisplayName, pcchEaten, ppmkOut)
\par \pard\plain \qj\sa60\sl-220\slmult0\widctlpar \f4\fs20 Given that the composite moniker {\f5\fs16 (}{\cs58\f5\fs16\lang1024 pmkToLeft}{\f5\fs16  }{\f5\dn6 {\field{\*\fldinst SYMBOL 176 \\f "Symbol" \\s 10}{\fldrslt\f1\fs20}}}{\f5\fs16  (the receiver))}
 is the moniker which has so far been parsed, parse as much of the remaining tail as is appropriate. In general, the maximal prefix of {\cs58\f5\fs16\lang1024 lpszDisplayName} which is syntactically valid and which currently {\i 
represents an existing object }should be consumed.
\par The main loop of {\cs58\f5\fs16\lang1024 MkParseDisplayName} finds the next piece moniker piece by calling this function on the moniker-so-far that it holds on to, passing {\cs58\f5\fs16\lang1024 NULL} through {\cs58\f5\fs16\lang1024 pmkToLeft}
. In the case that the moniker-so-far is a generic composite, this is forwarded by that composite onto its last piece, passing the prefix of the composite to the left of the piece in {\cs58\f5\fs16\lang1024 pmkToLeft}.
\par {\cs58\f5\fs16\lang1024 lpszDisplayName} is the as-yet-to-be-parsed tail of the display name. This function is to consume as much of it as is appropriate for a name within the object identified by {\f5\fs16 (pmkToLeft }{\f5\dn6 {\field{\*\fldinst SYMBOL
 176 \\f "Symbol" \\s 10}{\fldrslt\f1\fs20}}}{\f5\fs16  (the receiver))} and re\-turn the corre\-sponding moniker.
\par \pard \qj\sa60\widctlpar Some moniker classes will be able to handle this parsing internally to themselves since they are designed to designate only certain kinds of objects. Others will need to bind to the object that they designate in or\-
der to accomplish the parsing process. As is usual, these objects should not be released by {\cs58\f5\fs16\lang1024 IMoniker::\-Parse\-DisplayName} but instead should be transferred to the bind context for release at a later time.
\par If a syntax error occurs, then {\cs58\f5\fs16\lang1024 NULL} should be returned through {\cs58\f5\fs16\lang1024 ppmkOut} and {\f5\fs16 MK_E_SYNTAX} returned. In addition, the number of characters of the display name that were {\i successfully}
 parsed should be returned through {\cs58\f5\fs16\lang1024 pcchEaten}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\*\bkmkstart BindCtxDefinition}{\*\bkmkstart ItemMonikerClass}Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pbc\tab IBindCtx*}\tab the binding context in which to accumulate bound objects.
\par {\cs58\f5\fs16\lang1024 pmkToLeft\tab IMoniker*}\tab the moniker to the left of this one in the so-far-parsed display name.
\par {\cs58\f5\fs16\lang1024 lpszDisplayName}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the display name to be parsed.
\par {\cs58\f5\fs16\lang1024 pcchEaten\tab ULONG*}\tab the number of characters of the input name that this parse consumed.
\par {\cs58\f5\fs16\lang1024 ppmkOut\tab IMoniker*}\tab the resulting moniker.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_SYNTAX}{\i .}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.1.19\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IMoniker::IsSystemMoniker{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IMoniker\:functions\:IsSystemMoniker}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IMoniker::IsSystemMoniker(pdwMksys){\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }
 This function is a member of IMoniker interface rather than an independent API function in order that future revisions of this function can be correctly correlated with revisions to system moniker classes.}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Answer as to whether this moniker is a type of moniker whose particular implementation semantics are conceptually important to the binding process. The values returned through {\cs58\f5\fs16\lang1024 pdwMksys}
 are taken from the following enumeration:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef enum tagMKSYS \{
\par \tab MKSYS_NONE = 0,
\par \tab MKSYS_GENERICCOMPOSITE = 1,
\par \tab MKSYS_FILEMONIKER = 2,
\par \tab MKSYS_ANTIMONIKER = 3,
\par \tab MKSYS_ITEMMONIKER = 4,
\par \tab MKSYS_POINTERMONIKER = 5,
\par \tab \} {\b MKSYS}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 
MKSYS}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 All user implementations of this function must simply return {\f5\fs16 MKSYS_NONE} through {\cs58\f5\fs16\lang1024 pdwMksys}. {\cs58\f5\fs16\lang1024 IMon\-i\-ker\-::\-GetClassID} (see {
\cs58\f5\fs16\lang1024 IPersist}) can be used instead by non-system monikers to check for the presence of their own \ldblquote special\rdblquote  moniker on the right in {\cs58\f5\fs16\lang1024 IMoniker::ComposeWith}. Alternatively, use {
\cs58\f5\fs16\lang1024 QueryInterface} to test for the presence of your own private interface.
\par New values of this enumeration may be defined in the future; caller\rquote 
s of this function should be aware of this fact and should therefore explicitly test against known return values that they care about (rather than, for example, assuming that if the returned value is not one of the values listed here then it\rquote 
s the other).
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The returned value is {\i not} a bitfield value; rather it is an integer.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pdwMksys}\tab {\cs58\f5\fs16\lang1024 DWORD*}\tab the place at which the result is to be returned. May not be {\cs58\f5\fs16\lang1024 NULL}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK}
\par {\pntext\pard\plain\b\i\fs22 11.2.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IParseDisplayName interface
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.2.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IParseDisplayName::ParseDisplayName{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 IParseDisplayName\:functions\:ParseDisplayName}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IParseDisplayName::ParseDisplayName(pbc, lpszDisplayName, pcchEaten, ppmkOut)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This is the single function in the {\cs58\f5\fs16\lang1024 IParseDisplayName} interface:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IParseDisplayName }
: IUnknown \{ 
\par \tab HRESULT\tab {\b ParseDisplayName}(pbc, lpszDisplayName, pcchEaten, ppmkOut);
\par \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Its semantics and parameters are as described in {\cs58\f5\fs16\lang1024 IMoniker::ParseDisplayName}.
\par {\pntext\pard\plain\b\i\fs22 11.2.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 IBindCtx{\*\bkmkend BindCtxDefinition} interface
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The bind context parameter passed to many of the {\cs58\f5\fs16\lang1024 IMoniker} operations serves a few purposes. 
\par Its primary purpose is to accumulate the set of objects that get bound during an operation but which should be re\-
leased when the operation is complete. This is particularly useful in generic composites: using the bind context in this way avoids binding an object, releasing it, only to have it bound again when the operation moves on to another piece of the composite.

\par Another purpose of the bind context is to pass a group of pa\-rameters which do not change as an operation moves from one piece of a generic composite to another. These are the {\i binding} {\i options}
, and are described below. Some of these binding options have a related re\-turn value in certain error conditions; the bind con\-text provides the means by which they can be returned. 
\par The bind context is also the only means through which moniker operations should access contextual infor\-ma\-tion about their environment. There should be no direct calls in moniker implementations to API func\-
tions that query or set state in the environment; all such calls should instead funnel through the bind con\-
text. Doing this allows for future enhancements which can dynamically modify binding behavior. The predefined piece of contextual information that moniker operations need to access is the Running Object Table; monikers should alwa
ys access this table indirectly though {\cs58\f5\fs16\lang1024 IBindCtx::GetRunning\-Object\-Table}, rather than using the global function {\cs58\f5\fs16\lang1024 GetRunningObjectTable}. {\cs58\f5\fs16\lang1024 IBindCtx}
 interface allows for future extensions to the passed-in contextual information in the form the ability to maintain a string-keyed table of objects. See {\cs58\f5\fs16\lang1024 IBindCtx::RegisterObjectParam} and related functions.
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b IBindCtx}
{\pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 IBindCtx}}}
 : IUnknown \{ 
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab HRESULT\tab {\b RegisterObjectBound}(punk);

\par \tab virtual\tab HRESULT\tab {\b RevokeObjectBound}(punk);
\par \tab virtual\tab HRESULT\tab {\b ReleaseBoundObjects}();
\par \pard \s57\fi-720\li1080\ri-720\sb60\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab HRESULT\tab {\b SetBindOptions}
(pbindopts);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab HRESULT\tab {\b GetBindOptions}(pbindopts);

\par \pard \s57\fi-720\li1080\ri-720\sb60\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab HRESULT\tab {\b GetRunningObjectTable}
(pprot);
\par \pard \s57\fi-720\li1080\ri-720\sb60\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab HRESULT\tab {\b 
RegisterObjectParam}(lpszKey, punk);
\par \pard \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab virtual\tab HRESULT\tab {\b GetObjectParam}
(lpszKey, ppunk);
\par \tab virtual\tab HRESULT\tab {\b EnumObjectParam}(ppenum);
\par \tab virtual\tab HRESULT\tab {\b RevokeObjectParam}(lpszKey);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par 
\par typedef struct \{
\par \tab DWORD\tab cbStruct;\tab \tab \tab \tab // the size in bytes of this structure. ie: sizeof(BINDOPTS).
\par \tab DWORD\tab grfFlags;
\par \tab DWORD\tab grfMode;
\par \tab DWORD\tab dwTickCountDeadline;
\par \tab \} {\b BINDOPTS};
\par 
\par HRESULT {\b CreateBindCtx}(reserved, ppbc);
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.3.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::RegisterObjectBound{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 IBindCtx\:functions\:RegisterObjectBound}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::RegisterObjectBound(punk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Remember the passed object as one of the objects that has been bound during a moniker operation and which should be released when it is complete overall. Calling this function causes the binding context to create an additional reference to the passed-in o
bject with {\cs58\f5\fs16\lang1024 AddRef}; the caller is still required to {\cs58\f5\fs16\lang1024 Release} its own copy of the pointer independently.
\par The effect of calling this function twice with the same object is cumulative, in that it will require two {\cs58\f5\fs16\lang1024 IBindCtx::RevokeObjectBound} calls to completely remove the registration of the object within the binding context.
\par \pard\plain \s48\fi-2520\li2520\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1260 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2520\li2520\sa58\keepn\widctlpar\tx1260 \f4\fs20 {\cs58\f5\fs16\lang1024 punk}\tab {\cs58\f5\fs16\lang1024 IUnknown*}\tab the object which is being registered as needing to be released.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK}{\i .}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.3.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::RevokeObjectBound{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 IBindCtx\:functions\:RevokeObjectBound}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::RevokeObjectBound(punk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This function undoes the effect of {\cs58\f5\fs16\lang1024 IBindCtx::RegisterObjectBound}: it removes the object from the set that will be released when the bind context in {\cs58\f5\fs16\lang1024 
IBindCtx::ReleaseBoundObjects} (actually removes one occurrence of it). This function is likely to be rarely called, but is included for completeness.
\par \pard\plain \s48\fi-2520\li2520\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1260 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2520\li2520\sa58\keepn\widctlpar\tx1260 \f4\fs20 {\cs58\f5\fs16\lang1024 punk}\tab IUnknown*\tab the object which no longer needs to be released.
\par return value\tab HRESULT\tab {\f5\fs16 S_OK, MK_E_NOTBOUND, E_OUTOFMEMORY}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.3.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::ReleaseBoundObjects{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IBindCtx\:functions\:ReleaseBoundObjects}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::ReleaseBoundObjects()
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Releases all the objects currently registered with the bind context though {\cs58\f5\fs16\lang1024 IBindCtx::RegisterObjectBound}.
\par This function is (conceptually) called by the implementation of {\cs58\f5\fs16\lang1024 IBindCtx::Release}.
\par \pard\plain \s48\fi-2520\li2520\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1260 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2520\li2520\sa58\keepn\widctlpar\tx1260 \f4\fs20 return value\tab HRESULT\tab {\f5\fs16 S_OK}{\i 
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.3.4\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::SetBindOptions{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IBindCtx\:functions\:SetBindOptions}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::SetBindOptions(pbindopts)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Store in the bind context a block of parameters that will apply to later {\cs58\f5\fs16\lang1024 IMoniker}
 operations using this bind context. Using block of parameters like this is just an alternative way to pass parameters to an operation. We distinguish the parameters we do for conveyance by this means because 1) they are common to most {
\cs58\f5\fs16\lang1024 IMoniker} operations, and 2) these parameters do not change as the operation moves from piece to piece of a generic composite.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pbindopts}\tab {\cs58\f5\fs16\lang1024 BINDOPTS*}\tab the block of parameters to set. These can later be retrieved with {\cs58\f5\fs16\lang1024 IBindCtx::Get\-
Bind\-Options}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_OUTOFMEMORY}
\par \pard\plain \qj\sb240\sa60\keepn\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 BINDOPTS} is defined as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef struct tagBINDOPTS \{

\par \tab DWORD\tab cbStruct;\tab \tab \tab \tab // the size in bytes of this structure. ie: sizeof(BINDOPTS).
\par \tab DWORD\tab grfFlags;
\par \tab DWORD\tab grfMode;
\par \tab DWORD\tab dwTickCountDeadline;
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \} {\b BINDOPTS}{\pard\plain 
\s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f9\fs12\lang1024 {\xe {\f9\fs12 BINDOPTS}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The members of this structure have the following meanings:
\par \pard\plain \s48\fi-720\li720\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f4\fs20 Member\tab Description
\par \pard\plain \s49\fi-720\li720\sa58\keepn\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 grfFlags}\tab \line A group of Boolean flags. Legal values that may be {\cs58\f5\fs16\lang1024 OR}\rquote d together are the taken from the enumeration {\f5\fs16 BINDFLAGS
}; see below. Moniker implementations must ignore any set-bits in this field that they do not understand.
\par {\cs58\f5\fs16\lang1024 grfMode}\tab \line A group of flags that indicates the intended use that the caller has towards the object that he ultimately receives from the associated moniker binding operation. Constants for this member are taken from the {
\f5\fs16 STGM} enumeration.
\par \tab When applied to the {\cs58\f5\fs16\lang1024 IMoniker::BindToObject} operation, by far the most significant flag values are: {\f5\fs16 STGM_READ},{\f5\fs16  STGM_WRITE}, and {\f5\fs16 STGM_READWRITE}
. It is possible that some binding operations might make use of the other flags, particularly {\f5\fs16 STGM_DELETEONRELEASE} or {\f5\fs16 STGM_CREATE}, but such cases are quite esoteric.
\par \tab When applied to the {\cs58\f5\fs16\lang1024 IMoniker::BindToStorage} operation, {\i most} {\f5\fs16 STGM} values are potentially useful here.
\par \tab The default value for {\cs58\f5\fs16\lang1024 grfMode} is {\f5\fs16 STGM_READWRITE | STGM_SHARE_EXCLUSIVE}.
\par {\cs58\f5\fs16\lang1024 dwTickCountDeadline}\tab \line This is an indication of when the caller would like the operation to complete. Having this parameter allows the caller to approximately and heuristically bound the execution time of an oper\-a\-
tion when it is more important that the operation perform quickly than it is that it per\-form accurately. Most often, this capability is used with {\cs58\f5\fs16\lang1024 IMoniker::\-Get\-Time\-Of\-Last\-Change}
, as was previously described, though it can be usefully applied to other operations as well. 
\par \tab This 32-bit unsigned value is a time in milliseconds on the local clock maintained by the {\cs58\f5\fs16\lang1024 Get\-Tick\-Count} function. A value of zero indicates \ldblquote no deadline;\rdblquote 
 callers should therefore be careful not to pass to the bind context a value of zero that was coincidentally obtained from {\cs58\f5\fs16\lang1024 GetTickCount}
. Clock wrapping is also a problem. Thus, if the value in this variable is less than the current time by more than 2{\fs12\up6 31} milliseconds, then it should be interpreted as indicating a time in the future of its indicated value plus 2{\fs12\up6 32}
 milliseconds.
\par \tab Typical deadlines will allow for a few hundred milliseconds of execution. Each function should try to complete its operation by this time on the clock, or fail with the error {\f5\fs16 MK_E_EXCEEDED\-DEADLINE}
 if it cannot do so in the time allotted. Functions are not {\i required }to be absolutely accurate in this regard, since it is al\-
most impossible to predict how execution might take (thus, callers cannot rely on the operation completing by the deadline), but operations which exceeded their deadline excessively will usually cause intolera
ble user delays in the operation of their callers. Thus, in practice, the use of deadlines is a {\b heuristic }which callers can impose on the execution of moniker operations.
\par \tab If a moniker operation ex\-
ceeds its deadline because a given object or objects that it uses are not running, and if one of these had been running, then the operation would have completed more of its execution, then the monikers of these objects should be
 recorded in the bind context using {\cs58\f5\fs16\lang1024 IBindCtx::RegisterObjectParam} under the parameter names \ldblquote {\cs58\f5\fs16\lang1024 ExceededDeadline}\rdblquote , \ldblquote {\cs58\f5\fs16\lang1024 ExceededDeadline1}\rdblquote , 
\ldblquote {\f5\fs16 ExceededDeadline2}\rdblquote , etc.; use the first name in this series that is currently unused. This approach gives the caller some knowledge as to when to try the oper\-a\-tion again
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 The enumeration {\f5\fs16 BINDFLAGS}, which contains the legal values for the bit-field {\cs58\f5\fs16\lang1024 BINDOPTS::grfFlags}, is defined as follows:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef enum tagBINDFLAGS \{

\par \tab BINDFLAGS_MAYBOTHERUSER = 1,
\par \tab BINDFLAGS_JUSTTESTEXISTENCE = 2,
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \} {\b BINDFLAGS}{\pard\plain 
\s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f9\fs12\lang1024 {\xe {\f9\fs12 BINDFLAGS}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 These flags have the following interpretation.
\par \pard\plain \s48\fi-1080\li1080\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f4\fs20 Value\tab Description
\par \pard\plain \s49\fi-1080\li1080\sa58\keepn\widctlpar \f4\fs20 {\f5\fs16 BINDFLAGS_MAYBOTHERUSER}\line If not present, then the operation to which the bind context containing this parameter is ap
plied should not interact with the user in any way, such to ask for a password for a network volume that needs mounting. If present, then this sort of interaction is permitted. If prohibited from interacting with the user when it otherwise would like to, 
an operation may elect to use a different algorithm that does not require user interaction, or it may fail with the error {\f5\fs16 MK_MUSTBOTH\-ERUSER}.
\par {\f5\fs16 BINDFLAGS_JUSTTESTEXISTENCE}\line If present, indicates that the caller of the moniker operation to which this flag is being applied is not actually interested in having the operation carried out, but only in learning of the opera
tion could have been carried out had this flag not been specified. For example, this flag give the caller the ability to express that he is only interested in finding out whether an object actually exists by using this flag in a {\cs58\f5\fs16\lang1024 
IMoniker::BindToObject} call. Moniker imple\-mentations are free, however, to ignore this possible optimization and carry out the operation in full. Callers, there
fore, need to be able to deal with both cases. See the individual routine descriptions for details of exactly what status is returned.
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.3.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::GetBindOptions{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IBindCtx\:functions\:GetBindOptions}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::GetBindOptions(pbindopts)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the current binding options stored in this bind context. See {\cs58\f5\fs16\lang1024 IBindCtx::SetBindOpts} for a descrip\-tion of the semantics of each option.
\par Notice that the caller provides a {\f5\fs16 BINDOPTS} structure, which is filled in by this routine. It is the caller\rquote s responsibility to fill in the {\cs58\f5\fs16\lang1024 cbStruct} member correctly.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 pbindOpts\tab {\cs58\f5\fs16\lang1024 BINDOPTS*}\tab the structure of binding options which is to be filled in.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_UNEXPECTED}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.3.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::GetRunningObjectTable{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IBindCtx\:functions\:GetRunningObjectTable}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::GetRunningObjectTable(pprot)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return access to the Running Object Table relevant to this binding process. Moniker implementations should get access to the Running Object Table using this function rather than the global API {
\cs58\f5\fs16\lang1024 GetRunning\-Object\-Table}. The appropriate Running Object Table is determined implicitly at the time the bind context is created.
\par \pard\plain \s48\fi-3240\li3240\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1080 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-3240\li3240\sa58\keepn\widctlpar\tx1080 \f4\fs20 {\cs58\f5\fs16\lang1024 pprot}\tab {\cs58\f5\fs16\lang1024 IRunningObjectTable**}\tab the place to return the running object table.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_OUTOFMEMORY, E_UNEXPECTED}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.3.7\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::RegisterObjectParam{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IBindCtx\:functions\:RegisterObjectParam}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::RegisterObjectParam(lpszKey, punk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Register the given object pointer under the name {\cs58\f5\fs16\lang1024 lpszKey} in the internally-maintained table of object poin\-
ters. The intent of this table is that it be used as an extensible means by which contextual information can be passed to the binding process. String keys are compared case-sensitive.
\par Like {\cs58\f5\fs16\lang1024 IBindCtx::RegisterObjectBound}, this function creates an additional reference to the passed-in object using {\cs58\f5\fs16\lang1024 AddRef}. The effect of calling this function a second time with the same {
\cs58\f5\fs16\lang1024 lpszKey }is to replace in the table the object passed-in the first time.
\par By convention, moniker implementers may freely use object parameters whose names begin with the string representation of the class id of the moniker implementation in question.
\par This facility is also used as means by which various errors can convey information back to the caller. Associated with certain error values are the following object parameters:
\par \pard\plain \s48\fi-2340\li2340\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \f4\fs20 Error\tab Parameters
\par \pard\plain \s49\fi-2340\li2340\sa58\keepn\widctlpar \f4\fs20 {\f5\fs16 MK_E_EXCEEDEDDEADLINE\tab }Parameters named \ldblquote {\cs58\f5\fs16\lang1024 ExceededDeadline}\rdblquote , \ldblquote {\cs58\f5\fs16\lang1024 ExceededDeadline1}\rdblquote , 
\ldblquote {\f5\fs16 ExceededDeadline2}\rdblquote , etc., if they exist, are monikers who appearance as running would make it reasonable for the caller to attempt the binding operation again.
\par {\f5\fs16 E_CLASSNOTFOUND\tab }The parameter named \ldblquote {\cs58\f5\fs16\lang1024 ClassNotFound}\rdblquote , if present, is a moniker to the storage of the object whose class was not able to be loaded in the process of a moniker operation.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 New moniker authors can freely use parameter names that begin with the string form of the {\f5\fs16 CLSID} of their moniker; see {\cs58\f5\fs16\lang1024 StringFromCLSID}().
\par \pard \qj\sa60\keepn\widctlpar The arguments to this function are as follows:
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 lpszKey}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the name under which the object is being registered.
\par {\cs58\f5\fs16\lang1024 punk}\tab {\cs58\f5\fs16\lang1024 IUnknown*}\tab the object being registered.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK,} {\f5\fs16 E_OUTOFMEMORY}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.3.8\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::GetObjectParam{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IBindCtx\:functions\:GetObjectParam}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::GetObjectParam(lpszKey, ppunk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Lookup the given key in the internally-maintained table of contextual object parameters and return the corresponding object, if one exists.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 lpszKey}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the key under which to look for an object.
\par {\cs58\f5\fs16\lang1024 ppunk}\tab {\cs58\f5\fs16\lang1024 IUnknown**}\tab The place to return the object interface pointer. {\cs58\f5\fs16\lang1024 NULL} is returned on failure (along with {\f5\fs16 S_FALSE}).
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, S_FALSE}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.3.9\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::EnumObjectParam{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IBindCtx\:functions\:EnumObjectParam}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::EnumObjectParam(ppenum)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Enumerate the strings which are the keys of the internally-maintained table of contextual object parameters.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppenum}\tab {\cs58\f5\fs16\lang1024 IEnumString**}\tab the place to return the string enumerator. See Chapter 4 for a description of {\cs58\f5\fs16\lang1024 
IEnumString}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_OUTOFMEMORY}
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.3.10\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IBindCtx::RevokeObjectParam{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {IBindCtx\:functions\:RevokeObjectParam}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IBindCtx::RevokeObjectParam(lpszKey)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Revoke the registration of the object currently found under this key in the internally-maintained table of contextual object parameters, if any such key is currently registered.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 lpszKey}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the key whose registration is to be revoked.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, S_FALSE}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.3.11\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CreateBindCtx{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CreateBindCtx}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CreateBindCtx(reserved, ppbc)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Allocate and initialize a new {\cs58\f5\fs16\lang1024 IBindCtx} using a system-supplied implementation.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 reserved}\tab {\cs58\f5\fs16\lang1024 DWORD}\tab reserved for future use; must be zero.
\par {\cs58\f5\fs16\lang1024 ppbc}\tab {\cs58\f5\fs16\lang1024 IBindCtx*}\tab the place in which to put the new {\cs58\f5\fs16\lang1024 BindCtx}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_OUTOFMEMORY}{\i 
\par {\pntext\pard\plain\b\i\fs22 11.2.4\tab}}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Generic Composite Moniker class
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Recall that in general monikers are a composite list made up of other pieces. All monikers which are a generic composite of other monikers are instances of Generic Composite Moniker class whose imple\-men\-ta\-
tion is provide with COM; there is no need for two Generic Composite Moniker classes.
\par {\*\bkmkstart MonikerImplPerspect}The implementations of Generic Composite {\cs58\f5\fs16\lang1024 IMoniker\-::\-Reduce} and Generic Composite {\cs58\f5\fs16\lang1024 IMoniker\-::\-Bind\-To\-Object}
 are particularly important as they manage the interactions between the various elements of the composite, and as a consequence define the semantics of binding to the moniker as a whole.
\par Generic composite monikers of size zero or of size one are never exposed outside of internal Generic Composite Moniker\- method implementations. From a client perspective, a Generic Composite Moniker always contains at least two elements.
\par {\pntext\pard\plain\b\f5\fs20\lang1024 11.2.4.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CreateGenericComposite{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {CreateGenericComposite}}}{\f5 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CreateGenericComposite(pmkFirst, pmkRest, ppmkComposite)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Allocate and return a new composite moniker. {\cs58\f5\fs16\lang1024 pmkFirst} and {\cs58\f5\fs16\lang1024 pmkRest} are its first and trailing elements respectively. Either of {\cs58\f5\fs16\lang1024 pmkFirst} and {
\cs58\f5\fs16\lang1024 pmkRest} may be a generic composite, or another kind of moniker. Generic com\-po\-sites get flattened into their component pieces before being put into the new composite. This function will be called by implementations of {
\cs58\f5\fs16\lang1024 IMoniker::ComposeWith} when they wish to carry out a generic compose operation.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620\tx2880 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1620\tx2880 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkFirst\tab IMoniker*}\tab the first element(s) in the new composite. May not be {\cs58\f5\fs16\lang1024 NULL}.
\par {\cs58\f5\fs16\lang1024 pmkRest\tab IMoniker*}\tab the trailing element(s) in the new composite. May not be {\cs58\f5\fs16\lang1024 NULL}.
\par {\cs58\f5\fs16\lang1024 ppmkComposite}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab through here is returned the new composite.
\par return value\tab HRESULT\tab {\f5\fs16 S_OK, E_OUTOFMEMORY}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.4.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Generic Composite Moniker\endash IMoniker::Reduce 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Reduction of a generic composite conceptually reduces each of its pieces in a left-to-right fashion and builds up a composite of the result. If any of the pieces of the composite did not reduce to themselves (and thus, the generic composite overall did no
t reduce to itself), then this process is repeated.
\par An optimized implementation of this function might use a more complicated but equivalent algorithm that avoids unnecessarily re-reducing monikers that the composite already knows reduce to themselves.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.4.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Generic Composite Moniker\endash IMoniker::BindToObject
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Binding to a generic composite works in a right-to-left manner. Conceptually, the generic composite merely forwards the bind request onto its last piece, along the way informing that piece of the moniker to its left in the composite. The last piece, if it
 needs to, recursively binds to the object to its left. In practice, binding to a generic composite itself has to handle the recursive call on the left-hand object, as was de\-scribed in {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}.
\par {\*\bkmkend MonikerImplPerspect}{\pntext\pard\plain\b\i\fs22 11.2.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 File Moniker class
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A File Moniker can be thought of as a wrapper for a path name in the native file system. It\rquote s implementa\-tion of {\cs58\f5\fs16\lang1024 IMoniker::GetDisplayName}
, for example, is trivial: it just returns the path. When bound to, it de\-termines the class of the file (using the API {\cs58\f5\fs16\lang1024 GetClassFile} on Win32), makes sure that the appropriate class server is running, then as
ks it to open the file.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.5.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CreateFileMoniker{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CreateFileMoniker}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CreateFileMoniker(lpszPathName, ppmk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
Creates a moniker from the given path name. This path may be an absolute path or a relative path. In the latter case, the resulting moniker will need to be composed onto another File Moniker before it can be bound. In either case, it will often be the cas
e that other monikers are composed onto the end of {\i this} moniker in order to access sub-pieces of the document stored in the file.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1620 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1620 \f4\fs20 {\cs58\f5\fs16\lang1024 lpszPathName}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the path name of the desired file.
\par {\cs58\f5\fs16\lang1024 ppmk\tab IMoniker*}\tab the newly created moniker.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_SYNTAX, E_OUTOFMEMORY}{\i 
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.5.2\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 File Moniker\endash IMoniker::BindToObject
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The class of an object designated by a File Moniker is determined in a platform-specific way. Having found the correct class, File Moniker {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}
 will instantiate it using the interface {\cs58\f5\fs16\lang1024 IPer\-sist\-File::Load }method.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.5.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 File Moniker\endash IMoniker::BindToStorage
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The Win32 implementation of File Moniker supports {\f5\fs16 BindToStorage(..., IID_IStorage, ...)} in the case that the designated file in fact a structured storage. Implementations may also choose to support {
\cs58\f5\fs16\lang1024 IStream }and {\cs58\f5\fs16\lang1024 ILock\-Bytes}.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.5.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 File Moniker\endash IMoniker::GetDisplayName
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 File monikers render their display names according to the syntax of the platform on which they are cur\-
rently found. A File Moniker serialized on one platform then de-serialized on another will possibly have different display names on each platform.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.5.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 File Moniker\endash IMoniker::ParseDisplayName
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 File monikers designate objects that live in files; however, they have no knowledge of the name space con\-tained {\i within} that file. A File Moniker for the path {\cs58\f5\fs16\lang1024 \ldblquote C:\\FOO.XLS
\rdblquote }, for example, knows how to connect to the spreadsheet that is the file, but it does not know anything of the syntax of range-address expression lan
guage of the sheet. Consequently, when asked to parse a display name, a File Moniker needs to del\-e\-gate this operation to the class object that it designates. For this purpose it uses the {\cs58\f5\fs16\lang1024 IParse\-Dis\-play\-Name}{\pard\plain 
\qj\sa60\widctlpar \v\f9\fs12 {\xe {\f9\fs12 IParseDisplayName}}} interface. If the class refuses to handle the parse, the parsing is delegated to the object.
\par {\pntext\pard\plain\b\i\fs22 11.2.6\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Item Moniker class{\*\bkmkend ItemMonikerClass}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Item\- monikers provide a bridge from the generality of {\cs58\f5\fs16\lang1024 IMoniker} interface to the simple and common situ\-
ation in which an object which is a container of other objects also provides a space of names for those objects. Examples include spreadsheet applications which contain \ldblquote named ranges,\rdblquote  various word-processing appli
cations which support \ldblquote bookmarks.\rdblquote 
\par Item Moniker is a {\i class}, not a {\i interface}; that is, it is an {\i implementation }of {\cs58\f5\fs16\lang1024 IMoniker} provided by COM library,{\i  }not an interface that others implement. This implementa\-tion supports {\cs58\f5\fs16\lang1024 
IMoniker} inter\-face by converting {\cs58\f5\fs16\lang1024 IMoniker} invocations into a series of calls on part of the interface {\cs58\f5\fs16\lang1024 IOleItemContainer}
. The implication is that many object implementers do not have to deal much with monikers: they can deal simply with \ldblquote items\rdblquote  in a string form, then wrap them in an Item Moniker as needed to sup\-port other interfaces.
\par A client creates an Item Moniker using {\cs58\f5\fs16\lang1024 CreateItemMoniker}. When this new moniker is composed onto the end of a moniker that binds to an {\cs58\f5\fs16\lang1024 IOleItemContainer}, the resulting composite moniker will bind to the ap
\-p\-rop\-riate contained object.
\par \pard \qj\sa60\keepn\widctlpar The following is the {\cs58\f5\fs16\lang1024 IOleItemContainer} interface used by Item Monikers:
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b 
IOleItemContainer} : IOleContainer \{ 
\par {\b \tab }virtual\tab HRESULT\tab {\b GetObject}(lpszItem, dwSpeedNeeded, pbc, riid, ppvObject);
\par \tab virtual\tab HRESULT\tab {\b GetObjectStorage}(lpszItem, pbc, riid, ppvStorage);
\par \tab virtual\tab HRESULT\tab {\b IsRunning}(lpszItem);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.6.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CreateItemMoniker{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CreateItemMoniker}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CreateItemMoniker(lpszDelim, lpszItem, ppmk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Allocate and return a new Item Moniker. It is intended that the resulting moniker be then composed onto the end of a second moniker which binds to something that supports {\cs58\f5\fs16\lang1024 IOleItemContainer}
 interface. The result\-ing composite moniker when bound will ex\-tract the object of the indicated name from within this con\-tainer.
\par {\cs58\f5\fs16\lang1024 lpszItem} is the item name which will be later passed to {\cs58\f5\fs16\lang1024 IOleItemContainer::GetObject}. {\cs58\f5\fs16\lang1024 lpszDelim} is simply an\-other string that will prefix {\cs58\f5\fs16\lang1024 lpszItem}
 in the display name of the Item Moniker.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 See also {\cs58\f5\fs16\lang1024 IOleItemContainer::IsRunning}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 lpszDelim}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab a string that will prefix {\cs58\f5\fs16\lang1024 lpszItem}
 in the display name of this moniker. Often an exclamation mark: \ldblquote !\rdblquote . See also the discussion of syntax in {\cs58\f5\fs16\lang1024 MkParseDisplayName}.
\par {\cs58\f5\fs16\lang1024 lpszItem}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the item name to pass to {\cs58\f5\fs16\lang1024 IOleItemContainer::GetObject}.
\par {\cs58\f5\fs16\lang1024 ppmk}\tab {\cs58\f5\fs16\lang1024 IMoniker**}\tab the place to put the new Item Moniker.
\par return code\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_OUTOFMEMORY}\tab 
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.6.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Item Moniker\endash IMoniker::BindToObject
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Item monikers merely require {\cs58\f5\fs16\lang1024 IOleItemContainer} interface of the object to their left, which they obtain by invoking {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}
 on the moniker of the object to their left. Once they have the container, they merely invoke {\cs58\f5\fs16\lang1024 IOleItemContainer::GetObject} with the internally stored item name.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.6.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IOleItemContainer::GetObject{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 IOleItemContainer\:functions\:GetObject}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IOleItemContainer::GetObject(lpszItem, dwSpeedNeeded, pbc, riid, ppvObject)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This method returns the object within this container specified by {\cs58\f5\fs16\lang1024 lpszItem}.{\cs58\f5\fs16\lang1024 
\par dwSpeedNeeded} is an indication of how willing the caller is to wait to get to the object. This value is set by the implementation of Item Moniker; the value it uses is derived from the {\cs58\f5\fs16\lang1024 dwTickCountDeadline}
 parameter in the Bind Context that it receives. {\cs58\f5\fs16\lang1024 dwSpeedNeeded }is one of the following values:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef enum tagBINDSPEED \{
\par \tab BINDSPEED_INDEFINITE\tab = 1,\tab // the caller is willing to wait indefinitely 
\par \tab BINDSPEED_MODERATE\tab = 2,\tab // the caller is willing to wait a moderate amount of time.
\par \tab BINDSPEED_IMMEDIATE\tab = 3,\tab // the caller is willing to wait only a very short time
\par \tab \} {\b BINDSPEED}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {
\fs12 BINDSPEED}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 If {\f5\fs16 BINDSPEED_IMMEDIATE}
 is specified, then the object should be returned only if it is already running or if it is a pseudo-object (an object internal to the item container, such as a cell-range in a spreadsheet or a char\-acter-range in a word processor); other\-wise, {
\f5\fs16 MK_E_EXCEEEDEDDEADLINE} should be returned. {\f5\fs16 BIND\-SPEED\-_MODERATE} would include those things indicated by {\f5\fs16 BINDSPEED_IMMEDIATE}
, plus, perhaps, those objects which are always running when the container is running and has them loaded: in this case, {\i load} (not load & run) the designated object, ask if it is running, and return it if so; otherwise, fail with {\f5\fs16 
MK_E_EXCEEEDED\-DEAD\-LINE} as before. {\f5\fs16 BIND\-SPEED\-_INDEFINITE} indicates that time is of no concern to the caller.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The actual bind context parameter is also here passed in {\cs58\f5\fs16\lang1024 pbc} for the use of more sophisticated containers. Less sophisticated containers can simply ignore this and look at {
\cs58\f5\fs16\lang1024 dwSpeedNeeded} instead. In effect, what the implementation of Item Moniker does is convert the deadline in the bind context into an appropriate {\cs58\f5\fs16\lang1024 dwSpeedNeeded}
, in the hope that the latter is easier to take a decision on for most containers.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 lpszItem}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the item in this container that should be bound to.
\par {\cs58\f5\fs16\lang1024 dwSpeedNeeded}\tab {\cs58\f5\fs16\lang1024 DWORD}\tab a value from the enumeration {\f5\fs16 BINDSPEED}. See above.
\par {\cs58\f5\fs16\lang1024 pbc}\tab {\cs58\f5\fs16\lang1024 IBindCtx*}\tab the actual deadline parameter involved in this binding operation. For the use of more sophisticated containers. Most can ignore this, and instead use {\cs58\f5\fs16\lang1024 
dwSpeedNeeded}.
\par {\cs58\f5\fs16\lang1024 riid}\tab {\cs58\f5\fs16\lang1024 REFIID}\tab the interface with which a connection to that object should be made.
\par {\cs58\f5\fs16\lang1024 ppvObject}\tab {\cs58\f5\fs16\lang1024 void**}\tab the bound-to object is returned here.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_EXCEEEDEDDEADLINE, MK_E_NOOBJECT, E_NOINTERFACE, E_OUTOFMEMORY}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.6.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Item Moniker\endash IMoniker::BindToStorage
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 For storage binding, Item Monikers merely require {\cs58\f5\fs16\lang1024 IOleItemContainer} interface of the object to their left. The implementation of Item Moniker {\cs58\f5\fs16\lang1024 IMoniker::BindToStorage}
 binds to the object to its left using {\cs58\f5\fs16\lang1024 IOle\-Item\-Contain\-er} in\-terface, then invokes {\cs58\f5\fs16\lang1024 IOleItemContainer::GetObjectStorage} with the internally stored item name.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.6.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IOleItemContainer::GetObjectStorage{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 IOleItemContainer\:functions\:GetObjectStorage}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IOleItemContainer::GetObjectStorage(lpszItem, pbc, riid, ppvStorage)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 If {\cs58\f5\fs16\lang1024 lpszItem}
 designates an item in this container that has an independently identifiable piece of storage (such as does an embedded object), then return access to that storage using the indicated interface.
\par {\cs58\f5\fs16\lang1024 pbc} is the bind context as received by the Item Moniker {\cs58\f5\fs16\lang1024 IMoniker::BindToStorage} call. Most container imple\-men\-ta\-
tions can simply ignore this value; it is passed for the benefit for more sophisticated contain\-ers.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 lpszItem\tab LPSTR}\tab the item access to whose storage is being requested.
\par {\cs58\f5\fs16\lang1024 pbc\tab IBindCtx*}\tab as in {\cs58\f5\fs16\lang1024 IOleItemContainer::GetObject}. Can be ignored by most containers.
\par {\cs58\f5\fs16\lang1024 riid\tab REFIID}\tab the interface by which the caller wishes to access that storage. Often {\cs58\f5\fs16\lang1024 IID_IStorage} or {\cs58\f5\fs16\lang1024 IID_IStream} are used.
\par {\cs58\f5\fs16\lang1024 ppvStorage}\tab {\cs58\f5\fs16\lang1024 void**}\tab the place to return the access to the storage
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_EXCEEDEDDEADLINE, MK_E_NOOBJECT, E_OUTOFMEMORY, E_NOINTERFACE, MK_E_NOSTORAGE}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.6.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IOleItemContainer::IsRunning{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 IOleItemContainer\:functions\:IsRunning}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IOleItemContainer::IsRunning(lpszItem)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Answer whether the given item in this item container is in fact running or not. See {\cs58\f5\fs16\lang1024 IMoniker::IsRunning} for a sketch of how this function is used in Item Monikers.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 lpszItem}\tab {\cs58\f5\fs16\lang1024 LPSTR}\tab the item access to whose running status is being requested.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, S_FALSE, MK_E_NOOBJECT}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.6.7\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Item Moniker\endash IMoniker::ParseDisplayName
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Item\~Moniker {\cs58\f5\fs16\lang1024 IMoniker::ParseDisplayName} uses {\cs58\f5\fs16\lang1024 IParseDisplayName} in the same way as a File Moniker does. Note that it requests this interface from a {\i 
different object }than the one that supplies the {\cs58\f5\fs16\lang1024 IOleItemContainer} interface used in {\cs58\f5\fs16\lang1024 IMoniker::BindToObject}, etc.: it asks for {\cs58\f5\fs16\lang1024 IOleItemContainer}
 of the object designated by the moniker to its left, whereas it asks for {\cs58\f5\fs16\lang1024 IParseDisplayName} of the object that {\i it }(the Item Moniker) designates.
\par {\pntext\pard\plain\b\i\fs22 11.2.7\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Anti Moniker class{\*\bkmkstart xxx}{\*\bkmkend xxx}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An Anti Moniker is a moniker that when composed onto the end of a generic composite moniker removes the last piece. Composing an Anti Moniker onto the end of another kind of moniker should, generally, anni\-hil\-
ate the whole other moniker.
\par Being composed onto the end of another moniker is pretty much the only interesting thing one can do to an anti-moniker: they cannot be bound, their display name is useless, etc. They exist to support imple\-men\-ta\-\-tions of {\cs58\f5\fs16\lang1024 
IMoniker::Inverse}; see that function for usage scenarios.
\par Moniker implementations that use Anti Monikers as inverses should check for Anti Monikers on the right in their imple\-mentations of {\cs58\f5\fs16\lang1024 IMoniker::\-ComposeWith} and collapse down to nothing if so.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.7.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 CreateAntiMoniker{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CreateAntiMoniker}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CreateAntiMoniker(ppmk)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Create and return a new anti-moniker.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppmk}\tab {\cs58\f5\fs16\lang1024 IMoniker**}\tab the place to return the new anti-moniker
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_OUTOFMEMORY}
\par {\pntext\pard\plain\b\i\fs22 11.2.8\tab}\pard\plain \s3\ri2160\sb180\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Pointer Moniker class
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A pointer moniker is a kind of moniker that wraps an existing object pointer in a moniker so that it may participate as a piece in the moniker binding process. Think of pointers as a referencing mechanism into the 
\ldblquote active space:\rdblquote  a process\rquote s memory. Most moniker implementations are by contrast references into \ldblquote passive space:\rdblquote 
 the representation of an object on disk. Pointer monikers provide a means by which a a given use of a moniker can transparently reference {\i either} active {\i or} passive space.
\par \pard \qj\sa60\keepn\widctlpar {\f8 Implementations of functions in }{\cs58\f5\fs16\lang1024 IMoniker}{\f8  interface for Pointer Monikers work roughly as follows. }{\cs58\f5\fs16\lang1024 IMoniker::Bind\-To\-\-Ob\-ject}{\f8  turns into a }{
\cs58\f5\fs16\lang1024 QueryInterface}{\f8  on the pointer; }{\cs58\f5\fs16\lang1024 IMoniker::BindToStorage}{\f8  returns }{\f5\fs16 MK_E_NOSTORAGE}{\f8 ; }{\cs58\f5\fs16\lang1024 IMoniker::Re\-duce}{\f8 () reduces the moniker to itself; }{
\cs58\f5\fs16\lang1024 IMoniker::ComposeWith}{\f8  always does a generic composition; }{\cs58\f5\fs16\lang1024 IMoniker::Enum}{\f8  re\-turns }{\cs58\f5\fs16\lang1024 NULL}{\f8 ; }{\cs58\f5\fs16\lang1024 IMoniker::IsSystemMoniker}{\f8  returns }{\f5\fs16 
MKSYS_PTR}{\f8 ; }{\cs58\f5\fs16\lang1024 IMoniker::IsEqual}{\f8 () uses the identity test paradigm on poin\-ters after first checking that the other moniker for the right class; }{\cs58\f5\fs16\lang1024 IMoniker::Hash}{\f8  returns a constant; }{
\cs58\f5\fs16\lang1024 IMoniker::Get\-Time\-Of\-Last\-Change}{\f8  returns }{\f5\fs16 MK_E_UNAVAIL\-ABLE}{\f8 ; }{\cs58\f5\fs16\lang1024 IMoniker::Inverse}{\f8  returns an anti-moniker; }{\cs58\f5\fs16\lang1024 IMoniker::Rela\-tive\-PathTo}{\f8  re\-
turns the other moniker; }{\cs58\f5\fs16\lang1024 IMoniker::GetDisplayName}{\f8  re\-turns }{\cs58\f5\fs16\lang1024 NULL}{\f8 ; and }{\cs58\f5\fs16\lang1024 IMoniker::ParseDisplayName}{\f8 () binds to the punk poin\-ter using }{\cs58\f5\fs16\lang1024 
IParseDisplayName}{\f8  interface and works from there.
\par }\pard \qj\sa60\widctlpar {\f8 Instances of this kind of moniker refuse to be serialized; that is, }{\cs58\f5\fs16\lang1024 IPersistStream::Save}{\f8  will return an er\-ror. These monikers can, however, be }{\i\f8 marshaled}{\f8 
 to a different process; internally, this marshals and unmarshals the pointer using the standard paradigm for marshaling interface pointers: }{\cs58\f5\fs16\lang1024 CoMarshalInterface} and {\cs58\f5\fs16\lang1024 CoUnmarshalInterface}.{\f8 
\par {\pntext\pard\plain\b\f8\fs20\lang1024 11.2.8.1\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 {\f8 CreatePointerMoniker}{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 CreatePointerMoniker}}}{\f8 
\par }\pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT CreatePointerMoniker(punk, ppmk){\f8 
\par }\pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 {\f8 Wrap a pointer in a Pointer Moniker so that it can be presented to interfaces that require monikers for ge}{\f8 n}{\f8 
erality, but specific uses of which can usefully deal with a moniker which cannot be saved to backing store.
\par }\pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\f8 Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 punk}{\f8 \tab }{\cs58\f5\fs16\lang1024 IUnknown*}{\f8 \tab the pointer that we are wrapping up in a moniker.
\par }{\cs58\f5\fs16\lang1024 ppmk}{\f8 \tab }{\cs58\f5\fs16\lang1024 IMoniker**}{\f8 \tab the returned Pointer Moniker.
\par return value\tab }{\cs58\f5\fs16\lang1024 HRESULT}{\f8 \tab }{\f5\fs16 S_OK, E_OUTOFMEMORY}{\f8 
\par {\pntext\pard\plain\b\i\fs22 11.2.9\tab}}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Running Object Table{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\v\f5\fs12 {\xe {\f5\fs12 running object table}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In general w
hen binding to an object we want to open it if it is currently passive, but if not, then we want to connect to the running instance. To take an example from Compound Documents, a link to a Lotus 123 for Windows spreadsheet, for example, when first bound t
o should open the spreadsheet, but a second bind should connect to the already-open copy. The key technical piece that supports this type of functionality is the Running Object Table. 
\par The Running Object Table is a globally accessible table on each workstation. It keeps track of the objects that are currently running on that workstation so that if an attempt is made to bind to one a connection to the currently run\-
ning instance can be made instead of loading the object a second time. The table conceptually is a series of tuples, each of the form:
\par \pard \qj\li720\sa60\widctlpar ({\cs58\f5\fs16\lang1024 pmkObjectName}, {\cs58\f5\fs16\lang1024 pvObject})
\par \pard \qj\sa60\widctlpar The first element is the moniker that if bound should connect to the running object. The second element is the object that is publicized as being available, the object that is running. In the process of binding, mon\-
ikers being bound with nothing to their left consult the {\cs58\f5\fs16\lang1024 pmkObjectName} entries in the Running Ob\-ject Table to see if the object that they (the moniker being bound) indicate is already running.
\par Access to the Running Object Table is obtained with the function {\cs58\f5\fs16\lang1024 GetRunningObjectTable}. This returns an object with the interface {\cs58\f5\fs16\lang1024 IRunningObjectTable} (note as described earlier, however, that moniker imple
\-mentations should not use this API, but should instead access the Running Object Table from the bind context they are passed).
\par \pard\plain \s57\fi-720\li1080\ri-720\keepn\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 interface {\b 
IRunningObjectTable} : IUnknown \{ 
\par \tab HRESULT\tab {\b Register}(reserved, pUnkObject, pmkObjectName, pdwRegister);
\par \tab HRESULT\tab {\b Revoke}(dwRegister);
\par \tab HRESULT\tab {\b IsRunning}(pmkObjectName);
\par \pard \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \tab HRESULT\tab {\b GetObject}(pmkObjectName, ppunkObject);

\par \tab HRESULT\tab {\b NoteChangeTime}(dwRegister, pfiletime);
\par \tab HRESULT\tab {\b GetTimeOfLastChange}(pmkObjectName, pfiletime);
\par \tab HRESULT\tab {\b EnumRunning}(ppenumMoniker);
\par \tab \};
\par 
\par SCODE\tab {\b GetRunningObjectTable}(reserved, pprot);
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.9.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 GetRunningObjectTable{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 GetRunningObjectTable}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT GetRunningObjectTable(reserved, pprot)
\par \pard\plain \qj\sa60\keepn\widctlpar \f4\fs20 Return a pointer to the Running Object Table for the caller\rquote s context.
\par \pard\plain \s48\fi-3240\li3240\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1080 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-3240\li3240\sa58\keepn\widctlpar\tx1080 \f4\fs20 {\cs58\f5\fs16\lang1024 reserved}\tab {\cs58\f5\fs16\lang1024 DWORD}\tab reserved for future use; must be zero.
\par {\cs58\f5\fs16\lang1024 pprot}\tab {\cs58\f5\fs16\lang1024 IRunningObjectTable**}\tab the place to return the running object table.
\par return value\tab HRESULT\tab {\f5\fs16 S_OK
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.9.2\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRunningObjectTable::Register{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 IRunningObjectTable\:functions\:Register}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRunningObjectTable::Register(reserved, pUnkObject, pmkObjectName, pdwRegister)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Register the fact that the object {\cs58\f5\fs16\lang1024 pUnkObject }has just entered the running state and that if the moniker {\cs58\f5\fs16\lang1024 pmkObjectName}
 is bound to, then this object should be used as the result of the bind (with an appropriate {\cs58\f5\fs16\lang1024 QueryInterface}). 
\par The moniker {\cs58\f5\fs16\lang1024 pmkObjectName }should be fully reduced before registration. See {\cs58\f5\fs16\lang1024 IMoniker::Reduce} for a more complete discussion. If an object goes by more than one fully reduced moniker, then it should regis\-
ter itself under all such monikers. Here, \ldblquote fully reduced\rdblquote  means reduced to the state {\f5\fs16 MKRREDUCE_\-THROUG\-USER.}
\par Registering a second object under the same moniker sets up a second independent registration, though {\f5\fs16 MK_S_MONIKERALREADYREGISTERED} is returned instead of {\f5\fs16 S_OK}. This is done without regard to the value of {\cs58\f5\fs16\lang1024 
pUnkObject} in the second registration; thus, registering the exact same {\f5\fs16 (}{\cs58\f5\fs16\lang1024 pmkObjectName}{\f5\fs16 , }{\cs58\f5\fs16\lang1024 pUnk\-Object}{\f5\fs16 )}
 pair a second time will set up a second registration. It is not intended that multiple registration under the same moniker be a common occurrence, as which registration actually gets used in various situa\-tions is non-deter\-min\-istic.
\par The arguments to this function are as follows:
\par \pard\plain \s48\fi-2700\li2700\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440\tx2700 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2700\li2700\sa58\keepn\widctlpar\tx1440\tx2700 \f4\fs20 {\cs58\f5\fs16\lang1024 reserved\tab DWORD}\tab reserved for future use; must be zero.
\par {\cs58\f5\fs16\lang1024 pUnkObject\tab IUnknown*}\tab the object which has just entered the running state.
\par {\cs58\f5\fs16\lang1024 pmkObjectName}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker which would bind to the newly running object.
\par {\cs58\f5\fs16\lang1024 pdwRegister\tab DWORD*}\tab a place to return a value by which this registration can later be revoked. May not be {\cs58\f5\fs16\lang1024 NULL}. Zero will never be returned as a valid registration value; that is, on exit, {
\cs58\f5\fs16\lang1024 *pdwRegister} is never {\cs58\f5\fs16\lang1024 NULL}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_S_MONIKERALREADYREGISTERED}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.9.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRunningObjectTable::Revoke{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 IRunningObjectTable\:functions\:Revoke}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRunningObjectTable::Revoke(dwRegister)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Undo the registration done in {\cs58\f5\fs16\lang1024 IRunningObjectTable::Register}
, presumably because the object is about to cease to be running. Revoking an object that is not registered as running returns the status code {\f5\fs16 E_INVALIDARG}. Whenever any of the conditions that cause an object to register itself as running 
cease to be true, the object should revoke its registration(s). In particular, objects should be sure to extant registrations of themselves from the Running Object Table as part of their release process.
\par \pard\plain \s48\fi-2700\li2700\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440\tx2700 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2700\li2700\sa58\keepn\widctlpar\tx1440\tx2700 \f4\fs20 {\cs58\f5\fs16\lang1024 dwRegister}\tab {\cs58\f5\fs16\lang1024 DWORD}\tab a value previously returned from {\cs58\f5\fs16\lang1024 IRunningObjectTable}::{\cs58\f5\fs16\lang1024 
Register}.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_INVALIDARG.}{\i\f5\fs16 
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.9.4\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRunningObjectTable::IsRunning{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 IRunningObjectTable\:functions\:IsRunning}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRunningObjectTable::IsRunning(pmkObjectName)
\par \pard\plain \qj\sa60\widctlpar\box\brdrdb\brdrw15\brsp20 \f4\fs20 This function should, in general, only be called by implementations of {\cs58\f5\fs16\lang1024 IMoniker::IsRunning}; clients of moni\-
kers should invoke this on their monikers, rather than asking the Running Object Table directly.
\par \pard \qj\sa60\widctlpar Inquire by looking up in this Running Object Table as to whether an object with this moniker is cur\-r\-ently registered as running. Success or failure is indicated using the return codes {\f5\fs16 S_OK} or {\f5\fs16 S_FALSE}
. The Running Object Table compares monikers by sending {\cs58\f5\fs16\lang1024 IMoniker::IsEqual} to the monikers already in the table with moniker on the right as an argument.
\par \pard\plain \s48\fi-2700\li2700\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440\tx2700 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2700\li2700\sa58\keepn\widctlpar\tx1440\tx2700 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkObjectName}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker that we want to see is running
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, S_FALSE.
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.9.5\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRunningObjectTable::GetObject{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f9\fs12\lang1024 {\xe {\b0\f9\fs12 IRunningObjectTable\:functions\:GetObject}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRunningObjectTable::GetObject(pmkObjectName, ppunkObject)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 If the object designated by {\cs58\f5\fs16\lang1024 pmkObject }name is registered as actually running, then return the object so registered. The R.O.T. compares monikers by sending {\cs58\f5\fs16\lang1024 
IMoniker::IsEqual} to the monikers already in the table with moniker on the right as an argument.
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 This is the function moniker implementations should use to test if they are already running (and get the pointer to the object if so).
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkObjectName}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker in whom interest is being expressed.
\par {\cs58\f5\fs16\lang1024 ppunkObject\tab IUnknown**}\tab the place to return the pointer to the object. A returned value of NULL indicates that the object is not registered.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_UNAVAILABLE}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.9.6\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRunningObjectTable::NoteChangeTime
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRunningObjectTable::NoteChangeTime(dwRegister, pfiletime)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Make a note of the time that a particular object has changed in order that {\cs58\f5\fs16\lang1024 IMoniker::GetTimeOfLast\-Change} can report an appropriate change time. This time so registered is retrievable with 
{\cs58\f5\fs16\lang1024 IRunning\-Ob\-ject\-Table::GetTimeOfLastChange}. Objects should call this as part of their data change notification process.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 dwRegister\tab DWORD}\tab the token previously returned from {\cs58\f5\fs16\lang1024 IRunningObjectTable::Register}
. The moniker whose change time is noted is the one specified in {\cs58\f5\fs16\lang1024 pmkObjectName} in that call.
\par {\cs58\f5\fs16\lang1024 pfiletime\tab FILETIME*}\tab on entry, the time at which the object has changed.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_INVALIDARG}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.9.7\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRunningObjectTable::GetTimeOfLastChange
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRunningObjectTable::GetTimeOfLastChange(pmkObjectName, pfiletime)
\par \pard\plain \qj\sa60\widctlpar\box\brdrdb\brdrw15\brsp20 \f4\fs20 As with {\cs58\f5\fs16\lang1024 IMoniker::IsRunning}, this function should, in general, only be called by implementations of {\cs58\f5\fs16\lang1024 IMoniker::GetTimeOfLastChange}
; clients of moni\-kers should invoke this on their monikers, rather than asking the Running Object Table directly.
\par \pard \qj\sa60\widctlpar Look up this moniker in the running object table and report the time of change recorded for it if same is present. The Running Object Table compares monikers by sending {\cs58\f5\fs16\lang1024 IMoniker::IsEqual}
 to the monikers already in the table with moniker on the right as an argument. Implementations of {\cs58\f5\fs16\lang1024 IMoniker::GetTimeOfLastChange}, when in\-voked with {\cs58\f5\fs16\lang1024 pmkToLeft == NULL}
, will want to call this function as the first thing they do. 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 pmkObjectName}\tab {\cs58\f5\fs16\lang1024 IMoniker*}\tab the moniker in which we are interested in the time of change.
\par {\cs58\f5\fs16\lang1024 pfiletime}\tab {\cs58\f5\fs16\lang1024 FILETIME*}\tab on exit, the place at which the time of change is returned.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, MK_E_UNAVAILABLE}
\par {\pntext\pard\plain\b\fs20\lang1024 11.2.9.8\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRunningObjectTable::EnumRunning{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f5\fs12\lang1024 {\xe {\b0\f5\fs12 IRunningObjectTable\:functions\:EnumRunning}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRunningObjectTable::EnumRunning(ppenumMoniker)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Enumerates the objects currently registered as running. The returned enumerator is of type {\cs58\f5\fs16\lang1024 IEnum\-Mon\-i\-ker}, which enumerates monikers.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef Enum<IMoniker*>\tab \tab {
\b IEnumMoniker}{\pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \v\f5\fs12\lang1024 {\xe {\fs12 
IEnumMoniker}}};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The monikers which have been passed to {\cs58\f5\fs16\lang1024 IRunningObjectTable::Register}() are enumerated.
\par \pard\plain \s48\fi-3060\li3060\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 Argument\tab Type\tab Description
\par \pard\plain \s49\fi-3060\li3060\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ppenumMoniker}\tab {\cs58\f5\fs16\lang1024 IEnumMoniker**}\tab the place at which to return the enumerator.
\par return value\tab {\cs58\f5\fs16\lang1024 HRESULT}\tab {\f5\fs16 S_OK, E_OUTOFMEMORY
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 
\par {\*\bkmkstart _Toc335041467}{\*\bkmkstart _Toc335045074}{\*\bkmkstart _Toc335190136}{\*\bkmkstart _Toc338915492}{\*\bkmkstart _Toc339182991}{\pntext\pard\plain\b\fs28 12.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 
{\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 Uniform Data Transfer{\*\bkmkend _Toc335041467}{\*\bkmkend _Toc335045074}{\*\bkmkend _Toc335190136}{\*\bkmkend _Toc338915492}{\*\bkmkend _Toc339182991}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par \pard \qj\li720\ri720\sa60\widctlpar\box\brdrsh\brdrs\brdrw15\brsp20 \shading500 
In order to reduce the overall size of this document, and because the topic of this chapter is fully specified in the Microsoft Win32 Software Development Kit, the text of this chapter has been omitted.
\par \pard \qj\sa60\widctlpar 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc335041469}{\*\bkmkstart _Toc335045076}{\*\bkmkstart _Toc339182992}Part IV: Type Information{\*\bkmkend _Toc339182992}
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par {\*\bkmkstart _Toc335191360}{\*\bkmkstart _Toc339182993}{\pntext\pard\plain\b\fs28 13.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 {\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 
Interface Definition Language{\*\bkmkend _Toc335041469}{\*\bkmkend _Toc335045076}{\*\bkmkend _Toc335191360}{\*\bkmkend _Toc339182993}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 As was described previously in this specification, the COM infrastructure is completely divorced from the source-level tools used to create and use COM components. COM is completely a {\i binary }
specification, and thus source-level specifications and standards have no role to play in the fundamental architecture of the system.
\par Specifically, and somewhat different than other environments, this includes any and all forms of interface definition language (IDL). Having an interoperable standard for an appropriate IDL (or any other source level tool for that matter) is still incredi
bly valuable and useful, it\rquote s just important to understand that this is a {\i tool }standard and not a fundamental {\i system }standard. Contrast this, for example, with the DCE RPC API specification, where, if only because the fundamental {
\cs58\f5\fs16\lang1024 SendReceive }API is not part of the public standard runtime infrastructure, one {\i must} use IDL to interoperate with the system.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {
\cs38\super \chftn } \tab By definition one cannot, for example, write a source-portable DCE IDL compiler, for the code that calls {\cs89\f5\fs12 SendReceive} in the proxies is implementation-specific.}}
 People can (and have, out of necessity) built COM components with custom COM interfaces without using any interface definition language at all. This clear separation of system standards from tools standards is an important point, for with
out it COM tools vendors cannot innovate without centralizing their innovations through some central standards body. Innovation is stifled, and the customers suffer a loss of valuable tools in the marketplace.
\par That all being said, as was just mentioned, source-level standards are still useful, and DCE IDL is one such standard. The following enhancements to DCE IDL enable it to specify COM interfaces in addition to DCE RPC interfaces.{\cs38\super \chftn 
{\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
Microsoft has in its MIDL specification language defined additional extensions to DCE IDL; however, these are orthogonal to the subject of COM interface, and thus are not dealt with here.}}
\par {\*\bkmkstart _Toc298243749}{\*\bkmkstart _Toc316189792}{\*\bkmkstart _Toc316190036}{\*\bkmkstart _Toc318002094}{\*\bkmkstart _Toc318598254}{\*\bkmkstart _Toc318619371}{\*\bkmkstart _Toc337525129}{\*\bkmkstart _Toc339182994}{\pntext\pard\plain\b 13.1\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Object RPC IDL Extensions{\*\bkmkend _Toc298243749}{\*\bkmkend _Toc316189792}{\*\bkmkend _Toc316190036}
{\*\bkmkend _Toc318002094}{\*\bkmkend _Toc318598254}{\*\bkmkend _Toc318619371}{\*\bkmkend _Toc337525129}{\*\bkmkend _Toc339182994}
\par {\pntext\pard\plain\b\i\fs22 13.1.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 \lquote Object\rquote  interface attribute
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 COM interfaces are signified by a new interface attribute, \lquote {\cs58\f5\fs16\lang1024 object\rquote }. See [CAE RPC], page 238.
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
<interface_attributes> ::= <interface_attribute> [ , <interface_attribute> ] ...
\par <interface_attribute>  ::= uuid ( <Uuid_rep> )
\par \tab | version ( <Integer_literal>[.Integer_literal>])
\par \tab | endpoint ( <port_spec> [ ,<port_spec> ] ... )
\par \tab | local
\par \tab | pointer_default ( <ptr_attr> )
\par \tab | object{\b 
\par }<port_spec> ::= <Family_string> : <[> <Port_string> <]>
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 object }interface attribute attributed may not be specified with the {\cs58\f5\fs16\lang1024 version }attribute. However, it may be specified with any of the others, though the {
\cs58\f5\fs16\lang1024 uuid }attribute is virtually always used and the {\cs58\f5\fs16\lang1024 local }attribute is used but rarely.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 If this keyword is present, the following extensions are enabled in the interface.
\par {\pntext\pard\plain\b\i\fs22 13.1.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Interface name as a type
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The interface name becomes the name of a type, which can then be used as a parameter in methods. For example:
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
[object, uuid(b5483f00-4f6c-101b-a1c7-00aa00389acb)]
\par \tab interface IFoo \{
\par \tab \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 causes a typed named {\cs58\f5\fs16\lang1024 "IFoo"} to be declared, such that a method
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
[object, uuid(6A874340-57EB-11ce-A964-00AA006C3706)] 
\par \tab interface IBar \{
\par \tab \tab HRESULT\tab M1([in] short i, [in] IFoo* pfoo);
\par \tab \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 is a legal declaration.
\par {\pntext\pard\plain\b\i\fs22 13.1.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 No handle_t required
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In methods, no {\cs58\f5\fs16\lang1024 handle_t} argument is needed, and it's absence does not indicate auto-binding. Instead, a \ldblquote {\cs58\f5\fs16\lang1024 this}\rdblquote 
 pointer is used in the C++ binding to indicate the remote object being referenced, and an implicit extra first argument is used in C.  For example:
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
[object, uuid(b5483f00-4f6c-101b-a1c7-00aa00389acb)]
\par \tab interface IBar \{
\par \tab \tab HRESULT Bar([in] short i, [in] IFoo * pIF);
\par \tab \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 can be invoked from C++ with:
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 IFoo * pIF; 
\par IBar * pIB;
\par pIB->Bar(3, pIF);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 or from C with the equivalent 
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 pIB->lpVtbl->Bar(pIB, 3, pIF);

\par {\pntext\pard\plain\b\i\fs22 13.1.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Interface inheritance
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Single inheritance of interfaces is supported, using the C++ notation for same. Referring again to [CAE RPC], page 238:
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 <interface_header> ::= 
\par \tab <[> <interface_attributes> <]> interface <Identifier> [ <:> <Identifier> ]
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 For example:
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
[object, uuid(b5483f00-4f6c-101b-a1c7-00aa00389acb)]
\par \tab interface IBar : IWazoo \{
\par \tab \tab HRESULT Bar([in] short i, [in] IFoo * pIF);
\par \tab \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 cases the first methods in {\cs58\f5\fs16\lang1024 IBar }to be the methods of {\cs58\f5\fs16\lang1024 IWazoo}.
\par {\pntext\pard\plain\b\i\fs22 13.1.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 iid_is and use of void*
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The use of \ldblquote {\cs58\f5\fs16\lang1024 void*}\rdblquote  pointers are permitted, as long as such pointers are qualified with an \ldblquote {\cs58\f5\fs16\lang1024 iid_is}\rdblquote  pointer at
tribute. See [CAE RPC], page 253.
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 <ptr_attr> ::= ref
\par \tab | ptr
\par \tab | iid_is ( <attr_var_list> )
\par \tab | unique{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab This is a non-COM-related Microsoft extension, shown here for completeness.}}
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 iid_is }construct says that the {\cs58\f5\fs16\lang1024 void* }
parameter is an interface pointer whose type is only known at run time, but whose interface ID is the parameter named in the {\cs58\f5\fs16\lang1024 iid_is }attribute.  For example:
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 [ob
ject, uuid(b5483f00-4f6c-101b-a1c7-00aa00389acb)]
\par \tab interface IBar : IWazoo \{
\par \tab \tab Bar([in] short i, [in, ref] uuid_t *piid, [out, iid_is(piid)] void ** ppvoid);
\par \tab \tab \};
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 This can be invoked in C++ as:
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 IFoo* pIF;
\par pIB->Bar(i, &IID_IFoo, (void*)&pIF);
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 where \ldblquote {\cs58\f5\fs16\lang1024 IID_IFoo}\rdblquote  is the name of a constant whose value is the interface ID for {\cs58\f5\fs16\lang1024 IFoo}.
\par {\pntext\pard\plain\b\i\fs22 13.1.6\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 All methods must return void or HRESULT
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Asynchronous methods (and only asynchronous methods) must return {\cs58\f5\fs16\lang1024 void}, all others must return {\cs58\f5\fs16\lang1024 HRESULT.
\par {\*\bkmkstart _Toc328568193}{\pntext\pard\plain\b\i\fs22 13.1.7\tab}}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 The wire_marshal attribute{\*\bkmkend _Toc328568193}
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 \tab 
typedef  [wire_marshal( transmissible_type)]   type_specifier  user_type;
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This attribute is a type attribute used in the IDL file and is somewhat similar in syntax and semantic to the {\cs58\f5\fs16\lang1024 transmit_as}
 attribute. Each user-specific type has a corresponding transmissible type that defines the wire representation.
\par The user can define his specific type quite freely, (simple types, pointer types and composite types may be used) although some restrictions apply. The main one is that the type object needs to have we
ll defined (fixed) memory size. If the changeable size needs to be accommodated, the type should have a pointer field as opposed to a conformant array; or, it can be a pointer to the interesting type. General restrictions apply as usual. Specific restrict
ions related to embedding affect the way types can be specified. For more information see the \ldblquote User type vs. wire type\rdblquote  section.
\par The{\cs58\f5\fs16\lang1024  [wire_marshal]} attribute cannot be used with {\cs58\f5\fs16\lang1024 [allocate()]} attribute (directly or indirectly) as the engine doesn\rquote t control t
he memory allocation for the type. Also the wire type cannot be an interface pointer (these may be marshaled directly) or a full pointer (we cannot take care of the aliasing).
\par The following is a list of additional points regarding {\cs58\f5\fs16\lang1024 wire_marshal:}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}The wire type cannot be an interface pointer.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The wire type cannot be a full pointer. 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The wire type cannot have allocate attribute on it (like {\cs58\f5\fs16\lang1024 [allocate(all_nodes)]}).
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The wire type has to have a well defined memory size (cannot be a conformant structure etc.) as we allocate the top level object for the user as usual.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}When the engine delegates responsibility for a {\cs58\f5\fs16\lang1024 wire_marshalable} type to the user supplied  routines, eve
rything is up to the user including servicing of the possible embedded types that are defined with {\cs58\f5\fs16\lang1024 wire_marshal}, {\cs58\f5\fs16\lang1024 user_marshal}, {\cs58\f5\fs16\lang1024 transmit_as} etc.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\cs58\f5\fs16\lang1024 wire_marshal} is mutually exclusive with {\cs58\f5\fs16\lang1024 user_marshal}, {\cs58\f5\fs16\lang1024 transmit_as} or {\cs58\f5\fs16\lang1024 represent_as} when applied to the same type. 

\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Two different user types cannot resolve to the same wire type and vice versa.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The user type may or may not be rpc-able.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The user type must be known to MIDL.
\par {\*\bkmkstart _Toc328568194}{\pntext\pard\plain\b\i\fs22 13.1.8\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 The user_marshal attribute{\*\bkmkend _Toc328568194}
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 \tab 
typedef  [user_marshal( user_type)]   transmissible_type;
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This attribute is a type attribute used in the ACF file and is somewhat similar in syntax and semantic to the {\cs58\f5\fs16\lang1024 represent_as}
 attribute. Each user-specific type has a corresponding transmissible type that defines the wire representation. Similar to {\cs58\f5\fs16\lang1024 represent_as}, in the generated files, each usage of the {\cs58\f5\fs16\lang1024 trasmissible_type}
 name is substituted by the {\cs58\f5\fs16\lang1024 user_type} name. 
\par The user can define his specific type quite freely, (simple types, pointer types and composite types may be used) although some restrictions apply. The main one is that the type object needs to have well defined (fixed) memory size. If the changeable size
 needs to be accommodated, the type should have a pointer field as opposed to a conformant array; or, it can be a pointer to the interesting 
type. General restrictions apply as usual. Specific restrictions related to embedding affect the way types can be specified. For more information see the \ldblquote User type vs. wire type\rdblquote  section.
\par The{\cs58\f5\fs16\lang1024  [user_marshal]} attribute cannot be used with {\cs58\f5\fs16\lang1024 [allocate()]} attribute (directly or indirectly) as the engine doesn\rquote 
t control the memory allocation for the type. Also the wire type cannot be an interface pointer (these may be marshaled directly) or a full pointer (we cannot take care of the aliasing).
\par Additional points regarding {\cs58\f5\fs16\lang1024 user_marshal:}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}The wire type cannot be an interface pointer.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The wire type cannot be a full pointer.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The wire type cannot have allocate attribute on it (like {\cs58\f5\fs16\lang1024 [allocate(all_nodes)]}).
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The wire type has to have a well defined memory size (cannot be a conformant structure etc.) as we allocate the top level object for the user as usual.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}When the engine delegates responsibility for a {\cs58\f5\fs16\lang1024 user_marshalable} type to the user supplied  routines, everyth
ing is up to the user including servicing of the possible embedded types that are defined with {\cs58\f5\fs16\lang1024 user_marsh}al, {\cs58\f5\fs16\lang1024 transmit_as} etc.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\cs58\f5\fs16\lang1024 user_marshal} is mutually exclusive with {\cs58\f5\fs16\lang1024 wire_marshal}, {\cs58\f5\fs16\lang1024 transmit_as} or {\cs58\f5\fs16\lang1024 represent_as} when applied to the same type. 

\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Two different wire types cannot resolve to the same user type and vice versa.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The user type may or may not be rpc-able.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The user type may or may not be known to MIDL.
\par {\*\bkmkstart _Toc328568195}{\pntext\pard\plain\b\i\fs22 13.1.9\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 User supplied routines{\*\bkmkend _Toc328568195}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The routines required by {\cs58\f5\fs16\lang1024 user_marshall} have the following prototypes. 
\par {\cs58\f5\fs16\lang1024 <type_name>} means a user specific type name. This may be non-rpcable type or even, when used with {\cs58\f5\fs16\lang1024 user_marshal}
, a type unknown to MIDL at all. The wire type name (the name of transmissible type) is not used here.
\par 
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
unsigned long __RPC_USER  <type_name>_UserSize(
\par \tab unsigned long __RPC_FAR *\tab pFlags,
\par \tab unsigned long     \tab \tab StartingSize,
\par \tab <type_name>  __RPC_FAR * \tab pFoo);
\par 
\par unsigned char __RPC_FAR * __RPC_USER  <type_name>_UserMarshal(
\par \tab unsigned long \tab __RPC_FAR *\tab pFlags,
\par \tab unsigned char __RPC_FAR *     Buffer,
\par \tab <type_name>  __RPC_FAR * \tab pFoo);
\par 
\par unsigned char __RPC_FAR * __RPC_USER  <type_name>_UserUnmarshal(
\par \tab unsigned long \tab __RPC_FAR *\tab pFlags,
\par \tab unsigned char __RPC_FAR *    \tab Buffer,
\par \tab <type_name>  __RPC_FAR *\tab pFoo);
\par 
\par void __RPC_USER  <type_name>_UserFree(
\par \tab unsigned long \tab __RPC_FAR *\tab pFlags,
\par \tab <type_name>  __RPC_FAR *\tab pFoo );
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The meaning of the arguments is as follows:
\par \tab {\cs58\f5\fs16\lang1024 pFlags}\tab - pointer to a flag {\cs58\f5\fs16\lang1024 ulong}. Flags: local call flag, data rep flag.
\par \tab {\cs58\f5\fs16\lang1024 pBuffer}\tab - the current buffer pointer,
\par \tab {\cs58\f5\fs16\lang1024 pFoo}\tab - pointer to a user type object
\par \tab {\cs58\f5\fs16\lang1024 StartingSize}\tab - the buffer size (offset) before the object 
\par The return value when sizing, marshaling or unmarshaling is the new offset or buffer position. See the function description below for details.
\par The flags pointed to by the first argument have the following layout.
\par \trowd \trgaph30\trrh262\trleft-30 \cellx980\cellx1991\cellx3001\cellx4012\cellx5022\cellx6032\cellx7043\cellx8053 \pard \qj\sa60\widctlpar\intbl {\f5\cf1 31\cell }\pard \qr\sa60\widctlpar\intbl {\f5\cf1 24\cell \cell 16\cell \cell 8\cell 4\cell 0\cell 
}\pard \widctlpar\intbl {\f5\cf1 \row }\trowd \trgaph30\trrh276\trleft-30 \clmgf\clbrdrt\brdrs\brdrw45\brdrcf1 \clbrdrl\brdrs\brdrw45\brdrcf1 \clbrdrb\brdrs\brdrw45\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx980\clmrg\clbrdrt\brdrs\brdrw45\brdrcf1 
\clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw45\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx1991\clbrdrt\brdrs\brdrw45\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw45\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cellx3001\clbrdrt
\brdrs\brdrw45\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw45\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cellx4012\clbrdrt\brdrs\brdrw45\brdrcf1 \clbrdrb\brdrs\brdrw45\brdrcf1 \cellx5022\clmgf\clbrdrt\brdrs\brdrw45\brdrcf1 \clbrdrb
\brdrs\brdrw45\brdrcf1 \cellx6032\clmrg\clbrdrt\brdrs\brdrw45\brdrcf1 \clbrdrb\brdrs\brdrw45\brdrcf1 \cellx7043\clbrdrt\brdrs\brdrw45\brdrcf1 \clbrdrb\brdrs\brdrw45\brdrcf1 \clbrdrr\brdrs\brdrw45\brdrcf1 \cellx8053 \pard \qj\sa60\widctlpar\intbl {
\i\f5\cf1 Floating point\cell }\pard \qr\sa60\widctlpar\intbl {\f5\cf1 \cell }\pard \qc\sa60\widctlpar\intbl {\i\f5\cf1 Int\cell Char\cell }\pard \qr\sa60\widctlpar\intbl {\f5\cf1 \cell }\pard \qj\sa60\widctlpar\intbl {\i\f5\cf1 MSHCTX flags\cell }\pard 
\qr\sa60\widctlpar\intbl {\f5\cf1 \cell \cell }\pard \widctlpar\intbl {\f5\cf1 \row }\trowd \trgaph30\trrh262\trleft-30 \cellx980\clmgf \cellx1991\clmrg \cellx3001\clmrg \cellx4012\cellx5022\clmgf \cellx6032\clmrg \cellx7043\cellx8053 \pard 
\qr\sa60\widctlpar\intbl {\f5\cf1 \cell }\pard \qj\sa60\widctlpar\intbl {\f5\cf1 Ndr data representation\cell }\pard \qc\sa60\widctlpar\intbl {\f5\cf1 \cell }\pard \qr\sa60\widctlpar\intbl {\f5\cf1 \cell \cell }\pard \qj\sa60\widctlpar\intbl {\f5\cf1 
Marshal context flags\cell }\pard \qr\sa60\widctlpar\intbl {\f5\cf1 \cell \cell }\pard \widctlpar\intbl {\f5\cf1 \row }\pard \qj\sa60\widctlpar 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}Upper word: NDR representation flags as defined by DCE: floating point, endianess and character representations.

\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Lower word: marshaling context flags as defined by the COM channel. The flags are defined in the public {\cs58\f5\fs16\lang1024 wtypes.h }file (and in {\cs58\f5\fs16\lang1024 wtypes.idl}
 file). Currently the following flags are defined:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 typedef 
\par enum tagMSHCTX
\par     \{\tab MSHCTX_LOCAL\tab \tab = 0,
\par \tab \tab MSHCTX_NOSHAREDMEM\tab = 1,
\par \tab \tab MSHCTX_DIFFERENTMACHINE = 2,
\par \tab \tab MSHCTX_INPROC\tab \tab = 3
\par     \} MSHCTX;
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par The flags make it possible to differ the behavior of the routines depending on the context for the RPC call. For example when a handle is remoted in-process it could be sent as a handle (a {\cs58\f5\fs16\lang1024 long}), while sending it re
motely would mean sending the data related to the handle. 
\par {\pntext\pard\plain\b\fs20\lang1024 13.1.9.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 _UserSize
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 *_UserSize} routine is called when sizing the RPC data buffer before the marshaling on the client or server side. The routine should  work in terms of cumulative size. The {
\cs58\f5\fs16\lang1024 StartingSize} argument is the current buffer
 offset . The routine should return the cumulative size that includes the possible padding and then the data size. The starting size indicates the buffer offset for the user object and it may or may not be aligned properly. User\rquote 
s routine should account for all padding as necessary. In other words, the routine should re
turn a new offset, after the user object. The sizing routine is not called if the wire size can be computed at the compile time. Note that for most unions, even if there are no pointers, the actual size of the wire repre
sentation may be determined only at the runtime.
\par This routine actually can return an overestimate as long as the marshaling routine does not use more than the sizing routine promised and so the marshaling buffer is not overwritten then or later (by subsequent objects).
\par {\pntext\pard\plain\b\fs20\lang1024 13.1.9.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 _UserMarsahal
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 *_UserMarshal} routine is called when marshaling the data on the client or server side. The buffer pointer may or may not be aligned upon the entry. The routine should align the buffer p
ointer appropriately, marshal the data and then return the new buffer pointer position which is at the first \ldblquote free\rdblquote  byte after the marshaled object. For the complications related to pointees see the next chapter.
\par Please note that the wire type specification is a contract that determines the actual layout of the data in the buffer. For example, if the conversion is needed and done by the NDR engine, it follows from the wire type definitions how much data would be p
rocessed in the buffer for the type.
\par {\pntext\pard\plain\b\fs20\lang1024 13.1.9.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 _UserUnmarshal
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 *_UserUnmarshal}
 routine is called when unmarshaling the data on the client or server side. The flags indicate if data conversion is needed (if needed, it has been performed by the NDR engine before the call to the routine). The buffer pointer may or may not be aligned u
pon the entry. The routine should align the buffer as appropriate, unmarshal the data and then return the new buffer pointer position, which is at the first \ldblquote free\rdblquote  byte after the unmarshaled object. For the complications
 related to pointees see the next chapter
\par {\pntext\pard\plain\b\fs20\lang1024 13.1.9.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 _UserFree
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 *_UserFree} routine is called when freeing the data on the server side. The object itself doesn\rquote 
t get freed as the engine takes care of it. The user shall free the pointees of the top level objects.
\par {\pntext\pard\plain\b\i\fs22 13.1.10\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 The library keyword
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 [attributes] library libname \{
definitions\};
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The library keyword indicates that a type library (See Chapter 14) should be generated.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
Historically the library statement was supported only in a variant of IDL called ODL that was central to OLE Automation.}}   Below is an example {\cs58\f5\fs16\lang1024 library }section.
\par 
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 {\lang1033 [ }{\f0\fs24\lang1033 

\par \tab }{\lang1033 uuid(3C591B22-1F13-101B-B826-00DD01103DE1),}{\f0\fs24\lang1033 \tab }{\lang1033 // IID_ISome 
\par \tab object}{\f0\fs24\lang1033 
\par }{\lang1033 ] }{\f0\fs24\lang1033 
\par }{\lang1033 interface ISome : IUnknown }{\f0\fs24\lang1033 
\par }{\lang1033 \{ }{\f0\fs24\lang1033 
\par \tab }{\lang1033 HRESULT DoSomething(void); }{\f0\fs24\lang1033 
\par }{\lang1033 \} }{\f0\fs24\lang1033 
\par }
\par [ {\f0\fs24 
\par \tab }uuid(3C591B20-1F13-101B-B826-00DD01103DE1),{\f0\fs24 \tab \tab }// LIBID_Lines {\f0\fs24 
\par \tab }helpstring("Lines 1.0 Type Library"), {\f0\fs24 
\par \tab }lcid(0x0409), {\f0\fs24 
\par \tab }version(1.0) {\f0\fs24 
\par }] {\f0\fs24 
\par }library Lines {\f0\fs24 
\par }\{ {\f0\fs24 
\par \tab }importlib("stdole.tlb"); {\f0\fs24 
\par \tab }[ {\f0\fs24 
\par \tab \tab }uuid(3C591B21-1F13-101B-B826-00DD01103DE1),{\f0\fs24 \tab }// CLSID_Lines {\f0\fs24 
\par \tab \tab }helpstring("Lines Class"), {\f0\fs24 
\par \tab \tab }appobject {\f0\fs24 
\par \tab }] {\f0\fs24 
\par \tab }coclass Lines {\f0\fs24 
\par \tab }\{ {\f0\fs24 
\par \tab \tab }[default] interface ISome; {\f0\fs24 
\par \tab \tab }interface IDispatch; {\f0\fs24 
\par \tab }\} {\f0\fs24 
\par }\} {\f0\fs24 
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 
\par {\*\bkmkstart _Toc298243750}{\*\bkmkstart _Toc316189793}{\*\bkmkstart _Toc316190037}{\*\bkmkstart _Toc318002095}{\*\bkmkstart _Toc318598255}{\*\bkmkstart _Toc318619372}{\*\bkmkstart _Toc337525130}{\*\bkmkstart _Toc339182995}{\pntext\pard\plain\b 13.2\tab}
\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Mapping from ORPC IDL to DCE RPC IDL.{\*\bkmkend _Toc298243750}{\*\bkmkend _Toc316189793}{\*\bkmkend _Toc316190037}
{\*\bkmkend _Toc318002095}{\*\bkmkend _Toc318598255}{\*\bkmkend _Toc318619372}{\*\bkmkend _Toc337525130}{\*\bkmkend _Toc339182995}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 From the above extensions, and the wire representation definitions, one can conclude the following rules for converting ORPC IDL files to DCE IDL files:
\par {\pntext\pard\plain\fs20 1.\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}Remove the {\cs58\f5\fs16\lang1024 [object]} attribute from the interface definition.
\par {\pntext\pard\plain\fs20 2.\tab}Insert \ldblquote {\cs58\f5\fs16\lang1024 [in] handle_t h}\rdblquote  as the first argument of each method, \ldblquote {\cs58\f5\fs16\lang1024 [in] ORPCTHIS *_orpcthis}\rdblquote  as the second, and \ldblquote {
\cs58\f5\fs16\lang1024 [out] ORPCTHAT *_orpcthat}\rdblquote  as the third.
\par {\pntext\pard\plain\fs20 3.\tab}
Manually insert declarations for the operations that were inherited, if any. You may want to make the method names unique, unless the EPV invocation style is always going to be used.  One way to do this is to prefix each method with the name of the interf
ace. (Note that the {\cs58\f5\fs16\lang1024 IUnknown} methods will never be called, as the {\cs58\f5\fs16\lang1024 IRemUnknown} interface is used instead.)
\par {\pntext\pard\plain\fs20 4.\tab}Replace each occurrence of a type name derived from an interface name, or an{\cs58\f5\fs16\lang1024  [iid_is]} qualified {\cs58\f5\fs16\lang1024 void*} with {\cs58\f5\fs16\lang1024 OBJREF}. Remove {\cs58\f5\fs16\lang1024 
[iid_is]} attributes.
\par {\pntext\pard\plain\b\i\fs22 13.2.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 An Example
\par {\pntext\pard\plain\b\fs20\lang1024 13.2.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Object RPC Style
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
[object, uuid(b5483f00-4f6c-101b-a1c7-00aa00389acb)]
\par interface IFoo: IUnknown
\par \tab \{
\par \tab HRESULT Bar([in] short i, [in] IBozo* pIB, [out] IWaz** ppIW);
\par \tab HRESULT Zork([in, ref] UUID* iid,  [out, iid_is(iid)] void** ppvoid);
\par \tab \};
\par {\pntext\pard\plain\b\fs20\lang1024 13.2.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 DCE style
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
[uuid(b5483f00-4f6c-101b-a1c7-00aa00389acb)]
\par interface IFoo
\par \tab \{
\par \tab HRESULT IFoo_QueryInterface([in] handle_t h, [in] ORPCTHIS* _orpcthis, [out] ORPCTHAT* _orpcthat, [in, ref] UUID* iid, [out] OBJREF** ppOR);
\par \tab ULONG IFoo_AddRef([in] handle_t, [in] ORPCTHIS* _orpcthis, [out] ORPCTHAT* _orpcthat);
\par \tab ULONG IFoo_Release([in] handle_t, [in] ORPCTHIS* _orpcthis, [out] ORPCTHAT* _orpcthat);
\par \tab HRESULT IFoo_Bar([in] handle_t h, [in] ORPCTHIS* _orpcthis, [out] ORPCTHAT* _orpcthat, [in, ref] OBJREF* porIB, [out, ref] OBJREF** pporIW);
\par \tab HRESULT IFoo_Zork([in]handle_t h, [in] ORPCTHIS* _orpcthis, [out] ORPCTHAT* _orpcthat, [in, ref] UUID* iid, [out] OBJREF** ppvoid);
\par \tab \};
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 See Chapter 15 Network Protocol for information on the {\cs58\f5\fs16\lang1024 ORPCTHIS} and {\cs58\f5\fs16\lang1024 ORPCTHAT} structures and the {\cs58\f5\fs16\lang1024 IRemUnknown} interface.
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par {\*\bkmkstart _Toc335041470}{\*\bkmkstart _Toc335045077}{\*\bkmkstart _Toc335191361}{\*\bkmkstart _Toc338915497}{\*\bkmkstart _Toc339182996}{\pntext\pard\plain\b\fs28 14.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 
{\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 Type Libraries{\*\bkmkend _Toc335041470}{\*\bkmkend _Toc335045077}{\*\bkmkend _Toc335191361}{\*\bkmkend _Toc338915497}{\*\bkmkend _Toc339182996}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par \pard \qj\li720\ri720\sa60\widctlpar\box\brdrsh\brdrs\brdrw15\brsp20 \shading500 
In order to reduce the overall size of this document, and because the topic of this chapter is fully specified in the Microsoft Win32 Software Development Kit, the text of this chapter has been omitted.
\par \pard \qj\sa60\widctlpar 
\par 
\par 
\par 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc337440840}{\*\bkmkstart _Toc337870085}{\*\bkmkstart _Toc338915498}{\*\bkmkstart _Toc335041471}{\*\bkmkstart _Toc339182997}Part V: 
{\*\bkmkend _Toc337440840}{\*\bkmkend _Toc337870085}The COM Library{\*\bkmkend _Toc338915498}{\*\bkmkend _Toc339182997}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 It should be clear by this time that COM itself involves some systems-level code, that is, some implementation of its own. However, at the core the Component Object Model by itself is a specification (hence 
\ldblquote Model\rdblquote ) for how objects and their clients interact through the binary standard of interfaces. As a specification it defines a number of other standards for interoperability:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}The fundamental process of interface negotiation through {\cs58\f5\fs16\lang1024 QueryInterface}.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}A {\i reference counting} mechanism through objects (and their resources) are managed even when connected to multiple clients.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Rules for memory allocation and responsibility for those allocations when exchanged between independently developed components.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Consistent and rich error reporting facilities.
\par \pard \qj\sa60\widctlpar In addition to being a specification, COM is also an implementation contained what is called the \ldblquote COM Library.\rdblquote 
 The implementation is provided through a library (such as a DLL on Microsoft Windows) that includes:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}A small number of fundamental API functions 
that facilitate the creation of COM applications, both clients and servers. For clients, COM supplies basic object creation functions; for servers the facilities to expose their objects.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}
Implementation locator services through which COM determines from a class identifier which server implements that class and where that server is located. This includes support for a level of indirection, usually a system registry, between the identity of 
an object class and the packaging of the implementation such that clients are independent of the packaging which can change in the future.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Transparent remote procedure calls when an object is running in a local or remote server.  This includes the implementation of a standard network wire-protocol.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}A standard mechanism to allow an application to control how memory is allocated within its process.
\par \pard \qj\sa60\widctlpar In general, only one vendor needs to, or should, implement a COM Library for any particular operating system. For example, Microsoft has implemented COM on Microsoft Windows
 3.1, Microsoft Windows 95, Microsoft Windows NT, and the Apple Macintosh.  
\par The following chapter describes elements of the COM Library that a vendor implementing COM on a previously unsupported platform would require.
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par {\*\bkmkstart _Toc337439375}{\*\bkmkstart _Toc337440841}{\*\bkmkstart _Toc337870086}{\*\bkmkstart _Toc338915499}{\*\bkmkstart _Toc339182998}{\pntext\pard\plain\b\fs28 15.\tab}\pard\plain \s1\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 
{\*\pn \pnlvl1\pndec\pnprev1\pnstart1\pnsp144 {\pntxta .}}\b\f4\fs28 Component Object Model Network Protocol{\*\bkmkend _Toc335041471}{\*\bkmkend _Toc337439375}{\*\bkmkend _Toc337440841}{\*\bkmkend _Toc337870086}{\*\bkmkend _Toc338915499}
{\*\bkmkend _Toc339182998}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The COM network protocol is a protocol for object-oriented remote procedure calls and is thus also called Object RPC or ORPC.   The Object RPC protocol consists of a set of extensions, layered on the distributed
 computing environment (DCE) RPC specification. The Object RPC protocol specifies:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}How calls are made on an object
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}How object references are represented, communicated, and maintained
\par {\*\bkmkstart _Toc324051665}{\*\bkmkstart _Toc324051852}{\*\bkmkstart _Toc324052092}{\*\bkmkstart _Toc335041472}{\*\bkmkstart _Toc337439376}{\*\bkmkstart _Toc337440842}{\*\bkmkstart _Toc337870087}{\*\bkmkstart _Toc338915500}{\*\bkmkstart _Toc339182999}
{\pntext\pard\plain\b 15.1\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Overview{\*\bkmkend _Toc324051665}{\*\bkmkend _Toc324051852}{\*\bkmkend _Toc324052092}
{\*\bkmkend _Toc335041472}{\*\bkmkend _Toc337439376}{\*\bkmkend _Toc337440842}{\*\bkmkend _Toc337870087}{\*\bkmkend _Toc338915500}{\*\bkmkend _Toc339182999}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The Object RPC protocol highly leverages the OSF DCE RPC network protocol (see the reference [CAE RPC]). This leverage occurs at both the specification level and the implementation level: the bulk of the implementation effort involved in implementing the 
COM network protocol is in fact that of implementing the DCE RPC network protocol on which it is built.
\par {\*\bkmkstart _Toc324051666}{\*\bkmkstart _Toc324051853}{\*\bkmkstart _Toc324052093}{\*\bkmkstart _Toc335041473}{\pntext\pard\plain\b\i\fs22 15.1.1\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 Object Calls{\*\bkmkend _Toc324051666}{\*\bkmkend _Toc324051853}{\*\bkmkend _Toc324052093}{\*\bkmkend _Toc335041473}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An actual COM network remote procedure call (hereinafter referred to as \ldblquote an ORPC\rdblquote ) is in fact a true DCE remote procedure call (herein termed \ldblquote a DCE RPC\rdblquote ), a \ldblquote 
Request PDU\rdblquote  conforming to the specification for such calls per [CAE RPC].
\par In an ORPC, the object ID field of the invocation header as specified in [CAE RPC] contains an \ldblquote {\cs58\f5\fs16\lang1024 IPID}{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 IPID}}}\rdblquote . An {\cs58\f5\fs16\lang1024 IPID}
 is a 128-bit identifier known as an {\i interface pointer identifier} which represents a particular interface on a particular object in a particular server. As it is passed in the object ID fields of a DCE RPC, the static type of an {
\cs58\f5\fs16\lang1024 IPID }is in fact a {\cs58\f5\fs16\lang1024 UUID}. However, {\cs58\f5\fs16\lang1024 IPIDs }are scoped not globally but rather only relative to the machine on which the server is located (and which thus originally allocated them); {
\cs58\f5\fs16\lang1024 IPIDs} do not necessarily use the standard {\cs58\f5\fs16\lang1024 UUID }allocation algorithm, but rather may use a machine-specific algorithm which can assist with dispatching.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab As in DCE RPC object IDs are indeed only ever interpreted relative to a given machine, this relaxing of the DCE specification is not problematic.}}
\par In an ORPC, the interface ID field of the RPC header specifies the {\cs58\f5\fs16\lang1024 IID}, and arguments are found in the body, as usual.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super 
\chftn }\tab 
The IID in the interface ID field is from a logical perspective actually redundant because the IPID uniquely specifies an interface pointer (though the IID is not recoverable from just the IPID). However, an additional (optional) check to verify that the
 caller and callee agree on
 the type of the interface pointer would make the system more robust. Also, the specification of the actual IID in question eases the integration of the COM network protocol with the DCE RPC network protocol. Note that it is not expensive for callers to p
rovide the IID since the space for the IID is allocated in the DCE RPC header, which is always transmitted anyway.}}
 However, when viewed from the DCE RPC perspective an additional first argument is always present that is absent in the corresponding COM interface specification. This argument is of type {\cs58\f5\fs16\lang1024 ORPCTHIS}{\pard\plain \qj\sa60\widctlpar 
\cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 ORPCTHIS}}}, which is described below. It is placed first in the body of the Request PDU{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Request PDU}}}, before the actual arguments of the ORPC.

\par It is specifically legal for an ORPC to attempt a call a method number on a given interface which is beyond the number of methods believed by the server to be in that interface. Such calls should cause a fault.
\par Similarly, in a reply to an ORPC (a DCE RPC \ldblquote Response PDU{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Response PDU}}}\rdblquote ), when viewed from the DCE RPC per
spective, an additional first return value is always present that is absent in the corresponding COM interface specification. This argument is of type {\cs58\f5\fs16\lang1024 ORPCTHAT}{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {
\cs58\f5\fs12\lang1024 ORPCTHAT}}}, which is also described below. It is placed first in the body of the Response PDU, before the actual return values of the ORPC.
\par An {\cs58\f5\fs16\lang1024 ORPCTHAT }may also be present in a \ldblquote Fault PDU{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Fault PDU}}}.\rdblquote  In the Connectionless (CL) Fault PDU,{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab For the specification of the Connectionless Fault PDU, see [CAE RPC], page 520. Page 535 of the same work describes the Connection-oriented Fault PDU.}}
 it is placed four bytes after the 32-bit fault code which normally comprises the entire body of the PDU, thus achieving eight byte alignment for the {\cs58\f5\fs16\lang1024 ORPCTHAT}; the intervening padding bytes are presently reserved and must be zero{
\cs58\f5\fs16\lang1024 .} The PDU body length{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Ibid, page 516.}}
 is of course set to encompass the entire body of the Fault PDU, including the {\cs58\f5\fs16\lang1024 ORPC\-THAT}. In the Connection-oriented (CO) Fault PDU, the{\cs58\f5\fs16\lang1024  ORPCTHAT} is placed in the standard location allocated for the 
\ldblquote stub data.\rdblquote {\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab That is, in the Connection-oriented case, the {\cs58\f5\lang1024 ORPCTHAT }
also follows four bytes of padding after the fault code; however, the fault code in the Connection-oriented Fault PDU is preceded other data not found in the Connectionless Fault PDU. Consult [CAE RPC] for further details.}}
 In a Fault PDU of either form that results from an ORPC, if an {\cs58\f5\fs16\lang1024 ORPCTHAT }is not present then no other data may be substituted in its here-specified location in the PDU.
\par {\*\bkmkstart _Toc324051667}{\*\bkmkstart _Toc324051854}{\*\bkmkstart _Toc324052094}{\*\bkmkstart _Toc335041474}{\pntext\pard\plain\b\i\fs22 15.1.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 OXIDs, Object Exporters{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 {\xe {\b0\i0\fs12 Object Exporters}}}, & Machines{\*\bkmkstart _Toc335041475}
{\*\bkmkend _Toc324051667}{\*\bkmkend _Toc324051854}{\*\bkmkend _Toc324052094}{\*\bkmkend _Toc335041474}{\*\bkmkend _Toc335041475}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Although an {\cs58\f5\fs16\lang1024 IPID}
 from a logical perspective semantically determines the server, object and interface to which a particular call should be directed, it does not by itself indicate the binding information necessary to actually carry out an invocation.
\par The protocol represents this \ldblquote how-to\rdblquote  communication information in a {\cs58\f5\fs16\lang1024 UUID }called an object exporter identifier, otherwise known as an {\cs58\f5\fs16\lang1024 OXID}{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 
{\xe {\fs12 OXID}}}. Conceptually, an {\cs58\f5\fs16\lang1024 OXID }
can be thought of as an implementation scope for an COM object, which may be a whole machine, a given process, a thread within that process, or other more esoteric implementation scope, but the exact definition of such scopes has no bearing on the COM net
work protocol.
\par A given machine at any moment may support several {\cs58\f5\fs16\lang1024 OXIDs}; however there is always a unique {\i Object E}{\i x}{\i porter service }per machine which coordinates the management of all the {\cs58\f5\fs16\lang1024 OXIDs }
on the machine. Data structures in each Object Exporter keep track of the {\cs58\f5\fs16\lang1024 IPID}s exported and imported by that Object Exporter{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Object Exporter}}}
. The Object Exporter resides at well-known endpoints (one per protocol, of course) on the machine. It supports a DCE RPC interface known as {\cs58\f5\fs16\lang1024 IObjectExporter}{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {
\cs58\f5\fs12\lang1024 IObjectExporter}}}, which is described below.
\par An {\cs58\f5\fs16\lang1024 OXID }is used to determine the RPC string bindings that allow calls to reach their target {\cs58\f5\fs16\lang1024 IPID}. Before making a call, the calling process must translate an {\cs58\f5\fs16\lang1024 OXID }
into a set of bindings that the underlying RPC{\cs58\f5\fs16\lang1024  }im
plementation understands. It accomplishes by maintaining a cache of these mappings. When the destination application receives an object reference, it checks to see if it recognizes the {\cs58\f5\fs16\lang1024 OXID}
. If it does not, then it asks the source of the object reference (the server machine from which the object reference was acquired, which is not necessarily the home machine for the interface pointer) for the translation, and saves the resulting set of st
ring bindings in a local table that maps {\cs58\f5\fs16\lang1024 OXIDs }to string bindings.
\par Associated with each {\cs58\f5\fs16\lang1024 OXID }(not each Object Exporter) is COM object termed an \ldblquote {\cs58\f5\fs16\lang1024 OXID }object{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 OXID object}}}.\rdblquote  {\cs58\f5\fs16\lang1024 
OXID }objects implement (at least) the {\cs58\f5\fs16\lang1024 IRemUnknown }interface, through which remote management of reference counts and requests for interfaces are returned.
\par Each machine is represented by a {\cs58\f5\fs16\lang1024 MID}.  {\cs58\f5\fs16\lang1024 MIDs} are {\cs58\f5\fs16\lang1024 UUIDs} and thus universally unique.  The {\cs58\f5\fs16\lang1024 MID}
 for a machine may (should) change when the machine reboots.  However, when the {\cs58\f5\fs16\lang1024 MID} for a machine changes, all OXIDs, {\cs58\f5\fs16\lang1024 OIDs}, and {\cs58\f5\fs16\lang1024 IPIDs} on that machine become invalid.  {
\cs58\f5\fs16\lang1024 MIDs} are an optimization to simplify the task of determining which {\cs58\f5\fs16\lang1024 OXIDs} are exported and pinged by which object exporters.
\par {\*\bkmkstart _Toc324051668}{\*\bkmkstart _Toc324051855}{\*\bkmkstart _Toc324052095}{\*\bkmkstart _Toc335041476}{\pntext\pard\plain\b\i\fs22 15.1.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 Marshaled Interface References{\*\bkmkend _Toc324051668}{\*\bkmkend _Toc324051855}{\*\bkmkend _Toc324052095}{\*\bkmkend _Toc335041476}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\v\f4\fs12 {\xe {\b0\i0\fs12 Marshalled Interface References}}}{\*\bkmkstart _Toc335041477}{\*\bkmkend _Toc335041477}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The COM network protocol extends the Network Data Representation standard specified in [CAE RPC] by defining what can be thought of as a new primitive data type that can be marshaled: that of an interface ref
erence to a COM object.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab Whether one actually thinks of this 
as a new primitive data type or new compositional operator over existing data types depends on one\rquote s point of view. Both positions have some merit.}} This is the only extension to NDR made by the COM network protocol.
\par A marshaled interface references is described by a type known as an {\cs58\f5\fs16\lang1024 OBJREF}{\pard\plain \qj\sa60\widctlpar \cs58\v\f4\fs12\lang1024 {\xe {\cs58\fs12\lang1024 OBJREF}}}, which is described in detail below. An {
\cs58\f5\fs16\lang1024 OBJREF }in actuality has several variations:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s95\qj\fi-360\li360\sa60\sl220\slmult0\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 Null.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Standard.  A standard remote reference. Known as a {\cs58\f5\fs16\lang1024 STDOBJREF}{\pard\plain \s95\qj\fi-360\li360\sa60\sl220\slmult0\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}
\cs58\v\f4\fs12\lang1024 {\xe {\cs58\f4\fs12\lang1024 STDOBJREF}}}. A {\cs58\f5\fs16\lang1024 STDOBJREF} contains:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li1080\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 An {\cs58\f5\fs16\lang1024 IPID}, which uniquely specifies the interface and object.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}An object ID ({\cs58\f5\fs16\lang1024 OID}{\pard\plain \s71\qj\fi-360\li1080\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\v\f4\fs12 {\xe {\fs12 OID}}}
), which uniquely specifies the identity of the object on which the {\cs58\f5\fs16\lang1024 IPID }is found.  {\cs58\f5\fs16\lang1024 OIDs }are {\cs58\f5\fs16\lang1024 UUIDs}; they are universally unique.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}An {\cs58\f5\fs16\lang1024 OXID}, which identifies the scope where the implementation of the object is active, and can be used to reach the interface pointer.{\cs38\super \chftn {\footnote \pard\plain 
\s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }\tab Note that the object reference does not include the interface identifier (IID), although you can\rquote t do much with the object reference without knowing the IID. The
 IPID does uniquely specify an IID; however,  you can\rquote 
t algorithmically derive the IID from the IPID. This is not a problem because the  IID does not have to be explicitly specified; it is either implicitly specified (by the type of the argument in a MIDL
 declaration) or available explicitly as another argument in the call that is carrying the polymorphic object reference (for example, IUnknown::QueryInterface).}}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}A reference count, indicating the number of references to this {\cs58\f5\fs16\lang1024 IPID }that are conveyed by thi
s marshaling. This count, though typically a value of one, may in fact be zero, one, or more (see the next section).
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Some flags, explained later.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s95\qj\fi-360\li360\sa60\sl220\slmult0\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 
Long. A standard reference, along with a set of protocol sequences and network addresses that can be useful when marshaling a proxy to give to another machine (a.k.a. the middle-man case).  
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Custom. Contains a class ID (CLSID) and class-specific information.  
\par \pard\plain \s99\qj\li720\ri720\sa60\sl220\slmult0\widctlpar \f8\fs20 The Custom format gives an object control over the representation of references to itself. For e
xample, an immutable object might be passed by value, in which case the class-specific information would contain the object\rquote s immutable data.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s95\qj\fi-360\li360\sa60\sl220\slmult0\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 
Handler. A sub-case of the custom reference in which the class-specific information is standardized.
\par \pard\plain \s99\qj\li720\ri720\sa60\sl220\slmult0\widctlpar \f8\fs20 
For example, an object wishes to be represented in client address spaces by a proxy object that caches state. In this case, the class-specific information is just a standard reference to an interface pointer that the handler (proxy object) will use to com
municate with the original object.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s95\qj\fi-360\li360\sa60\sl220\slmult0\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 
Long Handler: Contains the same information as the handler case as well as the object resolver address.  This form is needed for the same reason the long form is needed.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Interface references are {\i\ul always} marshaled in little-endian byte order, irrespective of the byte order prevailing in the remainder of the data being marshaled.
\par {\*\bkmkstart _Toc324051669}{\*\bkmkstart _Toc324051856}{\*\bkmkstart _Toc324052096}{\*\bkmkstart _Toc335041478}{\pntext\pard\plain\b\i\fs22 15.1.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 Reference Counting{\*\bkmkend _Toc324051669}{\*\bkmkend _Toc324051856}{\*\bkmkend _Toc324052096}{\*\bkmkend _Toc335041478}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\v\f4\fs12 {\xe {\b0\i0\fs12 Reference Counting}}}{\*\bkmkstart _Toc335041479}{\*\bkmkend _Toc335041479}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In the COM network protocol, remote reference counting{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 remote reference counting}}} is conducted on per interface (per {\cs58\f5\fs16\lang1024 IPID}
), just as local reference counting is carried out on a per interface basis.
\par The actual increment and decrement calls are carried out using (respectively) the {\cs58\f5\fs16\lang1024 RemAddRef }and {\cs58\f5\fs16\lang1024 RemRelease }methods in a COM interface known as {\cs58\f5\fs16\lang1024 IRemUnknown}
 found on an object associated with the each {\cs58\f5\fs16\lang1024 OXID}, the {\cs58\f5\fs16\lang1024 IPID }of which is returned from the function {\cs58\f5\fs16\lang1024 IObjectExporter::Get\-String\-Bindings} (see below).{\cs58\f5\fs16\lang1024  }
In contrast to their analogues in {\cs58\f5\fs16\lang1024 IUnknown}, {\cs58\f5\fs16\lang1024 RemAddRef }and {\cs58\f5\fs16\lang1024 RemRelease} can in one call increment or decrement the reference count of many different {\cs58\f5\fs16\lang1024 IPIDs }
by an arbitrary amount; this allows for greater network efficiency.
\par In the interests of performance, client COM implementations typically do {\i not }immediately translate each local {\cs58\f5\fs16\lang1024 AddRef }and {\cs58\f5\fs16\lang1024 Release }into a remote {\cs58\f5\fs16\lang1024 RemAddRef }and {
\cs58\f5\fs16\lang1024 RemRelease}. Rather, the actual remote release of all interfaces on an object is typically deferred until all local references to all interfaces on that object have been released. Further, one actual remote reference count may b
e used to service many local reference counts; that is, the client infrastructure may multiplex zero or more local references to an interface into zero or one remote references on the actual {\cs58\f5\fs16\lang1024 IPID}.{\cs38\super \chftn {\footnote 
\pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab A consequence of allowing for this optimizations is that the reference count on each {\cs58\f5\lang1024 IPID }
as seen by the server may be in fact less than the total number of references on that interface as seen by all the extant clients of that interface.}}
\par {\*\bkmkstart _Toc324051670}{\*\bkmkstart _Toc324051857}{\*\bkmkstart _Toc324052097}{\*\bkmkstart _Toc335041480}{\pntext\pard\plain\b\i\fs22 15.1.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 Pinging{\*\bkmkend _Toc324051670}{\*\bkmkend _Toc324051857}{\*\bkmkend _Toc324052097}{\*\bkmkend _Toc335041480}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 
{\xe {\b0\i0\fs12 Pinging}}}{\*\bkmkstart _Toc335041481}{\*\bkmkend _Toc335041481}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The above reference counting scheme would be entirely adequate on its own if clients never crashed, but in fact they do, and the system needs to be robust in the face of clients crashing when they hold remote refer
ences. In a DCE RPC, one typically addresses this issue through the use of context handles{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 context handles}}}. Context handles are {\i not}
 used, however, by the COM network protocol, for reasons of expense. The basic underlying technology used in virtually all protocols for detecting remote crashes is that of periodic pings. Naive use of 
RPC context handles would result in per object per client process pings being sent to the server. The COM network protocol architects its pinging infrastructure to reduce network traffic by relying on the client Ob
ject Exporter implementation to do local management of client liveness detection, and having the actual pings be sent only on a machine to machine basis.
\par Pinging is carried out on a per-object (per {\cs58\f5\fs16\lang1024 OID}), not a per-interface (per {\cs58\f5\fs16\lang1024 IPID}) basis. Architecturally, at its server machine, each exported object (each exported {\cs58\f5\fs16\lang1024 OID}
) has associated with it a {\cs58\f5\fs16\lang1024 pingPeriod} time value and a {\cs58\f5\fs16\lang1024 numPingsToTimeOut} count which together (through their product) determine the overall amount of time known as the \ldblquote ping period{\pard\plain 
\qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 ping period}}}\rdblquote  that must elapse without receiving a ping on that {\cs58\f5\fs16\lang1024 OID }or an invocation on one of its {\cs58\f5\fs16\lang1024 IPIDs }before all the remote references to {
\cs58\f5\fs16\lang1024 IPIDs} associated with that {\cs58\f5\fs16\lang1024 OID }can be considered to have expired. Once expiration has occurred, the interfaces behind the {\cs58\f5\fs16\lang1024 IPIDs }can as would be expected be reclai
med solely on the basis local knowledge, though the timeliness with which this is carried out, if at all, is an implemen
tation specific. If the server COM infrastructure defers such garbage collection in this situation (perhaps because it has local references keeping the interface pointer alive) and it later hears a ping or receives a remote call, then it knows a network p
artition healed. It can consider the extant remote references to be reactivated and can continue remote operations.
\par When interface pointers are conveyed from one client to another, such as being passed as either {\cs58\f5\fs16\lang1024 [in]} or{\cs58\f5\fs16\lang1024  [out]}
 parameters to a call, the interface pointer is marshaled in one client and unmarshaled in the other. In order to successfully unmarshal the interface, the destination client must obtain at least one reference count on the interface. This is usually accom
plished by passing in the marshaled interface {\cs58\f5\fs16\lang1024 STDOBJREF} a {\cs58\f5\fs16\lang1024 cRefs} of (at least) one; the destination client then takes ownership of that many (more) reference counts to the indicated {\cs58\f5\fs16\lang1024 
IPID}, and the source client then owns that many fewer reference counts on the {\cs58\f5\fs16\lang1024 IPID}.  It is legal, however, for zero reference counts to be passed in the {\cs58\f5\fs16\lang1024 STDOBJREF}
;  here, the destination client must (if it does not already have access to that {\cs58\f5\fs16\lang1024 IPID} and thus have a non-zero reference count for it) before it successfully unmarshals the interface reference (concretely, e.g., before {
\cs58\f5\fs16\lang1024 CoUnmarshalInterface} returns) call to the object\rquote s exporter using {\cs58\f5\fs16\lang1024 IRemUnknown::RemAddRef} to obtain a reference count for it.
\par If the destination client is in fact the object\rquote 
s server, then special processing is required by the destination client. The remote reference counts being passed to it should, in effect, be "taken out of circulation," as what where heretofore remote refer
ences are being converted into local references. Thus, the reference counts present in the STDOBJREF are in fact decremented from the remote reference count for the {\cs58\f5\fs16\lang1024 IPID} in question.
\par Some objects have a usage model such that they do not need to be pinged at all; such objects are indicated by the presence of a flag in a {\cs58\f5\fs16\lang1024 STDOBJREF}
 to an interface on the object. Objects which are not pinged in fact need not be reference counted either, though it is legal (but pointless) for a client to reference count the {\cs58\f5\fs16\lang1024 IPIDs }of such objects.
\par For all other objects, assuming a non-zero ping period, it is the responsibility of the holder of an interface reference on some object to ensure that pings reach the server frequently enough to prevent expiration of the object. The frequency used by a cl
ient depends on the ping period, the reliability of the channel between the client and the server, and the probability of failure (no pings getting through and possible premature gar
bage-collection) that the client is willing to tolerate. The ping packet and / or its reply may both request changes to the ping period. Through this mechanism, network traffic may be reduced in the face of slow links busy servers.
\par {\pntext\pard\plain\b\fs20\lang1024 15.1.5.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 Delta Pinging{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\i\v\f4\fs12\lang1024 {\xe {\b0\i\fs12 Delta Pinging}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Without any further refinements, ping messages could be quite hefty. If machine A held 1024 remote objects ({\cs58\f5\fs16\lang1024 OIDs}
) on machine B, then it would send 16K byte ping messages. This would be annoying if the set of remote objects was relatively stable and the ping messages were the same from ping to ping. 
\par The delta mechanism reduces the size of ping messages. It uses a ping-set interface that allows the pinging of a single set to replace the pinging of multiple {\cs58\f5\fs16\lang1024 OIDs}.
\par Instead of pinging each {\cs58\f5\fs16\lang1024 OID}, the client defines a set.  Each ping contains only the set id and the list of addi
tions and subtractions to the set.  Objects that come and go within one ping period are removed from the set without ever having been added.
\par The pinging protocol is carried out using two methods in the (DCE) interface {\cs58\f5\fs16\lang1024 IObjectExporter}{\pard\plain \qj\sa60\widctlpar \cs58\v\f4\fs12\lang1024 {\xe {\cs58\fs12\lang1024 IObjectExporter}}} on the Object Exporter: {
\cs58\f5\fs16\lang1024 ComplexPing}, and {\cs58\f5\fs16\lang1024 SimplePing}. {\cs58\f5\fs16\lang1024 ComplexPing }is used to by clients to group the set of {\cs58\f5\fs16\lang1024 OIDs }that they must ping into {\cs58\f5\fs16\lang1024 UUID}
-tagged sets known to the server. These entire sets of {\cs58\f5\fs16\lang1024 OIDs }can then be subsequently pinged with a single, short, call to {\cs58\f5\fs16\lang1024 SimplePing}.
\par {\*\bkmkstart _Toc324051671}{\*\bkmkstart _Toc324051858}{\*\bkmkstart _Toc324052098}{\*\bkmkstart _Toc335041482}{\pntext\pard\plain\b\i\fs22 15.1.6\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 QueryInterface{\*\bkmkend _Toc324051671}{\*\bkmkend _Toc324051858}{\*\bkmkend _Toc324052098}{\*\bkmkend _Toc335041482}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\v\f4\fs12 {\xe {\b0\i0\fs12 QueryInterface}}}{\*\bkmkstart _Toc335041483}{\*\bkmkend _Toc335041483}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 IRemUnknown }interface on the object-exporter specified object, in addition to servicing reference counting as described above also services {\cs58\f5\fs16\lang1024 QueryInterface }
calls for remote clients for {\cs58\f5\fs16\lang1024 IPIDs }managed by that exporter. {\cs58\f5\fs16\lang1024 IRemUnknown::RemQueryInterface}{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 IRemUnknown\:functions\:
RemQueryInterface}}} differs from {\cs58\f5\fs16\lang1024 IUnknown::QueryInterface} in much the same way as {\cs58\f5\fs16\lang1024 Rem\-Add\-Ref }and {\cs58\f5\fs16\lang1024 RemRelease }differ from {\cs58\f5\fs16\lang1024 AddRef} and {
\cs58\f5\fs16\lang1024 Release, }in that it is optimized for network access by being able to retrieve many interfaces at once.
\par {\*\bkmkstart _Toc324051672}{\*\bkmkstart _Toc324051859}{\*\bkmkstart _Toc324052099}{\*\bkmkstart _Toc335041484}{\pntext\pard\plain\b\i\fs22 15.1.7\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 Causality ID{\*\bkmkend _Toc324051672}{\*\bkmkend _Toc324051859}{\*\bkmkend _Toc324052099}{\*\bkmkend _Toc335041484}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\v\f4\fs12 {\xe {\b0\i0\fs12 Causality ID}}}{\*\bkmkstart _Toc335041485}{\*\bkmkend _Toc335041485}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Each ORPC carries with it a {\cs58\f5\fs16\lang1024 UUID }
known as the causality id that connects together the chain of ORPC calls that are causally related. If an outgoing ORPC is made while servicing an incoming ORPC, the outgoing call is to have the same causality id as the incoming call. If an outgoing ORPC 
is made while not servicing an incoming ORPC, then a new causality id is allocated for it.
\par Causality ids may in theory be reused as soon as it is certain that no transitively outstanding call is still in progress which uses that call. In practice, however, in the face of transitive calls and the possibility of net
work failures in the middle of such call chains, it is difficult to know for certain when this occurs. Thus, pragmatically, causality ids are not reusable.
\par The causality id can be used by servers to understand when blocking or deferring an incoming call (supported in some COM server programming models) is very highly probable{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1
\widctlpar \f4\fs16 {\cs38\super \chftn } \tab This has high probability and not certainty due to some pathological cases involving network failures. Suppose A calls B ca
lls C calls D which will call back to A, and while D is processing its call, the link from B to C goes down, causing B to try to obtain C\rquote 
s services through another party E, which, as D would, calls back to A. In such situations, A may receive incoming calls from both D and E. Only the call from E is actually a potential for deadlock.}} to cause a deadlock, and thus should be avoided.

\par The causality id for {\cs58\f5\fs16\lang1024 maybe}, {\cs58\f5\fs16\lang1024 idempotent}, and {\cs58\f5\fs16\lang1024 broadcast} calls must be set to null.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {
\cs38\super \chftn } \tab Though this decision is subject to review.}} If a server makes a ORPC call while processing such a call, a new causality id must be generated as if it were a top level call.
\par {\*\bkmkstart _Toc324051673}{\*\bkmkstart _Toc324051860}{\*\bkmkstart _Toc324052100}{\*\bkmkstart _Toc335041486}{\*\bkmkstart _Toc337439377}{\*\bkmkstart _Toc337440843}{\*\bkmkstart _Toc337870088}{\*\bkmkstart _Toc338915502}{\*\bkmkstart _Toc339183000}
{\pntext\pard\plain\b 15.2\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Data types and structures{\*\bkmkend _Toc324051673}{\*\bkmkend _Toc324051860}
{\*\bkmkend _Toc324052100}{\*\bkmkend _Toc335041486}{\*\bkmkend _Toc337439377}{\*\bkmkend _Toc337440843}{\*\bkmkend _Toc337870088}{\*\bkmkend _Toc338915502}{\*\bkmkend _Toc339183000}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
This following several sections present the technical details of the COM network protocol. The notation used herein is that of the Microsoft Interface Definition Language, version 2 (MIDL). MIDL is a upwardly compatible extension to the DCE IDL language s
pecified in [CAE RPC]. Details of the MIDL language specification are available from Microsoft Corporation.
\par {\*\bkmkstart _Toc316189745}{\*\bkmkstart _Toc316189989}{\*\bkmkstart _Toc318002050}{\*\bkmkstart _Toc318598242}{\*\bkmkstart _Toc318619359}{\*\bkmkstart _Toc337525117}{\pntext\pard\plain\b\i\fs22 15.2.1\tab}\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 DCE Packet Headers{\*\bkmkend _Toc316189745}{\*\bkmkend _Toc316189989}{\*\bkmkend _Toc318002050}{\*\bkmkend _Toc318598242}
{\*\bkmkend _Toc318619359}{\*\bkmkend _Toc337525117}
\par \pard\plain \s95\qj\sa60\sl220\slmult0\widctlpar \f8\fs20 Object RPC sits entirely on top of DCE RPC.  The following list describes the elements of ORPC that are specified above and beyond DCE RPC.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \s95\qj\fi-360\li360\sa60\sl220\slmult0\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}The object id field of the header must contain the {\cs58\f5\fs16\lang1024 IPID}.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The interface id of the RPC header must contain the {\cs58\f5\fs16\lang1024 IID}, even though it is not needed given the {\cs58\f5\fs16\lang1024 IPID}
.  This allows ORPC to sit on top of DCE RPC.  An unmodified DCE RPC implementation will correctly dispatch based on {\cs58\f5\fs16\lang1024 IID} and {\cs58\f5\fs16\lang1024 IPID}.  An optimized RPC need only dispatch based on {\cs58\f5\fs16\lang1024 IPID
}.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}An {\cs58\f5\fs16\lang1024 IPID}
 uniquely identifies a particular interface on a particular object on a machine.  The converse is not true; a particular interface on a particular object may only be represented by multiple {\cs58\f5\fs16\lang1024 IPIDs}.  {\cs58\f5\fs16\lang1024 IPIDs}
 are unique on their {\cs58\f5\fs16\lang1024 OXID}.  {\cs58\f5\fs16\lang1024 IPIDs} may be reused, however reuse of {\cs58\f5\fs16\lang1024 IPIDs} should be avoided.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}{\cs58\f5\fs16\lang1024 Datagram,} {\cs58\f5\fs16\lang1024 maybe,} and {\cs58\f5\fs16\lang1024 idempotent} calls are all allowed in ORPC.  Interface pointers may not be passed on {\cs58\f5\fs16\lang1024 maybe} or {
\cs58\f5\fs16\lang1024 idempotent} calls.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Datagram broadcasts are not allowed in ORPC.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Remote COM input synchronous calls are not allowed in ORPC.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}COM asynchronous calls are synchronous RPC calls.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}COM faults are returned in the stub fault field of the DCE RPC fault packet.  Any 32 bit value may be returned.  Only the following value is pre-specified:
\par \pard\plain \s99\qj\li720\ri720\sa60\sl220\slmult0\widctlpar \f8\fs20 {\cs58\f5\fs16\lang1024 RPC_E_VERSION_MISMATCH}
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s95\qj\fi-360\li360\sa60\sl220\slmult0\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f8\fs20 COM will allow DCE cancel.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 All interface version numbers must be {\cs58\f5\fs16\lang1024 0.0}.
\par {\pntext\pard\plain\b\i\fs22 15.2.2\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Object RPC Base Definitions
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 There are several fundamental data types and structures on which the COM network protocol is built. These are defined in the MIDL file {\cs58\f5\fs16\lang1024 OBASE.IDL}, which is included below:
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 [
\par     uuid(99fcfe60-5260-101b-bbcb-00aa0021347a),
\par     pointer_default(unique)
\par ]
\par 
\par interface ObjectRpcBaseTypes
\par \{
\par #ifndef DO_NO_IMPORTS
\par     import "wtypes.idl";
\par #endif
\par 
\par \tab // the object id specifed does not exist.
\par     const unsigned long RPC_E_INVALID_OBJECT = 0x80010150;
\par     // the objects exporter specifed does not exist.
\par     const unsigned long RPC_E_INVALID_OXID = 0x80010151;
\par     // the set id specifed does not exist.
\par     const unsigned long RPC_E_INVALID_SET = 0x80010152;
\par     //
\par     // Marshalling constants.
\par     const unsigned int MSHLFLAGS_NOPING     = 4;
\par     const unsigned int MSHLFLAGS_SIMPLEIPID = 8;
\par     const unsigned int MSHLFLAGS_KEEPALIVE  = 16;
\par     ////////////////////////////////////////////////////////////
\par 
\par     typedef GUID MID;\tab \tab // Machine Identifier
\par     typedef GUID OXID;\tab \tab // Object Exporter Identifier
\par     typedef GUID OID;     \tab // Object Identifer
\par     typedef GUID IPID;\tab \tab // Interface Pointer Identifier
\par     typedef GUID SETID;\tab // Ping Set Identifier
\par     typedef GUID CID;\tab \tab // Causality Identifier
\par 
\par     typedef REFGUID REFIPID;
\par     typedef REFGUID REFOXID;
\par     typedef REFGUID REFOID;
\par 
\par \tab const unsigned short COM_MAJOR_VERSION = 1;
\par     const unsigned short COM_MINOR_VERSION = 1;
\par 
\par     // Component Object Model version number
\par     typedef struct tagCOMVERSION
\par     \{
\par \tab \tab unsigned short MajorVersion;\tab // Major version number
\par \tab \tab unsigned short MinorVersion;\tab // Minor version number
\par     \} COMVERSION;
\par 
\par 
\par     // STRINGARRAYS are the return type for arrays of network addresses,
\par     // arrays of endpoints and arrays of both used in many ORPC interfaces
\par 
\par     const unsigned short NCADG_IP_UDP   = 0x08;
\par     const unsigned short NCACN_IP_TCP   = 0x07;
\par     const unsigned short NCADG_IPX      = 0x0E;
\par     const unsigned short NCACN_SPX      = 0x0C;
\par     const unsigned short NCACN_NB_NB    = 0x12;
\par     const unsigned short NCACN_DNET_NSP = 0x04;
\par     const unsigned short NCALRPC        = 0x10;
\par     // const unsigned short MSWMSG         = 0x01; // note: not a real tower id.
\par 
\par     // this is the return type for arrays of string bindings or protseqs
\par     // used by many ORPC interfaces
\par 
\par \tab typedef struct tagSTRINGARRAY
\par     \{
\par \tab \tab unsigned long size;\tab // total size of array
\par 
\par         // array of NULL terminated wchar_t strings with two NULLs at the end.
\par         // The first word of each string is the protocol ID (above) and the
\par         // rest of the string is the network address[endpoint].
\par 
\par \tab \tab [size_is(size)] unsigned short awszStringArray[];
\par     \} STRINGARRAY;
\par 
\par     // flag values for OBJREF
\par     const unsigned long OBJREF_STANDARD\tab = 1;\tab // standard marshalled objref
\par     const unsigned long OBJREF_HANDLER\tab = 2;\tab // handler marshalled objref
\par     const unsigned long OBJREF_LONGSTD\tab = 4;\tab // long form objref
\par     const unsigned long OBJREF_LONGHDLR\tab = 8;\tab // long form handler objref
\par     const unsigned long OBJREF_CUSTOM\tab = 16;\tab // custom marshalled objref
\par 
\par     // flag values for a STDOBJREF.
\par     // Should be an enum but DCE IDL does not support sparse enumerators.
\par     // OXRES1 - OXRES4 are reserved for the object exporters use only,
\par     // object importers should ignore them and not enforce MBZ.
\par     const unsigned long SORF_NOPING\tab = 1;\tab // Pinging is not required
\par     const unsigned long SORF_OXRES1\tab = 8;\tab // reserved for exporter
\par     const unsigned long SORF_OXRES2\tab = 16;\tab // reserved for exporter
\par     const unsigned long SORF_OXRES3\tab = 32;\tab // reserved for exporter
\par     const unsigned long SORF_OXRES4\tab = 64;\tab // reserved for exporter
\par 
\par     // Reserved flag values for a STDOBJREF.
\par     const unsigned long SORF_FREETHREADED = 2;  // Proxy may be used on any thread
\par 
\par     // standard object reference
\par     typedef struct tagSTDOBJREF
\par     \{
\par \tab \tab unsigned long  flags;\tab \tab // STDOBJREF flags
\par \tab \tab unsigned long  cRefs;\tab \tab // count of references passed
\par \tab \tab IPID\tab        ipid;\tab \tab // ipid of Interface
\par \tab \tab OID\tab            oid;\tab \tab // oid of object with this ipid
\par \tab \tab OXID\tab        oxid;\tab \tab // oxid of server with this oid
\par     \} STDOBJREF;
\par 
\par     // format of a marshalled interface pointer
\par     typedef struct tagOBJREF
\par     \{
\par \tab unsigned long flags; // OBJREF flags (see above)
\par 
\par \tab [switch_is(flags), switch_type(unsigned long)] union
\par \tab \{
\par \tab     [case(OBJREF_STANDARD)]
\par \tab \tab STDOBJREF std;\tab \tab // standard objref
\par 
\par \tab     [case(OBJREF_LONGSTD)] struct
\par \tab     \{
\par \tab \tab STDOBJREF   std;\tab // standard objref
\par \tab \tab STRINGARRAY saResAddr;\tab // resolver address
\par \tab     \} longstd;
\par 
\par \tab     [case(OBJREF_HANDLER)] struct
\par \tab     \{
\par \tab \tab STDOBJREF std;\tab \tab // standard objref
\par \tab \tab CLSID\tab   clsid;\tab // Clsid of handler
\par \tab     \} handler;
\par 
\par \tab     [case(OBJREF_LONGHDLR)] struct
\par \tab     \{
\par \tab \tab STDOBJREF   std;\tab // standard objref
\par \tab \tab CLSID\tab     clsid;\tab // Clsid of handler (or GUID_NULL)
\par \tab \tab STRINGARRAY saResAddr;\tab // resolver address
\par \tab     \} longhdlr;
\par 
\par \tab     [case(OBJREF_CUSTOM)] struct
\par \tab     \{
\par 
\par \tab \tab CLSID\tab       clsid;\tab // Clsid of unmarshaling code
\par \tab \tab unsigned long size;\tab // size of data that follows
\par \tab \tab [size_is(size), ref] byte *pData;
\par \tab     \} custom;
\par 
\par \tab \} u_objref;
\par     \} OBJREF;
\par 
\par 
\par     // enumeration of additional information present in the call packet.
\par     // Should be an enum but DCE IDL does not support sparse enumerators.
\par 
\par     const unsigned long INFO_NULL      = 0;  // no additional info in packet
\par     const unsigned long INFO_LOCAL     = 1;  // call is local to this machine
\par     const unsigned long INFO_RESERVED1 = 2;  // reserved for local use
\par     const unsigned long INFO_RESERVED2 = 4;  // reserved for local use
\par     const unsigned long INFO_RESERVED3 = 8;  // reserved for local use
\par     const unsigned long INFO_RESERVED4 = 16; // reserved for local use
\par 
\par 
\par     // Extension to implicit parameters.
\par     typedef struct tagORPC_EXTENT
\par     \{
\par         GUID                    id;     // Extension identifier.
\par \tab unsigned long               size;   // Extension size.
\par \tab [size_is((size+7)&~7)] byte data[]; // Extension data.
\par     \} ORPC_EXTENT;
\par 
\par 
\par     // Array of extensions.
\par     typedef struct tagORPC_EXTENT_ARRAY
\par     \{
\par \tab unsigned long size;   // num extents
\par \tab [size_is((size+1)&~1,), unique] ORPC_EXTENT **extent; // extents
\par     \} ORPC_EXTENT_ARRAY;
\par 
\par 
\par     // implicit 'this' pointer which is the first [in] parameter on
\par     // every ORPC call.
\par     typedef struct tagORPCTHIS
\par     \{
\par \tab COMVERSION\tab version;\tab // COM version number
\par \tab unsigned long\tab flags;  // INFO flags for presence of other data
\par \tab unsigned long\tab reserved1; // set to zero
\par \tab CID\tab \tab cid;\tab \tab // causality id of caller
\par 
\par         // Extensions.
\par \tab [unique] ORPC_EXTENT_ARRAY *extensions;
\par     \} ORPCTHIS;
\par 
\par 
\par     // implicit 'that' pointer which is the first [out] parameter on
\par     // every ORPC call.
\par     typedef struct tagORPCTHAT
\par     \{
\par \tab unsigned long  flags; // INFO flags for presence of other data
\par 
\par         // Extensions.
\par \tab [unique] ORPC_EXTENT_ARRAY *extensions;
\par     \} ORPCTHAT;
\par 
\par 
\par     // OR information associated with each OXID.
\par     typedef struct tagOXID_INFO
\par     \{
\par \tab DWORD\tab     dwTid;\tab \tab // thread id of object exporter
\par \tab DWORD\tab     dwPid;\tab \tab // process id of object exporter
\par \tab IPID\tab     ipidRemUnknown;  // IRemUnknown IPID for object exporter
\par \tab [unique] STRINGARRAY *psa;   // protocol id's and partial string bindings
\par     \} OXID_INFO;
\par \}
\par {\*\bkmkstart _Toc324051676}{\*\bkmkstart _Toc324051863}{\*\bkmkstart _Toc324052103}{\*\bkmkstart _Toc335041491}{\pntext\pard\plain\b\i\fs22 15.2.3\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 
{\pntxtb .}}\b\i\f4\fs22 OBJREF{\*\bkmkend _Toc324051676}{\*\bkmkend _Toc324051863}{\*\bkmkend _Toc324052103}{\*\bkmkend _Toc335041491}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 
{\xe {\b0\i0\fs12 OBJREF}}}{\*\bkmkstart _Toc335041492}{\*\bkmkend _Toc335041492}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An {\cs58\f5\fs16\lang1024 OBJREF }is the data type used to represent an actual marshaled object reference. An {\cs58\f5\fs16\lang1024 OBJREF }
can either be empty or assume one of five variations, depending on the degree to which the object being marshaled uses the hook architecture ({\cs58\f5\fs16\lang1024 IMarshal}, etc.) in the marshaling infrastructure.  The {\cs58\f5\fs16\lang1024 OBJREF }
structure is a union consisting of a switch flag followed by the appropriate data. 
\par {\pntext\pard\plain\b\fs20\lang1024 15.2.3.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 OBJREF_STANDARD{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 OBJREF_STANDARD}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Contains one interface of an object marshaled in standard form.  The data that follows the switch flag is a {\cs58\f5\fs16\lang1024 STDOBJREF} structure (described below).
\par {\pntext\pard\plain\b\fs20\lang1024 15.2.3.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 OBJREF_HANDLER{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 OBJREF_HANDLER}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 A marshaling of an object that wishes to use handler marshaling. For example, an object wishes to be represented in client address spaces by a proxy object that caches state. In this case, the class-specific informa
tion is just a standard reference to an interface pointer that the handler (proxy object) will use to communicate with the original object.  See the {\cs58\f5\fs16\lang1024 IStdMarshalInfo}{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {
\cs58\f5\fs12\lang1024 IStdMarshalInfo}}}{\cs58\f5\fs16\lang1024  }interface.
\par \trowd \trgaph108\trleft-108 \cellx990\cellx2413\cellx8640 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Type\cell Semantic\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx990\cellx2413\cellx8640 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 std\cell STDOBJREF\cell }A standard object reference used to connect to the source object.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd 
\trgaph108\trleft-108 \cellx990\cellx2413\cellx8640 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Clsid\cell CLSID\cell }The {\cs58\f5\fs16\lang1024 CLSID }
of handler to create in the destination client.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row {\pntext\pard\plain\b\fs20\lang1024 15.2.3.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}
\b\f4\fs20\lang1024 OBJREF_LONGSTD{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 OBJREF_LONGSTD}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An interface marshaled on an object in long form. Contains a standard reference, along with a set of protocol sequences and network addresses that can be used to bind to an {\cs58\f5\fs16\lang1024 OXID}
 resolver that is able to resolve the {\cs58\f5\fs16\lang1024 OXID} in the {\cs58\f5\fs16\lang1024 STDOBJREF}. This is useful when marshaling a proxy to give to another machine (a.k.a. the \ldblquote middleman\rdblquote {\pard\plain \qj\sa60\widctlpar 
\v\f4\fs12 {\xe {\fs12 middleman}}} case). The marshaling machine can specify the {\cs58\f5\fs16\lang1024 saResAddr} for the resolver on the server ma
chine so that the unmarshaler does not need to call the marshaler (middleman) back to get this information. Further, the marshaler does not need to keep the {\cs58\f5\fs16\lang1024 OXID} in i
ts cache beyond the lifetime of its own references in order to satisfy requests from parties that it just gave the {\cs58\f5\fs16\lang1024 OBJREF} to.
\par \trowd \trgaph108\trleft-108 \cellx990\cellx2413\cellx8640 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Type\cell Semantic\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx990\cellx2413\cellx8640 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 std\cell STDOBJREF\cell }A standard object reference used to connect to the source object.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd 
\trgaph108\trleft-108 \cellx990\cellx2413\cellx8640 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 SaResAddr\cell STRINGARRAY\cell }The resolver address.\cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row {\pntext\pard\plain\b\fs20\lang1024 15.2.3.4\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 OBJREF_LONGHDLR{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 OBJREF_LONGHDLR}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Contains the same information as the handler case as well as the object resolver address.  This form is needed for the same reason {\cs58\f5\fs16\lang1024 OBJREF_LONGSTD} is needed.
\par \trowd \trgaph108\trleft-108 \cellx990\cellx2413\cellx8640 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Type\cell Semantic\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx990\cellx2413\cellx8640 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 std\cell STDOBJREF\cell }A standard object reference used to connect to the source object.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Clsid\cell CLSID\cell }The class ID of the handler.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx990
\cellx2413\cellx8640 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 SaResAddr\cell STRINGARRAY\cell }The resolver address.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row {\pntext\pard\plain
\b\fs20\lang1024 15.2.3.5\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 OBJREF_CUSTOM{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 OBJREF_CUSTOM}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
A marshaling of an object which supports custom marshaling. The Custom format gives an object control over the representation of references to itself. For example, an immutable object might be passed by value, in which case the class-specific information 
would contain the object\rquote s immutable data.  See the {\cs58\f5\fs16\lang1024 IMarshal}{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 IMarshal}}}{\cs58\f5\fs16\lang1024  }interface. 
\par \trowd \trgaph108\trleft-108 \cellx900\cellx2283\cellx8640 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Type\cell Semantic\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx900\cellx2283\cellx8640 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 clsid\cell CLSID\cell }The {\cs58\f5\fs16\lang1024 CLSID }of the object to create in the destination client.\cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 size\cell unsigned long\cell }The size of the marshaled data provided by the source object and passed here in {
\cs58\f5\fs16\lang1024 pData}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx900\cellx2283\cellx8640 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 pData
\cell byte*\cell }The data bytes that should be passed to {\cs58\f5\fs16\lang1024 IMarshal::UnmarshalInterface }on a new instance of class {\cs58\f5\fs16\lang1024 clsid} in order to initialize it and complete the unmarshal process.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row {\pntext\pard\plain\b\i\fs22 15.2.4\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 STDOBJREF{\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 {\xe {\b0\i0\fs12 STDOBJREF}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 An instance of a {\cs58\f5\fs16\lang1024 STDOBJREF }represents a COM interface pointer that has been marshaled using the standard COM network protocol. A {\cs58\f5\fs16\lang1024 STDOBJREF }
in general can only be interpreted in the context of an outstanding ORPC, for it may contain an {\cs58\f5\fs16\lang1024 OXID }
unknown to the machine on which it is unmarshaled, and it is the only the machine which is making outstanding call which is guaranteed to be able to provide the binding information for the {\cs58\f5\fs16\lang1024 OXID}.
\par The members and semantics of the {\cs58\f5\fs16\lang1024 STDOBJREF }structure are as follows:
\par \trowd \trgaph108\trleft-108 \cellx1440\cellx8748 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Semantic\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1440\cellx8748 \pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 flags\cell }Flag values taken from the enumeration {\cs58\f5\fs16\lang1024 SORFFLAGS}. These are described below.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Crefs\cell }The number of reference counts on {\cs58\f5\fs16\lang1024 ipid }that being transferred in this marshaling.\cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Ipid\cell }The {\cs58\f5\fs16\lang1024 IPID }of the interface being marshaled.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Oid\cell }The {\cs58\f5\fs16\lang1024 OID }of the object to which {\cs58\f5\fs16\lang1024 ipid }corresponds.\cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1440\cellx8748 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Oxid\cell }The {\cs58\f5\fs16\lang1024 OXID }of the server that owns this {
\cs58\f5\fs16\lang1024 OID}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \f4\fs20 The various {\cs58\f5\fs16\lang1024 SORFLAGS}{\pard\plain \s44\qj\sb60\sa58\keepn\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {
\cs58\f5\fs12\lang1024 SORFLAGS}}}{\cs58\f5\fs16\lang1024  }values have the following meanings. The {\cs58\f5\fs16\lang1024 SORF_OXRESx} bit flags are reserved for the object exporter\rquote 
s use only, and must be ignored by object importers. They need not be passed through when marshaling an interface proxy.
\par \trowd \trgaph108\trleft-108 \cellx1440\cellx2250\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Flag\cell Value\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1440\cellx2250\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 SORF_NOPING}\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 {\cs58\f5\fs16\lang1024 1}\cell \pard 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 This {\cs58\f5\fs16\lang1024 OID} does not require pinging. Further, all interfaces on this {\cs58\f5\fs16\lang1024 OID}, including this {\cs58\f5\fs16\lang1024 IPID}
, need not be reference counted. Pinging and reference counting on this object and its interfaces are still permitted, however, though such action is pointless.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 SORF_OXRES1\cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 {\cs58\f5\fs16\lang1024 8\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 Reserved for exporter.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 SORF_OXRES2\cell }\pard \s53\qc\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 {\cs58\f5\fs16\lang1024 16\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 Reserved for exporter.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 SORF_OXRES3\cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 {\cs58\f5\fs16\lang1024 32\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 Reserved for exporter.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1440\cellx2250\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 
SORF_OXRES4\cell }\pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 {\cs58\f5\fs16\lang1024 64\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 Reserved for exporter.\cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row {\*\bkmkstart _Toc324051677}{\*\bkmkstart _Toc324051864}{\*\bkmkstart _Toc324052104}{\*\bkmkstart _Toc335041493}{\pntext\pard\plain\b\i\fs22 15.2.5\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 ORPCTHIS{\*\bkmkend _Toc324051677}{\*\bkmkend _Toc324051864}{\*\bkmkend _Toc324052104}{\*\bkmkend _Toc335041493}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 {\xe {\b0\i0\fs12 ORPCTHIS}}}{\*\bkmkstart _Toc335041494}{\*\bkmkend _Toc335041494}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In every Request PDU{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Request PDU}}}
 that is an ORPC, the body (CL case) or the stub data (CO case) which normally contains the marshaled arguments in fact begins with an instance of the {\cs58\f5\fs16\lang1024 ORPCTHIS }
structure. The marshaled arguments of the COM interface invocation follow the {\cs58\f5\fs16\lang1024 ORPCTHIS}; thus, viewed at the DCE RPC perspective, the call has an additional first argument. The {\cs58\f5\fs16\lang1024 ORPCTHIS}
 is padded with zero-bytes if necessary to achieve an overall size that is a multiple of eight bytes; thus, the remaining arguments are as a whole eight byte aligned.
\par As in regular calls, the causality id must be propagated.  If A calls {\cs58\f5\fs16\lang1024 ComputePi} on B, B calls {\cs58\f5\fs16\lang1024 Release} on C (which gets converted to {\cs58\f5\fs16\lang1024 RemRelease}), and C calls {
\cs58\f5\fs16\lang1024 Add} on A, A will see the same causality id that it called B with.
\par \trowd \trgaph108\trleft-108 \cellx900\cellx3060\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Type\cell Semantic\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx900\cellx3060\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 version\cell COMVERSION\cell }
The version number of the COM protocol used to make this particular ORPC.  The initial value will be 1.1. Each packet contains the sender\rquote s major and minor ORPC version numbers.  The client\rquote s and server\rquote 
s major versions must be equal.  Backward compatible changes in the protocol are indicated by higher minor version numbers.  Therefore, a server\rquote s minor version must be greater than or equal to the client\rquote s.  However, if the server\rquote 
s minor version exceeds the client\rquote s minor version, it must return the client\rquote s minor version and restrict its use of the protocol to the minor version specified by the client.  A protocol version mismatch causes the {\cs58\f5\fs16\lang1024 
RPC_E_VERSION_MISMATCH ORPC} fault to be returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 flags\cell unsigned long\cell }
Flag values taken from the enumeration {\cs58\f5\fs16\lang1024 ORPCINFOFLAGS}. These are elaborated below.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 reserved\cell unsigned long\cell }Must be set to zero.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 cid\cell CID\cell }
The causality id of this ORPC.  See comments below.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx900\cellx3060\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 extensions\cell ORPC_EXTENT_ARRAY*\cell }The body extensions, if any, passed with this call. Body extensions are {\cs58\f5\fs16\lang1024 GUID}-tagged blobs of data which are marshaled as an array of bytes. Ex
tensions are always marshaled with initial eight byte alignment. Body extensions which are presently defined are described below.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 The various {
\cs58\f5\fs16\lang1024 ORPCINFOFLAGS}{\pard\plain \s44\qj\sb60\sa58\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 ORPCINFOFLAGS}}}{\cs58\f5\fs16\lang1024  }have the following meanings.
\par \trowd \trgaph108\trleft-108 \cellx1620\cellx8748 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Flag\cell Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1620\cellx8748 \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 INFO_NULL}\cell (Not a real flag. Merely a defined constant indicating the absence of any flag values.)\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 INFO_LOCAL\cell }The destination of this call is on the same machine on which it originates. This value is never to be specified in calls which are not in fact local.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 INFO_RESERVED1\cell }If {\cs58\f5\fs16\lang1024 INFO_LOCAL }
is set, then reserved for local use; otherwise, reserved for future use.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 INFO_RESERVED2\cell }If {
\cs58\f5\fs16\lang1024 INFO_LOCAL }is set, then reserved for local use; otherwise, reserved for future use.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 INFO_RESERVED3\cell }If {\cs58\f5\fs16\lang1024 INFO_LOCAL }is set, then reserved for local use; otherwise, reserved for future use.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1620\cellx8748 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 INFO_RESERVED4\cell }If {\cs58\f5\fs16\lang1024 INFO_LOCAL }is set, then reserved for local use; otherwise, reserved for future use.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \pard \qj\sa60\widctlpar {\*\bkmkstart _Toc324051678}{\*\bkmkstart _Toc324051865}{\*\bkmkstart _Toc324052105}{\*\bkmkstart _Toc335041495}
Implementations may use the local and reserved flags to indicate any extra information needed for local calls.  Note that if {\cs58\f5\fs16\lang1024 the INFO_LOCAL }bit is not set and any of the other bits {\i are}
 set then the receiver should return a fault.  
\par {\b Comments
\par }The {\cs58\f5\fs16\lang1024 cid} field contains the causality id.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab In several early specifications the term {\i logical thread id}
 was used instead of causality id.  The name was changed because the term logical thread id implies a single threaded model that is not guaranteed.}}
  Each time a client makes a call, a new causality id is generated.  If a server makes a call while processing a request from a client, the new call must have the same causality id.  This allows simple servers to avoid working on more then one thing at a 
time (for example A calls B calls A again, meanwhile C tries to call A with a new causality id).  It tells the server that he is being called because he asked someone to do something for him.  There are several interesting exceptions.  
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard \qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}The causality id for {\cs58\f5\fs16\lang1024 maybe} and {\cs58\f5\fs16\lang1024 idempotent} calls must be set to {
\cs58\f5\fs16\lang1024 CID_NULL}.  If a server makes a ORPC call while processing such a call, a new causality id must be generated.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}
In the face of network failures, the same causality id may end up in use by two independent processes at the same time.  If A calls B calls C calls D and C fails, both B and D can independently, simultaneously make calls to E with the same causality id.

\par \pard \qj\sa60\widctlpar The {\cs58\f5\fs16\lang1024 extensions }field contains extensions to the channel header.  Two are currently defined for Microsoft\rquote 
s implementation of this protocol (described below).  Other implementations may define their own extensions with their own UUIDs.  Implementations should skip over extensions they do not recognize or wish to support.  Note that in order to force the {
\cs58\f5\fs16\lang1024 ORPCTHIS} header to be 8 byte aligned an even number of extensions must be present and the size of the extension data must be a multiple of 8.
\par {\pntext\pard\plain\b\i\fs22 15.2.6\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 ORPCTHAT{\*\bkmkend _Toc324051678}{\*\bkmkend _Toc324051865}{\*\bkmkend _Toc324052105}
{\*\bkmkend _Toc335041495}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\v\f4\fs22 {\xe {ORPCTHAT}}}{\*\bkmkstart _Toc335041496}{\*\bkmkend _Toc335041496}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 In every Response PDU that is an ORPC, the body (CL case) or the stub data (CO case) which normally contains the marshaled output parameters in fact begins with an instance of the {\cs58\f5\fs16\lang1024 ORPCTHAT }
structure. The marshaled output parameters of the COM interface invocation follow the {\cs58\f5\fs16\lang1024 ORPCTHAT}; thus, viewed at the DCE RPC perspective, the call has an additional output parameters. The {\cs58\f5\fs16\lang1024 ORPCTHAT }
is padded with zero-bytes if necessary to achieve an overall size that is a multiple of eight bytes; thus, the remaining output parameters as a whole eight byte aligned.
\par \trowd \trgaph108\trleft-108 \cellx1079\cellx3240\cellx8640 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Type\cell Semantic\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1079\cellx3240\cellx8640 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 flags\cell unsigned long\cell }Flag values taken from the enumeration {\cs58\f5\fs16\lang1024 ORPCINFOFLAGS}. These are elaborated above. \cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1080\cellx3240\cellx8640 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 extensions\cell ORPC_EXTENT_ARRAY*\cell }
The body extensions, if any, returned by this call. Body extensions are {\cs58\f5\fs16\lang1024 GUID}-tagged blobs of data which are marshaled as an array of bytes. Extensions are always marshaled with initial eight byte alignment. \cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row {\*\bkmkstart _Toc324051680}{\*\bkmkstart _Toc324051867}{\*\bkmkstart _Toc324052107}{\*\bkmkstart _Toc335041499}{\pntext\pard\plain\b\i\fs22 15.2.7\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Debug Information Body Extension{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 {\xe {\b0\i0\fs12 Debug}}}{\pard\plain 
\s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 {\xe {\b0\i0\fs12 Debug Information Body Extension}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This extension aids in debugging ORPC.  In particular it is designed to allow single stepping over an ORPC call into the server and out of the server into the client.  See << REFERENCE >> for more de
tails.  This extension is identified by the {\cs58\f5\fs16\lang1024 UUID} {\cs58\f5\fs16\lang1024 \{f1f19680-4d2a-11ce-a66a-0020af6e72f4\}}.
\par {\pntext\pard\plain\b\i\fs22 15.2.8\tab}\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\i\f4\fs22 Extended Error Info{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3
\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 {\xe {\b0\i0\fs12 Error Info}}}{\pard\plain \s3\ri2160\sb240\sa86\keepn\widctlpar{\*\pn \pnlvl3\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12 {\xe {\b0\i0\fs12 Extended Error Info}}}
 Body Extension{\*\bkmkstart _Toc335041500}{\*\bkmkend _Toc324051680}{\*\bkmkend _Toc324051867}{\*\bkmkend _Toc324052107}{\*\bkmkend _Toc335041499}{\*\bkmkend _Toc335041500}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
The extended error information body extension conveys extended error information concerning the original root cause of a error back to a caller can deal with it. It is intended that this error information is suitable for displaying information to a human 
being who is the user; this information is not intended to be the basis for logi
c decisions in a piece of client code, for doing so couples the client code to the implementation of the server. Rather, client code should act semantically only on the information returned through the interface that it invokes. See also the {
\cs58\f5\fs16\lang1024 ISupportErrorInfo}{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 ISupportErrorInfo}}}, {\cs58\f5\fs16\lang1024 IErrorInf}o{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 IErrorInfo}}}
, and {\cs58\f5\fs16\lang1024 ICreateError\-Info}{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 ICreateError\-Info}}}{\cs58\f5\fs16\lang1024  }interfaces. 
\par This extension is identified by the {\cs58\f5\fs16\lang1024 UUID} {\f5\fs16\lang1024 f1f19681-4d2a-11ce-a66a-0020af6e72f4}. It is only semantically useful in Response and Fault PDUs.
\par T
here are three variations of the error information. The first of these can be used in a local context, where a) the server knows it can reliably specify a path name to a file that can in fact be understood by the client, and b) the server knows the langua
ge of interest to the client. This first variation specifies the following members:
\par \trowd \trgaph108\trleft-108 \cellx1440\cellx8748 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Description\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1440\cellx8748 \pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 wszErrorString\cell }An error string suitable for display to a human user.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 wszHelpFile\cell }A path to a help file that can give additional information concerning the error.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1440\cellx8748 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 ulHelpContext\cell }A help context topic within that help file.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s44\qj\sb60\sa58\widctlpar \f4\fs20 The second variation is suitable for use in remote situations where one or the other of the requirements of the use of the first variation cannot be upheld. This second variation specifies the following members:
\par \trowd \trgaph108\trleft-108 \cellx1440\cellx8748 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Description\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx1440\cellx8748 \pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 uuidErrorSemantic\cell }A {\cs58\f5\fs16\lang1024 UUID }signifying the semantic of the error.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 ulErrorSemantic}\cell A four-byte quantity that qualifies the error semantic. The semantics of these four bytes are completely determined by the {\cs58\f5\fs16\lang1024 
uuidErrorSemantic.}\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 cbData\cell }The size of the data passed in {\cs58\f5\fs16\lang1024 pbData}.
\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 pbData\cell }
Data associated with the error marshaled as an array of bytes. The interpretation of these bytes is governed by the {\cs58\f5\fs16\lang1024 uuidErrorSemantic.}\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 wszErrorString}\cell An error string suitable for display to a human user. This is in fact of somewhat little u
se, as the server returning the error can usually only guess as to the appropriate language in which to form this string. However, the ability to pass such as string as a last resort is provided here.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\trowd \trgaph108\trleft-108 \cellx1440\cellx8748 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 lcidErrorString\cell }
The locale context in which the error string, if any, is formed. Locale constants are as in the Microsoft Win32 API.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 
The third variation allows for extensibility of the error information being passed. It specifies an object reference (an {\cs58\f5\fs16\lang1024 OBJREF}). In practice, this reference most always contai
ns a custom marshaled object, though this is not required.
\par {\*\bkmkstart _Toc324051682}{\*\bkmkstart _Toc324051869}{\*\bkmkstart _Toc324052109}{\*\bkmkstart _Toc335041503}{\*\bkmkstart _Toc337439378}{\*\bkmkstart _Toc337440844}{\*\bkmkstart _Toc337870089}{\*\bkmkstart _Toc338915503}{\*\bkmkstart _Toc339183001}
{\pntext\pard\plain\b 15.3\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 IRemUnknown interface{\*\bkmkend _Toc324051682}{\*\bkmkend _Toc324051869}
{\*\bkmkend _Toc324052109}{\*\bkmkend _Toc335041503}{\*\bkmkend _Toc337439378}{\*\bkmkend _Toc337440844}{\*\bkmkend _Toc337870089}{\*\bkmkend _Toc338915503}{\*\bkmkend _Toc339183001}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 IRemUnknown}{\pard\plain \qj\sa60\widctlpar \cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 IRemUnknown}}}{\cs58\f5\fs16\lang1024  }
interface is used by remote clients for manipulating reference counts on the {\cs58\f5\fs16\lang1024 IPIDs }that they hold and for obtaining additional interfaces on the objects on which those {\cs58\f5\fs16\lang1024 IPIDs }
are found. This interface is implemented by the COM \ldblquote OXID object{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 OXID object}}}\rdblquote  associated with each {\cs58\f5\fs16\lang1024 OXID} (nb. not each Object Exporter). The {
\cs58\f5\fs16\lang1024 IPID} for the {\cs58\f5\fs16\lang1024 IRemUnknown }interface on this object is returned from {\cs58\f5\fs16\lang1024 IObjectEx\-porter\-::\-ResolveOxid}; see below. An {\cs58\f5\fs16\lang1024 OXID }
object need never be pinged; its interfaces (this {\cs58\f5\fs16\lang1024 IPID }included) need never be reference counted.
\par {\cs58\f5\fs16\lang1024 IRemUnknown }is specified as follows ({\cs58\f5\fs16\lang1024 REMUNK.IDL}):
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
//+-------------------------------------------------------------------------
\par //
\par //  Microsoft Windows
\par //  Copyright (C) Microsoft Corporation, 1992 - 1995.
\par //
\par //  File:   remunk.idl
\par //
\par //  The remote version of IUnknown.  Once instance of this interface exists 
\par //  per OXID (whether an OXID represents either a thread or a process is   
\par //  implementation specific). This interface is passed along during OXID 
\par //  resolution.  It is used by clients to query for new interfaces, get 
\par //  additional references (for marshalling), and release outstanding 
\par //  references.
\par //
\par //+-------------------------------------------------------------------------
\par [
\par     object,
\par     uuid(99fcff28-5260-101b-bbcb-00aa0021347a)
\par ]
\par 
\par import "unknwn.idl";
\par 
\par interface IRemUnknown : IUnknown
\par \{
\par \tab // return structure from a QI call
\par     typedef struct tagREMQIRESULT
\par     \{
\par \tab \tab HRESULT\tab \tab hResult;\tab // result of call
\par \tab \tab STDOBJREF\tab std;\tab \tab // data for returned interface
\par     \} REMQIRESULT;
\par 
\par     HRESULT RemQueryInterface
\par     (
\par \tab    \tab [in] IPID              ipid,\tab // interface to QI on
\par \tab \tab [in] unsigned long\tab cRefs,  // count of AddRefs requested for each interface
\par \tab \tab [in] unsigned short\tab cIids,\tab // count of IIDs that follow
\par \tab \tab [in, size_is(cIids)] IID *iids, // IIDs to query for
\par \tab \tab [out, size_is(,cIids)] REMQIRESULT **ppQIResults // results returned
\par     );
\par 
\par 
\par \tab // structure passed to AddRef/Release to specify interface and count of
\par \tab // references to Add/Release.
\par     typedef struct tagREMINTERFACEREF
\par     \{
\par \tab     IPID\tab \tab ipid;\tab \tab // ipid to AddRef/Release
\par \tab     unsigned long\tab cRefs;\tab \tab // number of refs to add/release
\par     \} REMINTERFACEREF;
\par 
\par     HRESULT RemAddRef
\par     (
\par \tab     [in] unsigned short cInterfaceRefs,
\par \tab     [in, size_is(cInterfaceRefs)] REMINTERFACEREF InterfaceRefs[]
\par     );
\par 
\par     HRESULT RemRelease
\par     (
\par \tab     [in] unsigned short cInterfaceRefs,
\par \tab     [in, size_is(cInterfaceRefs)] REMINTERFACEREF InterfaceRefs[]
\par     );
\par \}
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\b Comments
\par }References are kept per interface rather then per object.  
\par {\pntext\pard\plain\b\fs20\lang1024 15.3.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRemUnknown::RemQueryInterface{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 IRemUnknown\:functions\:RemQueryInterface}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRemUnknown::RemQueryInterface(ipid, cIids, cRefs, iids, ppQIResults)
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 QueryInterface }for and return the result thereof for zero or more interfaces from the interface behind the {\cs58\f5\fs16\lang1024 IPID ipid}. {\cs58\f5\fs16\lang1024 ipid }
must designate an interface derived from {\cs58\f5\fs16\lang1024 IUnknown }(recall that all remoted interfaces must derive from {\cs58\f5\fs16\lang1024 IUnknown}). The {\cs58\f5\fs16\lang1024 QueryInterface calls }
on the object that are used to service this request are conducted on this interface instance, not any other {\cs58\f5\fs16\lang1024 IUnknown }instance that the object may happen to have. Thus if the client calls {\cs58\f5\fs16\lang1024 
IFoo->QueryInterface} rather then {\cs58\f5\fs16\lang1024 pIUnknown->QueryInterface}, {\cs58\f5\fs16\lang1024 RemQueryInterface} will also call {\cs58\f5\fs16\lang1024 QueryInterface} on {\cs58\f5\fs16\lang1024 IFoo}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 ipid\tab IPID}\tab The interface on an object from whom more interfaces are desired.
\par {\cs58\f5\fs16\lang1024 cRefs\tab REFCNT}\tab The number of references sought on each of the returned IIDs.
\par {\cs58\f5\fs16\lang1024 cIids\tab USHORT}\tab The number of interfaces being requested.
\par {\cs58\f5\fs16\lang1024 iids\tab IID*\tab }The list of {\cs58\f5\fs16\lang1024 IIDs} that name the interfaces sought on this object.
\par {\cs58\f5\fs16\lang1024 ppQIResults}\tab {\cs58\f5\fs16\lang1024 REMQIRESULT**\tab }The place at which the array of the results of the various {\cs58\f5\fs16\lang1024 QueryInterface }calls are returned. 
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. An attempt was made to retrieve each of the requested interfaces from the indicated object; that is, {\cs58\f5\fs16\lang1024 
QueryInterface }was actually invoked for each {\cs58\f5\fs16\lang1024 IID}.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_INVALIDARG\cell }
One or more arguments (likely {\cs58\f5\fs16\lang1024 ipid}) were invalid. No result values are returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unspecified error occurred. No result values are returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s44\qj\sb60\sa58\widctlpar 
\f4\fs20 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The {\cs58\f5\fs16\lang1024 REMQIRESULT} structure contains the following members:
\par \trowd \trgaph108\trleft-108 \cellx900\cellx2283\cellx8640 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 Member\cell Type\cell Semantic\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx900\cellx2283\cellx8640 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 hResult\cell HRESULT\cell }The result code from the {\cs58\f5\fs16\lang1024 QueryInterface} call made for the requested {\cs58\f5\fs16\lang1024 
IID.}\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx900\cellx2282\cellx8640 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 std\cell STDOBJREF\cell }
The data for the returned interface. Note that if {\cs58\f5\fs16\lang1024 hResult} indicates failure then the contents of {\cs58\f5\fs16\lang1024 STDOBJREF} are undefined{\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\cs58\v\f5\fs12\lang1024 {\xe {\cs58\f5\fs12\lang1024 OBJREF_NULL}}}{\cs58\f5\fs16\lang1024 .}\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard \qj\sa60\widctlpar 
\par {\pntext\pard\plain\b\fs20\lang1024 15.3.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRemUnknown::RemAddRef{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 IRemUnknown\:functions\:RemAddRef}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRemUnknown::RemAddRef(cInterfaceRefs, rgRefs)
\par \pard\plain \qj\sa60\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \f4\fs20 Obtain and grant ownership to the caller of one or more reference{\cs58\f5\fs16\lang1024  }counts{\cs58\f5\fs16\lang1024  }on one or more {
\cs58\f5\fs16\lang1024 IPIDs }managed by the corresponding {\cs58\f5\fs16\lang1024 OXID}. 
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1260 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1260 \f4\fs20 {\cs58\f5\fs16\lang1024 cInterfaceRefs\tab unsigned short\tab }The size of the {\cs58\f5\fs16\lang1024 rgRefs }array.
\par {\cs58\f5\fs16\lang1024 rgRefs\tab REMINTERFACEREF\tab }An array of {\cs58\f5\fs16\lang1024 IPID, cRefs }pairs, {\cs58\f5\fs16\lang1024 cInterfaceRefs large}. Each {\cs58\f5\fs16\lang1024 IPID }indicates an interface managed by this {
\cs58\f5\fs16\lang1024 OXID }on whom more reference counts are sought. The corresponding reference count ({\cs58\f5\fs16\lang1024 cRefs}), which may not be zero (and thus is one or more), indicates the number of reference counts sought on that {
\cs58\f5\fs16\lang1024 IPID}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. An attempt was made to retrieve each of the requested interfaces.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_INVALIDARG\cell }One or more of the {\cs58\f5\fs16\lang1024 IPIDs}
 indicated were not in fact managed by this OXID, or one or more of the requested reference counts was zero. {\b None }of the requested reference counts{\cs58\f5\fs16\lang1024  }have been granted to the caller; the call is a no-op.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }
An unspecified error occurred. It is unknown whether any or all of the requested reference counts have been granted.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 {\b Comments
\par }\pard\plain \qj\sa60\widctlpar \f4\fs20 A useful optimization is for a caller to {\cs58\f5\fs16\lang1024 RemAddRef} more than needed.  When a process receives an {\cs58\f5\fs16\lang1024 out} mar
shaled interface, it receives one reference count.  If the process wishes to pass that interface as an {\cs58\f5\fs16\lang1024 out} parameter, it must get another reference to pass along.  Instead, the process (or mi
ddleman) should get a large number of references.  Then if the interface is passed out multiple times, no new remote calls are needed to gain additional references. 
\par A marshaler may optionally specify more than one reference in the {\cs58\f5\fs16\lang1024 STDOBJREF} when marshaling an interface. This allows the middle man case to pre-fill its cache of references without making an extra {\cs58\f5\fs16\lang1024 
RemAddRef} call.  The number of references passed is always specified in the {\cs58\f5\fs16\lang1024 STDOBJREF} field.
\par {\pntext\pard\plain\b\fs20\lang1024 15.3.1.3\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IRemUnknown::RemRelease{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 IRemUnknown\:functions\:RemRelease}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT IRemUnknown::RemRelease(cInterfaceRefs, rgRefs)
\par \pard\plain \qj\sa60\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \f4\fs20 Release ownership of one or more reference counts{\cs58\f5\fs16\lang1024  }on one or more {\cs58\f5\fs16\lang1024 IPIDs }managed by the corresponding 
{\cs58\f5\fs16\lang1024 OXID}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1260 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1260 \f4\fs20 {\cs58\f5\fs16\lang1024 cInterfaceRefs\tab USHORT\tab }The size of the {\cs58\f5\fs16\lang1024 rgRefs }array.
\par {\cs58\f5\fs16\lang1024 rgRefs\tab REMINTERFACEREF}\tab An array of {\cs58\f5\fs16\lang1024 IPID}, {\cs58\f5\fs16\lang1024 cRefs} pairs, {\cs58\f5\fs16\lang1024 cInterfaceRefs} large. Each {\cs58\f5\fs16\lang1024 IPID}
 indicates an interface managed by this {\cs58\f5\fs16\lang1024 OXID} on whom more reference counts are being returned. The corresponding reference count, which may not be zero (and thus is one
 or more), indicates the number of reference counts returned on that {\cs58\f5\fs16\lang1024 IPID}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. An attempt was made to retrieve each of the requested interfaces.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_INVALIDARG\cell }\pard\plain \qj\sa60\widctlpar\intbl\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \f4\fs20 {\fs18 One or more of the }{
\cs58\f5\fs16\lang1024 IPIDs}{\fs18  indicated were not in fact managed by this }{\cs58\f5\fs16\lang1024 OXID}{\fs18 , or one or more of the requested reference counts was zero. }{\b\fs18 None}{\fs18 
 of the offered reference counts have been accepted by the server; the call is a no-op.}\cell \pard \widctlpar\intbl {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unspecified error occurred. It is unknown whether any or all of the offered reference counts have been accepted.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\*\bkmkstart _Toc337870090}
{\*\bkmkstart _Toc338915504}{\*\bkmkstart _Toc324051683}{\*\bkmkstart _Toc324051870}{\*\bkmkstart _Toc324052110}{\*\bkmkstart _Toc335041504}{\*\bkmkstart _Toc337439379}{\*\bkmkstart _Toc337440845}{\*\bkmkstart _Toc339183002}{\pntext\pard\plain\b 15.4\tab}
}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 The Object Exporter{\*\bkmkstart _Toc337870091}{\*\bkmkstart _Toc338915505}{\*\bkmkend _Toc337870090}
{\*\bkmkend _Toc338915504}{\*\bkmkend _Toc337870091}{\*\bkmkend _Toc338915505}{\*\bkmkend _Toc339183002}{\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\v\f4\fs12 {\xe {\fs12 
Object Exporter}}}{\*\bkmkstart _Toc339183003}{\*\bkmkend _Toc339183003}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\*\bkmkend _Toc324051683}{\*\bkmkend _Toc324051870}{\*\bkmkend _Toc324052110}{\*\bkmkend _Toc335041504}{\*\bkmkend _Toc337439379}{\*\bkmkend _Toc337440845}
Each machine that supports the COM network protocol supports a one-per-machine service known as the machine\rquote s \lquote Object Exporter{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Object Exporter}}}.\rquote 
 Communication with an Object Exporter is via a DCE RPC, not an ORPC. To ensure connectivity, the Object Exporter resides at well-known endpoints{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 endpoints}}}{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 
{\xe {\fs12 well-known endpoints}}}. It is proposed that the Object Exporter either (1) make use of the same endpoints allocated for the DCE RPC Endpoint Mapper (listed below){\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1
\widctlpar \f4\fs16 {\cs38\super \chftn } \tab See [CAE RPC], Appendix H, p 613.}}
, implying typically that these services are written within the same process on a given machine, or alternately and less preferably (2) that the Object Exporter reside at a different set of well-known endpoints TBD.
\par \pard \qj\sa60\keepn\widctlpar The Object Exporter performs several services:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}\pard\plain \s71\qj\fi-360\li360\sa60\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\f4\fs20 It caches and returns to clients when asked the string bindings necessary to connect to {
\cs58\f5\fs16\lang1024 OXIDs} of exported objects for which this machine is it either itself a client or is the server.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}It receives pings from remote client machines to keep its own objects alive.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 These services are carried out through an RPC interface (not a COM interface) known as {\cs58\f5\fs16\lang1024 IObjectExporter}.
\par An Object Exporter may be asked for the information required to connect to one of two different kinds of {\cs58\f5\fs16\lang1024 OXIDs}, either the {\cs58\f5\fs16\lang1024 OXIDs }associated with its own objects, or the {\cs58\f5\fs16\lang1024 OXIDs }
associated with objects for which it itself is a client, and which it has passed on to a second client machine. This second case, where one marshals an object from one client machine to a second, is colloquially referred to the \ldblquote middleman
{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 middleman}}}\rdblquote  case. In the middleman case, the exporter is required to retain the connection information associated with the {\cs58\f5\fs16\lang1024 OXIDs}
 that it passes on until it is certain that that the second client machine no longer needs them. More on this below.
\par \trowd \trgaph108\trleft-90 \cellx1890\cellx5040\cellx6840\cellx8640 \pard\plain \s54\keepn\widctlpar\intbl\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs18 Protocol String Name(s)\cell \line Description\cell \pard 
\s54\qc\keepn\widctlpar\intbl\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 Object Exporter\line End Point{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
Only if reuse of the DCE RPC Endpoint Mapper endpoints is unacceptable.}}{\b0 \cell }Endpoint Mapper End Point\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-90 \cellx1890\cellx5040\cellx6840\cellx8640 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncadg_ip_udp, ip\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CL over UDP/IP\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD\cell 135\cell }\pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncacn_ip_tcp\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CO over TCP/IP\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD\cell 135\cell }\pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncadg_ipx\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CL over IPX\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD\cell not yet listed\cell 
}\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncacn_spx\cell }\pard \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CO over SPX\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD\cell 
not yet listed\cell }\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncacn_nb_nb\cell }\pard 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CO over NetBIOS over NetBEUI\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD\cell not yet listed\cell }\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 
\f4\fs18 {\cs58\f5\fs16\lang1024 ncacn_nb_tcp\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CO over NetBIOS over TCP/IP\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD\cell 135\cell }\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncacn_np\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CO over Named Pipes\cell \pard 
\s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD\cell not yet listed\cell }\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncacn_dnet_nsp\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 
CO over DECNet Network Services Protocol (DECnet Phase IV)\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD\cell 69\cell }\pard\plain \widctlpar\intbl 
\f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncacn_osi_dna\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CO over Open Systems Interconnection (DECNet Phase V)\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 TBD
\cell 69\cell }\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncadg_dds, dds\cell }\pard \s53\widctlpar\intbl
\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 CL over Domain Datagram Service\cell \pard \s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {
\cs58\f5\fs16\lang1024 TBD\cell 12\cell }\pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-90 \cellx1890\cellx5040\cellx6840\cellx8640 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 
\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs18 {\cs58\f5\fs16\lang1024 ncalrpc\cell }\pard \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0\hyphpar0 Local procedure call\cell \pard 
\s53\qc\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 {\cs58\f5\fs16\lang1024 N/A\cell N/A\cell }\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s41\qc\sb30\sa60\keep\keepn\widctlpar\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Table {\*\bkmkstart WellKnownEndPoints}{\field{\*\fldinst  seq table \\* MERGEFORMAT }{\fldrslt {\lang1024 2}}}{\*\bkmkend WellKnownEndPoints}
. Object Exporter Well-known Endpoints{\pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \v\f4\fs12 {\xe {\b0\fs12 Object Exporter Well-known Endpoints}}}{\pard\plain 
\s41\qc\sb30\sa60\keep\keepn\widctlpar\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty0 \v\f4\fs12 {\xe {\b0\fs12 Well-known Endpoints}}}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\cs58\f5\fs16\lang1024 IObjectExporter} interface is defined as follows (OBJEX.IDL):
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
//+-------------------------------------------------------------------------
\par //
\par //  Microsoft Windows
\par //  Copyright (C) Microsoft Corporation, 1992 - 1995.
\par //
\par //  File:      objex.idl
\par //
\par //  Synopsis:      Interface implemented by object exporters.
\par //
\par //  This is the interface that needs to be supported by hosts that export
\par //  objects. Only one instance of this interface can be exported by the host.
\par //
\par //  An object exporter needs to be able to:
\par //  1. return string bindings that can be used to talk to objects it
\par //     has exported
\par //  2. receive pings from object importers to keep the objects alive
\par //
\par //--------------------------------------------------------------------------
\par [
\par     uuid(99fcfec4-5260-101b-bbcb-00aa0021347a),
\par     pointer_default(unique)
\par ]
\par 
\par interface IObjectExporter
\par \{
\par     import "obase.idl";
\par 
\par     // Method to get the protocol sequences, string bindings and machine id
\par     // for an object server given its OXID.
\par 
\par     [idempotent] error_status_t ResolveOxid
\par     (
\par     [in]       handle_t       hRpc,
\par     [in]       OXID           *pOxid,
\par     [in]       unsigned short cRequestedProtseqs,
\par     [in,  ref, size_is(cRequestedProtseqs)]
\par                unsigned short arRequestedProtseqs[],
\par     [out, ref] MID            *pmid,
\par     [out, ref] STRINGARRAY   **psaOxidBindings,
\par     [out, ref] IPID           *pipidRemUnknown
\par     );
\par 
\par     // Simple ping is used to ping a Set. Client machines use this to inform
\par     // the object exporter that it is still using the items inside the set.
\par     // Returns S_TRUE if the SetId is known by the object exporter,
\par     // S_FALSE if not.
\par 
\par     [idempotent] error_status_t SimplePing
\par     (
\par     [in]  handle_t  hRpc,
\par     [in]  SETID    *pSetId
\par     );
\par 
\par     // Complex ping is used to create sets of OIDs to ping. The whole set
\par     // can subsequently be pinged using SimplePing, thus reducing network
\par     // traffic.
\par 
\par     [idempotent] error_status_t ComplexPing
\par     (
\par     [in]  handle_t        hRpc,
\par     [in]  SETID          *pSetId,
\par     [in]  unsigned short  SequenceNum,
\par     [in]  unsigned short  SetPingPeriod,
\par     [in]  unsigned short  SetNumPingsToTimeout,
\par     [out] unsigned short *pReqSetPingPeriod,
\par     [out] unsigned short *pReqSetNumPingsToTimeout,
\par     [in]  unsigned short  cAddToSet,
\par     [in]  unsigned short  cDelFromSet,
\par     [in,  unique, size_is(cAddToSet)]   GUID AddToSet[],   // add these OIDs to the set
\par     [in,  unique, size_is(cDelFromSet)] GUID DelFromSet[]  // remove these OIDs from the set
\par     );
\par \}
\par {\pntext\pard\plain\b\fs20\lang1024 15.4.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IObjectExporter::ResolveOxid{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs20\lang1024 {\xe {}{\b0 IObjectExporter\:functions\:ResolveOxid}{}}}
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
[idempotent] error_status_t ResolveOxid
\par     (
\par     [in]       handle_t        {\b hRpc},
\par     [in]       OXID           *{\b pOxid},
\par     [in]       unsigned short  {\b cRequestedProtseqs},
\par     [in,  ref, size_is(cRequestedProtseqs)]
\par                unsigned short  {\b arRequestedProtseqs}[],
\par     [out, ref] MID            *{\b pmid},
\par     [out, ref] STRINGARRAY   **{\b psaOxidBindings},
\par     [out, ref] IPID           *{\b pipidRemUnknown}
\par     );
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Return the string bindings necessary to connect to a given {\cs58\f5\fs16\lang1024 OXID} object.
\par On entry, {\cs58\f5\fs16\lang1024 arRequestedProtseqs} contains the protocol sequences the client is willing to use to reach the server. These should be decreasing order of protocol preference, with no duplicates permitted. Local protocols (such as 
\ldblquote ncalrpc\rdblquote ) are not permitted.
\par On exit, {\cs58\f5\fs16\lang1024 psaOxidBindings} contains the string bindings that may be used to connect to the indicated {\cs58\f5\fs16\lang1024 OXID}; if no such protocol bindings exist which match the requested protocol sequences, {
\cs58\f5\fs16\lang1024 NULL }may be returned. The returned string bindings are in decre
asing order of preference of the server, with duplicate string bindings permitted (and not necessarily of the same preferential priority), though of course duplicates are of no util
ity. Local protocol sequences may not be present; however, protocol sequences that were not in the set of protocol sequences requested by the client may be. The string bindings returned need not contain endpoints; the endpoint mapper will be used as usual
 to obtain these dynamically.
\par If a {\cs58\f5\fs16\lang1024 ResolveOxid }call is received for which the recipient Object Exporter is a middleman{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 middleman}}}
, the action required of the middleman depends on how the ordered list of requested protocol sequences ({\cs58\f5\fs16\lang1024 arRequested\-Protseqs}
) relate to lists of protocol sequences previously known by the middleman to have been previously requested of the server. If the list of requested protocol sequences is a (perhaps non-proper) subset in order of a proto
col sequence list previously requested of the server, then the corresponding cached string bindings may be returned immediately to the caller without actually communicating with the server. Otherwise, the actual {\cs58\f5\fs16\lang1024 psaRequested\-
Protseqs} must be forwarded to the server, and the returned string bindings propagated back to the client. In such cases, it behooves the middleman to cache the returned string bindings for use in later calls.
\par In order to support the middleman case, Object Exporters are required to remember the {\cs58\f5\fs16\lang1024 OXID }mapping information for remote {\cs58\f5\fs16\lang1024 OXIDs }they have learned for some period of time beyond when they th
emselves have released all references to objects of this {\cs58\f5\fs16\lang1024 OXID}. Let {\i t} be the full time-out period (ping period {{\field{\*\fldinst SYMBOL 180 \\f "Symbol" \\s 10}{\fldrslt\f1\fs20}}} number of pings to time-out) for some {
\cs58\f5\fs16\lang1024 OID }(any {\cs58\f5\fs16\lang1024 OID}) for which this Object Exporters is a client and which resides in {\cs58\f5\fs16\lang1024 OXID}. Then the Object Exporter must keep the binding information for {\cs58\f5\fs16\lang1024 OXID }
for at least an amount of time {\i t }following the release of a the local reference to any object in {\cs58\f5\fs16\lang1024 OXID}.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn }
\tab This time-out period does not {\i guarantee} that OXID information will not be discarded before clients may need it, but is a very good heuristic, and indeed better than a hard-coded time-out value.}}
\par Returned through {\cs58\f5\fs16\lang1024 pmid }is an identifier that uniquely identifies the machine. Clients can use this to learn which {\cs58\f5\fs16\lang1024 OXIDs }are collocated on the same machine, and thus which {\cs58\f5\fs16\lang1024 OIDs }
may be appropriately grouped together in ping sets (see {\cs58\f5\fs16\lang1024 ComplexPing}). The machine identifier is guaranteed not to change so long as there are remote references to objects on the machine which remain valid. Thus, spec
ifically, the machine id may change as the machine reboots.
\par {\cs58\f5\fs16\lang1024 ResolveOxid }also informs the caller of the {\cs58\f5\fs16\lang1024 IPID }of the {\cs58\f5\fs16\lang1024 OXID }object associated with this {\cs58\f5\fs16\lang1024 OXID}.
\par \pard\plain \s48\fi-3330\li3330\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1890 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3330\li3330\sa58\keepn\widctlpar\tx1890 \f4\fs20 {\cs58\f5\fs16\lang1024 hRpc\tab handle_t}\tab An RPC binding handle used to make the request.
\par {\cs58\f5\fs16\lang1024 pOxid\tab OXID*}\tab The {\cs58\f5\fs16\lang1024 OXID }for whom string bindings are requested. .  The OXID may or may not represent a process on the machine that receives the {\cs58\f5\fs16\lang1024 ResolveOxid} call
\par {\cs58\f5\fs16\lang1024 cRequestedProtseqs\tab unsigned short\tab }The number of protocol sequences requested.
\par {\cs58\f5\fs16\lang1024 arRequestedProtseqs}{\fs16 \tab }{\cs58\f5\fs16\lang1024 unsigned short[]}\tab {\cs58\f5\fs16\lang1024 arRequestedProtseqs} must be initialized with all the protocol id\rquote 
s the client is willing to use to reach the server.  It cannot contain local protocol sequences.  The object exporter must take care of local lookups privately.  The protocol sequences are in order of preferen
ce or random order.  No duplicates are allowed. See the Lazy Use Protseq section for more details. 
\par {\cs58\f5\fs16\lang1024 pmid\tab MID*}\tab The machine identifier associated with {\cs58\f5\fs16\lang1024 OXID}.
\par {\cs58\f5\fs16\lang1024 psaOxidBindings\tab STRINGARRAY**}\tab The string bindings supported by this {\cs58\f5\fs16\lang1024 OXID}, in preferential order. Note that these are Unicode strings. 
\par {\cs58\f5\fs16\lang1024 pipidRemUnknown}\tab {\cs58\f5\fs16\lang1024 IPID*}\tab The {\cs58\f5\fs16\lang1024 IPID }to the {\cs58\f5\fs16\lang1024 IRemUnknown }interface the {\cs58\f5\fs16\lang1024 OXID }object for this {\cs58\f5\fs16\lang1024 OXID}.
\par \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2790\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The requested information was returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 RPC_E_INVALID_OBJECT\cell }\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 RPC_E_INVALID_OXID\cell }This {\cs58\f5\fs16\lang1024 OXID }is unknown to this Object Exporter, and thus no information was returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt
\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 RPC_E_SERVER_DIED\cell }\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd \trgaph108\trleft-108 \cellx2790\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {
\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unspecified error occurred. Some of the requested information may not be returned.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 {\b Comments
\par }\pard\plain \s95\qj\sa60\sl220\slmult0\widctlpar \f8\fs20 
Since the object exporter ages string bindings and discards them, object references are transient things.  They are not meant to be stored in files or otherwise kept persistently.  The preferred method of storing per
sistent references will depend on the activation models available.  On platforms that support them, monikers should be used for any persistent reference.  In any case, well known object references can be constructed from well known string bindings, {
\cs58\f5\fs16\lang1024 IPIDs} and {\cs58\f5\fs16\lang1024 OIDs}.
\par Conversely, since object references are aged, it is the responsibility of each client to unmarshal them and begin pinging them in a timely fashion.
\par The basic use of the {\cs58\f5\fs16\lang1024 ResolveOxid} method is to translate an {\cs58\f5\fs16\lang1024 OXID}
 to string bindings.  Put another way, this method translates an opaque process and machine identifier to the information needed to reach that machine and process.  There are four interesting cases: looking up an {\cs58\f5\fs16\lang1024 OXID}
 the first time an interface is unmarshaled on a machine, looking up an {\cs58\f5\fs16\lang1024 OXID} between a pair of machines that already have connections, looking up an {\cs58\f5\fs16\lang1024 OXID}
 from a middleman, and looking up string bindings with unresolved endpoints (lazy use protseq).  Another interesting topic is garbage collection of stored string binding vectors.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\b {\*\bkmkstart _Toc316189763}{\*\bkmkstart _Toc316190007}{\*\bkmkstart _Toc318002068}Lookup Between Friends{\*\bkmkend _Toc316189763}{\*\bkmkend _Toc316190007}{\*\bkmkend _Toc318002068}
\par }\trowd \trgaph108\trleft-108\trbrdrl\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \cellx270\clbrdrb\brdrs\brdrw15 \cellx2250\clbrdrb\brdrs\brdrw15 \cellx4410\clbrdrb\brdrs\brdrw15 \cellx4686\clbrdrb\brdrs\brdrw15 \cellx5850\clbrdrb
\brdrs\brdrw15 \cellx7470\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8641 \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 {\ul \cell }OX C\cell Process D\cell \pard \s95\ri95\sa60\sl220\slmult0\widctlpar\intbl \cell \pard 
\s95\sa60\sl220\slmult0\widctlpar\intbl OX E\cell Process F\cell Process G\cell \pard\plain \widctlpar\intbl \f4\fs20 {\ul \row }\trowd \trgaph108\trleft-108\trbrdrl\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \cellx270\cellx2250\cellx4410
\cellx4686\cellx5850\cellx7470\clbrdrr\brdrs\brdrw15 \cellx8641 \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell call F\cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0
\widctlpar\intbl \f8\fs20 \cell \cell \cell \cell \cell pass out ref to G\cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell receive out ref to G\cell \cell \cell \cell \cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell ask local OX to resolve OXID G\cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0
\widctlpar\intbl \f8\fs20 \cell ask OX E to resolve OXID G\cell \cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell \cell \cell look up G and return G\rquote 
s endpoints.\cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell Construct and cache string binding vector for G\cell \cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl 
\f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell return results to D\cell \cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108\trbrdrl\brdrs\brdrw15 \trbrdrr\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \cellx270\cellx2250\cellx4410\cellx4686\cellx5850\cellx7470\clbrdrr\brdrs\brdrw15 \cellx8641 \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell ready to call G directly\cell \cell \cell \cell \cell \pard\plain 
\widctlpar\intbl \f4\fs20 \row \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 
The case of a lookup between two machines that have already established communication is the easiest.  In this scenario there are two machines, A and B.  Process D already has an interface pointer to process F.  Object exporter C already knows the string 
bindings for object exporter E and process F, but not process G.  Object exporter E knows the string bindings for all the servers on its machine, i.e. processes F and G.  Proc
ess D calls process F and gets a reference to process G.  Since process D has never seen the {\cs58\f5\fs16\lang1024 OXID} for G be
fore, it asks its local object exporter to resolve G.  Process D also has to tell object exporter C where it got the reference from, in this case, process F.  Object exporter C does not recognize the OXID G.  However it does recognize the {
\cs58\f5\fs16\lang1024 OXID} F and knows the object exporter E is on the same machine as process F.  So OX C calls {\cs58\f5\fs16\lang1024 ResolveOxid} on OX E.  OX E recognizes G and passes the string bindings back to OX C with the ma
chine id B.  OX C caches this information so that if D ever gets a reference from G, it knows who to ask to resolve that reference.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\b {\*\bkmkstart _Toc316189764}{\*\bkmkstart _Toc316190008}{\*\bkmkstart _Toc318002069}My First Lookup{\*\bkmkend _Toc316189764}{\*\bkmkend _Toc316190008}{\*\bkmkend _Toc318002069}
\par }
The previous example assumes that OX C already knows about OX E and process D is already talking to process F.  Setting up the first connection between D and F (as well as C and E) is a tricky business known as activation.  ORPC as described in this speci
fication does not include activation models.  Thus differen
t vendors may have different activation models.  However there is one basic form of activation shared by all ORPC.  If two processes can communicate via DCE RPC, they can pass long standard object references.  While this is not expected to be a common for
m of activation, it is a simple one that should certainly work across all ORPC implementations.  Thus if D and E have established DCE RPC (or raw RPC) communication, they can bootstrap ORPC communication as follows.
\par \trowd \trgaph108\trleft-108 \cellx180\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1792\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4215\clbrdrb\brdrs\brdrw15 \cellx4622\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cellx6724\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8640 \pard \qj\sa60\widctlpar\intbl \cell OX C\cell Process D\cell \cell OX E\cell Process F \cell \pard \widctlpar\intbl {\ul \row }\trowd \trgaph108\trleft-108 
\cellx180\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1792\clbrdrr\brdrs\brdrw15 \cellx4215\cellx4622\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx6724\clbrdrr\brdrs\brdrw15 \cellx8640 \pard \qj\sa60\widctlpar\intbl \cell \cell \cell \cell 
register endpoints  and {\cs58\f5\fs16\lang1024 OXID} for F{\ul \cell \cell }\pard \widctlpar\intbl {\ul \row }\pard \qj\sa60\widctlpar\intbl \cell \cell call F with raw RPC\cell \cell \cell \cell \pard \widctlpar\intbl \row \pard 
\qj\sa60\widctlpar\intbl \cell \cell \cell \cell \cell pass an out ref to F\cell \pard \widctlpar\intbl \row \pard \qj\sa60\widctlpar\intbl \cell \cell \cell \cell \cell pass {\cs58\f5\fs16\lang1024 IID} as additional parameter\cell \pard 
\widctlpar\intbl \row \pard \qj\sa60\widctlpar\intbl \cell \cell tell C the {\cs58\f5\fs16\lang1024 OXID_INFO} and {\cs58\f5\fs16\lang1024 MID}  for F.  Include network address(es).\cell \cell \cell \cell \pard \widctlpar\intbl \row \trowd 
\trgaph108\trleft-108 \cellx180\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1792\clbrdrr\brdrs\brdrw15 \cellx4215\clbrdrr\brdrs\brdrw15 \cellx4622\clbrdrr\brdrs\brdrw15 \cellx6724\clbrdrr\brdrs\brdrw15 \cellx8640 \pard \qj\sa60\widctlpar\intbl 
\cell compute the string bindings for OX E from F\cell \cell \cell \cell \cell \pard \widctlpar\intbl \row \pard \qj\sa60\widctlpar\intbl \cell ask E to resolve F to get machine id and endpoints for F\cell \cell \cell \cell \cell \pard \widctlpar\intbl 
\row \pard \qj\sa60\widctlpar\intbl \cell \cell \cell \cell return endpoints and machine id\cell \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft-108 \cellx180\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx1792\clbrdrr\brdrs\brdrw15 
\cellx4215\clbrdrr\brdrs\brdrw15 \cellx4622\clbrdrr\brdrs\brdrw15 \cellx6724\clbrdrr\brdrs\brdrw15 \cellx8640 \pard \qj\sa60\widctlpar\intbl \cell \cell ready to call F via ORPC\cell \cell \cell \cell \pard \widctlpar\intbl \row \pard \qj\sa60\widctlpar 
This example points out that there has to be a local interface between processes and the local object exporter.
\par {\b {\*\bkmkstart _Toc316189765}{\*\bkmkstart _Toc316190009}{\*\bkmkstart _Toc318002070}Middleman Lookup{\*\bkmkend _Toc316189765}{\*\bkmkend _Toc316190009}{\*\bkmkend _Toc318002070}
\par }The next case shows how lookup works between multiple machines.  Suppose that E has a reference to G and G has a reference to I.  Similarly, D knows about F and G and F knows about H and I.  What happens if G passes a reference to I over to E?
\par \trowd \trgaph108\trleft-108 \cellx252\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2520\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx3708\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4860\clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cellx6506\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7637\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx8640 \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell OX D\cell Process E\cell OX F\cell 
Process G\cell OX H\cell Process I\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx252\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2520\clbrdrr\brdrs\brdrw15 \cellx3708\clbrdrr\brdrs\brdrw15 \cellx4860\clbrdrr
\brdrs\brdrw15 \cellx6506\clbrdrr\brdrs\brdrw15 \cellx7637\clbrdrr\brdrs\brdrw15 \cellx8640 \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell call G\cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row 
\pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell \cell \cell return a long reference to I\cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell 
ask D to lookup I\cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell Since it\rquote s a long ref to I call {\cs58\f5\fs16\lang1024 ResolveOxid} on H.\cell \cell 
\cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell \cell \cell \cell Return endpoints to I\cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain 
\s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell Compute string bindings to I from endpoints and network addresses.\cell \cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl 
\f8\fs20 \cell return string bindings to E\cell \cell \cell \cell \cell \cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx252\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2520\clbrdrr\brdrs\brdrw15 \cellx3708
\clbrdrr\brdrs\brdrw15 \cellx4860\clbrdrr\brdrs\brdrw15 \cellx6506\clbrdrr\brdrs\brdrw15 \cellx7637\clbrdrr\brdrs\brdrw15 \cellx8640 \pard\plain \s95\sa60\sl220\slmult0\widctlpar\intbl \f8\fs20 \cell \cell ready to call I\cell \cell \cell \cell \cell 
\pard\plain \widctlpar\intbl \f4\fs20 \row \pard \qj\sa60\widctlpar {\*\bkmkstart _Toc316189766}{\*\bkmkstart _Toc316190010}{\*\bkmkstart _Toc318002071}Note that when process G returned a reference to I, it used he long form of the {
\cs58\f5\fs16\lang1024 OBJREF} which includes the protocol id\rquote s and network addresses of the {\cs58\f5\fs16\lang1024 OXID}
 resolver for process I (in this example, the addresses for OX H). This would results in OX D calling OX H directly, rather than needing to call OX F.  
The advantage of this is that if no references to process I needed by OX F, it could remove it from its {\cs58\f5\fs16\lang1024 OXID} cache at any time, rather than keeping it around at least until OX D has had a chance to call it back to resolve {
\cs58\f5\fs16\lang1024 OXID} I.
\par {\b Lazy Use Protseq{\*\bkmkend _Toc316189766}{\*\bkmkend _Toc316190010}{\*\bkmkend _Toc318002071}
\par }\pard\plain \s95\qj\sa60\sl220\slmult0\widctlpar \f8\fs20 In a homogeneous network, all machines communication via the same protocol sequence.  In a heterogene
ous network, machines may support multiple protocol sequences.  Since it is often expensive in resources to allocate endpoints ({\cs58\f5\fs16\lang1024 RpcServerUseProtseq}) for all availab
le protocol sequences, ORPC provides a mechanism where they may be allocated on demand.  To implement this extension fully, there are some changes in the server.  However, changes are optional.  If not implemented, ORPC will still work correctly if less o
ptimally in heterogeneous networks.
\par There are two cases: the server implements the lazy use protocol or it does not.
\par If the server is using the lazy use protseq protocol, the use of {\cs58\f5\fs16\lang1024 ResolveOxid} is modified slightly.  When the client OX calls the server OX, 
it passes the requested protseq vector.  If none of the requested protseqs have endpoints allocated in the server, the server OX performs some local magic to get one allocated.
\par If the server does not implement the lazy use protseq protocol, then all protseqs are registered by the server and  contain complete endpoints.  However, if they are not, the endpoint mapper can be used to forward calls to the server.  This requires that 
all server {\cs58\f5\fs16\lang1024 IIDs} are registered in the endpoint mapper.  It also allows a differe
nt lazy use protseq mechanism.  The endpoint mapper can perform some local magic to force the server to allocate an endpoint.  This is less efficient since no OXs ever learn the new endpoints.
\par The client will always pass in a vector of requested protseqs which the server can ignore if it does not implement the lazy use protseq protocol.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\b {\*\bkmkstart _Toc316189767}{\*\bkmkstart _Toc316190011}{\*\bkmkstart _Toc318002072}Aging String Bindings{\*\bkmkend _Toc316189767}{\*\bkmkend _Toc316190011}{\*\bkmkend _Toc318002072}
\par }\pard\plain \s95\qj\sa60\sl220\slmult0\widctlpar \f8\fs20 Each object exporter must keep all the string bindings for references to remote machines as well as string bindings for all processes that are ORPC ser
vers on its machines.  However, unless the middle man marshaler always marshals proxy interfaces using the long form {\cs58\f5\fs16\lang1024 OBJREF}
, string bindings cannot be discarded as soon as remote references are.  In the middleman example above, a process could pass out a reference to a remote object and immediately release any remaining references to that remote object.  When the poor cli
ent called back to translate the {\cs58\f5\fs16\lang1024 OXID}, the string bindings would be gone.  To deal with that case, the object exporter must keep the string binding/{\cs58\f5\fs16\lang1024 OXID}
 translation for one full time-out period (round up if the release occurs in the middle of a ping period) after the last local reference is released.  A time-out period is the number of pings times the ping period.
\par {\pntext\pard\plain\b\fs20\lang1024 15.4.1.2\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 IObjectExporter::SimplePing{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 IObjectExporter\:functions\:SimplePing}}}
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
[idempotent] error_status_t SimplePing
\par     (
\par     [in]  handle_t  {\b hRpc},
\par     [in]  SETID    *{\b pSetId}
\par     );
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 
Pings provide a mechanism to garbage collect interfaces.  If an interface has references but is not being pinged, it may be released.  Conversely, if an interface has no references, it may be released even though it has recently been pinged.  {
\cs58\f5\fs16\lang1024 SimplePing} just pings the contents of a set.  The set must be created with {\cs58\f5\fs16\lang1024 ComplexPing} (see below).  
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Ping a set, previously created with {\cs58\f5\fs16\lang1024 IObjectExporter::ComplexPing}, of {\cs58\f5\fs16\lang1024 OIDs }owned by this Object Exporter. Note that neither {\cs58\f5\fs16\lang1024 IPIDs }nor {
\cs58\f5\fs16\lang1024 OIDs }may be pinged, only explicitly created {\cs58\f5\fs16\lang1024 SETIDs}.
\par \pard\plain \s48\fi-2880\li2880\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx1440 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-2880\li2880\sa58\keepn\widctlpar\tx1440 \f4\fs20 {\cs58\f5\fs16\lang1024 hRpc}\tab {\cs58\f5\fs16\lang1024 handle_t}\tab An RPC binding handle used to make the request.
\par \pard \s49\fi-2880\li2880\sa58\widctlpar\tx1440 {\cs58\f5\fs16\lang1024 pSetId}\tab {\cs58\f5\fs16\lang1024 SETID*\tab }A {\cs58\f5\fs16\lang1024 SETID} previously created with {\cs58\f5\fs16\lang1024 IObjectExporter::ComplexPing}
 on this same Object Exporter.
\par \trowd \trgaph108\trleft-108 \cellx2250\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2250\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The set was pinged.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 RPC_E_INVALID_SET\cell }This {\cs58\f5\fs16\lang1024 SETID }is unknown to this Object Exporter, and thus the ping did not occur.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd 
\trgaph108\trleft-108 \cellx2250\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unspecified error occurred. It is not known whether the ping was done or not.
\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row {\pntext\pard\plain\b\fs20\lang1024 15.4.1.3\tab}}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 
IObjectExporter::ComplexPing{\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\v\f4\fs12\lang1024 {\xe {\b0\fs12 IObjectExporter\:functions\:ComplexPing}}}
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
[idempotent] error_status_t ComplexPing
\par     (
\par     [in]  handle_t        {\b hRpc},
\par     [in]  SETID          *{\b pSetId},
\par     [in]  unsigned short  {\b SequenceNum},
\par     [in]  unsigned short  {\b SetPingPeriod},
\par     [in]  unsigned short  {\b SetNumPingsToTimeout},
\par     [out] unsigned short *{\b pReqSetPingPeriod},
\par     [out] unsigned short *{\b pReqSetNumPingsToTimeout},
\par     [in]  unsigned short  {\b cAddToSet},
\par     [in]  unsigned short  {\b cDelFromSet},
\par     [in,  unique, size_is(cAddToSet)]   GUID {\b AddToSet}[],
\par     [in,  unique, size_is(cDelFromSet)] GUID {\b DelFromSet}[]
\par     );
\par \pard\plain \s44\qj\sb60\sa58\widctlpar \f4\fs20 Ping a ping set. Optionally, add and / or remove some {\cs58\f5\fs16\lang1024 OIDs }from the set. Optionally, adjust the ping timing parameters associated with the set. After a set is defined, a {
\cs58\f5\fs16\lang1024 SimplePing} will mark the entire contents of the set as active. After a set is defined, {\cs58\f5\fs16\lang1024 SimplePing} should be used to ping the set.  {\cs58\f5\fs16\lang1024 ComplexPing}
 need only be used to adjust the contents of the set (or the time-out).
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Ping set ids ({\cs58\f5\fs16\lang1024 SETIDs}) are allocated unilaterally by a client Object Exporter. The client Object Exporter then communicates with the server Object Exporter to add (and later remove) {
\cs58\f5\fs16\lang1024 OIDs} from the ping set. Clients must ensure the {\cs58\f5\fs16\lang1024 SETIDs} pinged at a given server are unique over all of that server\rquote s clients. Thus, the client must only use {\cs58\f5\fs16\lang1024 SETIDs }
that it knows not to be in use as {\cs58\f5\fs16\lang1024 SETIDs }by other clients on that server. (In practice, clients allocate {\cs58\f5\fs16\lang1024 SETIDs }
as globally unique). A client may use as many sets as it likes, though using fewer sets is more efficient.
\par Each {\cs58\f5\fs16\lang1024 OID }owned by a server Object Exporter may be placed in zero or more ping sets by the various clients of the {\cs58\f5\fs16\lang1024 OID}
. The client owner of each such set will set a ping period and a ping time-out count for the set, thus determining an overall time-out period for the set as the product of these two values. The time-out period is implicitly applied to each {
\cs58\f5\fs16\lang1024 OID }contained in the set and to future {\cs58\f5\fs16\lang1024 OIDs }that might add be added to it. The server Object Exporter is responsible for ensuring that an {\cs58\f5\fs16\lang1024 OID }that it owns does not e
xpire until at least a period of time {\i t} has elapsed without that {\cs58\f5\fs16\lang1024 OID }being pinged, where {\i t} is the maximum time-out period over all the sets which presently contain the given {\cs58\f5\fs16\lang1024 OID}, or, if {
\cs58\f5\fs16\lang1024 OID }is not presently in any such sets but was previously, {\i t} is the time-out period for the last set from which {\cs58\f5\fs16\lang1024 OID }was removed at the instant that that removal was done;{\cs38\super \chftn {\footnote 
\pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab That is, adjusting the set\rquote s time-out period after the {\cs58\f5\lang1024 OID }has been removed from it has no effect on the time-out of the {
\cs58\f5\lang1024 OID}.}} otherwise, {\cs58\f5\fs16\lang1024 OID }has never been in a set, and {\i t} is a default value (TBD). 
\par Clients are responsible for pinging servers often enough to ensure that they do not expire given the possi
bility of network delays, lost packets, and so on. If a client only requires access to a given object for what it would consider less than a time-out period for the object (that is, it receives and release the object in that period of time), then unless i
t is certain it has not itself passed the object to another client it must be sure to nevertheless ping the object (a {\cs58\f5\fs16\lang1024 ComplexPing }
that both adds and removes the OID will suffice). This ensures that an object will not expire as it is passed through a chain of calls from one client to another.
\par An {\cs58\f5\fs16\lang1024 OID }is said to be pinged when a set into which it was previously added and presently still resides is pinged with either a {\cs58\f5\fs16\lang1024 SimplePing }or a {\cs58\f5\fs16\lang1024 ComplexPing}
, or when it is newly added to a set with {\cs58\f5\fs16\lang1024 ComplexPing}. Note that these rules imply that a {\cs58\f5\fs16\lang1024 ComplexPing} that removes an {\cs58\f5\fs16\lang1024 OID }from a set still counts as a ping on that {
\cs58\f5\fs16\lang1024 OID}.
\par In addition to pinging the set {\cs58\f5\fs16\lang1024 SETID}, this call sets the time-out period of the set as the product of a newly-specified ping period and a newly-specified \ldblquote ping count to expiration;\rdblquote 
 these values take effect immediately. Ping periods{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Ping periods}}} are specified in tenths of a second, yielding a maximum allowable ping period of about 1\~hr\~50\~
min. Adjustment of the time-out period of the set is considered to happen before the addition of any new {\cs58\f5\fs16\lang1024 OIDs} to the set, which is in turn considered to happen before the removal of any {\cs58\f5\fs16\lang1024 OIDs }
from the set. Thus, an {\cs58\f5\fs16\lang1024 OID }that is added and removed in a single call no longer resides in the set, but is considered to have been pinged, and will have as its time-out at least the time-out period specified in that {
\cs58\f5\fs16\lang1024 ComplexPing }call.
\par On exit, the server may request that the client adjust the time-out period; that is, ask it to specify a different time-out period in subsequent calls to {\cs58\f5\fs16\lang1024 ComplexPing}
. This capability can be used to reduce traffic in busy servers or over slow links. The server indicates its desire through the values it returns through the variables {\cs58\f5\fs16\lang1024 pReqSetPingPeriod }and {\cs58\f5\fs16\lang1024 
pReqSetNumPingsToTimeOut.} If the server seeks no change, it simply returns the corre
sponding values passed by the client; if it wishes a longer time-out period, it indicates larger values for one or both of these variables; if it wishes a smaller period, it indicates smaller values. When indicating a larger value, the se
rver must start immediately acting on that larger value by adjusting the time-out period of the set. However, when indicating a smaller value, it must consider its request as purely advice to the client, and not take any action: if the client wishes to ob
lige, it will do so in a subsequent call to {\cs58\f5\fs16\lang1024 ComplexPing} by specifying an appropriate time-out period.
\par \pard\plain \s48\fi-3150\li3150\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx2340 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3150\li3150\sa58\keepn\widctlpar\tx2340 \f4\fs20 {\cs58\f5\fs16\lang1024 hRpc\tab handle_t}\tab An RPC binding handle used to make the request.
\par {\cs58\f5\fs16\lang1024 pSetId\tab SETID\tab }The {\cs58\f5\fs16\lang1024 SETID} being manipulated.
\par {\cs58\f5\fs16\lang1024 SequenceNum\tab USHORT\tab }The sequence number allows the object exporter to detect duplicate packets.  Since the call is {\cs58\f5\fs16\lang1024 idempotent}
, it is possible for duplicates to get executed and for calls to arrive out of order when one ping is delayed.{\cs58\f5\fs16\lang1024 
\par SetPingPeriod\tab USHORT\tab }{\b This parameter is going away.} {\cs58\f5\fs16\lang1024 
\par SetNumPingsToTimeOut}\tab {\cs58\f5\fs16\lang1024 USHORT}\tab {\b This parameter is going away}.
\par {\cs58\f5\fs16\lang1024 pReqSetPingPeriod\tab USHORT*}\tab {\b This parameter is changing}. The server uses {\cs58\f5\fs16\lang1024 pReqSetPingPeriod}
 to request a new ping period.  If the requested period is shorter then the current period, the server must continue to use the current period until the client calls back.  When the client calls back the old re
quested period will only be used if the client specifies it as the new {\cs58\f5\fs16\lang1024 SetPingPeriod}.  If the requested period is longer then the current pe
riod, the server must immediately begin using the new period.  However, if the client doesn\rquote t accept it, the next call will contain the old, shorter period.
\par {\cs58\f5\fs16\lang1024 pReqSetNumPingsToTimeOut}\tab {\cs58\f5\fs16\lang1024 USHORT*\tab }{\b This parameter is changing}. The server uses {\cs58\f5\fs16\lang1024 pReqSetNumPingsToTimeout}
 to request a new number of pings.  If the number of pings is less then the current number of pings, the server must continue to use the current number of pings until the client calls back.  When the client calls back the old requested period will only be
 used if the client specifies it as the new {\cs58\f5\fs16\lang1024 SetNumPingsToTimeout}.  If the requested number of pings is larger then the current number of pings, the server must i
mmediately being using the new number of pings.  However, if the client doesn\rquote t accept it, the next call will contain the old, smaller number of pings.
\par {\cs58\f5\fs16\lang1024 cAddToSet}\tab {\cs58\f5\fs16\lang1024 USHORT\tab }The size of the array {\cs58\f5\fs16\lang1024 AddToSet}.
\par {\cs58\f5\fs16\lang1024 cDelFromSet}\tab {\cs58\f5\fs16\lang1024 USHORT\tab }The size of the array {\cs58\f5\fs16\lang1024 DelFromSet}.
\par {\cs58\f5\fs16\lang1024 AddToSet}\tab {\cs58\f5\fs16\lang1024 OID[]\tab }The list of {\cs58\f5\fs16\lang1024 OIDs} which are to be added to this set. Adding an {\cs58\f5\fs16\lang1024 OID }
to a set in which it already exists is permitted; such an action, as would be expected, is considered to ping the {\cs58\f5\fs16\lang1024 OID}.
\par {\cs58\f5\fs16\lang1024 DelFromSet}\tab {\cs58\f5\fs16\lang1024 OID[]\tab }The list of {\cs58\f5\fs16\lang1024 OIDs} which are to be removed from this set. Removal counts as a ping.  An {\cs58\f5\fs16\lang1024 IPID}
 removed from a set will expire after the number of ping periods has expired without any pings (not the number of ping periods - 1). If an id is added and removed from a set in the same {\cs58\f5\fs16\lang1024 ComplexPing}
, the id is considered to have been deleted.
\par \trowd \trgaph108\trleft-108 \cellx2430\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2430\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success. The set was pinged, etc.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 
\brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 RPC_E_INVALID_OBJECT\cell }Indicates that some {\cs58\f5\fs16\lang1024 OID} was not recognized.  There is no recovery action for this error, it is informational only.\cell \pard\plain 
\widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 RPC_E_ACCESS_DENIED\cell }\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 RPC_E_OUT_OF_ORDER\cell }Returned when a call is received with a sequence number which is less then the last sequence number executed successfully.\cell 
\pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_OUTOFMEMORY\cell }
There was not enough memory to service the call. The caller may retry adding {\cs58\f5\fs16\lang1024 OIDs} to the set on the next ping.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw
\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 E_UNEXPECTED\cell }An unspecified error occurred. It is not known whether the ping or any of the other actions were done or not.\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row }\trowd 
\trgaph108\trleft-108 \cellx2430\cellx8730 \pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 Security related errors\cell }TBD\cell \pard\plain \widctlpar\intbl \f4\fs20 {\f20 \row 
{\*\bkmkstart _Toc335041509}{\*\bkmkstart _Toc335045084}{\*\bkmkstart _Toc335190146}{\*\bkmkstart _Toc338915501}{\*\bkmkstart _Toc298243751}{\*\bkmkstart _Toc316189794}{\*\bkmkstart _Toc316190038}{\*\bkmkstart _Toc318002096}{\*\bkmkstart _Toc318598256}
{\*\bkmkstart _Toc318619373}{\*\bkmkstart _Toc337525131}{\*\bkmkstart _Toc337870092}{\*\bkmkstart _Toc338915506}{\*\bkmkstart _Toc339183004}{\pntext\pard\plain\b 15.5\tab}}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 
{\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Service Control Manager{\*\bkmkend _Toc335041509}{\*\bkmkend _Toc335045084}{\*\bkmkend _Toc335190146}{\*\bkmkend _Toc338915501}{\*\bkmkend _Toc339183004}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 The Service Control Manager{\pard\plain \qj\sa60\widctlpar \v\f4\fs12 {\xe {\fs12 Service Control Manager}}}
 (SCM) is the component of the COM Library responsible for locating class implementations and running them. The SCM ensures that when a client request is made, the appropriate server is connected and ready to receive the request. The SCM keeps a database 
of class information based on the system registry that the client caches locally through the COM library.
\par Machines in a COM environment which support the ability to instantiate objects on behalf of a remote client offer SCM services remotely via an ORPC interface.{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar 
\f4\fs16 {\cs38\super \chftn } \tab Not surprisingly, to get around the chicken and egg problem, getting to a remote machine\rquote s SCM interface is not done via normal {\cs58\f5\fs12\lang1024 CoCreateInstance}
 means. Richer mechanisms for creating an interface to a remote SCM are TBD, but note that the clarity about the SCM-to-SCM interface and its endpoints ensure interconnectivity.}}
 To ensure connectivity, such SCM services reside at the same well-known endpoints as the COM Object Exporter{\cs38\super \chftn {\footnote \pard\plain \s17\qj\fi-195\li180\sl-180\slmult1\widctlpar \f4\fs16 {\cs38\super \chftn } \tab 
This is true despite final word whether the  Object Exporter will reuse the DCE RPC Endpoint Mapper\rquote s endpoints or a different well-known set TBD, as noted above.}} on each machine. Note that unlike the Ob
ject Exporter service, which is required for a machine to expose COM objects remotely, the exposed SCM service is in fact {\i optional}
 and some machines may not offer it. Clients may receive references to existing objects on such a machine or cause objects to be instantiated on that machine through means beside
s the services offered by the SCM, such as a through a moniker binding mechanism.
\par These capabilities are the basis for COM\rquote s implementation locator services as outlined in Figure 15-1.
\par \pard\plain \s40\qc\keep\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \pvpg\phpg\posx2598\posy3456\absw7760\dxfrtext187\dfrmtxtx187\dfrmtxty0 \f4\fs20 {{\pict\wmetafile8\picw22013\pich14102\picwgoal12480\pichgoal7995 \picscalex60\picscaley60 
0100090000036e1b000008003100000000000e00000026060f001200ffffffff000008000000cef5ecf84e096a050a00000026060f000a00ffffffff0200000000001700000026060f002400ffffffff04001a000000544e505014004d6963726f736f667420506f776572506f696e740b00000026060f000c00544e505000
000200000066000a00000026060f000a00ffffffff0300000000000e00000026060f001200544e50500400080000000100010000000000050000000b02ecf8cef5050000000c027e0c801331000000f7000003160000000000ffffff0000000000800000000080000080800000000080008000800000808000c0c0c000c0dc
c000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff0004000000340200000300000035000e00000026060f001200ffffffff000008000000d0f5ebf840095a050e00000026060f001200ffffffff000008000000a8fb96f9a801e60307000000fc020000000000
020000040000002d01010008000000fa0205000000000000000000040000002d010200090000001c0680018001f703b901a6f9b8fb050000001402000000002d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff0000007700
0000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001010005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010100090000001c067e017e01e603a80196f9a8fb050000001402000000000a00000026060f000a00ffffff
ff0100000000000e00000026060f001200ffffffff000008000000d0f500f97af932fc07000000fc020000000000020000040000002d01040004000000f0010300040000002d010200090000001c06cc00cc0043fc8bf910f9e0f5050000001402000000002d00000042010500000028000000080000000800000001000100
00000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01030004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010400040000
00f0010100090000001c06ca00ca0032fc7af900f9d0f5050000001402000000001c000000fb0280ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d010100040000002e011800050000000a0200000000050000000902000000020400
00000201010010000000320a6ffafdf606000000436c69656e745c001d001c0048004700230004000000020102001c000000fb0280ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010100040000002e01180005
0000000a020000000005000000090200000002040000000201010018000000320a09fb68f60b0000004170706c69636174696f6e005500480047001c001d004000470023001d004700470004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007bf98efa
f0fb98fa040000002d01020007000000fc020100000000000000040000002d01010004000000f001040004000000f00103001c000000fb021000070000000000bc02000000000102022253797374656d0003500d48033002f87f4603000000000000957fc5773002f87f040000002d01030004000000f0010500030000001e
0007000000160438fbacfbeef97bf908000000fa0206000800000000000002040000002d0104000500000014028cfa0ef705000000130292fa55fe040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300e8fb90fa71fb
6cfa71fbb3fa0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000ebfb1efec0fdb2ff07000000fc020000000000020000040000002d01050004000000f0010400090000001c0665006500c3ffd1fd2efefbfb05000000140292fa55fe2d0000004201050000002800000008
000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001050005000000090200000002050000000102ffffff0208000000fa0206000800000000000002
040000002d010500090000001c0663006300b2ffc0fd1efeebfb05000000140292fa55fe1c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d010600040000002e011800050000000a0200000000050000000902000000
0204000000020101000f000000320aa4fe73fc050000004c6f63616c002c002c0028002800140004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000002e011800
050000000a020000000005000000090200000002040000000201010010000000320afafe61fc060000004f626a65637438002c00140028002800180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000
002d01060004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101000f000000320a50ff6dfc0500000050726f78790030001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000
06fc1201dbfda60207000000fc020000000000020000040000002d01070004000000f0010400040000002d010200090000001c0665006500b702ecfd220116fc05000000140292fa55fe2d00000042010500000028000000080000000800000001000100000000002000000000000000000000000000000000000000000000
00ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040004000000f001070005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01070004000000f0010500090000001c0663006300a602dbfd120106fc05000000
140292fa55fe1c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a980168fc060000
0052656d6f74653400280040002c001800280004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002
040000000201010010000000320aee017cfc060000004f626a65637438002c00140028002800180004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01050004000000f0010600040000002e0118
00050000000a02000000000500000009020000000204000000020101000f000000320a440288fc0500000050726f78796530001c002c002800280004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000cfb5dfe70fbc8fe040000002d01020005000000
090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f0010700070000001804c8fe70fb5dfe0cfb05000000140292fa55fe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000068fb90fef7fb98fe040000002d0102
00040000002d01010004000000f001060004000000f0010400040000002d01030004000000f0010500030000001e0007000000160438fff7fbf0fd68fb08000000fa0206000800000000000002040000002d01040005000000140290fee1fa05000000130290fe76fc040000002d010200040000002d01010004000000f001
0400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000000cfb05ff70fb70ff2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff0000
00dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050007000000180470ff70fb05ff0cfb05000000140290fe76fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200
ffffffff00000800000068fb38fff7fb40ff040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604e0fff7fb98fe68fb08000000fa0206000800000000000002040000002d01040005000000140238ffe1fa05000000130238ff76fc040000002d010200040000002d
01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000024fb4b0188fbb6012d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00
000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804b60188fb4b0124fb05000000140238ff76fc0a00000026060f000a00ffffffff0100000000000e
00000026060f001200ffffffff00000800000080fb7e010ffc8601040000002d010200040000002d01010004000000f001050004000000f0010400030000001e0007000000160426020ffcde0080fb08000000fa0206000800000000000002040000002d0104000500000014027e01f9fa0500000013027e018efc04000000
2d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000024fbf90188fb64022d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000
000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804640288fbf90124fb0500000014027e018efc0a00000026060f000a00ffff
ffff0100000000000e00000026060f001200ffffffff00000800000080fb2c020ffc3402040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604d4020ffc8c0180fb08000000fa0206000800000000000002040000002d0104000500000014022c02f9fa0500000013
022c028efc040000002d010200040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000defdb1f985ff8dfa1c000000fb0280ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884
c577000000000c000000f00bf87f040000002d010400040000002e011800050000000a02000000000500000009020000000204000000020101000c000000320a42fa18fe03000000434f4d005c0064006b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008
0000008801a3031f05cb041c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010400040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a1604
c2010e00000052504320436f6e6e656374696f6e4500400046001a0046003a003b003b003500350020001b003b003a0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01040004000000f00105
00040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320a8904c20110000000746f2052656d6f74652053657276657220003b001a004600350055003b00200035001b0040003500260035003600250004000000020102000a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff000008000000640237fdd5055ffe1c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010400040000002e011800050000000a0200000000050000000902000000
0204000000020101001c000000320aaafd9e020e00000052504320436f6e6e656374696f6e4500400046001a0046003a003b003b003500350020001b003b003a0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00b
f87f040000002d01040004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001e000000320a1dfe9e020f000000746f204c6f63616c205365727665720020003b001a003b003b00350035001b001b0040003500250036003500260004000000020102000a00000026
060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000072f9ebf8d3fb86fa1c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010400040000002e01180005000000
0a020000000005000000090200000002040000000201010018000000320a5ef9c1f90b00000028312920436c69656e743afb2000350020001b0045001b001b0035003b002000200004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000
000c000000f00bf87f040000002d01040004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010012000000320ad1f9f1f9070000009343726561746565300045002600350035002000360004000000020102001c000000fb02a0ff000000000000bc02000000000000
0000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010016000000320a44faacf90a000000616e204f626a6563749435003b001b004a003b001b003500350020
00300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0fd40fd8801700307000000fc020000ffffff020000040000002d01040008000000fa0206000800000000000002040000002d0106001000000024030600bcfe40fdd0fd5400bcfe68039400
680380015400940040fd0500000014022c028efc1c000000fb0270ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101
000d000000320a30fff0fe0400000053434d3a600068007800300004000000020102001c000000fb0290ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010700040000002e011800050000000a02000000000500
0000090200000002040000000201010013000000320ac0ffd4fe080000004c6f63617465732c3e003f0038003e001f003e0038001f0004000000020102001c000000fb0290ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004
000000f0010500040000002e011800050000000a02000000000500000009020000000204000000020101001b000000320a460065fe0d00000072756e7320736572766572732c0025003f003e0038001f0038003e00260038003e00250038001f0004000000020102001c000000fb0290ff0000000000009001000000000000
0000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01050004000000f0010700040000002e011800050000000a02000000000500000009020000000204000000020101001f000000320acc0023fe10000000283329209348657265927320796f757225003f0025001f00250051
003e0026003e00190038001f0038003e003f00250004000000020102001c000000fb0290ff00000000000090010000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010500040000002e011800050000000a02000000000500000009020000
0002040000000201010018000000320a52017afe0b000000436f6e6e656374696f6e940051003e003e003f003e0038001f0019003e003f00250004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a0fb90fac8ff38fd08000000fa0206000800000000
000002040000002d01050004000000f0010600040000002d0101000b000000170890faa4fbdafcbeffd8ffc8ff90fa80f707000000fc020000000000020000040000002d01060004000000f0010400040000002d0102000a00000024030300c4ff34fdd6ffb8fc90ffc2fc0a00000026060f000a00ffffffff010000000000
0e00000026060f001200ffffffff0000080000004dfe93fa8901bbfb1c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01040004000000f0010700040000002e011800050000000a0200000000050000000902000000
0204000000020101001e000000320a06fb87fe0f00000028322920434f4d3a20209346696e64002000350020001b0045004b00500020001b001a0030003b001b003a003b0004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c00
0000e00cf87f040000002d01070004000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010015000000320a79fb11ff09000000612053657276657294fa35001b00400035002600350036002500300004000000020102000a00000026060f000a00ffffffff0100000000
000e00000026060f001200ffffffff00000800000080fd30fe7806f0fe040000002d010500040000002d0101000c00000025030400f1fddbfea00250fee001c8fe02063efe040000002d010600040000002d0102000a0000002403030070062ffef4051cfefe0562fe0a0000002403030081fde9fefafdfdfef2fdb7fe0a00
000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fd000278063804040000002d010500040000002d0101000c0000002503040016fe1f026f025803d701e10206061204040000002d010600040000002d0102000a00000024030300700631040706ee03f30530040a00000024
030300a9fdff0111fe410225feff010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b046efa400602fc07000000fc020000000000020000040000002d01040004000000f0010600090000001c066500650013fc51067efa7b040500000014022c028efc2d0000004201
050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01060004000000f001040005000000090200000002050000000102ffffff02040000002d0105
00090000001c066300630002fc40066efa6b040500000014022c028efc1c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01040004000000f0010700040000002e011800050000000a02000000000500000009020000
0002040000000201010016000000320a1ffb9a040a000000496e2d50726f6365737314002c00180030001c002c00280028002800280004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004
000000f0010400040000002e011800050000000a020000000005000000090200000002040000000201010010000000320a75fbe104060000004f626a65637438002c00140028002800180004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008c03adfa
f00318fb040000002d01020005000000090200000002050000000102ffffff02040000002d01050007000000180418fbf003adfa8c030500000014022c028efc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e803e0fa7704e8fa040000002d010200040000002d0101
0004000000f001050004000000f0010600040000002d01030004000000f0010700030000001e0007000000160488fb770440fae80308000000fa0206000800000000000002040000002d010400050000001402e0fa6103050000001302e0faf604040000002d010200040000002d01010004000000f0010400040000002701
ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008c0355fbf003c0fb2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff0000
0077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d010500070000001804c0fbf00355fb8c03050000001402e0faf6040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800
0000e80388fb770490fb040000002d010200040000002d01010004000000f001050004000000f0010400030000001e0007000000160430fc7704e8fae80308000000fa0206000800000000000002040000002d01040005000000140288fb610305000000130288fbf604040000002d010200040000002d01010004000000f0
010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000006b07aefd400942ff07000000fc020000000000020000040000002d010400090000001c066500650053ff5109befd7b0705000000140288fbf6042d0000004201050000002800000008000000
080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000
002d010400090000001c066300630042ff4009aefd6b0705000000140288fbf6041c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d010600040000002e011800050000000a0200000000050000000902000000020400
0000020101000f000000320a5ffef307050000004c6f63616c002c002c0028002800140004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01070004000000f0010600040000002e011800050000
000a020000000005000000090200000002040000000201010010000000320ab5fee107060000004f626a65637438002c00140028002800180004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008c06edfdf00658fe040000002d010200050000000902
00000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f001040007000000180458fef006edfd8c0605000000140288fbf6040a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000e80620fe770728fe040000002d01020004
0000002d01010004000000f001060004000000f0010500040000002d01030004000000f0010700030000001e00070000001604c8fe770780fde80608000000fa0206000800000000000002040000002d01040005000000140220fe610605000000130220fef607040000002d010200040000002d01010004000000f0010400
040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000008c0695fef00600ff2d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd
000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01050007000000180400fff00695fe8c0605000000140220fef6070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffff
ffff000008000000e806c8fe7707d0fe040000002d010200040000002d01010004000000f001050004000000f0010400030000001e0007000000160470ff770728fee80608000000fa0206000800000000000002040000002d010400050000001402c8fe6106050000001302c8fef607040000002d010200040000002d0101
0004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000002b07c60300095a0507000000fc020000000000020000040000002d010400090000001c06650065006b051109d6033b07050000001402c8fef6072d0000004201050000002800
000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01050004000000f001040005000000090200000002050000000102ffffff0208000000fa0206000800000000
000002040000002d010400090000001c06630063005a050009c6032b07050000001402c8fef6071c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d010600040000002e011800050000000a0200000000050000000902
00000002040000000201010010000000320a77048d070600000052656d6f74653400280040002c001800280004000000020102001c000000fb02b8ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01070004000000f0010600040000
002e011800050000000a020000000005000000090200000002040000000201010010000000320acd04a107060000004f626a65637438002c00140028002800180004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004c060504b0067004040000002d01
020005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d01060004000000f00104000700000018047004b00605044c06050000001402c8fef6070a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a80638043707400404
0000002d010200040000002d01010004000000f001060004000000f0010500040000002d01030004000000f0010700030000001e00070000001604e00437079803a80608000000fa0206000800000000000002040000002d010400050000001402380421060500000013023804b607040000002d010200040000002d010100
04000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000004c06ad04b00618052d0000004201050000002800000008000000080000000100010000000000200000000000000000000000000000000000000000000000ffffff00ff00000077
000000ff000000dd000000ff00000077000000ff000000dd000000040000002d01040005000000090200000002050000000102ffffff0208000000fa0206000800000000000002040000002d0105000700000018041805b006ad044c060500000014023804b6070a00000026060f000a00ffffffff0100000000000e000000
26060f001200ffffffff000008000000a806e0043707e804040000002d010200040000002d01010004000000f001050004000000f0010400030000001e00070000001604880537074004a80608000000fa0206000800000000000002040000002d010400050000001402e0042106050000001302e004b607040000002d0102
00040000002d01010004000000f0010400040000002701ffff0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000900028ff980730ff040000002d010200040000002d010100030000001e00070000001604d0ff540788fe900008000000fa02060008000000000000020400
00002d01040005000000140228ff90f905000000130228ff900e040000002d010200040000002d01010004000000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a00000024030300900728ff190704ff19074bff0a00000026060f000a00ffffffff0100000000000e00000026060f
001200ffffffff000008000000e0fff8fb800410fe040000002d010200040000002d01010004000000f0010400030000001e00070000001604b0fe3c0458fbe0ff08000000fa0206000800000000000002040000002d010400050000001402180048fb050000001302e8f91009040000002d010200040000002d0101000400
0000f0010400040000002701ffff07000000fc020000000000020000040000002d0104000a000000240303007804f8fbfc030afc18044afc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0f778fb08fb88fe08000000fa0206000800000000000002040000002d0105
00040000002d0101000b000000170883feaafa7cfbd0f788fe38fe70f8d0f7040000002d010400040000002d0102000a0000002403030004fb84fe8ffa59fe8bfa9ffe0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0f788fb18fb7001040000002d01050004000000
2d0101000b00000017086701b9fa8cfbd0f7700158fea8f5d0f7040000002d010400040000002d0102000a0000002403030014fb6c01a1fa3a0199fa80010a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000d0f7a0fb9903c0fc040000002d010500040000002d0101000b
0000001708fafb5b03a4fbd0f7c0fca20388fad0f7040000002d010400040000002d0102000a000000240303009503c2fb2103eefb4b0326fc0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff00000800000005f6a3fec1f83e001c000000fb02a0ff000000000000bc02000000000000
0000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d010600040000002e011800050000000a020000000005000000090200000002040000000201010013000000320a16ff97f60800000028342920434f4d3a2000350020001b0045004b005000200004000000020102001c0000
00fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000f00bf87f040000002d01070004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010019000000320a89ff3ff60c0000009348657265927320
796f7572300045003600250035001b0036001a0036003a003b00250004000000020102001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c0000005015f87f040000002d01060004000000f0010700040000002e011800050000000a020000000005
000000090200000002040000000201010013000000320afcffa4f608000000706f696e746572943b003a001b003b00200035002500300004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000a8fd58fde8ff18fe040000002d010200040000002d010100
04000000f001050004000000f0010400040000002d01030004000000f0010600030000001e00070000001604b8fee8ffb8fce4fd08000000fa0206000800000000000002040000002d010400050000001402c8fe1802050000001302a0fc70fb040000002d010200040000002d01010004000000f0010400040000002701ff
ff07000000fc020000000000020000040000002d0104000a00000024030300a9fd58fd0ffe9efd25fe5cfd0a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000005c02a7019806cf021c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d4803
38f70f037884c577000000000c000000e00cf87f040000002d010500040000002e011800050000000a02000000000500000009020000000204000000020101001c000000320a1a0296020e00000041736b2072656d6f74652053434d4500360035001b002500360055003b00200035001b0040004500500004000000020102
001c000000fb02a0ff000000000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000001af87f040000002d01060004000000f0010500040000002e011800050000000a020000000005000000090200000002040000000201010027000000320a8d02960215000000746f206c
61756e6368206170706c69636174696f6e0020003b001a001b0035003b003b0035003b001a0036003a003b001b001a003600350020001b003a003b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff0000080000007c0237ff6306ecff1c000000fb02a0ff000000
000000bc020000000000000000417269616c000f03500d480338f70f037884c577000000000c000000e00cf87f040000002d01050004000000f0010600040000002e011800050000000a020000000005000000090200000002040000000201010022000000320aaaffb602120000004c61756e6368206170706c6963617469
6f6e3b0035003b003a0036003a001b0035003b003b001a001b003500360020001a003b003b0004000000020102000a00000026060f000a00ffffffff0100000000000e00000026060f001200ffffffff000008000000400008024007f00308000000fa0206000800000000000002040000002d010600040000002d0101000c
00000025030400400008020b042f039203c802ce06c703040000002d010400040000002d0102000a000000240303003807e903d206a403bc06e6030a00000026060f000a00ffffffff0100000000000a00000026060f000a00ffffffff0100000000000e00000026060f001200544e50500400080000000000000000000000
0a00000026060f000a00ffffffff010000000000040000002d010200040000002d01010004000000f001060004000000f0010400040000002d01030004000000f0010500030000000000574f572000}}
\par \pard\plain \s41\qc\sb30\sa60\keep\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \pvpg\phpg\posx2598\posy3456\absw7760\dxfrtext187\dfrmtxtx187\dfrmtxty0 \b\f4\fs20 Figure 15-1: COM delegates responsibility of loading and launching servers to the SCM.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 When a client makes a request to create an object of a {\cs58\f5\fs16\lang1024 CLSID}
, the COM Library contacts the local SCM (the one on the same machine) and requests that the appropriate server be located or launched, and a class factory returned to the COM Lib
rary. After that, the COM Library, or the client, can ask the class factory to create an object.
\par \pard \qj\sa60\keepn\widctlpar The actions taken by the local SCM depend on the type of object server that is registered for the {\cs58\f5\fs16\lang1024 CLSID}:
\par \pard\plain \s74\fi-2160\li2880\sa120\widctlpar \f4\fs20 {\b In-Process}\tab The SCM returns the file path of the DLL containing the object server implementation. The COM library then loads the DLL and asks it for its class factory interface pointer.

\par {\b Local}\tab The SCM starts the local executable which registers a class factory on startup. That pointer is then available to COM.
\par {\b Remote}\tab 
The local SCM contacts the SCM running on the appropriate remote machine and forwards the request to the remote SCM. The remote SCM launches the server which registers a class factory like the local server with COM on that remote machine. The remote SCM 
then maintains a connection to that class factory and returns an RPC connection to the local SCM which corresponds to that remote class factory. The local SCM then returns that connection to COM which creates a class factory proxy which will internall
y forward requests to the remote SCM via the RPC connection and thus on to the remote server.
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 Note that if the remote SCM determines that the remote server is actually an in-process server, it launches a \ldblquote surrogate\rdblquote 
 server that then loads that in-process server. The surrogate does nothing more than pass all requests on through to the loaded DLL.
\par {\cs58\f5\fs16\lang1024 ISCMSCM }interface is defined as follows (SCMSCM.IDL):
\par \pard\plain \s86\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f11\fs16\lang1024 
//+-------------------------------------------------------------------------
\par //
\par //  Microsoft Windows
\par //  Copyright (C) Microsoft Corporation, 1992 - 1995.
\par //
\par //  File:      scmscm.idl
\par //
\par //  Synopsis:      Interface for SCM to SCM communication.
\par //
\par //  This is the interface that needs to be supported by hosts that allow
\par //  activation of objects. Only one instance of this interface can be exported 
\par //  by the host.
\par //
\par //--------------------------------------------------------------------------
\par [
\par   uuid(00000137-0000-0000-C000-000000000046),
\par   version(1.0),
\par   pointer_default(unique)
\par ]
\par 
\par interface ISCMtoSCM
\par \{
\par \tab HRESULT ActivationRequest(
\par         [in] handle_t                               hRpc,
\par         [in] ORPCTHIS *                             orpcthis,
\par         [out] ORPCTHAT *                            orpcthat,
\par         [in] const GUID *                           rclsid,
\par         [in, string, unique] WCHAR *                pwszObjectName,
\par         [in] DWORD                                  clsctx,
\par         [in] DWORD                                  grfMode,
\par         [in] DWORD                                  dwCount,
\par         [in,unique,size_is(Interfaces)] IID *       pIIDs,
\par         [out,size_is(Interfaces)] OBJREF **         ppInterfaces,
\par         [out,size_is(Interfaces)] HRESULT *         pResults
\par         );
\par \}
\par {\pntext\pard\plain\b\fs20\lang1024 15.5.1.1\tab}\pard\plain \s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\f4\fs20\lang1024 ISCMtoSCM::ActivationRequest{\pard\plain 
\s4\sb240\sa86\keepn\widctlpar\tx1440{\*\pn \pnlvl4\pndec\pnprev1\pnstart1\pnsp144 {\pntxtb .}}\b\v\f4\fs12\lang1024 {\xe {\fs12 ISCMtoSCM\:functions\:ActivationRequest}}}
\par \pard\plain \s50\fi-1440\li1440\sa60\keepn\widctlpar\tx1440 \f4\fs20\lang1024 HRESULT ISCMtoSCM::ActivationRequest(hRpc, orpcthis, orpcthat, rclsid, pwszObjectName, clsctx, grfMode, dwCount, pIIDs, ppInterfaces, pResults);
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This single method encapsulates several different forms of activating and instantiating objects on the machine of this SCM.
\par When {\cs58\f5\fs16\lang1024 pIIDs} is {\cs58\f5\fs16\lang1024 NULL}, this function behaves roughly as {\cs58\f5\fs16\lang1024 CoGetClassObject(rclsid, clsctx, NULL, IID_IClassFactory,\'85)}, returning a class-object to the caller.
\par When {\cs58\f5\fs16\lang1024 pwszObjectName} and {\cs58\f5\fs16\lang1024 pObjectStorage} are {\cs58\f5\fs16\lang1024 NULL}, this function behaves roughly as {\cs58\f5\fs16\lang1024 CoCreateInstanceEx(rclsid, NULL, clsctx, \'85)}.
\par Otherwise, this function acts roughly similar to {\cs58\f5\fs16\lang1024 CreateFileMoniker(pwszObjectName, \'85)} followed by {\cs58\f5\fs16\lang1024 IMoniker::BindToObject(\'85)} to retrieve the required interfaces.
\par \pard\plain \s48\fi-3150\li3150\sa58\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \tx2340 \f4\fs20 {\b Argument\tab Type\tab Description
\par }\pard\plain \s49\fi-3150\li3150\sa58\keepn\widctlpar\tx2340 \f4\fs20 {\cs58\f5\fs16\lang1024 hRpc\tab handle_t}\tab An RPC binding handle used to make the request.
\par {\cs58\f5\fs16\lang1024 orpcthis\tab ORPCTHIS*}\tab {\cs58\f5\fs16\lang1024 ORPCTHIS} identifying this object.
\par {\cs58\f5\fs16\lang1024 orpcthat\tab ORPCTHAT*}\tab {\cs58\f5\fs16\lang1024 ORPCTHAT} holding return values.
\par {\cs58\f5\fs16\lang1024 rclsid\tab CLSID*}\tab Identifies the class to be run to service the request.
\par {\cs58\f5\fs16\lang1024 pwszObjectName}\tab {\cs58\f5\fs16\lang1024 WCHAR*}\tab Identifies the persistent representation of the object to this machine. Typically, this is a file name which is used to determine the class, as in {\cs58\f5\fs16\lang1024 
CreateFileMoniker(pwszFileName, &pmk)} followed by {\cs58\f5\fs16\lang1024 BindMoniker(pmk\'85)}.
\par {\cs58\f5\fs16\lang1024 clsctx\tab DWORD}\tab Values taken from the {\cs58\f5\fs16\lang1024 CLSCTX} enumeration.
\par {\cs58\f5\fs16\lang1024 grfMode\tab DWORD}\tab Values taken from the {\cs58\f5\fs16\lang1024 STGM} enumeration.
\par {\cs58\f5\fs16\lang1024 dwCount\tab DWORD}\tab The number of interfaces to return.
\par {\cs58\f5\fs16\lang1024 pIIDs\tab IID*}\tab An array of interfaces to {\cs58\f5\fs16\lang1024 QueryInterface} for on the new object.
\par {\cs58\f5\fs16\lang1024 ppInterfaces}\tab {\cs58\f5\fs16\lang1024 OBJREF**}\tab Location to return an array of interfaces on the object.
\par {\cs58\f5\fs16\lang1024 pResults\tab HRESULT*}\tab Location to return an array of return codes about the successful retrieval of each of the {\cs58\f5\fs16\lang1024 dwCount} interfaces.
\par \trowd \trgaph108\trleft-108 \cellx2430\cellx8730 \pard\plain \s54\keepn\widctlpar\intbl \b\f4\fs18 {\cs58\f5\fs16\lang1024 Return Value\cell }Meaning\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2430\cellx8730 
\pard\plain \s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 S_OK\cell }Success.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft-108 \cellx2430\cellx8730 \pard\plain 
\s53\widctlpar\intbl\brdrt\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \f4\fs18 {\cs58\f5\fs16\lang1024 CO_S_NOTALLINTERFACES\cell }Some but not all of the {\cs58\f5\fs16\lang1024 dwCount} interfaces were returned in ppInterfaceData. Examine {
\cs58\f5\fs16\lang1024 pResults} to identify exactly which interf\cell \pard\plain \widctlpar\intbl \f4\fs20 \row {\*\bkmkstart _Toc339183005}{\pntext\pard\plain\b 15.6\tab}\pard\plain \s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 
{\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Wrapping  DCE RPC calls to interoperate with ORPC{\*\bkmkend _Toc298243751}{\*\bkmkend _Toc316189794}{\*\bkmkend _Toc316190038}{\*\bkmkend _Toc318002096}{\*\bkmkend _Toc318598256}
{\*\bkmkend _Toc318619373}{\*\bkmkend _Toc337525131}{\*\bkmkend _Toc337870092}{\*\bkmkend _Toc338915506}{\*\bkmkend _Toc339183005}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This is an example of a server side wrapper for the Bar method. It assumes the existence of small helper functions to import and export object references and lookup previously exported object references.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
RPC_STATUS Bar(handle_t h, short i, OBJREF * prIB, OBJREF ** pprIW) \{\line    \tab UUID ipid;\line \tab RPC_STATUS status;\line \tab IFoo * pIF;\line \tab IBar * pIB;\line \tab IWaz * PIW;\line \tab HRESULT hR;\line \line \tab 
status = RpcBindingInqObject(h, &ipid);\line \tab if (status) return(SOMETHING); \line \line \tab status = ORpcLookupIPID(ipid, &pIF);\line \tab if (status) return(SOMETHING); \line \line \tab status = ORpcImportObjRef(prIB, &pIB);\line \tab 
if (status) return(SOMETHING); \line \line \tab hR = pIF->Bar(i, pIB, &pIW);\tab \tab \tab // actual call to the method!\line \line \tab pIB->Release();\line \tab status = ORpcExportObjRef(pIW, pprIW);\line \tab return(hR ? hR : SOMETHING);\line \tab \};

\par \pard\plain \qj\sa60\widctlpar \f4\fs20 This is an example of the client side wrapper for Bar:
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 
// assume some class CFoo that implements Bar method
\par class CFoo : IUnknown, IFoo \{\line \tab UUID ipid;\tab \tab // one for each interface?\line \tab handle_t h;\line \line \tab virtual HRESULT QueryInterface(UUID iid, void **ppvoid);\line \tab virtual HRESULT AddRef();\line \tab virtual HRESULT Release();
\line \tab virtual HRESULT Bar(short i, IFoo * pIF, IWaz ** ppIW);\line \tab \};
\par HRESULT CFoo::Bar(short i, IFoo * pIF, IWaz ** ppIW) \{\line \tab OBJREF * prIF;\line \tab OBJREF * prIW;\line \tab HRESULT hR;\line \tab RPC_STATUS status;\line \line \tab status = RpcBindingSetObject(this->h, this->ipid);\line \tab 
if (status) return(SOMETHING);\line \line \tab status = ORpcExportObjRef(pIF, &prIF);\line \tab if (status) return(SOMETHING);\line \line \tab hR = Bar(this->h, i, prIF, &prIW);\line \tab \line \tab status = ORpcImportObjRef(prIW, ppIW);\line \tab \line 
\tab ORpcFreeObjRef(prIF);\line \tab ORpcFreeObjRef(prIW);\line \line \tab return(hR ? hR : SOMETHING);\line \};
\par {\*\bkmkstart _Toc318002097}{\*\bkmkstart _Toc318598257}{\*\bkmkstart _Toc318619374}{\*\bkmkstart _Toc337525132}{\*\bkmkstart _Toc337870093}{\*\bkmkstart _Toc338915507}{\*\bkmkstart _Toc339183006}{\pntext\pard\plain\b 15.7\tab}\pard\plain 
\s2\ri2160\sb240\sa86\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp20 {\*\pn \pnlvl2\pndec\pnprev1\pnstart1\pnsp144 }\b\f4 Implementing ORPC in RPC{\*\bkmkend _Toc318002097}{\*\bkmkend _Toc318598257}{\*\bkmkend _Toc318619374}{\*\bkmkend _Toc337525132}
{\*\bkmkend _Toc337870093}{\*\bkmkend _Toc338915507}{\*\bkmkend _Toc339183006}
\par \pard\plain \s95\qj\sa60\sl220\slmult0\widctlpar \f8\fs20 Since the implicit parameters are specified as IDL, the ORPC header received by RPC will contain many fields inserted by MIDL.  Here are the definitions for the header on the wire.
\par \pard\plain \s57\fi-720\li1080\ri-720\widctlpar\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280 \f5\fs16\lang1024 /*
\par      An inbound header would be laid out as follows where the
\par extent array is optional and there may be zero of more extents.
\par An outbound header is laid out similarly.
\par 
\par    \tab ORPCTHIS_WITHNOEXTENSIONS
\par \tab \tab [
\par \tab \tab  ORPC_EXTENT_ARRAY
\par           [ORPC_EXTENT]*
\par          ]
\par 
\par */
\par typedef struct
\par \{
\par   COMVERSION     version;       // COM version number
\par   unsigned long  flags;         // INFO flags for presence of other data
\par   unsigned long  reserved1;     // set to zero
\par   LTID           ltid;          // logical thread id of caller
\par   unsigned long  unique;        // tag to indicate presence of extensions
\par \} ORPCTHIS_WITHNOEXTENSION;
\par 
\par typedef struct
\par \{
\par     unsigned long  rounded_size;   // Actual number of extents.
\par     uuid_t         id;             // Extension identifier.
\par     unsigned long  size;           // Extension size.
\par     byte           data[];         // Extension data.
\par \} ORPC_EXTENT;
\par 
\par 
\par // Array of extensions.
\par typedef struct
\par \{
\par   unsigned long  rounded_size;   // Actual number of extents
\par   unsigned long  size;           // Number of extents
\par   unsigned long  unique_flag[];  // Flags to indicate presense of ORPC_EXTENTs
\par \} ORPC_EXTENT_ARRAY;
\par 
\par typedef struct
\par \{
\par   unsigned long  flags;         // INFO flags for presence of other data
\par   unsigned long  unique;        // tag to indicate presence of extensions
\par \} ORPCTHAT_WITH_NOEXTENSIONS;
\par 
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc339183007}Appendix B: Bibliography{\*\bkmkend _Toc339183007}
\par \pard\plain \qj\fi-1800\li1800\sa60\widctlpar \f4\fs20 [CAE RPC]\tab {\i CAE Specification, X/Open DCE: Remote Procedure Call,} X/Open Company Limited, Reading, Berkshire, UK (xopen.co.uk), 1994. X/Open Document Number C309. ISBN 1-85912-041-5.
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc324051689}{\*\bkmkstart _Toc324051876}{\*\bkmkstart _Toc324052116}{\*\bkmkstart _Toc339183008}Appendix C: Specification Revision History
{\*\bkmkend _Toc324051689}{\*\bkmkend _Toc324051876}{\*\bkmkend _Toc324052116}{\*\bkmkend _Toc339183008}
\par \pard\plain \qj\fi-1800\li1800\sa60\widctlpar \f4\fs20 06 March 1995\tab First major draft.
\par 24 October 1995\tab Second major draft.
\par 
\par \pard\plain \s94\qc\sa60\pagebb\widctlpar\pvpg\phpg\posxc\posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187\nowrap \i\f4\fs20 This page intentionally left blank.
\par \pard\plain \s96\sa86\keepn\pagebb\widctlpar\brdrt\brdrdb\brdrw15\brsp20 \b\f4\fs28 {\*\bkmkstart _Toc324051690}{\*\bkmkstart _Toc324051877}{\*\bkmkstart _Toc324052117}{\*\bkmkstart _Toc339183009}Appendix D: Index{\*\bkmkend _Toc324051690}
{\*\bkmkend _Toc324051877}{\*\bkmkend _Toc324052117}{\*\bkmkend _Toc339183009}
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\field{\*\fldinst  INDEX \\h " " \\c "2" }{\fldrslt {\lang1024 \sect }\sectd \sbknone\linex0\cols2\endnhere \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 
\b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 aggregation, 72, 130
\par APIs
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 CoCopyProxy, 166
\par CoGetCallContext, 168
\par CoImpersonateClient, 169
\par CoInitializeSecurity, 162
\par CoQueryAuthenticationServices, 163
\par CoQueryClientAuthenticationInfo, 168
\par CoQueryProxyAuthenticationInfo, 166
\par CoRegisterAuthenticationService, 163
\par CoRevertToSelf, 169
\par CoSetProxyAuthenticationInfo, 166
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 artificial reference counts, 74
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i Causality ID}, 202
\par CLSCTX, 97
\par {\b CoBuildVersion}, 87
\par CoCopyProxy, 166
\par {\b CoCreateInstance}, 99
\par {\b CoCreateInstanceEx}, 99
\par {\b CoDisconnectObject}, 116, 144
\par CoFreeUnusedLibraries, 104
\par CoGetCallContext, 168
\par {\b CoGetClassObject}, 96
\par {\b CoGetCurrentProcess}, 91
\par CoGetMalloc, 41, 90
\par {\b CoGetMarshalSizeMax}, 146
\par {\b CoGetStandardMarshal}, 145
\par {\b CoGetTreatAsClass}, 122
\par CoImpersonateClient, 169
\par {\b CoInitialize}, 88
\par CoInitializeSecurity, 162
\par {\b CoIsHandlerConnected}, 104
\par {\b CoMarshalInterface}, 142, 160
\par COMSERVERINFO, 97
\par Constants
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 RPC_C_AUTHN, 162
\par RPC_C_IMP, 162
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 context handles, 200
\par CoQueryAuthenticationServices, 163
\par CoQueryClientAuthenticationInfo, 168
\par CoQueryProxyAuthenticationInfo, 166
\par CoRegisterAuthenticationService, 163
\par {\b CoRegisterClassObject}, 112
\par CoReleaseMarshalData, 141, 145
\par CoRevertToSelf, 169
\par {\b CoRevokeClassObject}, 113
\par CoSetProxyAuthenticationInfo, 166
\par CoTaskMemAlloc, 41, 91
\par {\b CoTaskMemFree}, 91
\par {\b CoTaskMemRealloc}, 91
\par {\b CoTreatAsClass}, 122
\par {\b CoUninitialize}, 88
\par {\b CoUnmarshalInterface}, 144, 160
\par CTextRender, 84
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Load, 92
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 CTextRenderFactory
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 CreateInstance, 108
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i Debug}, 210
\par {\b\i Debug Information Body Extension}, 210
\par {\b DebugORPCClientFillBuffer}, 155
\par {\b DebugORPCClientGetBufferSize}, 155
\par {\b Delta Pinging}, 201
\par direct mode, 54
\par {\b DllCanUloadNow}, 115
\par {\b DllGetClassObject}, 110
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 endpoints, 213
\par Enumerators, 79
\par {\b\i Error Info}, 210
\par exceptions, 74
\par {\b\i Extended Error Info}, 210
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 facility codes, 75
\par {\b\i FACILITY_CONTROL}, 76
\par {\b\i FACILITY_DISPATCH}, 75
\par {\b\i FACILITY_ITF}, 75, 76
\par {\b\i FACILITY_NULL}, 75
\par {\b\i FACILITY_RPC}, 75
\par {\b\i FACILITY_STORAGE}, 75
\par {\b\i FACILITY_WIN32}, 75
\par {\b\i FACILITY_WINDOWS}, 76
\par {\b\i FAILED}, 78
\par Fault PDU, 198
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 GUID, 69
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 handler, 44, 97, 104, 106, 116, 131
\par handler marshalling, 149
\par HRESULT, 75
\par {\b\i HRESULT_CODE}, 78
\par {\b\i HRESULT_FACILITY}, 78
\par {\b\i HRESULT_SEVERITY}, 78
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i IClassFactory}
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i functions}
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i CreateInstance}, 95
\par {\b\i LockServer}, 96
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b IClassFactory Interface}, 95
\par {\i IClientSecurity}, 164
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 CopyProxy, 165
\par QueryBlanket, 164
\par SetBlanket, 165
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b IConnectionPoint}, 172
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 GetConnectionInterface, 173
\par GetConnectionPointContainer, 173
\par Advise, 173
\par Unadvise, 174
\par EnumConnections, 175
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b IConnectionPointContainer}, 175
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 EnumConnectionPoints, 175
\par FindConnectionPoint, 176
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 ICreateErrorInfo, 210
\par identity, 70
\par {\b\i IEnum}
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i functions}
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i Clone}, 81
\par {\b\i Next}, 80
\par {\b\i Reset}, 80
\par Skip, 80
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b IEnumConnectionPoints}, 176
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Next, 177
\par Skip, 178
\par Reset, 178
\par Clone, 179
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b IEnumConnections}, 179
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Next, 180
\par Skip, 180
\par Reset, 181
\par Clone, 181
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IErrorInfo, 210
\par IMalloc
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Alloc, 89
\par {\b DidAlloc}, 90
\par {\b Free}, 89
\par {\b GetSize}, 89
\par {\b HeapMinimize}, 90
\par {\b Realloc}, 89
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i IMalloc Interface}, 88
\par IMarshal, 208
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Disconnect, 149
\par GetMarshalSizeMax, 148
\par GetUnmarshalClass, 147
\par MarshalInterface, 147
\par ReleaseMarshalData, 149
\par UnmarshalInterface, 148
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 in parameter, 41
\par in-out parameter, 41
\par interface
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 definition, 65
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\i Interfaces}
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 {\i IClientSecurity}, 164
\par {\i IServerSecurity}, 166
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IObjectExporter, 199, 201
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b functions}
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b ComplexPing}, 220
\par {\b ResolveOxid}, 215
\par {\b SimplePing}, 219
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IPID, 198
\par IPSFactoryBuffer, 130, 132
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 CreateProxy, 132
\par CreateStub, 133
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IRemUnknown, 211
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b RemAddRef}, 212
\par RemQueryInterface, 202, 212
\par {\b RemRelease}, 213
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IRpcChannelBuffer, 130, 133
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 FreeBuffer, 137
\par GetBuffer, 135
\par GetDestCtx, 137
\par IsConnected, 138
\par SendReceive, 136
\par SendRecieve, 141
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IRpcProxyBuffer, 119, 130, 138
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Connect, 138
\par Disconnect, 138
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IRpcStubBuffer, 130
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Connect, 139
\par CountRefs, 141
\par DebugServerQueryInterface, 141
\par DebugServerRelease, 142
\par Disconnect, 139
\par Invoke, 135, 136, 139
\par IsIIDSupported, 141
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\i IServerSecurity}, 166
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 functions
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 ImpersonateClient, 167
\par QueryBlanket, 167
\par RevertToSelf, 168
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IStdMarshalInfo, 131, 207
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b functions}
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b GetClassForHandler}, 150
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 ISupportErrorInfo, 210
\par {\b IUnknown}
\par \pard\plain \s33\qj\li360\widctlpar\tqr\tldot\tx2700\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b functions}
\par \pard\plain \s32\qj\li720\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b AddRef}, 71
\par {\b QueryInterface}, 70
\par {\b Release}, 71
\par \pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 IUnknown Interface, 70
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i MAKE_HRESULT}, 79
\par {\b\i Marshalled Interface References}, 199
\par middleman, 208, 214, 216
\par MSHCTX, 143
\par MSHCTX_DIFFERENTMACHINE, 143
\par MSHCTX_NOSHAREDMEM, 143
\par MSHCTXDATA, 143
\par MSHLFLAGS, 142
\par MSHLFLAGS_NORMAL, 145
\par MULTI_QI, 99
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Object Exporter, 199, 213
\par {\b Object Exporter Well-known Endpoints}, 214
\par {\b\i Object Exporters}, 199
\par Object Handlers, 116
\par OBJREF, 160, 199, 207
\par {\b OBJREF_CUSTOM}, 208
\par {\b OBJREF_HANDLER}, 207
\par {\b OBJREF_LONGHDLR}, 208
\par {\b OBJREF_LONGSTD}, 207
\par {\b OBJREF_NULL}, 207, 212
\par {\b OBJREF_STANDARD}, 207
\par OID, 199
\par ORPCINFOFLAGS, 209
\par ORPCTHAT, 198, 210
\par ORPCTHIS, 198, 209
\par out parameter, 41
\par OXID, 199
\par OXID object, 199, 211
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 ping period, 201
\par Ping periods, 220
\par {\b\i Pinging}, 200
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i QueryInterface}, 202
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 {\b\i Reference Counting}, 200
\par REGCLS, 112
\par {\b Remote Debugging}, 150
\par remote reference counting, 200
\par Request PDU, 198, 209
\par Response PDU, 198
\par {\b RPC_C_AUTHN}, 162
\par RPC_C_IMP, 162
\par RPCOLEDATAREP, 134
\par RPCOLEMESSAGE, 134
\par RPCOLEMESSAGE and related structures, 133
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 S_FALSE, 76
\par S_OK, 76
\par SORFLAGS, 208
\par STDOBJREF, 199, 208
\par StringFromCLSID, 131
\par StringFromIID, 131
\par {\b\i SUCCEEDED}, 78
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 transacted mode, 54
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 Unicode, 64
\par \pard\plain \s35\qj\sb240\sa58\widctlpar\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f4\fs20 {\b0\lang1024 
\par }\pard\plain \s28\qj\widctlpar\tqr\tldot\tx2736 \f4\fs14\lang1024 well-known endpoints, 213, 214
\par \pard\plain \qj\sa60\widctlpar \f4\fs20 {\lang1024 \sect }\sectd \sbknone\linex0\endnhere \pard\plain \qj\sa60\widctlpar \f4\fs20 }}\pard\plain \qj\sa60\widctlpar \f4\fs20 
\par 
\par }