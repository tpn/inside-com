<HTML>
<HEAD>
<TITLE> Variables - Microsoft&#174; Visual Basic&#174; Scripting Edition</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<BLOCKQUOTE>
<FONT FACE="ARIAL" SIZE=2>

<TABLE WIDTH=92% CELLSPACING=0 CELLPADDING=3 BORDER=0><TR><TD>
<H3><A HREF="4.htm" ><IMG SRC="next.jpg" WIDTH=49 HEIGHT=32 ALIGN=RIGHT ALT="Next" BORDER=0 ></A><A HREF="6.htm" ><IMG SRC="prev.jpg" WIDTH=49 HEIGHT=32 ALIGN=RIGHT ALT="Previous" BORDER=0 ></A><A HREF="vbstutor.htm"><IMG src="btntutor.jpg" WIDTH=110 height=32 border=0 ALIGN=RIGHT alt="Using Visual Basic Script"></A>VBScript Variables</H3>
<HR SIZE=2>
</TD></TR></TABLE>

<H5>What Is a Variable?</H5>
<BLOCKQUOTE>
<P>A variable is a convenient placeholder that refers to a computer memory location where you can store program information that may change during the time your script is running.  For example, you might create a variable called ClickCount to store the number of times a user clicked an object on a particular Web page. Where the variable is located in computer memory is unimportant. What's important is that you only have to refer to it by name to see its value or to change its value.  In VBScript, variables are always of one fundamental data type, <A HREF="6.htm"><B>Variant</B></A>.</P>
</BLOCKQUOTE>

<H5>Declaring Variables</H5>
<BLOCKQUOTE>
<P>You declare variables explicitly in your script using the <B>Dim</B> statement. For example:</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Dim DegreesFahrenheit
--&gt;
&lt;/SCRIPT&gt
</FONT>
</PRE>

<P>You declare multiple variables by separating each variable name with a comma.  For example:</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Dim Top, Bottom, Left, Right
--&gt;
&lt;/SCRIPT&gt
</FONT>
</PRE>
<P>You can also declare a variable implicitly by simply using its name somewhere in your script.  That's not generally considered to be a good practice because you could misspell the variable name in one or more places, causing unexpected results when your script is run.  For that reason, the <B>Option Explicit</B> statement is available to require explicit declaration of all variables. The <B>Option Explicit</B> statement should be the first statement inside your &lt;SCRIPT&gt; tag.</P>
</BLOCKQUOTE>

<H5>Naming Restrictions</H5>
<BLOCKQUOTE>
<P>Variable names follow the standard rules for naming anything in VBScript. A variable name:</P>
<UL>
<LI>Must begin with an alphabetic character.</LI>
<LI>Cannot contain an embedded period.</LI>
<LI>Must not exceed 255 characters.</LI>
<LI>Must be unique in the scope in which it is declared.</LI>
</UL>
</BLOCKQUOTE>

<H5>Limit on number of Variables</H5>
<BLOCKQUOTE>
<P>When using Variables in VBScript these limitations apply:</P>
<UL>
<LI>There cannot be more than 127 variables per procedure (arrays count as a single variable).</LI>
<LI>Each script is limited to no more than 127 "module-level" variables.</LI> 
</UL>
</BLOCKQUOTE>

<H5>Scope and Lifetime of Variables</H5>
<BLOCKQUOTE>
<P>Generally, when you declare a variable within a procedure, only code within that procedure can access or change the value of that variable; it has <I>local</I> scope and is known as a <I>procedure-level</I> variable.  Sometimes, however, you need to use a variable with a broader scope, such as one whose value is available to all the procedures within the same script.  If you declare a variable outside a procedure, you make it recognizable to all the procedures in your script.  This kind of <I>script-level</I> variable is said to have script-level scope.</P>

<P>The length of time a variable exists is its <I>lifetime</I>.  A script-level variable's lifetime extends from the time it is declared until the time the script is finished running.  A local variable's lifetime begins when its declaration statement is encountered as the procedure begins, and ends when the procedure concludes. Local variables are ideal as temporary storage space when a procedure is executing. You can have local variables of the same name in several different procedures because each is recognized only by the procedure in which it is declared.</P>

<P>A variable's scope is determined by where you declare it. At script level, the lifetime of a variable is always the same.  It exists for as long as the script is running.  At procedure level, a variable exists only so long as you are in the procedure.  When the procedure exits, the variable is destroyed.</P>

</BLOCKQUOTE>

<H5>Assigning Values to Variables</H5>
<BLOCKQUOTE>
<P>Values are assigned to variables creating an expression as follows: the variable is on the left side of the expression and the value you want to assign to the variable is on the right. For example:</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 B = 200
--&gt;
&lt;/SCRIPT&gt
</FONT>
</PRE>
</BLOCKQUOTE>

<H5>Scalars and Arrays</H5>
<BLOCKQUOTE>
<P>Much of the time, you just want to assign a single value to a variable you've declared. A variable containing a single value is a <I>scalar</I> variable. Other times, it's convenient to assign more than one related value to a single variable. Then you can create a variable that can contain a series of values. This is called an <I>array</I> variable. Array variables are declared much the same way as scalar variables. The difference is that a declaration of an array  variable uses parentheses following the variable name.  In the following example, a single-dimension array containing 11 elements is declared:</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Dim A(10)
--&gt;
&lt;/SCRIPT&gt
</FONT>
</PRE>

<P>Although the number shown in the parentheses is 10, all arrays in VBScript are zero-based, so this array actually contains 11 elements.  In a  zero-based array, the number of array elements is always the  number shown in parentheses plus one.  This kind of an array is called a <I>fixed-size</I> array.</P>

<P>You assign data to each of the elements of the array using an index into the array.  Beginning at zero and ending at 10, data can be assigned to the elements of an array as follows:</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 A(0) = 256
 A(1) = 324
 A(2) = 100
 . . .
 A(10) = 55
--&gt;  
&lt;/SCRIPT&gt
</FONT>
</PRE>

<P>Similarly, the data can be retrieved from any element using an index into the particular array element you  want.  For example:</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 . . . 
 SomeVariable = A(8)  
 . . . 
--&gt;
&lt;/SCRIPT&gt
</FONT>
</PRE>

<P>Arrays aren't limited to a  single dimension.  You can have as many of  60 dimensions although most people can't comprehend more than about three or four. Multiple dimensions are declared by separating an array's size numbers in the parentheses with commas.  In the following example, the <I>MyTable</I> variable is a two-dimensional array consisting of 6 rows and 11 columns:</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VB"&gt;
&lt;!--
 Dim MyTable(5, 10)
--&gt;
&lt;/SCRIPT&gt
</FONT>
</PRE>
<P>In a two-dimensional array, the first number is always the number of rows; the second the number of columns.</P>

<P>You can also declare an array whose size changes during the time your script is running.  This is called a <I>dynamic</I> array.  The array is initially declared within a procedure using either the <B>Dim</B> statement as with any other array, or the <B>ReDim</B> statement.  The difference is that no size or number of dimensions is placed inside the parentheses.  For example:</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 Dim MyArray()
 ReDim AnotherArray()
--&gt;
&lt;/SCRIPT&gt
</FONT>
</PRE>

<P>To use a dynamic array, you must subsequently use <B>ReDim</B> to determine the number of  dimensions and the size of each.  In the following  example, <B>ReDim </B> sets the initial size of the dynamic array to 25.  A subsequent <B>ReDim</B> statement resizes the array to 30, but uses the <B>Preserve</B> keyword to preserve the contents of the array as the resizing takes place.</P>

<P><PRE><FONT FACE="Courier New" SIZE=3>
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
 ReDim MyArray(25)
 . . . 
 ReDim Preserve MyArray(30)
--&gt;
&lt;/SCRIPT&gt
</FONT>
</PRE>

<P>There is no limit to the number of times you can resize a dynamic array, but you should know that if you make an array smaller than it was, you lose the data in the eliminated elements.</P>
</BLOCKQUOTE>
<BR>
<BR>

<TABLE WIDTH=92% CELLSPACING=0 CELLPADDING=3 BORDER=0><TR><TD>
<FONT FACE=ARIAL SIZE=2><HR SIZE=2><A HREF="4.htm" ><IMG SRC="next.jpg" WIDTH=49 HEIGHT=32 ALIGN=RIGHT ALT="Next" BORDER=0 ></A><A HREF="6.htm" ><IMG SRC="prev.jpg" WIDTH=49 HEIGHT=32 ALIGN=RIGHT ALT="Previous" BORDER=0 ></A><A HREF="vbstutor.htm"><IMG src="btntutor.jpg" WIDTH=110 height=32 border=0 ALIGN=RIGHT alt="Using Visual Basic Script"></A><A HREF="cpyright.htm" TARGET="_top">&#169; 1996 by Microsoft Corporation</a>.</FONT>

</TD></TR></TABLE>
</FONT>
</BLOCKQUOTE>
</BODY>
</HTML>










